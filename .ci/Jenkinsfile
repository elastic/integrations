#!/usr/bin/env groovy

@Library('apm@current') _

pipeline {
  agent { label 'ubuntu && immutable' }
  environment {
    BASE_DIR="src/github.com/elastic/integrations"
    GITHUB_TOKEN_CREDENTIALS = "2a9602aa-ab9f-4e52-baf3-b71ca88469c7"
    JOB_GIT_CREDENTIALS = "f6c7695a-671e-4f4f-a331-acdce44ff9ba"
    PACKAGE_STORAGE_BASE_DIR = "src/github.com/elastic/package-storage"
    PIPELINE_LOG_LEVEL='INFO'
    TEST_RUNNER_CMD_ARGS='--report-format xUnit --report-output file'
  }
  options {
    timeout(time: 1, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '20', artifactNumToKeepStr: '20', daysToKeepStr: '30'))
    timestamps()
    ansiColor('xterm')
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    rateLimitBuilds(throttle: [count: 60, durationName: 'hour', userBoost: true])
    quietPeriod(10)
  }
  triggers {
    issueCommentTrigger('(?i).*(?:jenkins\\W+)?run\\W+(?:the\\W+)?tests(?:\\W+please)?.*')
  }
  stages {
    /**
     Checkout the code and stash it, to use it on other stages.
     */
    stage('Checkout') {
      steps {
        deleteDir()
        gitCheckout(basedir: "${BASE_DIR}")
        stash allowEmpty: true, name: 'source', useDefaultExcludes: false
      }
    }
    /**
     Checks source code
     */
    stage('Check') {
      steps {
        cleanup()
        withMageEnv(){
          dir("${BASE_DIR}"){
            sh(label: 'Checks and builds integration sources', script: 'mage -debug check')
          }
        }
      }
      post {
        always {
          archiveArtifacts(allowEmptyArchive: true, artifacts: '.elastic-package/tmp/test/reports/*.xml')
          junit(allowEmptyResults: false,
                keepLongStdio: true,
                testResults: ".elastic-package/tmp/test/reports/*.xml")
        }
      }
    }
    /**
     Update Package Storage
     */
    stage('Update Package Storage') {
      when {
        branch 'master'
      }
      steps {
        cleanup()
        gitCheckout(basedir: "${PACKAGE_STORAGE_BASE_DIR}", branch: 'master', repo: 'git@github.com:elastic/package-storage.git', credentialsId: "${JOB_GIT_CREDENTIALS}")
        dir("${PACKAGE_STORAGE_BASE_DIR}"){
          sh(label: 'Configure Git user.name', script: 'git config user.name "Elastic Machine"')
          sh(label: 'Configure Git user.email', script: 'git config user.email "elasticmachine@users.noreply.github.com"')
          sh(label: 'Add upstream to tracked repositories', script: 'git remote add upstream https://github.com/elastic/package-storage')
          sh(label: 'Fetch upstream', script: 'git fetch upstream')
          sh(label: 'Track snapshot', script: 'git checkout -b snapshot -t upstream/snapshot')
          sh(label: 'Track staging', script: 'git checkout -b staging -t upstream/staging')
          sh(label: 'Track production', script: 'git checkout -b production -t upstream/production')
        }
        withMageEnv(){
          dir("${BASE_DIR}"){
            withCredentials([string(credentialsId: "${GITHUB_TOKEN_CREDENTIALS}", variable: 'GITHUB_TOKEN')]) {
              sh(label: 'Updates Package Storage', script: 'mage -debug updatePackageStorage')
            }
          }
        }
      }
    }
  }
  post {
    cleanup {
      notifyBuildResult(prComment: true)
    }
  }
}

def cleanup(){
  dir("${BASE_DIR}"){
    deleteDir()
  }
  unstash 'source'
}