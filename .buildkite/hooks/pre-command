#!/bin/bash

source .buildkite/scripts/common.sh

set -euo pipefail

# Avoid any pager when running git commands
git config --global core.pager 'cat'

# default values used in different pipelines
export UPLOAD_SAFE_LOGS=${UPLOAD_SAFE_LOGS:-"0"}
export SERVERLESS=${SERVERLESS:-"false"}
export STACK_VERSION=${STACK_VERSION:-""}
export FORCE_CHECK_ALL=${FORCE_CHECK_ALL:-"false"}
export PUBLISH_COVERAGE_REPORTS=${PUBLISH_COVERAGE_REPORTS:-"false"}

BASE_DIR=$(pwd)
export BASE_DIR

GO_VERSION=$(cat .go-version)
export GO_VERSION

REPO_NAME=$(repo_name "${BUILDKITE_REPO}")
export REPO_NAME

export TMP_FOLDER_TEMPLATE_BASE="tmp.${REPO_NAME}"
export TMP_FOLDER_TEMPLATE="${TMP_FOLDER_TEMPLATE_BASE}.XXXXXXXXX"

REPO_BUILD_TAG="${REPO_NAME}/$(buildkite_pr_branch_build_id)"
export REPO_BUILD_TAG

AWS_SERVICE_ACCOUNT_SECRET_PATH=kv/ci-shared/platform-ingest/aws_account_auth
PRIVATE_CI_GCS_CREDENTIALS_PATH=kv/ci-shared/platform-ingest/gcp-platform-ingest-ci-service-account

BUILDKITE_API_TOKEN_PATH=kv/ci-shared/platform-ingest/buildkite_token
GITHUB_TOKEN_VAULT_PATH=kv/ci-shared/platform-ingest/github_token

EC_TOKEN_PATH=kv/ci-shared/platform-ingest/platform-ingest-ec-qa
EC_DATA_PATH=secret/ci/elastic-integrations/ec_data

# variables required for terraform
export ENVIRONMENT="ci"
export REPO="${REPO_NAME}"

branch_name_label() {
    local branch="$1"

    if [[ "${BUILDKITE_PULL_REQUEST}" != "false" ]] ; then
        # remove fork from branch name
        branch=$(echo $branch | cut -d : -f 2)
    fi

    # From Jenkins
    # BRANCH_NAME_LOWER_CASE = "${env.BRANCH_NAME.toLowerCase().replaceAll('[^a-z0-9-]', '-')}"
    # to lower case and replace characters
    branch=$(echo "$branch" | tr '[:upper:]' '[:lower:]' | tr '_/\:. ' '-')

    # truncate up to 63 characters limit
    echo $branch | head -c 63
}

BRANCH_NAME_LOWER_CASE=$(branch_name_label "$BUILDKITE_BRANCH")
export BRANCH_NAME_LOWER_CASE
# This variable contains the build number https://buildkite.com/elastic/elastic-package/<number>
export BUILD_ID="${BUILDKITE_BUILD_NUMBER}"
# get current timestamp in milliseconds
# From Jenkins
# CREATED_DATE = "${new Date().getTime()}"
CREATED_DATE=$(date +%s%3N)
export CREATED_DATE

if [ -n "${ELASTIC_PACKAGE_LINKS_FILE_PATH+x}" ]; then
    # first upload pipeline does not have the environment variables defined in the YAML
    export ELASTIC_PACKAGE_LINKS_FILE_PATH=${BASE_DIR}/${ELASTIC_PACKAGE_LINKS_FILE_PATH}
fi

if [[ "${BUILDKITE_PIPELINE_SLUG}" == "integrations" ]]; then
    if [[ "${BUILDKITE_STEP_KEY}" == "trigger-publish" ]]; then
        BUILDKITE_API_TOKEN=$(retry 5 vault kv get -field buildkite_token ${BUILDKITE_API_TOKEN_PATH})
        export BUILDKITE_API_TOKEN
    fi

    if [[ "${BUILDKITE_STEP_KEY}" == "test-integrations" ]]; then
        BUILDKITE_API_TOKEN=$(retry 5 vault kv get -field buildkite_token "${BUILDKITE_API_TOKEN_PATH}")
        export BUILDKITE_API_TOKEN
    fi

    if [[ "${BUILDKITE_STEP_KEY}" == "publish-benchmarks" ]]; then
        BUILDKITE_API_TOKEN=$(retry 5 vault kv get -field buildkite_token "${BUILDKITE_API_TOKEN_PATH}")
        export BUILDKITE_API_TOKEN
        GITHUB_TOKEN=$(retry 5 vault kv get -field token "${GITHUB_TOKEN_VAULT_PATH}")
        export GITHUB_TOKEN
    fi

    if [[ "${BUILDKITE_STEP_KEY}" =~ ^test-integrations- ]]; then
        ELASTIC_PACKAGE_AWS_SECRET_KEY=$(retry 5 vault kv get -field secret_key "${AWS_SERVICE_ACCOUNT_SECRET_PATH}")
        export ELASTIC_PACKAGE_AWS_SECRET_KEY
        ELASTIC_PACKAGE_AWS_ACCESS_KEY=$(retry 5 vault kv get -field access_key "${AWS_SERVICE_ACCOUNT_SECRET_PATH}")
        export ELASTIC_PACKAGE_AWS_ACCESS_KEY

        PRIVATE_CI_GCS_CREDENTIALS_SECRET=$(retry 5 vault kv get -field plaintext -format=json "${PRIVATE_CI_GCS_CREDENTIALS_PATH}")
        export PRIVATE_CI_GCS_CREDENTIALS_SECRET
        export JOB_GCS_BUCKET_INTERNAL="ingest-buildkite-ci"

        # Environment variables required by the service deployer
        export AWS_SECRET_ACCESS_KEY=${ELASTIC_PACKAGE_AWS_SECRET_KEY}
        export AWS_ACCESS_KEY_ID=${ELASTIC_PACKAGE_AWS_ACCESS_KEY}

        BUILDKITE_API_TOKEN=$(retry 5 vault kv get -field buildkite_token "${BUILDKITE_API_TOKEN_PATH}")
        export BUILDKITE_API_TOKEN
    fi
fi

if [[ "${BUILDKITE_PIPELINE_SLUG}" == "integrations-serverless" ]]; then
    if [[ "${BUILDKITE_STEP_KEY}" == "test-integrations-serverless-project" ]]; then
        ELASTIC_PACKAGE_AWS_SECRET_KEY=$(retry 5 vault kv get -field secret_key "${AWS_SERVICE_ACCOUNT_SECRET_PATH}")
        export ELASTIC_PACKAGE_AWS_SECRET_KEY
        ELASTIC_PACKAGE_AWS_ACCESS_KEY=$(retry 5 vault kv get -field access_key "${AWS_SERVICE_ACCOUNT_SECRET_PATH}")
        export ELASTIC_PACKAGE_AWS_ACCESS_KEY

        PRIVATE_CI_GCS_CREDENTIALS_SECRET=$(retry 5 vault kv get -field plaintext -format=json "${PRIVATE_CI_GCS_CREDENTIALS_PATH}")
        export PRIVATE_CI_GCS_CREDENTIALS_SECRET
        export JOB_GCS_BUCKET_INTERNAL="ingest-buildkite-ci"

        # Environment variables required by the service deployer
        export AWS_SECRET_ACCESS_KEY=${ELASTIC_PACKAGE_AWS_SECRET_KEY}
        export AWS_ACCESS_KEY_ID=${ELASTIC_PACKAGE_AWS_ACCESS_KEY}

        BUILDKITE_API_TOKEN=$(retry 5 vault kv get -field buildkite_token "${BUILDKITE_API_TOKEN_PATH}")
        export BUILDKITE_API_TOKEN

        EC_API_KEY_SECRET=$(retry 5 vault kv get -field apiKey "${EC_TOKEN_PATH}")
        export EC_API_KEY_SECRET
        EC_HOST_SECRET=$(retry 5 vault kv get -field url "${EC_TOKEN_PATH}")
        export EC_HOST_SECRET
        EC_REGION_SECRET=$(retry 5 vault read -field region_qa "${EC_DATA_PATH}")
        export EC_REGION_SECRET
    fi
fi

if [[ "$BUILDKITE_PIPELINE_SLUG" == "integrations-backport" ]]; then
  if [[ "$BUILDKITE_STEP_KEY" == "create-backport-branch" ]]; then
    GITHUB_USERNAME_SECRET=$(retry 5 vault kv get -field username ${GITHUB_TOKEN_VAULT_PATH})
    export GITHUB_USERNAME_SECRET
    GITHUB_EMAIL_SECRET=$(retry 5 vault kv get -field email ${GITHUB_TOKEN_VAULT_PATH})
    export GITHUB_EMAIL_SECRET
  fi
fi
