#!/bin/bash

# ******************************* WARNING ******************************************
# This post-checkout hook is not the same as in the rest of repositories e.g. beats
# because some steps in this pipeline (in PR context) take a very long time and we
# want to make sure that THE SAME COMMIT FROM TARGET BRANCH gets merged in every
# pipeline step. Otherwise, HEAD (target branch) may have changed in the meantime
# and therefore, some steps (e.g. sonarqube) may end up testing a different commit.
#
# Running builds from branches or tags (out of PR context) maintains the same behavior
# as in the rest of the repositories.
#
# Reference: https://github.com/elastic/integrations/pull/10397
# **********************************************************************************

set -euo pipefail

checkout_merge() {
    local target_branch=$1
    local pr_commit=$2
    local merge_branch=$3

    if [[ -z "${target_branch}" ]]; then
        echo "No pull request target branch"
        exit 1
    fi

    git fetch -v origin "${target_branch}"
    if [[ ${REPOSITORY_TARGET_BRANCH_COMMIT} == "" ]]; then
        git checkout FETCH_HEAD
        echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
    else
        # Use the same commit from target branch as in the other steps.
        echo "Retrieved commit from meta-data: ${REPOSITORY_TARGET_BRANCH_COMMIT}"
        git checkout "${REPOSITORY_TARGET_BRANCH_COMMIT}"
        echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"
    fi

    # create temporal branch to merge the PR with the target branch
    git checkout -b ${merge_branch}
    echo "New branch created: $(git rev-parse --abbrev-ref HEAD)"

    # set author identity so it can be run git merge
    git config user.name "github-merged-pr-post-checkout"
    git config user.email "auto-merge@buildkite"

    git merge --no-edit "${BUILDKITE_COMMIT}" || {
        local merge_result=$?
        echo "Merge failed: ${merge_result}"
        git merge --abort
        exit ${merge_result}
    }
}

pull_request="${BUILDKITE_PULL_REQUEST:-false}"

if [[ "${pull_request}" == "false" ]]; then
    echo "Not a pull request, skipping"
    exit 0
fi

TARGET_BRANCH="${BUILDKITE_PULL_REQUEST_BASE_BRANCH:-master}"
PR_COMMIT="${BUILDKITE_COMMIT}"
PR_ID=${BUILDKITE_PULL_REQUEST}
MERGE_BRANCH="pr_merge_${PR_ID}"

# This meta-data field is populated in the pre-command hook
REPOSITORY_TARGET_BRANCH_COMMIT=$(buildkite-agent meta-data get "REPOSITORY_TARGET_BRANCH_COMMIT" --default "")

checkout_merge "${TARGET_BRANCH}" "${PR_COMMIT}" "${MERGE_BRANCH}"

echo "Commit information"

git --no-pager log --format=%B -n 1

# Ensure buildkite groups are rendered
echo ""
