# yaml-language-server: $schema=https://raw.githubusercontent.com/buildkite/pipeline-schema/main/schema.json
env:
  SETUP_GVM_VERSION: "v0.5.2"
  LINUX_AGENT_IMAGE: "golang:${GO_VERSION}"
  DOCKER_COMPOSE_VERSION: "v2.24.1"
  DOCKER_VERSION: "26.1.2"
  KIND_VERSION: 'v0.20.0'
  K8S_VERSION: 'v1.29.0'
  YQ_VERSION: 'v4.35.2'
  JQ_VERSION: '1.7'
  GH_CLI_VERSION: "2.29.0"
  IMAGE_UBUNTU_X86_64: "family/core-ubuntu-2204"

  # Elastic package settings
  # Manage docker output/logs
  ELASTIC_PACKAGE_COMPOSE_DISABLE_VERBOSE_OUTPUT: "true"
  # Default license to use by `elastic-package build`
  ELASTIC_PACKAGE_REPOSITORY_LICENSE: "licenses/Elastic-2.0.txt"
  # Link definitions path (full path to be set in the corresponding step)
  ELASTIC_PACKAGE_LINKS_FILE_PATH: "links_table.yml"
  # Disable comparison of results in pipeline tests to avoid errors related to GeoIP fields
  ELASTIC_PACKAGE_SERVERLESS_PIPELINE_TEST_DISABLE_COMPARE_RESULTS: "true"

steps:
  - label: ":white_check_mark: Check go sources"
    key: "check"
    command: ".buildkite/scripts/check_sources.sh"
    agents:
      image: "${LINUX_AGENT_IMAGE}"
      cpu: "8"
      memory: "4G"

  - label: "Trigger integrations"
    key: "test-integrations"
    command: ".buildkite/scripts/trigger_integrations_in_parallel.sh"
    env:
      UPLOAD_SAFE_LOGS: 1
    depends_on:
      - step: "check"
        allow_failure: false

  - wait: ~
    continue_on_failure: true

  - label: "Publish benchmarks"
    key: publish-benchmarks
    command: ".buildkite/scripts/process_benchmarks.sh"
    env:
      BENCHMARK_THRESHOLD: 15
    agents:
      image: "${LINUX_AGENT_IMAGE}"
      cpu: "8"
      memory: "4G"

  - label: ":sonarqube: Continuous Code Inspection"
    soft_fail: true # FIXME: Coverage is failing, remove this after solving the issue
    env:
      VAULT_SONAR_TOKEN_PATH: "kv/ci-shared/platform-ingest/elastic/integrations/sonar-analyze-token"
    agents:
      image: "docker.elastic.co/cloud-ci/sonarqube/buildkite-scanner:latest"
    command: ".buildkite/scripts/run_sonar_scanner.sh"
    artifact_paths:
      - build/test-coverage/coverage_merged.xml

  - label: ":junit: Junit annotate"
    plugins:
      - junit-annotate#v2.4.1:
          artifacts: "build/test-results/*.xml"
          failed-download-exit-code: 0 # Not fail the build in case there are no XML files
    agents:
      provider: "gcp"  # junit plugin requires docker
