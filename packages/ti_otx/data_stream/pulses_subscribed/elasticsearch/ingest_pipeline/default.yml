---
description: Pipeline for parsing Abuse.ch URL Threat Intel
processors:
  ####################
  # Event ECS fields #
  ####################
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: event.kind
      value: enrichment
  - append:
      field: event.category
      value: threat
  - append:
      field: event.type
      value: indicator
  - set:
      field: threat.indicator.provider
      value: OTX

  ######################
  # General ECS fields #
  ######################
  - rename:
      field: message
      target_field: event.original
      tag: rename_message
      ignore_missing: true
      if: 'ctx.event?.original == null'
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: 'ctx.event?.original != null'
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - json:
      field: event.original
      target_field: otx
      tag: json_event_original
# Add default expiration to expire all IOCs after duration: ioc_expiration_duration. If value not in d, h, or m, default to 90d.
  - script:
      lang: painless
      tag: script-default-expiration
      if: ctx.otx?.created != null && ctx.otx.expiration == null && ctx._conf?.ioc_expiration_duration != null && ctx._conf.ioc_expiration_duration != ''
      description: >
        Add default expiration
      source: >
        def dur = ctx._conf.ioc_expiration_duration;
        String created = ctx.otx.created;
        ZonedDateTime _tmp_expiration;
        if (dur instanceof String) {
          char time_unit;
          String time_value;
          if (dur.length() != 0) {
            time_unit = dur.charAt(dur.length() - 1);
            time_value = dur.substring(0, dur.length() - 1);
          }
          if (time_unit == (char)'d') {
            _tmp_expiration = ZonedDateTime.parse(created, DateTimeFormatter.ISO_LOCAL_DATE_TIME.withZone(ZoneId.of('Z'))).plusDays(Long.parseLong(time_value));
          } else if (time_unit == (char)'h') {
            _tmp_expiration = ZonedDateTime.parse(created, DateTimeFormatter.ISO_LOCAL_DATE_TIME.withZone(ZoneId.of('Z'))).plusHours(Long.parseLong(time_value));
          } else if (time_unit == (char)'m') {
            _tmp_expiration = ZonedDateTime.parse(created, DateTimeFormatter.ISO_LOCAL_DATE_TIME.withZone(ZoneId.of('Z'))).plusMinutes(Long.parseLong(time_value));
          } else {
            if (ctx.error == null) {
              ctx.error = new HashMap();
            }
            if (ctx.error.message == null) {
              ctx.error.message = new ArrayList();
            }
            ctx.error.message.add('invalid ioc_expiration_duration: using default 90 days');
            _tmp_expiration = ZonedDateTime.parse(created, DateTimeFormatter.ISO_LOCAL_DATE_TIME.withZone(ZoneId.of('Z'))).plusDays(90L);
          }
          ctx.otx.expiration = _tmp_expiration;
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: otx.created
      target_field: otx.created
      tag: date_created
      formats:
        - ISO8601
      if: "ctx.otx?.created != null"
  - set:
      field: "@timestamp"
      copy_from: otx.created
      if: "ctx.otx?.created != null"
      tag: set_timestamp

  - date:
      field: otx.expiration
      target_field: otx.expiration
      tag: date_expiration
      formats:
      - ISO8601
      if: "ctx.otx?.expiration != null"
  - convert:
      field: otx.id
      type: string
      if: "ctx.otx?.id != null"
      tag: convert_otx_id
  - convert:
      field: otx.count
      type: integer
      if: "ctx.otx?.count != null"
      tag: convert_otx_count
  - convert:
      field: otx.t
      type: double
      if: "ctx.otx?.t != null"
      tag: convert_otx_t
  - convert:
      field: otx.t2
      type: double
      if: "ctx.otx?.t2 != null"
      tag: convert_otx_t2
  - convert:
      field: otx.t3
      type: double
      if: "ctx.otx?.t3 != null"
      tag: convert_otx_t3
  - convert:
      field: otx.revision
      type: integer
      if: "ctx.otx?.revision != null"
      tag: convert_otx_revision
  - json:
      field: otx.pulse_raw
      target_field: otx.pulse
      tag: json_otx_pulse_raw
  - date:
      field: otx.pulse.created
      target_field: otx.pulse.created
      tag: date_pulse_created
      formats:
        - ISO8601
      if: "ctx.otx?.pulse?.created != null"
  - date:
      field: otx.pulse.modified
      target_field: otx.pulse.modified
      tag: date_pulse_modified
      formats:
        - ISO8601
      if: "ctx.otx?.pulse?.modified != null"

  #####################
  # Threat ECS Fields #
  #####################
  ## File indicator operations
  - set:
      field: threat.indicator.type
      value: file
      if: "ctx.otx?.type.startsWith('FileHash') || ctx.otx?.type == 'filepath'"
      tag: set_threat_indicator_type_file
  - rename:
      field: otx.indicator
      target_field: threat.indicator.file.hash.md5
      ignore_missing: true
      if: "ctx.otx?.type == 'FileHash-MD5'"
      tag: rename_threat_indicator_file_hash_md5
  - rename:
      field: otx.indicator
      target_field: threat.indicator.file.hash.sha1
      ignore_missing: true
      if: "ctx.otx?.type == 'FileHash-SHA1'"
      tag: rename_threat_indicator_file_hash_sha1
  - rename:
      field: otx.indicator
      target_field: threat.indicator.file.hash.sha256
      ignore_missing: true
      if: "ctx.otx?.type == 'FileHash-SHA256'"
      tag: rename_threat_indicator_file_hash_sha256
  - rename:
      field: otx.indicator
      target_field: threat.indicator.file.hash.pehash
      ignore_missing: true
      if: "ctx.otx?.type == 'FileHash-PEHASH'"
      tag: rename_threat_indicator_file_hash_pehash
  - rename:
      field: otx.indicator
      target_field: threat.indicator.file.hash.imphash
      ignore_missing: true
      if: "ctx.otx?.type == 'FileHash-IMPHASH'"
      tag: rename_threat_indicator_file_hash_imphash

  ## IP indicator operations
  - set:
      field: threat.indicator.type
      value: ipv4-addr
      if: ctx.otx?.type == 'IPv4'
      tag: set_threat_indicator_type_ipv4
  - set:
      field: threat.indicator.type
      value: ipv6-addr
      if: ctx.otx?.type == 'IPv6'
      tag: set_threat_indicator_type_ipv6
  - rename:
      field: otx.indicator
      target_field: threat.indicator.ip
      ignore_missing: true
      if: "ctx.threat?.indicator?.type != null && ['ipv4-addr', 'ipv6-addr'].contains(ctx.threat?.indicator?.type)"
      tag: rename_threat_indicator_ip

  ## URL indicator operations
  - set:
      field: threat.indicator.type
      value: url
      if: "ctx.threat?.indicator?.type == null && ['URL', 'URI'].contains(ctx.otx?.type)"
      tag: set_threat_indicator_type_url
  - uri_parts:
      field: otx.indicator
      target_field: threat.indicator.url
      keep_original: true
      remove_if_successful: true
      if: ctx.threat?.indicator?.type == 'url'
      tag: uri_parts_indicator
  - set:
      field: threat.indicator.url.full
      value: "{{{threat.indicator.url.original}}}"
      ignore_empty_value: true
      if: "ctx.otx?.type == 'URL'"
      tag: set_threat_indicator_url_full

  ## Email indicator operations
  - set:
      field: threat.indicator.type
      value: email-addr
      if: ctx.otx?.type == 'email'
      tag: set_threat_indicator_type_email
  - rename:
      field: otx.indicator
      target_field: threat.indicator.email.address
      ignore_missing: true
      if: "ctx.threat?.indicator?.type == 'email-addr'"
      tag: rename_threat_indicator_email_address

  ## Domain indicator operations
  - set:
      field: threat.indicator.type
      value: domain-name
      if: "ctx.threat?.indicator?.type == null && ['domain', 'hostname'].contains(ctx.otx?.type)"
      tag: set_threat_indicator_type_domain
  - rename:
      field: otx.indicator
      target_field: threat.indicator.url.domain
      ignore_missing: true
      if: "ctx.threat?.indicator?.type == 'domain-name' && ctx.threat?.indicator?.url?.domain == null"
      tag: rename_threat_indicator_url_domain

  #########################
  # Base ECS Field - Tags #
  #########################
  - foreach:
      field: otx.pulse.tags
      if: "ctx.otx?.pulse?.tags instanceof List && ctx.otx.pulse.tags.size() > 0"
      processor:
        append:
          field: tags
          tag: foreach_pulse_tags_append_tag
          value: '{{{_ingest._value}}}'
          allow_duplicates: false

  ######################
  # Cleanup processors #
  ######################
  - set:
      field: threat.indicator.type
      value: unknown
      if: ctx.threat?.indicator?.type == null
      tag: set_threat_indicator_type_null
  - script:
      lang: painless
      if: ctx.otx != null
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
          map.values().removeIf(v -> v == null);
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
        }
        handleMap(ctx);
  - remove:
      field:
        - otx.content
      ignore_missing: true
      if: ctx.otx?.content == ""
  - remove:
      field:
        - otx.description
      ignore_missing: true
      if: ctx.otx?.description == ""
  - remove:
      field:
        - otx.title
      ignore_missing: true
      if: ctx.otx?.title == ""
  - remove:
      field:
        - otx.pulse.adversary
      ignore_missing: true
      if: ctx.otx?.pulse?.adversary == ""
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
  - remove:
      field:
        - otx.type
        - otx.pulse.tags
        - otx.pulse_raw
        - _conf
      ignore_missing: true
      if: ctx.threat?.indicator?.type != null
  - remove:
      field:
        - otx
      ignore_missing: true
      if: ctx.otx == null
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
