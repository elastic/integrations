# Agent Fields
- name: cloud
  title: Cloud
  group: 2
  description: Fields related to the cloud or infrastructure the events are coming from.
  footnote: 'Examples: If Metricbeat is running on an EC2 host and fetches data from its host, the cloud info contains the data about this machine. If Metricbeat runs on a remote machine outside the cloud and fetches data from a service running in the cloud, the field contains cloud data from the machine the service is running on.'
  type: group
  fields:
    - name: account.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'The cloud account or organization id used to identify different entities in a multi-tenant environment.

        Examples: AWS account id, Google Cloud ORG Id, or other unique identifier.'
      example: 666777888999
    - name: availability_zone
      level: extended
      type: keyword
      ignore_above: 1024
      description: Availability zone in which this host is running.
      example: us-east-1c
    - name: instance.id
      level: extended
      type: keyword
      ignore_above: 1024
      description: Instance ID of the host machine.
      example: i-1234567890abcdef0
    - name: instance.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Instance name of the host machine.
    - name: machine.type
      level: extended
      type: keyword
      ignore_above: 1024
      description: Machine type of the host machine.
      example: t2.medium
    - name: provider
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the cloud provider. Example values are aws, azure, gcp, or digitalocean.
      example: aws
    - name: region
      level: extended
      type: keyword
      ignore_above: 1024
      description: Region in which this host is running.
      example: us-east-1
    - name: project.id
      type: keyword
      description: Name of the project in Google Cloud.
    - name: image.id
      type: keyword
      description: Image ID for the cloud instance.
- name: container
  title: Container
  group: 2
  description: 'Container fields are used for meta information about the specific container that is the source of information.

    These fields help correlate data based containers from any runtime.'
  type: group
  fields:
    - name: id
      level: core
      type: keyword
      ignore_above: 1024
      description: Unique container id.
    - name: image.name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Name of the image the container was built on.
    - name: labels
      level: extended
      type: object
      object_type: keyword
      description: Image labels.
    - name: name
      level: extended
      type: keyword
      ignore_above: 1024
      description: Container name.
- name: host
  title: Host
  group: 2
  description: 'A host is defined as a general computing instance.

    ECS host.* fields should be populated with details about the host on which the event happened, or from which the measurement was taken. Host types include hardware, virtual machines, Docker containers, and Kubernetes nodes.'
  type: group
  fields:
    - name: architecture
      level: core
      type: keyword
      ignore_above: 1024
      description: Operating system architecture.
      example: x86_64
    - name: domain
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Name of the domain of which the host is a member.

        For example, on Windows this could be the host''s Active Directory domain or NetBIOS domain name. For Linux this could be the domain of the host''s LDAP provider.'
      example: CONTOSO
      default_field: false
    - name: hostname
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Hostname of the host.

        It normally contains what the `hostname` command returns on the host machine.'
    - name: id
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Unique host id.

        As hostname is not always unique, use values that are meaningful in your environment.

        Example: The current usage of `beat.name`.'
    - name: ip
      level: core
      type: ip
      description: Host ip addresses.
    - name: mac
      level: core
      type: keyword
      ignore_above: 1024
      description: Host mac addresses.
    - name: name
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Name of the host.

        It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.'
    - name: os.family
      level: extended
      type: keyword
      ignore_above: 1024
      description: OS family (such as redhat, debian, freebsd, windows).
      example: debian
    - name: os.kernel
      level: extended
      type: keyword
      ignore_above: 1024
      description: Operating system kernel version as a raw string.
      example: 4.4.0-112-generic
    - name: os.name
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
        - name: text
          type: text
          norms: false
          default_field: false
      description: Operating system name, without the version.
      example: Mac OS X
    - name: os.platform
      level: extended
      type: keyword
      ignore_above: 1024
      description: Operating system platform (such centos, ubuntu, windows).
      example: darwin
    - name: os.version
      level: extended
      type: keyword
      ignore_above: 1024
      description: Operating system version as a raw string.
      example: 10.14.1
    - name: type
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Type of host.

        For Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.'
    - name: containerized
      type: boolean
      description: >
        If the host is a container.

    - name: os.build
      type: keyword
      example: "18D109"
      description: >
        OS build information.

    - name: os.codename
      type: keyword
      example: "stretch"
      description: >
        OS codename, if any.

# Base-Fields
- name: data_stream.type
  type: constant_keyword
  description: Data stream type.
- name: data_stream.dataset
  type: constant_keyword
  description: Data stream dataset name.
- name: data_stream.namespace
  type: constant_keyword
  description: Data stream namespace.
- name: event.module
  type: constant_keyword
  description: Event module
  value: ti_otx
- name: threat.feed.name
  type: constant_keyword
  description: Display friendly feed name
  value: Alienvault OTX
- name: threat.feed.dashboard_id
  type: constant_keyword
  description: Dashboard ID used for Kibana CTI UI
  value: ti_otx-7da241a0-71f3-11ec-9910-d1ceb8a1734b
- name: event.dataset
  type: constant_keyword
  description: Event dataset
  value: ti_otx.pulses_subscribed
- name: "@timestamp"
  type: date
  description: Event timestamp.
# Beats Fields
- name: input.type
  type: keyword
  description: Type of Filebeat input.
- name: log.flags
  type: keyword
  description: Flags for the log file.
- name: log.offset
  type: long
  description: Offset of the entry in the log file.
- name: log.file.path
  type: keyword
  description: Path to the log file.
# ECS Fields
- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: |-
    For log events the message field contains the log message, optimized for viewing in a log viewer.
    For structured logs without an original message field, other fields can be concatenated to form a human-readable summary of the event.
    If multiple messages exist, they can be combined into one message.
  name: message
  type: match_only_text
- description: Error message.
  name: error.message
  type: match_only_text
- description: List of keywords used to tag each event.
  name: tags
  normalize:
    - array
  type: keyword
- description: All the hashes seen on your event. Populating this field, then using it to search for hashes can help in situations where you're unsure what the hash algorithm is (and therefore which key name to search).
  name: related.hash
  normalize:
    - array
  type: keyword
- description: |-
    Timestamp when an event arrived in the central data store.
    This is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.
    In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.
  name: event.ingested
  type: date
- description: |-
    This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
    `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
    The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data is coming in at a regular interval or not.
  name: event.kind
  type: keyword
- description: |-
    `event.created` contains the date/time when the event was first read by an agent, or by your pipeline.
    This field is distinct from `@timestamp` in that `@timestamp` typically contain the time extracted from the original event.
    In most situations, these two timestamps will be slightly different. The difference can be used to calculate the delay between your source generating an event, and the time when your agent first processed it. This can be used to monitor your agent's or pipeline's ability to keep up with your event source.
    In case the two timestamps are identical, `@timestamp` should be used.
  name: event.created
  type: date
- description: |-
    This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.
    `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.
    This field is an array. This will allow proper categorization of some events that fall in multiple categories.
  name: event.category
  normalize:
    - array
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.
    `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.
    This field is an array. This will allow proper categorization of some events that fall in multiple event types.
  name: event.type
  normalize:
    - array
  type: keyword
- description: |-
    Raw text message of entire event. Used to demonstrate log integrity or where the full log message (before splitting it up in multiple parts) may be required, e.g. for reindex.
    This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`. If users wish to override this and index this field, please see `Field data types` in the `Elasticsearch Reference`.
  doc_values: false
  index: false
  name: event.original
  type: keyword
- description: Type of indicator as represented by Cyber Observable in STIX 2.0.
  name: threat.indicator.type
  type: keyword
- description: Identifies a threat indicator as an email address (irrespective of direction).
  name: threat.indicator.email.address
  type: keyword
- description: Identifies a threat indicator as an IP address (irrespective of direction).
  name: threat.indicator.ip
  type: ip
- description: |-
    Domain of the url, such as "www.elastic.co".
    In some cases a URL may refer to an IP and/or port directly, without a domain name. In this case, the IP address would go to the `domain` field.
    If the URL contains a literal IPv6 address enclosed by `[` and `]` (IETF RFC 2732), the `[` and `]` characters should also be captured in the `domain` field.
  name: threat.indicator.url.domain
  type: keyword
- description: If full URLs are important to your use case, they should be stored in `url.full`, whether this field is reconstructed or present in the event source.
  multi_fields:
    - name: text
      type: match_only_text
  name: threat.indicator.url.full
  type: wildcard
- description: |-
    The field contains the file extension from the original request url, excluding the leading dot.
    The file extension is only set if it exists, as not every url has a file extension.
    The leading period must not be included. For example, the value must be "png", not ".png".
    Note that when the file name has multiple extensions (example.tar.gz), only the last one should be captured ("gz", not "tar.gz").
  name: threat.indicator.url.extension
  type: keyword
- description: |-
    Unmodified original url as seen in the event source.
    Note that in network monitoring, the observed URL may be a full URL, whereas in access logs, the URL is often just represented as a path.
    This field is meant to represent the URL as it was observed, complete or not.
  multi_fields:
    - name: text
      type: match_only_text
  name: threat.indicator.url.original
  type: wildcard
- description: Path of the request, such as "/search".
  name: threat.indicator.url.path
  type: wildcard
- description: Port of the request, such as 443.
  name: threat.indicator.url.port
  type: long
- description: |-
    Scheme of the request, such as "https".
    Note: The `:` is not part of the scheme.
  name: threat.indicator.url.scheme
  type: keyword
- description: |-
    The query field describes the query string of the request, such as "q=elasticsearch".
    The `?` is excluded from the query string. If a URL contains no `?`, there is no query field. If there is a `?` but no query, the query field exists with an empty string. The `exists` query can be used to differentiate between the two cases.
  name: threat.indicator.url.query
  type: keyword
- description: File type (file, dir, or symlink).
  name: threat.indicator.file.type
  type: keyword
- description: MD5 hash.
  name: threat.indicator.file.hash.md5
  type: keyword
- description: SHA1 hash.
  name: threat.indicator.file.hash.sha1
  type: keyword
- description: SHA256 hash.
  name: threat.indicator.file.hash.sha256
  type: keyword
- description: |-
    A hash of the imports in a PE file. An imphash -- or import hash -- can be used to fingerprint binaries even after recompilation or other code-level transformations have occurred, which would change more traditional hash values.
    Learn more at https://www.fireeye.com/blog/threat-research/2014/01/tracking-malware-import-hashing.html.
  name: threat.indicator.file.pe.imphash
  type: keyword
- description: The file's pehash, if available.
  name: threat.indicator.file.hash.pehash
  type: keyword
- description: The name of the indicator's provider.
  name: threat.indicator.provider
  type: keyword
# OTX Fields
- name: otx
  type: group
  description: >
    Fields for OTX Threat Intel

  fields:
    - name: id
      type: keyword
      description: >
        The ID of the indicator.

    - name: count
      type: integer
    - name: created
      type: date
    - name: description
      type: keyword
    - name: expiration
      type: date
    - name: is_active
      type: integer
    - name: prefetch_pulse_ids
      type: boolean
    - name: role
      type: keyword
    - name: title
      type: keyword
    - name: t
      type: double
    - name: t2
      type: double
    - name: t3
      type: double
    - name: pulse
      type: group
      fields:
        - name: adversary
          type: keyword
        - name: attack_ids
          type: keyword
        - name: author_name
          type: keyword
        - name: created
          type: date
        - name: description
          type: keyword
        - name: extract_source
          type: keyword
        - name: id
          type: keyword
        - name: industries
          type: keyword
        - name: malware_families
          type: keyword
        - name: modified
          type: date
        - name: more_indicators
          type: boolean
        - name: name
          type: keyword
        - name: public
          type: integer
        - name: references
          type: keyword
        - name: revision
          type: integer
        - name: targeted_countries
          type: keyword
        - name: tlp
          type: keyword
