---
description: Pipeline for processing User logs.
processors:
  - set:
      field: event.kind
      tag: set_event_kind
      value: asset
  - set:
      field: event.category
      tag: set_event_category
      value: ['iam']
  - set:
      field: event.type
      tag: set_event_type
      value: ['user','info']
  - set:
      field: asset.category
      tag: set_asset_category
      value: entity
  - set:
      field: asset.type
      tag: set_asset_type
      value: activedirectory_user

  - script:
      lang: painless
      description: This script processor rename the fields under the activedirectory objects.
      params:
        "accountExpires": "account_expires"
        "adminCount": "admin_count"
        "badPasswordTime": "bad_password_time"
        "badPwdCount": "bad_pwd_count"
        "cn": "cn"
        "codePage": "code_page"
        "countryCode": "country_code"
        "description": "description"
        "distinguishedName": "distinguished_name"
        "dSCorePropagationData": "ds_core_propagation_data"
        "groups": "groups"
        "groupType": "group_type"
        "instanceType": "instance_type"
        "isCriticalSystemObject": "is_critical_system_object"
        "lastLogoff": "last_logoff"
        "lastLogon": "last_logon"
        "lastLogonTimestamp": "last_logon_timestamp"
        "logonCount": "logon_count"
        "member": "member"
        "memberOf": "member_of"
        "name": "name"
        "object_category": "object_category"
        "objectCategory": "object_category"
        "objectClass": "object_class"
        "objectGUID": "object_guid"
        "objectSid": "object_sid"
        "primaryGroupID": "primary_group_id"
        "pwdLastSet": "pwd_last_set"
        "sAMAccountName": "sam_account_name"
        "sAMAccountType": "sam_account_type"
        "servicePrincipalName": "service_principal_name"
        "showInAdvancedViewOnly": "show_in_advanced_view_only"
        "userAccountControl": "user_account_control"
        "uSNChanged": "usn_changed"
        "uSNCreated": "usn_created"
        "whenChanged": "when_changed"
        "whenCreated": "when_created"
      tag: painless_to_rename_fields_under_activedirectory_groups
      source: |
        String hexByte(Byte b) {
            String x = Integer.toHexString(Byte.toUnsignedInt(b));
            if (x.length() < 2) {
                x = "0" + x;
            }
            return x;
        }
        String guid(String text) {
            def bytes = Base64.getDecoder().decode(text);
            def uid = "";
            for (int i = 3; i >= 0; i--) {
                uid += hexByte(bytes[i]);
            }
            uid += "-";
            for (int i = 5; i > 3; i--) {
                uid += hexByte(bytes[i]);
            }
            uid += "-";
            for (int i = 7; i > 5; i--) {
                uid += hexByte(bytes[i]);
            }
            uid += "-";
            for (int i = 8; i < bytes.length; i++) {
                if (i == 10) {
                    uid += "-";
                }
                uid += hexByte(bytes[i]);
            }
            return uid;
        }
        String sid(String text) {
            def bytes = Base64.getDecoder().decode(text);
            def uid = "S-"+Byte.toString(bytes[0])+"-";
            int auth = 0;
            for (int i = 2; i < 8; i++) {
                auth |= Byte.toUnsignedInt(bytes[i])<<(8*(5-(i-2)));
            }
            uid += Integer.toString(auth);
            int subauths = Byte.toUnsignedInt(bytes[1]);
            int off = 8;
            for (int i = 0; i < subauths; i++) {
                int subauth = 0;
                for (int k = 0; k < 4; k++) {
                    subauth |= (Byte.toUnsignedInt(bytes[off+k])&0xff)<<(8*k);
                }
                uid += "-"+Integer.toUnsignedString(subauth);
                off += 4;
            }
            return uid;
        }
        def renameKeys(Map src, Map keyMap) {
          def dst = new HashMap();
          for (def entry: src.entrySet()) {
            def key = entry.getKey();
            def value = entry.getValue();
            if (value instanceof Map) {
              if (keyMap.containsKey(key)) {
                dst[keyMap[key]] = renameKeys(value, keyMap);
              } else {
                dst[key] = renameKeys(value, keyMap);
              }
            } else if (value instanceof List) {
              def updatedList = [];
              for (def item: value) {
                if (item instanceof Map) {
                  updatedList.add(renameKeys(item, keyMap));
                } else {
                  updatedList.add(item);
                }
              }
              if (keyMap.containsKey(key)) {
                dst[keyMap[key]] = updatedList;
              } else {
                dst[key] = value;
              }
            } else {
              if (value instanceof String) {
                if (key == "objectGUID") {
                  value = guid(value);
                } else if (key == "objectSid") {
                  value = sid(value);
                }
              }
              if (keyMap.containsKey(key)) {
                dst[keyMap[key]] = value;
              } else {
                dst[key] = value;
              }
            }
          }
          return dst;
        }

        ctx.activedirectory = renameKeys(ctx.activedirectory, params)

  - script:
      lang: painless
      ignore_failure: false
      tag: Set User Account Control
      description: Set User Account Control
      # USER_ACCOUNT Codes
      # https://learn.microsoft.com/en-us/windows/win32/adschema/a-useraccountcontrol
      # https://learn.microsoft.com/en-us/windows/win32/api/iads/ne-iads-ads_user_flag_enum
      params:
        "0x00000001": SCRIPT
        "0x00000002": ACCOUNTDISABLE
        "0x00000008": HOMEDIR_REQUIRED
        "0x00000010": LOCKOUT
        "0x00000020": PASSWD_NOTREQD
        "0x00000040": PASSWD_CANT_CHANGE
        "0x00000080": ENCRYPTED_TEXT_PWD_ALLOWED
        "0x00000100": TEMP_DUPLICATE_ACCOUNT
        "0x00000200": NORMAL_ACCOUNT
        "0x00000800": INTERDOMAIN_TRUST_ACCOUNT
        "0x00001000": WORKSTATION_TRUST_ACCOUNT
        "0x00002000": SERVER_TRUST_ACCOUNT
        "0x00010000": DONT_EXPIRE_PASSWORD
        "0x00020000": MNS_LOGON_ACCOUNT
        "0x00040000": SMARTCARD_REQUIRED
        "0x00080000": TRUSTED_FOR_DELEGATION
        "0x00100000": NOT_DELEGATED
        "0x00200000": USE_DES_KEY_ONLY
        "0x00400000": DONT_REQUIRE_PREAUTH
        "0x00800000": PASSWORD_EXPIRED
        "0x01000000": TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION
        "0x04000000": PARTIAL_SECRETS_ACCOUNT
      source: |-
        Long newUacValue = Long.decode(ctx.activedirectory.user.user_account_control);
        ArrayList uacResult = new ArrayList();
        for (entry in params.entrySet()) {
          Long flag = Long.decode(entry.getKey());
          if ((newUacValue.longValue() & flag.longValue()) != 0) {
            uacResult.add(entry.getValue());
          }
        }
        if (uacResult.length != 0) {
          ctx.activedirectory.user.uac_list = uacResult;
        }
      if: ctx.activedirectory?.user?.user_account_control != null && ctx.activedirectory.user.user_account_control != 0

  - date:
      field: activedirectory.user.when_created
      target_field: asset.create_date
      tag: date_user_created
      formats:
        - ISO8601
      if: ctx.activedirectory?.user?.when_created != null && ctx.activedirectory.user.when_created != ''
      on_failure:
        - remove:
            field: activedirectory.user.when_created
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: activedirectory.user.when_changed
      target_field: asset.last_updated
      tag: date_user_changed
      formats:
        - ISO8601
      if: ctx.activedirectory?.user?.when_changed != null && ctx.activedirectory.user.when_changed != ''
      on_failure:
        - remove:
            field: activedirectory.user.when_changed
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: activedirectory.user.pwd_last_set
      target_field: user.account.password_change_date
      tag: date_user_password_changed
      formats:
        - ISO8601
      if: ctx.activedirectory?.user?.pwd_last_set != null && ctx.activedirectory.user.pwd_last_set != ''
      on_failure:
        - remove:
            field: activedirectory.user.pwd_last_set
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'       

  - set:
      field: asset.name
      copy_from: activedirectory.user.sam_account_name
      ignore_empty_value: true
  - set:
      field: user.name
      copy_from: activedirectory.user.sam_account_name
      ignore_empty_value: true
  - gsub:
      tag: gsub_user_dn
      field: activedirectory.user.distinguished_name
      pattern: '^.*?DC='
      replacement: ''
      target_field: user.domain
      if: ctx.activedirectory?.user?.distinguished_name != null
  - gsub:
      tag: gsub_user_domain
      field: user.domain
      pattern: ',DC='
      replacement: '.'
      if: ctx.user?.domain != null
  - set:
      field: asset.id
      copy_from: activedirectory.user.object_sid
  - set:
      field: user.id
      copy_from: activedirectory.user.object_sid

  - set:
      field: activedirectory.user.logon_script_enabled
      value: true
      if: ctx.activedirectory?.user?.uac_list?.contains('SCRIPT') == true
  - set:
      field: activedirectory.user.enabled
      value: true
      if: ctx.activedirectory?.user?.uac_list?.contains('ACCOUNTDISABLE') == false
  - set:
      field: activedirectory.user.enabled
      value: false
      if: ctx.activedirectory?.user?.uac_list?.contains('ACCOUNTDISABLE') == true

  - set:
      field: activedirectory.user.locked
      value: true
      if: ctx.activedirectory?.user?.uac_list?.contains('LOCKOUT') == true

  - set:
      field: activedirectory.user.password_not_required
      value: true
      if: ctx.activedirectory?.user?.uac_list?.contains('PASSWD_NOTREQD') == true

  - set:
      field: activedirectory.user.reversible_encryption_password
      value: true
      if: ctx.activedirectory?.user?.uac_list?.contains('ENCRYPTED_TEXT_PWD_ALLOWED') == true

  - set:
      field: activedirectory.user.unconstrained_delegation
      value: true
      if: ctx.activedirectory?.user?.uac_list?.contains('TRUSTED_FOR_DELEGATION') == true

  - set:
      field: activedirectory.user.sensitive_object
      value: true
      if: ctx.activedirectory?.user?.uac_list?.contains('NOT_DELEGATED') == true

  - set:
      field: activedirectory.user.use_des_key_only
      value: true
      if: ctx.activedirectory?.user?.uac_list?.contains('USE_DES_KEY_ONLY') == true

  - set:
      field: activedirectory.user.dont_require_preauth
      value: true
      if: ctx.activedirectory?.user?.uac_list?.contains('DONT_REQUIRE_PREAUTH') == true

  - set:
      field: activedirectory.user.constrained_delegation
      value: true
      if: ctx.activedirectory?.user?.uac_list?.contains('TRUSTED_TO_AUTHENTICATE_FOR_DELEGATION') == true

  - script:
      lang: painless
      ignore_failure: true
      tag: handle_user_group_details
      description: Collect user's group details and set privileged_group_member flag based on group membership.
      if: ctx.activedirectory?.groups instanceof List
      # Well-known SIDs - Name to SID mapping
      # https://learn.microsoft.com/en-us/windows-server/identity/ad-ds/manage/understand-security-identifiers#well-known-sids
      params:
        '512': true
        '516': true
        '518': true
        '519': true
        '520': true
        '525': true
        '526': true
        '527': true
        '544': true
        '548': true
        '549': true
        '551': true
      source: |-
        ctx.user = ctx.user ?: [:];
        ctx.user.group = ctx.user.group ?: [:];

        for (def group : ctx.activedirectory.groups) {
          if (group.name != null) {
            ctx.user.group.name = ctx.user.group.name ?: new HashSet();
            ctx.user.group.name.add(group.name);
          }

          if (group?.object_sid == null) {
            continue;
          }

          group.id = group.object_sid;
          ctx.user.group.id = ctx.user.group.id ?: new HashSet();
          ctx.user.group.id.add(group.id);

          int idx = group.object_sid.lastIndexOf('-');
          if (idx < 0) {
            continue;
          }
          def priv = params.get(group.object_sid.substring(idx+1));
          if (priv != null && ctx.activedirectory.user.privileged_group_member == null) {
            ctx.activedirectory.user.privileged_group_member = priv;
          }
        }
        if (ctx.activedirectory.user.privileged_group_member == null) {
          ctx.activedirectory.user.privileged_group_member = false;
        }

  - set:
      field: activedirectory.user.account_never_expires
      value: true
      if: ctx.activedirectory?.user?.account_expires == "0" || ctx.activedirectory?.user?.account_expires == "9223372036854775807"

  - append:
      field: related.user
      value: "{{{activedirectory.user.sam_account_name}}}"
      tag: append_name_into_related_user
      allow_duplicates: false
      if: ctx.activedirectory?.user?.sam_account_name != null
  - append:
      field: related.user
      value: "{{{activedirectory.id}}}"
      tag: append_id_into_related_user
      allow_duplicates: false
      if: ctx.activedirectory?.id != null
  - append:
      field: related.user
      value: "{{{activedirectory.user.object_guid}}}"
      tag: append_object_guid_into_related_user
      allow_duplicates: false
      if: ctx.activedirectory?.user?.object_guid != null

  - rename:
      field: activedirectory.id
      target_field: activedirectory.user.object_dn

  - rename:
      field: activedirectory
      target_field: entityanalytics_ad

on_failure:
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      value: pipeline_error
