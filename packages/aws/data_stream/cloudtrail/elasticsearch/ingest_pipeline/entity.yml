---
description: Pipeline for parsing CloudTrail entities
processors:
  - script:
      description: Appends any relevant entity to `related.entity` for all events
      lang: painless
      ignore_failure: true
      on_failure: 
        - set:
            description: Add error reason
            field: error.message
            value: "{{{ _ingest.on_failure_message }}}"
      source: |
        void addEntity(Set entities, String fieldName) {
            entities.add(field(fieldName).get(null));
        }

        Set entities = new HashSet();

        addEntity(entities, "json.userIdentity.arn");
        addEntity(entities, "json.userIdentity.identityProvider");
        addEntity(entities, "json.userIdentity.principalId");
        addEntity(entities, "json.userIdentity.sessionContext.sessionIssuer.arn");
        addEntity(entities, "json.userIdentity.sessionContext.sessionIssuer.userName");
        addEntity(entities, "json.userIdentity.sessionContext.webIdFederationData.federatedProvider");
        addEntity(entities, "json.userIdentity.userName");
        field("json.resources").get(new ArrayList()).stream().forEach(f -> entities.add(f.ARN));

        String eventSource = field("json.eventSource").get(null);

        if (eventSource == "signin.amazonaws.com") {
          entities.add(field("json.additionalEventData.MFAIdentifier").get(null));

        } else if (eventSource == "sts.amazonaws.com") {
          addEntity(entities, "json.requestParameters.roleArn");
          addEntity(entities, "json.sourceIdentity");
          addEntity(entities, "json.additionalEventData.MFAIdentifier");
          addEntity(entities, "json.responseElements.assumedRoleUser.arn");
          addEntity(entities, "json.requestParameters.roleSessionName");
          addEntity(entities, "json.responseElements.accessKeyId");

        } else if (eventSource == "iam.amazonaws.com") {
          addEntity(entities, "json.requestParameters.userName");
          addEntity(entities, "json.requestParameters.accessKeyId");
          addEntity(entities, "json.requestParameters.policyArn");
          addEntity(entities, "json.requestParameters.roleName");
          addEntity(entities, "json.requestParameters.policyName");
          addEntity(entities, "json.responseElements.accessKey.userName");
          addEntity(entities, "json.responseElements.accessKey.accessKeyId");
          addEntity(entities, "json.responseElements.user.arn");
          addEntity(entities, "json.responseElements.user.userName");
          addEntity(entities, "json.responseElements.userId");
          addEntity(entities, "json.responseElements.role.arn");

        } else if (eventSource == "ec2.amazonaws.com") {
          addEntity(entities, "json.requestParameters.groupId");
          addEntity(entities, "json.requestParameters.groupName");
          addEntity(entities, "json.requestParameters.roleName");
          addEntity(entities, "json.requestParameters.subnetId");
          addEntity(entities, "json.requestParameters.volumeId");
          addEntity(entities, "json.requestParameters.networkInterfaceId");
          addEntity(entities, "json.requestParameters.vpcId");
          addEntity(entities, "json.requestParameters.snapshotId");
          addEntity(entities, "json.responseElements.groupId");
          addEntity(entities, "json.responseElements.reservationId");
          addEntity(entities, "json.responseElements.vpc.vpcId");
          addEntity(entities, "json.responseElements.vpc.dhcpOptionsId");
          addEntity(entities, "json.responseElements.snapshotId");
          addEntity(entities, "json.responseElements.volumeId");
          
          field("json.responseElements.securityGroupRuleSet.items").get(new ArrayList()).stream().forEach(i -> {
            entities.add(i.groupId);
            entities.add(i.referencedGroupInfo?.groupId);
            entities.add(i.securityGroupRuleId);
          });

          field("json.responseElements.groupSet.items").get(new ArrayList()).stream().forEach(i -> {
            entities.add(i.groupId);
          });

          field("json.requestParameters.groupSet.items").get(new ArrayList()).stream().forEach(i -> {
            entities.add(i.groupId);
          });

          field("json.requestParameters.instancesSet.items").get(new ArrayList()).stream().forEach(i -> {
            entities.add(i.instanceId);
          });

          field("json.responseElements.instancesSet.items").get(new ArrayList()).stream().forEach(instances -> {
            entities.add(instances.subnetId);
            entities.add(instances.vpcId);
            entities.add(instances.instanceId);
            entities.add(instances.imageId);
            entities.add(instances.iamInstanceProfile?.arn);

            instances.networkInterfaceSet?.items?.stream().forEach(networks -> {
              entities.add(networks.networkInterfaceId);
              entities.add(networks.vpcId);
              entities.add(networks.subnetId);
              networks.groupSet?.items?.stream().forEach(group -> {
                entities.add(group.groupId);
              });
            });
          });

          field("json.requestParameters.revokedSecurityGroupRuleSet.items").get(new ArrayList()).stream().forEach(i -> {
            entities.add(i.securityGroupRuleId);
            entities.add(i.groupId);
          });

        } else if (eventSource == "s3.amazonaws.com") {
          addEntity(entities, 'json.requestParameters.bucketName');
        
        } else if (eventSource == "cloudtrail.amazonaws.com") {
          addEntity(entities, 'json.requestParameters.name');
          addEntity(entities, 'json.requestParameters.s3BucketName');
          addEntity(entities, 'json.responseElements.cloudWatchLogsLogGroupArn');
          addEntity(entities, 'json.responseElements.cloudWatchLogsRoleArn');
          addEntity(entities, 'json.responseElements.kmsKeyId');
          addEntity(entities, 'json.responseElements.snsTopicARN');
          addEntity(entities, 'json.responseElements.trailARN');
          addEntity(entities, 'json.responseElements.name');
        
        } else if (eventSource == "kms.amazonaws.com") {
          addEntity(entities, 'json.requestParameters.keyId');
          addEntity(entities, 'json.responseElements.keyId');
          addEntity(entities, 'json.responseElements.keyMetadata.arn');
          addEntity(entities, 'json.responseElements.keyMetadata.keyId');
        
        } else if (eventSource == "config.amazonaws.com") {
          addEntity(entities, 'json.requestParameters.configurationRecorderName');
        
        } else if (eventSource == "lambda.amazonaws.com") {
          addEntity(entities, 'json.requestParameters.functionName');
          addEntity(entities, 'json.responseElements.functionArn');
          addEntity(entities, 'json.responseElements.functionName');
          addEntity(entities, 'json.responseElements.role');
          addEntity(entities, 'json.responseElements.vpcConfig.securityGroupIds');
          addEntity(entities, 'json.responseElements.vpcConfig.subnetIds');

        } else if (eventSource == "rds.amazonaws.com") {
          addEntity(entities, 'json.requestParameters.dBInstanceIdentifier');
          addEntity(entities, 'json.requestParameters.dBInstanceArn');
          addEntity(entities, 'json.responseElements.dBInstanceIdentifier');
          addEntity(entities, 'json.responseElements.dbInstanceArn');
          addEntity(entities, 'json.responseElements.dBSubnetGroup.vpcId');
          addEntity(entities, 'json.responseElements.vpcSecurityGroups.vpcSecurityGroupId');

          field("json.responseElements.dBSubnetGroup.subnets").get(new ArrayList()).stream().forEach(i -> {
            entities.add(i.subnetIdentifier);
          });

          field("json.responseElements.vpcSecurityGroups").get(new ArrayList()).stream().forEach(i -> {
            entities.add(i.vpcSecurityGroupId);
          });
        }

        entities.remove("");
        entities.remove(null);

        List sortedList = new ArrayList(entities);
        Collections.sort(sortedList); // sort for testing purposes
        field("related.entity").set(sortedList);