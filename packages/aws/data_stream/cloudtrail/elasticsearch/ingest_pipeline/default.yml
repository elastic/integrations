---
description: Pipeline for AWS CloudTrail Logs
processors:
  - rename:
      field: message
      target_field: event.original
      if: 'ctx.event?.original == null'
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: 'ctx.event?.original != null'
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - set:
      if: ctx['@timestamp'] != null
      field: event.created
      copy_from: '@timestamp'
  - json:
      field: event.original
      target_field: json
  - pipeline:
      if: ctx?.json?.preview != null
      name: '{{ IngestPipeline "third-party" }}'
  - set:
      field: ecs.version
      value: '8.11.0'
  - date:
      field: json.eventTime
      target_field: "@timestamp"
      ignore_failure: true
      formats:
        - ISO8601
  - script:
      description: Drops null/empty values recursively
      lang: painless
      source: |
        boolean drop(Object o) {
          if (o == null || o == "") {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  # Before renames because some json fields are mutated on the process
  - script:
      description: Appends any relevant entity to `related.entity` for all events
      lang: painless
      tag: script_append_related_entity
      if: "ctx?.json?.eventName != null && ctx?.tags != null && ctx.tags.contains('actor_target_mapping')"
      on_failure:
        - append:
            field: tags
            value: preserve_original_event
            allow_duplicates: false
        - set:
            description: Add error reason
            field: error.message
            value: |
              Processor '{{{ _ingest.on_failure_processor_type }}}'
              {{#_ingest.on_failure_processor_tag}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
              {{/_ingest.on_failure_processor_tag}}failed with message '{{{ _ingest.on_failure_message }}}'
      source: |
        void addFields(Set entities, List fields) {
            for (String field : fields) {
              addField(entities, field);
            }
        }

        void addField(Set entities, String fieldName) {
          addValue(entities, field(fieldName).get(null));
        }

        boolean addValues(Set entities, List values) {
            boolean addedAll = true;
            for (String value : values) {
              addedAll = addedAll && addValue(entities, value);
            }

            return addedAll;
        }

        boolean addValue(Set entities, String value) {
          if (value == null || value == "") {
            return false;
          }

          return entities.add(value);
        }

        void enrichCloudformation(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "cloudformation.amazonaws.com") {
              return;
          }

          if (eventName == "CreateStackSet") {
            addField(enrichCtx.target, "json.responseElements.stackSetId");
          } else if (eventName == "CreateStack") {
            addField(enrichCtx.target, "json.responseElements.stackId");
          }
        }

        void enrichCloudtrail(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "cloudtrail.amazonaws.com") {
              return;
          }

          addFields(enrichCtx.related, [
            "json.requestParameters.name",
            "json.requestParameters.s3BucketName",
            "json.responseElements.cloudWatchLogsLogGroupArn",
            "json.responseElements.cloudWatchLogsRoleArn",
            "json.responseElements.kmsKeyId",
            "json.responseElements.snsTopicARN",
            "json.responseElements.trailARN",
            "json.responseElements.name"
          ]);

          if (eventName == "DeleteTrail"
            || eventName == "StopLogging") {
            addField(enrichCtx.target, "json.requestParameters.name");
          } else if (eventName == "DescribeTrails") {
            addField(enrichCtx.target, "json.recipientAccountId");
          }
        }

        void enrichEc2InstanceConnect(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "ec2-instance-connect.amazonaws.com") {
              return;
          }

          if (eventName == "SendSSHPublicKey" 
            || eventName == "SendSerialConsoleSSHPublicKey") {
            addField(enrichCtx.target, "json.requestParameters.instanceId");
          }
        }

        void enrichConfig(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "config.amazonaws.com") {
            return;
          }

          addField(enrichCtx.related, "json.requestParameters.configurationRecorderName");

          if (eventName == "StopConfigurationRecorder" 
                  || eventName == "StartConfigurationRecorder") {
            addField(enrichCtx.target, "json.requestParameters.configurationRecorderName");
          }
        }

        void enrichEc2(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "ec2.amazonaws.com") {
              return;
          }

          addFields(enrichCtx.related, [
            "json.requestParameters.groupId",
            "json.requestParameters.groupName",
            "json.requestParameters.roleName",
            "json.requestParameters.subnetId",
            "json.requestParameters.volumeId",
            "json.requestParameters.networkInterfaceId",
            "json.requestParameters.vpcId",
            "json.requestParameters.snapshotId",
            "json.responseElements.groupId",
            "json.responseElements.reservationId",
            "json.responseElements.vpc.vpcId",
            "json.responseElements.vpc.dhcpOptionsId",
            "json.responseElements.snapshotId",
            "json.responseElements.volumeId"
          ]);
          
          field("json.responseElements.securityGroupRuleSet.items").get(new ArrayList()).stream().forEach(i -> {
            addValues(enrichCtx.related, [
              i.groupId,
              i.referencedGroupInfo?.groupId,
              i.securityGroupRuleId
            ]);
          });

          field("json.responseElements.groupSet.items").get(new ArrayList()).stream().forEach(i -> {
            addValue(enrichCtx.related, i.groupId);
          });

          field("json.requestParameters.groupSet.items").get(new ArrayList()).stream().forEach(i -> {
            addValue(enrichCtx.related, i.groupId);
          });

          field("json.requestParameters.instancesSet.items").get(new ArrayList()).stream().forEach(i -> {
            addValue(enrichCtx.related, i.instanceId);
          });

          field("json.responseElements.instancesSet.items").get(new ArrayList()).stream().forEach(instances -> {
            addValues(enrichCtx.related, [
              instances.subnetId,
              instances.vpcId,
              instances.instanceId,
              instances.imageId,
              instances.iamInstanceProfile?.arn
            ]);

            if (instances.networkInterfaceSet?.items == null) {
              return true;
            }

            instances.networkInterfaceSet?.items?.stream().forEach(networks -> {
              addValues(enrichCtx.related, [
                networks.networkInterfaceId,
                networks.vpcId,
                networks.subnetId
              ]);

              if (networks.groupSet?.items == null) {
                return true;
              }

              networks.groupSet?.items?.stream().forEach(group -> {
                addValue(enrichCtx.related, group.groupId);
              });
            });
          });

          field("json.requestParameters.revokedSecurityGroupRuleSet.items").get(new ArrayList()).stream().forEach(i -> {
            addValues(enrichCtx.related, [
              i.securityGroupRuleId, 
              i.groupId
            ]);
          });

          if (eventName == "AuthorizeSecurityGroupIngress" 
              || eventName == "AuthorizeSecurityGroupEgress") {
            addField(enrichCtx.target, "json.requestParameters.groupId");
            field("json.responseElements.securityGroupRuleSet.items").get(new ArrayList()).stream().forEach(f -> addValue(enrichCtx.target, f.securityGroupRuleId));

          } else if (eventName == "CreateTrafficMirrorFilter") {
            addField(enrichCtx.target, "json.responseElements.CreateTrafficMirrorFilterResponse.trafficMirrorFilter.trafficMirrorFilterId");

          } else if (eventName == "CreateTrafficMirrorFilterRule") {
            addField(enrichCtx.target, "json.responseElements.CreateTrafficMirrorFilterRuleResponse.trafficMirrorFilterRule.trafficMirrorFilterRuleId");

          } else if (eventName == "CreateTrafficMirrorSession") {
            addField(enrichCtx.target, "json.responseElements.CreateTrafficMirrorSessionResponse.trafficMirrorSession.trafficMirrorSessionId");

          } else if (eventName == "CreateTrafficMirrorTarget") {
            addField(enrichCtx.target, "json.responseElements.CreateTrafficMirrorTargetResponse.trafficMirrorTarget.trafficMirrorTargetId");

          } else if (eventName == "DeleteFlowLogs") {
            addField(enrichCtx.target, "json.requestParameters.DeleteFlowLogsRequest.FlowLogId.content");

          } else if (eventName == "DeleteNetworkAcl") {
            addField(enrichCtx.target, "json.requestParameters.networkAclId");

          } else if (eventName == "DeleteNetworkAclEntry") {
            addField(enrichCtx.target, "json.requestParameters.networkAclId");
            def ruleNumber = field("json.requestParameters.ruleNumber").get(null);
            if (ruleNumber != null) {
              addValue(enrichCtx.target, String.valueOf(ruleNumber));
            }

          } else if (eventName == "GetPasswordData") {
            addField(enrichCtx.target, "json.requestParameters.instanceId");

          } else if (eventName == "ModifyImageAttribute") {
            addField(enrichCtx.target, "json.requestParameters.imageId");
            
          } else if (eventName == "ModifySnapshotAttribute") {
            addField(enrichCtx.target, "json.requestParameters.snapshotId");

          } else if (eventName == "DescribeSecurityGroups"
                    || eventName == "DescribeNetworkInterfaces"
                    || eventName == "DescribeRegions"
                    || eventName == "DescribeVpcs"
                    || eventName == "DescribeNetworkAcls"
                    || eventName == "DescribeVolumes"
          ) {
            addField(enrichCtx.target, "json.recipientAccountId");
          }
        }

        void enrichElasticFileSystem(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "elasticfilesystem.amazonaws.com") {
              return;
          }

          if (eventName == "DeleteFileSystem") {
            addField(enrichCtx.target, "json.requestParameters.fileSystemId");
          } else if (eventName == "DeleteMountTarget") {
            addField(enrichCtx.target, "json.requestParameters.mountTargetId");
          }
        }

        void enrichEvents(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "events.amazonaws.com") {
              return;
          }

          if (eventName == "DeleteRule") {
            addField(enrichCtx.target, "json.requestParameters.name");
          }
        }

        void enrichGuardDuty(def enrichCtx, def eventSource, def eventName)  {
          if (eventSource != "guardduty.amazonaws.com") {
              return;
          }

          addFields(enrichCtx.related, [
            "json.requestParameters.detectorId",
            "json.responseElements.detectorId"
          ]);

          if (eventName == "CreateDetector") {
            addField(enrichCtx.target, "json.responseElements.detectorId");
          } else if (eventName == "DeleteDetector") {
            addField(enrichCtx.target, "json.requestParameters.detectorId");
          } 
        }

        void enrichIam(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "iam.amazonaws.com") {
            return;
          }

          addFields(enrichCtx.related, [
            "json.requestParameters.userName",
            "json.requestParameters.serialNumber",
            "json.requestParameters.accessKeyId",
            "json.requestParameters.policyArn",
            "json.requestParameters.roleName",
            "json.requestParameters.policyName",
            "json.requestParameters.serialNumber",
            "json.responseElements.accessKey.userName",
            "json.responseElements.accessKey.accessKeyId",
            "json.responseElements.user.arn",
            "json.responseElements.user.userId",
            "json.responseElements.user.userName",
            "json.responseElements.userId",
            "json.responseElements.role.arn",
            "json.responseElements.serialNumber"
          ]);

          if (eventName == "AttachGroupPolicy") {
            addField(enrichCtx.target, "json.requestParameters.groupName");

          } else if (eventName == "AttachRolePolicy"
                    || eventName == "ListAttachedRolePolicies"
                    || eventName == "UpdateAssumeRolePolicy") {
            addField(enrichCtx.target, "json.requestParameters.roleName");

          } else if (eventName == "AttachUserPolicy") {
            addFields(enrichCtx.target, [
              "json.requestParameters.policyArn",
              "json.requestParameters.userName"
            ]);

          } else if (eventName == "CreateAccessKey") {
            addFields(enrichCtx.target, [
              "json.responseElements.accessKey.accessKeyId", 
              "json.requestParameters.userName"
            ]);

          } else if (eventName == "CreateUser"
                    || eventName == "DeactivateMFADevice") {
            addField(enrichCtx.target, "json.requestParameters.userName");

          } else if (eventName == "DeleteVirtualMFADevice") {
            addField(enrichCtx.target, "json.requestParameters.serialNumber");

          } else if (eventName == "GetPolicy") {
            addField(enrichCtx.target, "json.requestParameters.policyArn");
            
          } else if (eventName == "CreatePolicy") {
            addField(enrichCtx.target, "json.responseElements.policy.arn");
            
          } else if (eventName == "ListRoles"
                    || eventName == "ListUsers") {
            addField(enrichCtx.target, "json.recipientAccountId");
          }
        }

        void enrichKms(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "kms.amazonaws.com") {
            return;
          }

          addFields(enrichCtx.related, [
            "json.requestParameters.keyId",
            "json.responseElements.keyId",
            "json.responseElements.keyMetadata.arn",
            "json.responseElements.keyMetadata.keyId"
          ]);

          if (eventName == "DisableKey" 
            || eventName == "ScheduleKeyDeletion") {
            field("json.resources").get(new ArrayList()).stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
          }
        }

        void enrichLambda(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "lambda.amazonaws.com") {
            return;
          }

          addFields(enrichCtx.related, [
            "json.requestParameters.functionName",
            "json.responseElements.functionArn",
            "json.responseElements.functionName",
            "json.responseElements.role",
            "json.responseElements.vpcConfig.securityGroupIds",
            "json.responseElements.vpcConfig.subnetIds"
          ]);

          if (eventName == null) {
            return;
          }

          if (eventName.contains("AddPermission")) { // needs to be contains because lambda event names are versioned on the name
            addField(enrichCtx.target, "json.requestParameters.functionName");

          } else if (eventName.contains("ListFunctions")) {
            addField(enrichCtx.target, "json.recipientAccountId");

          }
        }

        void enrichLogs(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "logs.amazonaws.com") {
            return;
          }

          if (eventName == "DeleteLogGroup") {
            addField(enrichCtx.target, "json.requestParameters.logGroupName");

          } else if (eventName == "DeleteLogStream") {
            addField(enrichCtx.target, "json.requestParameters.logStreamName");

          }
        }

        void enrichMonitoring(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "monitoring.amazonaws.com") {
            return;
          }

          if (eventName == "DeleteAlarms") {
            field("json.requestParameters.alarmNames").get(new ArrayList()).stream().forEach(f -> addValue(enrichCtx.target, f));
            
          }
        }

        void enrichRds(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "rds.amazonaws.com") {
            return;
          }

          addFields(enrichCtx.related, [
            "json.requestParameters.dBInstanceIdentifier",
            "json.requestParameters.dBInstanceArn",
            "json.responseElements.dBInstanceIdentifier",
            "json.responseElements.dbInstanceArn",
            "json.responseElements.dBSubnetGroup.vpcId",
            "json.responseElements.vpcSecurityGroups.vpcSecurityGroupId"
          ]);

          field("json.responseElements.dBSubnetGroup.subnets").get(new ArrayList()).stream().forEach(i -> {
            addValue(enrichCtx.related, i.subnetIdentifier);
          });

          field("json.responseElements.vpcSecurityGroups").get(new ArrayList()).stream().forEach(i -> {
            addValue(enrichCtx.related, i.vpcSecurityGroupId);
          });

          if (eventName == "DeleteDBCluster" 
            || eventName == "ModifyDBCluster"
            || eventName == "StopDBCluster") {
            addField(enrichCtx.target, "json.responseElements.dBClusterArn");
          
          } else if (eventName == "DeleteDBInstance" 
                  || eventName == "ModifyDBInstance" 
                  || eventName == "RestoreDBInstanceFromDBSnapshot"
                  || eventName == "RestoreDBInstanceFromS3"
                  || eventName == "StopDBInstance") {
            addField(enrichCtx.target, "json.responseElements.dBInstanceArn");
          
          } else if (eventName == "DeleteGlobalCluster") {
            addField(enrichCtx.target, "json.responseElements.globalClusterArn");

          } else if (eventName == "ModifyDBClusterSnapshotAttribute") {
            addField(enrichCtx.target, "json.responseElements.dBClusterSnapshotIdentifier");
            
          } else if (eventName == "ModifyDBSnapshotAttribute") {
            addField(enrichCtx.target, "json.responseElements.dBSnapshotIdentifier");
            
          } else if (eventName == "DescribeDBInstances") {
            addField(enrichCtx.target, "json.recipientAccountId");

          }
        }

        void enrichRolesAnywhere(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "rolesanywhere.amazonaws.com") {
            return;
          }

          if (eventName == "CreateTrustAnchor") {
            addField(enrichCtx.target, "json.responseElements.trustAnchor.trustAnchorArn");
            
          }
        }

        void enrichRoute53Resolver(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "route53resolver.amazonaws.com") {
            return;
          }

          if (eventName == "DeleteResolverQueryLogConfig") {
            addField(enrichCtx.target, "json.responseElements.resolverQueryLogConfig.arn");
          }
        }

        void enrichS3(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "s3.amazonaws.com") {
            return;
          }

          addField(enrichCtx.related, "json.requestParameters.bucketName");

          if (eventName == "CopyObject" 
            || eventName == "PutBucketLogging"
            || eventName == "PutBucketVersioning"
            || eventName == "PutObject"
            || eventName == "GetBucketPolicy"
            || eventName == "ListObjects"
            || eventName == "HeadObject"
            || eventName == "GetObject"
            || eventName == "DeleteObject"
            || eventName == "DeleteBucket") {
            field("json.resources").get(new ArrayList()).stream().forEach(f -> addValue(enrichCtx.target, f.ARN));

          } else if (eventName == "PutBucketReplication") {
            field("json.resources").get(new ArrayList()).stream().forEach(f -> addValue(enrichCtx.target, f.ARN));
            addField(enrichCtx.target, "json.requestParameters.ReplicationConfiguration.Rule.Destination.Bucket");

          } else if (eventName == "ListBuckets") {
            addField(enrichCtx.target, "json.recipientAccountId");

          }
        }

        void enrichSecretsManager(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "secretsmanager.amazonaws.com") {
            return;
          }

          if (eventName == "BatchGetSecretValue") {
            field("json.requestParameters.secretIdList").get(new ArrayList()).stream().forEach(f -> addValue(enrichCtx.target, f));

          } else if (eventName == "GetSecretValue") {
            addField(enrichCtx.target, "json.requestParameters.secretId");

          }
        }

        void enrichSignin(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "signin.amazonaws.com") {
            return;
          }

          if (eventName == "ConsoleLogin") {
            addField(enrichCtx.target, "json.recipientAccountId");
          }
        }

        void enrichSsm(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "ssm.amazonaws.com") {
            return;
          }

          if (eventName == "GetParameter"
            || eventName == "GetParameters"
            || eventName == "CreateControlChannel"
            || eventName == "OpenControlChannel") {
            field("json.resources").get(new ArrayList()).stream().forEach(f -> addValue(enrichCtx.target, f.ARN));

          } else if (eventName == "StartSession") {
            addField(enrichCtx.target, "json.requestParameters.target");
            
          } else if (eventName == "CreateDocument") {
            addField(enrichCtx.target, "json.requestParameters.name");

          } else if (eventName == "TerminateSession"
                    || eventName == "OpenDataChannel") {
            addField(enrichCtx.target, "json.requestParameters.sessionId");

          } else if (eventName == "SendCommand") {
            List instanceIds = field("json.requestParameters.instanceIds").get(new ArrayList());

            if (instanceIds.isEmpty()) {
              instanceIds = field("json.requestParameters.targets").get(new ArrayList()).stream().flatMap(target -> target.values.stream()).collect(Collectors.toList());
            }

            if (instanceIds.size() == 1 && instanceIds.get(0) == "*") {
              instanceIds = [ field("json.recipientAccountId").get(null) ]; // if all instances, point to full account
            }

            addValues(enrichCtx.target, instanceIds);

          } else if (eventName == "ListInstanceAssociations") {
            addField(enrichCtx.target, "json.recipientAccountId");
          }
        }

        void enrichSts(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "sts.amazonaws.com") {
            return;
          }

          addFields(enrichCtx.related, [
            "json.requestParameters.roleArn",
            "json.sourceIdentity",
            "json.additionalEventData.MFAIdentifier",
            "json.responseElements.assumedRoleUser.arn",
            "json.requestParameters.roleSessionName",
            "json.responseElements.accessKeyId"
          ]);

          if (eventName == "AssumeRole") {
            def userType = field("json.userIdentity.type").get(null);

            if (userType == "AWSService") {
              enrichCtx.actor = field("json.userIdentity.invokedBy").get(null);
            } else if (userType == "AssumedRole") {
              enrichCtx.actor = field("json.userIdentity.sessionContext.sessionIssuer.arn").get(null);
            } else {
              enrichCtx.actor = field("json.userIdentity.arn").get(null);
            }

            addField(enrichCtx.target, "json.requestParameters.roleArn");

          } else if (eventName == "GetCallerIdentity") {
            addField(enrichCtx.target, "json.recipientAccountId");
            enrichCtx.actor = field("json.userIdentity.arn").get(null);

          }
        }

        void enrichWafv2(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "wafv2.amazonaws.com") {
            return;
          }

          addFields(enrichCtx.related, [
            "json.requestParameters.id",
            "json.responseElements.summary"
          ]);

          if (eventName == "DeleteRuleGroup"
              || eventName == "DeleteWebACL") {
            addField(enrichCtx.target, "json.requestParameters.id");
          }
        }

        void enrichSns(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "sns.amazonaws.com") {
            return;
          }

          if (eventName == "CreateTopic") {
            addField(enrichCtx.target, "json.responseElements.topicArn");
          } else if (eventName == "Subscribe"
                    || eventName == "Publish") {
            addField(enrichCtx.target, "json.requestParameters.topicArn");
          }
          
        }

        void enrichBedrock(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "bedrock.amazonaws.com") {
            return;
          }

          if (eventName == "Converse") {
            addField(enrichCtx.target, "json.requestParameters.modelId");

          }
        }

        void enrichElasticLoadBalancing(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "elasticloadbalancing.amazonaws.com") {
            return;
          }

          if (eventName == "DescribeLoadBalancers") {
            addField(enrichCtx.target, "json.recipientAccountId");

          }
        }

        void enrichDynamoDB(def enrichCtx, def eventSource, def eventName) {
          if (eventSource != "dynamodb.amazonaws.com") {
            return;
          }

          if (eventName == "ListTables") {
            addField(enrichCtx.target, "json.recipientAccountId");

          }
        }

        // Using tree set to ensure a sorting is kept (testing purposes)
        Map enrichCtx = [:];
        enrichCtx.related = new TreeSet();
        enrichCtx.target = new TreeSet();

        enrichCtx.actor = field("json.userIdentity.arn").get(null); // default actor value
        if (enrichCtx.actor == null) {
          enrichCtx.actor = field("json.userIdentity.onBehalfOf.userId").get(null);
        }

        addFields(enrichCtx.related, [
          "json.userIdentity.accessKeyId",
          "json.userIdentity.arn",
          "json.userIdentity.userName",
          "json.userIdentity.sessionContext.sessionIssuer.arn",
          "json.userIdentity.sessionContext.sessionIssuer.userName"
        ]);

        field("json.resources").get(new ArrayList()).stream().forEach(f -> addValue(enrichCtx.related, f.ARN));

        String eventSource = field("json.eventSource").get(null);
        String eventName = field("json.eventName").get(null);

        enrichCloudformation(enrichCtx, eventSource, eventName);
        enrichCloudtrail(enrichCtx, eventSource, eventName);
        enrichConfig(enrichCtx, eventSource, eventName);
        enrichEc2InstanceConnect(enrichCtx, eventSource, eventName);
        enrichEc2(enrichCtx, eventSource, eventName);
        enrichElasticFileSystem(enrichCtx, eventSource, eventName);
        enrichEvents(enrichCtx, eventSource, eventName);
        enrichGuardDuty(enrichCtx, eventSource, eventName);
        enrichIam(enrichCtx, eventSource, eventName);
        enrichKms(enrichCtx, eventSource, eventName);
        enrichLambda(enrichCtx, eventSource, eventName);
        enrichLogs(enrichCtx, eventSource, eventName);
        enrichMonitoring(enrichCtx, eventSource, eventName);
        enrichRds(enrichCtx, eventSource, eventName);
        enrichRolesAnywhere(enrichCtx, eventSource, eventName);
        enrichRoute53Resolver(enrichCtx, eventSource, eventName);
        enrichS3(enrichCtx, eventSource, eventName);
        enrichSecretsManager(enrichCtx, eventSource, eventName);
        enrichSignin(enrichCtx, eventSource, eventName);
        enrichSsm(enrichCtx, eventSource, eventName);
        enrichSts(enrichCtx, eventSource, eventName);
        enrichWafv2(enrichCtx, eventSource, eventName);
        enrichSns(enrichCtx, eventSource, eventName);
        enrichBedrock(enrichCtx, eventSource, eventName);
        enrichElasticLoadBalancing(enrichCtx, eventSource, eventName);
        enrichDynamoDB(enrichCtx, eventSource, eventName);
        
        if (!enrichCtx.target.isEmpty()) {
          field("target.entity.id").set(enrichCtx.target);
          enrichCtx.related.addAll(enrichCtx.target);
        }

        field("actor.entity.id").set([ enrichCtx.actor ]);

        field("related.entity").set(enrichCtx.related);
        
  - rename:
      field: json.eventVersion
      target_field: aws.cloudtrail.event_version
      ignore_failure: true
  - rename:
      field: json.userIdentity.type
      target_field: aws.cloudtrail.user_identity.type
      ignore_failure: true
  - append:
      field: related.user
      value: '{{json.userIdentity.userName}}'
      allow_duplicates: false
      if: ctx.json?.userIdentity?.userName != null
  - rename:
      field: json.userIdentity.userName
      target_field: user.name
      ignore_failure: true
  - rename:
      field: json.userIdentity.principalId
      target_field: user.id
      ignore_failure: true
  - rename:
      field: json.userIdentity.arn
      target_field: aws.cloudtrail.user_identity.arn
      ignore_failure: true
  - rename:
      field: json.userIdentity.accountId
      target_field: cloud.account.id
      ignore_failure: true
  - rename:
      field: json.userIdentity.accessKeyId
      target_field: aws.cloudtrail.user_identity.access_key_id
      ignore_failure: true
  - rename:
      field: json.userIdentity.sessionContext.attributes.mfaAuthenticated
      target_field: aws.cloudtrail.user_identity.session_context.mfa_authenticated
      ignore_failure: true
  - date:
      field: json.userIdentity.sessionContext.attributes.creationDate
      target_field: aws.cloudtrail.user_identity.session_context.creation_date
      ignore_failure: true
      formats:
        - ISO8601
  - rename:
      field: json.userIdentity.sessionContext.sessionIssuer.type
      target_field: aws.cloudtrail.user_identity.session_context.session_issuer.type
      ignore_failure: true
  # userIdentity.sessionIssuer.userName is only set with assumed roles.
  - rename:
      field: json.userIdentity.sessionContext.sessionIssuer.userName
      target_field: user.name
      ignore_failure: true
  - rename:
      field: json.userIdentity.sessionContext.sessionIssuer.principalId
      target_field: aws.cloudtrail.user_identity.session_context.session_issuer.principal_id
      ignore_failure: true
  - rename:
      field: json.userIdentity.sessionContext.sessionIssuer.arn
      target_field: aws.cloudtrail.user_identity.session_context.session_issuer.arn
      ignore_failure: true
  - rename:
      field: json.userIdentity.sessionContext.sessionIssuer.accountId
      target_field: aws.cloudtrail.user_identity.session_context.session_issuer.account_id
      ignore_failure: true
  - rename:
      field: json.userIdentity.invokedBy
      target_field: aws.cloudtrail.user_identity.invoked_by
      ignore_failure: true
  - rename:
      field: json.eventSource
      target_field: event.provider
      ignore_failure: true
  - set:
      field: event.action
      value: '{{json.eventName}}'
      ignore_failure: true
      ignore_empty_value: true
  - rename:
      field: json.eventCategory
      target_field: aws.cloudtrail.event_category
      ignore_failure: true
  - set:
      field: cloud.region
      copy_from: json.awsRegion
      ignore_empty_value: true
  - rename:
      field: json.sourceIPAddress
      target_field: source.address
      ignore_failure: true
  - grok:
      field: source.address
      ignore_failure: true
      patterns:
        - ^%{IP:source.ip}$
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_failure: true
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - user_agent:
      field: json.userAgent
      target_field: user_agent
      on_failure:
        - rename:
            field: json.userAgent
            target_field: user_agent.original
            ignore_failure: true
  - rename:
      field: json.errorCode
      target_field: aws.cloudtrail.error_code
      ignore_failure: true
  - rename:
      field: json.errorMessage
      target_field: aws.cloudtrail.error_message
      ignore_failure: true
  - script:
      lang: painless
      source: |
        if (ctx.aws.cloudtrail?.flattened == null) {
            Map map = new HashMap();
            ctx.aws.cloudtrail.put("flattened", map);
          }
        if (ctx.json?.requestParameters != null) {
          ctx.aws.cloudtrail.request_parameters = ctx.json.requestParameters.toString();
          if (ctx.aws.cloudtrail.request_parameters.length() < 32766) {
            ctx.aws.cloudtrail.flattened.put("request_parameters", ctx.json.requestParameters);
          }
        }
        if (ctx.json?.responseElements != null) {
          ctx.aws.cloudtrail.response_elements = ctx.json.responseElements.toString();
          if (ctx.aws.cloudtrail.response_elements.length() < 32766) {
            ctx.aws.cloudtrail.flattened.put("response_elements", ctx.json.responseElements);
          }
        }
        if (ctx.json?.additionalEventData != null) {
          ctx.aws.cloudtrail.additional_eventdata = ctx.json.additionalEventData.toString();
          if (ctx.aws.cloudtrail.additional_eventdata.length() < 32766) {
            ctx.aws.cloudtrail.flattened.put("additional_eventdata", ctx.json.additionalEventData);
          }
        }
        if (ctx.json?.serviceEventDetails != null) {
          ctx.aws.cloudtrail.service_event_details = ctx.json.serviceEventDetails.toString();
          if (ctx.aws.cloudtrail.service_event_details.length() < 32766) {
            ctx.aws.cloudtrail.flattened.put("service_event_details", ctx.json.serviceEventDetails);
          }
        }
      ignore_failure: true
  - rename:
      field: json.requestID
      target_field: aws.cloudtrail.request_id
      ignore_failure: true
  - rename:
      field: json.eventID
      target_field: event.id
      ignore_failure: true
  - rename:
      field: json.eventType
      target_field: aws.cloudtrail.event_type
      ignore_failure: true
  - rename:
      field: json.apiVersion
      target_field: aws.cloudtrail.api_version
      ignore_failure: true
  - rename:
      field: json.managementEvent
      target_field: aws.cloudtrail.management_event
      ignore_failure: true
  - rename:
      field: json.readOnly
      target_field: aws.cloudtrail.read_only
      ignore_failure: true
  - script:
      description: 'Drops duplicates where the same combination of ARN, accountId and type is found multiple times in the resources list.'
      lang: painless
      source: >
        if (ctx.json?.resources instanceof List) {
              def resources = ctx.json.resources;
              
              Map uniqueResources = new HashMap();
              for (def originalResource : resources) {
                if (originalResource instanceof Map) {
                  Map resource = new HashMap();
                  resource.putAll(originalResource);
                  if (resource.containsKey('ARN')) {
                    resource['arn'] = resource.remove('ARN');
                  }
                  if (resource.containsKey('accountId')) {
                    resource['account_id'] = resource.remove('accountId');
                  }
                  String key = (resource.containsKey('arn') ? resource.arn : '') + '_' +
                               (resource.containsKey('account_id') ? resource.account_id : '') + '_' +
                               (resource.containsKey('type') ? resource.type : '');
                  uniqueResources[key] = resource;
                }
              }
             ctx.json.resources = new ArrayList(uniqueResources.values());
            }
  - rename:
      field: json.resources
      target_field: aws.cloudtrail.resources
      ignore_failure: true
  - rename:
      field: json.recipientAccountId
      target_field: aws.cloudtrail.recipient_account_id
      ignore_failure: true
  - rename:
      field: json.sharedEventId
      target_field: aws.cloudtrail.shared_event_id
      ignore_failure: true
  - rename:
      field: json.vpcEndpointId
      target_field: aws.cloudtrail.vpc_endpoint_id
      ignore_failure: true
  - append:
      field: related.user
      value: '{{aws.cloudtrail.flattened.request_parameters.userName}}'
      allow_duplicates: false
      if: ctx.aws?.cloudtrail?.flattened?.request_parameters?.userName != null
  - append:
      field: related.user
      value: '{{aws.cloudtrail.flattened.request_parameters.newUserName}}'
      allow_duplicates: false
      if: ctx.aws?.cloudtrail?.flattened?.request_parameters?.newUserName != null
  - script:
      lang: painless
      ignore_failure: true
      source: >-
        if (ctx.json?.eventName != 'ConsoleLogin') {
          return;
        }
        Map aed_map = new HashMap();
        if (ctx?.aws?.cloudtrail?.flattened?.additional_eventdata?.MobileVersion != null) {
          if (ctx.aws.cloudtrail.flattened.additional_eventdata.MobileVersion == 'No') {
            aed_map.put("mobile_version", false);
          } else {
            aed_map.put("mobile_version", true);
          }
        }
        if (ctx?.aws?.cloudtrail?.flattened?.additional_eventdata?.LoginTo != null) {
          aed_map.put("login_to", ctx.aws.cloudtrail.flattened.additional_eventdata.LoginTo);
        }
        if (ctx?.aws?.cloudtrail?.flattened?.additional_eventdata?.MFAUsed != null) {
          if (ctx.aws.cloudtrail.flattened.additional_eventdata.MFAUsed == 'No') {
            aed_map.put("mfa_used", false);
          } else {
            aed_map.put("mfa_used", true);
          }
        }
        if (aed_map.size() > 0) {
          Map cl_map = new HashMap();
          cl_map.put("additional_eventdata", aed_map);
          ctx.aws.cloudtrail.put("console_login", cl_map);
        }
  - script:
      lang: painless
      tag: Add ECS categorization
      params:
        AddUserToGroup:
          category:
            - iam
          type:
            - group
            - change
        AssumeRole:
          category:
            - authentication
          type:
            - info
        AttachGroupPolicy:
          category:
            - iam
          type:
            - group
            - change
        AttachUserPolicy:
          category:
            - iam
          type:
            - user
            - change
        ChangePassword:
          category:
            - iam
          type:
            - user
            - change
        ConsoleLogin:
          category:
            - authentication
          type:
            - info
        CreateAccessKey:
          category:
            - iam
          type:
            - user
            - change
        CreateBucket:
          category:
            - file
          type:
            - creation
        CreateGroup:
          category:
            - iam
          type:
            - group
            - creation
        CreateKeyPair:
          category:
            - iam
          type:
            - admin
            - creation
        CreateUser:
          category:
            - iam
          type:
            - user
            - creation
        CreateVirtualMFADevice:
          category:
            - iam
          type:
            - user
            - change
        DeactivateMFADevice:
          category:
            - iam
          type:
            - user
            - change
        DeleteAccessKey:
          category:
            - iam
          type:
            - user
            - change
        DeleteBucket:
          category:
            - file
          type:
            - deletion
        DeleteGroup:
          category:
            - iam
          type:
            - group
            - deletion
        DeleteGroupPolicy:
          category:
            - iam
          type:
            - group
            - change
        DeleteSSHPublicKey:
          category:
            - iam
          type:
            - user
            - change
        DeleteUser:
          category:
            - iam
          type:
            - user
            - deletion
        DeleteUserPermissionsBoundary:
          category:
            - iam
          type:
            - user
            - change
        DeleteUserPolicy:
          category:
            - iam
          type:
            - user
            - change
        DeleteVirtualMFADevice:
          category:
            - iam
          type:
            - user
            - change
        DetachGroupPolicy:
          category:
            - iam
          type:
            - group
            - change
        DetachUserPolicy:
          category:
            - iam
          type:
            - user
            - change
        EnableMFADevice:
          category:
            - iam
          type:
            - user
            - change
        GetGroup:
          category:
            - iam
          type:
            - group
            - info
        GetGroupPolicy:
          category:
            - iam
          type:
            - group
            - info
        GetUser:
          category:
            - iam
          type:
            - user
            - info
        GetUserPolicy:
          category:
            - iam
          type:
            - user
            - info
        ListAttachedGroupPolicies:
          category:
            - iam
          type:
            - group
            - info
        ListAttachedUserPolicies:
          category:
            - iam
          type:
            - user
            - info
        ListGroupPolicies:
          category:
            - iam
          type:
            - group
            - info
        ListGroups:
          category:
            - iam
          type:
            - group
            - info
        ListGroupsForUser:
          category:
            - iam
          type:
            - user
            - info
        ListUserPolicies:
          category:
            - iam
          type:
            - user
            - info
        ListUsers:
          category:
            - iam
          type:
            - user
            - info
        ListUserTags:
          category:
            - iam
          type:
            - user
            - info
        PutGroupPolicy:
          category:
            - iam
          type:
            - group
            - change
        PutUserPermissionsBoundary:
          category:
            - iam
          type:
            - user
            - change
        PutUserPolicy:
          category:
            - iam
          type:
            - user
            - change
        RemoveUserFromGroup:
          category:
            - iam
          type:
            - group
            - change
        SetDefaultPolicyVersion:
          category:
            - iam
          type:
            - admin
            - change
        SetSecurityTokenServicePreferences:
          category:
            - iam
          type:
            - admin
            - change
        TagUser:
          category:
            - iam
          type:
            - user
            - change
        UntagUser:
          category:
            - iam
          type:
            - user
            - change
        UpdateAccessKey:
          category:
            - iam
          type:
            - user
            - change
        UpdateAccountPasswordPolicy:
          category:
            - iam
          type:
            - admin
            - change
        UpdateGroup:
          category:
            - iam
          type:
            - group
            - change
        UpdateLoginProfile:
          category:
            - iam
          type:
            - user
            - change
        UpdateRole:
          category:
            - iam
          type:
            - admin
            - change
        UpdateSSHPublicKey:
          category:
            - iam
          type:
            - user
            - change
        UpdateUser:
          category:
            - iam
          type:
            - user
            - change
        GetCallerIdentity:
          category:
            - authentication
          type:
            - info
        DescribeInstances:
          category:
            - host
          type:
            - info
        DescribeSecurityGroups:
          category:
            - network
          type:
            - info
        ListBuckets:
          category:
            - file
          type:
            - info
        DescribeNetworkInterfaces:
          category:
            - network
          type:
            - info
        DescribeRegions:
          category:
            - api
          type:
            - info
        ListRoles:
          category:
            - iam
          type:
            - info
        DescribeVpcs:
          category:
            - network
          type:
            - info
        DescribeNetworkAcls:
          category:
            - network
          type:
            - info
        DescribeLoadBalancers:
          category:
            - network
          type:
            - info
        DescribeVolumes:
          category:
            - host
          type:
            - info
        DescribeTrails:
          category:
            - configuration
          type:
            - info
        ListFunctions:
          category:
            - package
          type:
            - info
        ListTables:
          category:
            - database
          type:
            - info
        ListInstanceAssociations:
          category:
            - host
          type:
            - info
        DescribeDBInstances:
          category:
            - database
          type:
            - info
        AuthorizeSecurityGroupIngress:
          category:
            - network
          type:
            - access
        CreateTopic:
          category:
            - configuration
          type:
            - creation
        Subscribe:
          category:
            - configuration
          type:
            - change
        Publish:
          category:
            - api
          type: []
        SendCommand:
          category:
            - process
          type: []
        GetPolicy:
          category:
            - iam
          type: 
            - info                
        CreatePolicy:
          category:
            - iam
          type: 
            - creation
        ListAttachedRolePolicies:
          category:
            - iam
          type: 
            - info
        AttachRolePolicy:
          category:
            - iam
          type: 
            - change
        Converse:
          category:
            - api
          type: []
        CreateDocument:
          category:
            - file
          type: 
            - creation  
        StartSession:
          category:
            - session
          type: 
            - start 
        CreateControlChannel:
          category:
            - session
          type: 
            - start 
        OpenControlChannel:
          category:
            - session
          type: 
            - start 
        CreateDataChannel:
          category:
            - session
          type: 
            - start 
        OpenDataChannel:
          category:
            - session
          type: 
            - start
        TerminateSession:
          category:
            - session
          type: 
            - end 
        ListObjects:
          category:
            - file
          type: 
            - info
        HeadObject:
          category:
            - file
          type: 
            - info
        GetObject:
          category:
            - file
          type: 
            - info
        PutObject:
          category:
            - file
          type: 
            - change
        DeleteTrail:
          category:
            - configuration
          type: 
            - deletion
        DeleteObject:
          category:
            - file
          type: 
            - delete
      source: >-
        ctx.event.kind = 'event';
        ctx.event.type = ['info'];

        if (ctx?.aws?.cloudtrail?.error_code != null || ctx?.aws?.cloudtrail?.error_message != null) {
            ctx.event.outcome = 'failure'
        } else {
            ctx.event.outcome = 'success'
        }

        if (ctx?.event?.action == null) {
            return;
        }

        if (ctx.event.action == 'ConsoleLogin' && ctx?.aws?.cloudtrail?.flattened?.response_elements.ConsoleLogin != null) {
            ctx.event.outcome = Processors.lowercase(ctx.aws.cloudtrail.flattened.response_elements.ConsoleLogin);
        }

        if (params.get(ctx.event.action) == null) {
            return;
        }

        def hm = new HashMap(params.get(ctx.event.action));
        hm.forEach((k, v) -> ctx.event[k] = v);

  - rename:
      field: json.awsAccountId
      target_field: cloud.account.id
      ignore_failure: true
  - rename:
      field: json.digestS3Object
      target_field: file.path
      ignore_failure: true
  - rename:
      field: json.previousDigestSignature
      target_field: file.hash.sha256
      if: >-
        ctx.json?.previousDigestHashAlgorithm != null && ctx.json?.previousDigestHashAlgorithm == 'SHA-256'
  - append:
      field: related.hash
      value: '{{file.hash.sha256}}'
      if: ctx.file?.hash?.sha256 != null
  - rename:
      field: json.logFiles
      target_field: aws.cloudtrail.digest.log_files
      ignore_failure: true
  - date:
      field: json.digestStartTime
      target_field: aws.cloudtrail.digest.start_time
      ignore_failure: true
      formats:
        - ISO8601
  - date:
      field: json.digestEndTime
      target_field: "@timestamp"
      ignore_failure: true
      formats:
        - ISO8601
  - date:
      field: json.digestEndTime
      target_field: aws.cloudtrail.digest.end_time
      ignore_failure: true
      formats:
        - ISO8601
  - rename:
      field: json.digestS3Bucket
      target_field: aws.cloudtrail.digest.s3_bucket
      ignore_failure: true
  - date:
      field: json.newestEventTime
      target_field: aws.cloudtrail.digest.newest_event_time
      ignore_failure: true
      formats:
        - ISO8601
  - date:
      field: json.oldestEventTime
      target_field: aws.cloudtrail.digest.oldest_event_time
      ignore_failure: true
      formats:
        - ISO8601
  - rename:
      field: json.previousDigestS3Bucket
      target_field: aws.cloudtrail.digest.previous_s3_bucket
      ignore_failure: true
  - rename:
      field: json.previousDigestHashAlgorithm
      target_field: aws.cloudtrail.digest.previous_hash_algorithm
      ignore_failure: true
  - rename:
      field: json.publicKeyFingerprint
      target_field: aws.cloudtrail.digest.public_key_fingerprint
      ignore_failure: true
  - rename:
      field: json.digestSignatureAlgorithm
      target_field: aws.cloudtrail.digest.signature_algorithm
      ignore_failure: true
  - rename:
      field: json.insightDetails
      target_field: aws.cloudtrail.insight_details
      ignore_failure: true
  - set:
      field: group.id
      value: '{{aws.cloudtrail.flattened.response_elements.group.groupId}}'
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: user.target.id
      value: '{{aws.cloudtrail.flattened.response_elements.user.userId}}'
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: user.changes.name
      value: '{{aws.cloudtrail.flattened.request_parameters.newUserName}}'
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: group.name
      value: '{{aws.cloudtrail.flattened.request_parameters.groupName}}'
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: user.target.name
      value: '{{aws.cloudtrail.flattened.request_parameters.userName}}'
      ignore_empty_value: true
      ignore_failure: true
  - rename:
      field: aws.cloudtrail.digest
      target_field: aws.cloudtrail.flattened.digest
      ignore_missing: true
  - rename:
      field: aws.cloudtrail.insight_details
      target_field: aws.cloudtrail.flattened.insight_details
      ignore_missing: true
  - dissect:
      field: json.tlsDetails.tlsVersion
      pattern: "%{tls.version_protocol}v%{tls.version}"
      ignore_missing: true
  - lowercase:
      field: tls.version_protocol
      ignore_missing: true
  - rename:
      field: json.tlsDetails.cipherSuite
      target_field: tls.cipher
      ignore_missing: true
  - rename:
      field: json.tlsDetails.clientProvidedHostHeader
      target_field: tls.client.server_name
      ignore_missing: true
  - remove:
      field: json
      ignore_missing: true
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: >-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{{#_ingest.on_failure_processor_tag}}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{{/_ingest.on_failure_processor_tag}}}failed with message '{{{ _ingest.on_failure_message }}}'
