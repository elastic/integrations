---
description: Pipeline for AWS CloudTrail Logs
processors:
  - rename:
      field: message
      target_field: event.original
      if: 'ctx.event?.original == null'
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: 'ctx.event?.original != null'
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - set:
      if: ctx['@timestamp'] != null
      field: event.created
      copy_from: '@timestamp'
  - json:
      field: event.original
      target_field: json
  - pipeline:
      if: ctx?.json?.preview != null
      name: '{{ IngestPipeline "third-party" }}'
  - set:
      field: ecs.version
      value: '8.11.0'
  - date:
      field: json.eventTime
      target_field: "@timestamp"
      ignore_failure: true
      formats:
        - ISO8601
  - script:
      description: Drops null/empty values recursively
      lang: painless
      source: |
        boolean drop(Object o) {
          if (o == null || o == "") {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  # Before renames because some json fields are mutated on the process
  - append:
      field: related.entity
      description: Appends any relevant entity to `related.entity`
      allow_duplicates: false
      value: # Alphabetically sorted
      - '{{json.userIdentity.sessionContext.sessionIssuer.arn}}'
      - '{{json.requestParameters.instancesSet.items.instanceId}}'
      - '{{json.userIdentity.arn}}'
      - '{{json.resources.ARN}}'
      - '{{json.requestParameters.roleArn}}'
      - '{{json.responseElements.assumedRoleUser.arn}}'
      - '{{json.requestParameters.topicArn}}'
      - '{{json.requestParameters.roleSessionName}}'
      - '{{json.requestParameters.resourceArn}}'
      - '{{json.requestParameters.subnetSet.items.subnetId}}'
      - '{{json.requestParameters.DescribeLaunchTemplateVersionsRequest.LaunchTemplateId}}'
      - '{{json.requestParameters.filterSet.items.valueSet.items.value}}'
      - '{{json.requestParameters.securityGroupIdSet.items.groupId}}'
      - '{{json.requestParameters.snapshotId}}'
      - '{{json.requestParameters.snapshotSet.items.snapshotId}}'
      - '{{json.requestParameters.resourceArns}}'
      - '{{json.requestParameters.CreateSnapshotsRequest.InstanceSpecification.InstanceId}}'
      - '{{json.responseElements.CreateSnapshotsResponse.snapshotSet.item.snapshotId}}'
      - '{{json.responseElements.CreateSnapshotsResponse.snapshotSet.item.volumeId}}'
      - '{{json.requestParameters.DescribeSecurityGroupRulesRequest.Filter.Value.content}}'
      - '{{json.requestParameters.vpcSet.items.vpcId}}'
      - '{{json.requestParameters.tableName}}'
      - '{{json.requestParameters.loadBalancerArn}}'
      - '{{json.requestParameters.targetGroupArn}}'
      - '{{json.requestParameters.loadBalancerArns}}'
      - '{{json.requestParameters.resourceTypeFilters}}'
      - '{{json.requestParameters.resourceARNList}}'
      - '{{json.requestParameters.resourceKeys.resourceId}}'
      - '{{json.requestParameters.evaluations.complianceResourceId}}'
      - '{{json.additionalEventData.configRuleArn}}'
      - '{{json.requestParameters.imagesSet.items.imageId}}'
      - '{{json.requestParameters.networkInterfaceIdSet.items.networkInterfaceId}}'
      - '{{json.requestParameters.volumeSet.items.volumeId}}'
      - '{{json.requestParameters.name}}'
      - '{{json.requestParameters.DescribeInstanceCreditSpecificationsRequest.InstanceId.content}}'
      - '{{json.requestParameters.DescribeReplaceRootVolumeTasksRequest.Filter.Value.content}}'
      - '{{json.requestParameters.instanceId}}'
      - '{{json.requestParameters.filters.values}}'
      - '{{json.requestParameters.resourceARN}}'
      - '{{json.requestParameters.stackName}}'
      - '{{json.requestParameters.listenerArn}}'
      - '{{json.requestParameters.AssociateIamInstanceProfileRequest.InstanceId}}'
      - '{{json.responseElements.AssociateIamInstanceProfileResponse.iamInstanceProfileAssociation.iamInstanceProfile.arn}}'
      - '{{json.requestParameters.AssociateIamInstanceProfileRequest.IamInstanceProfile.Arn}}'
      - '{{json.responseElements.AssociateIamInstanceProfileResponse.iamInstanceProfileAssociation.instanceId}}'
      - '{{json.requestParameters.DescribeIamInstanceProfileAssociationsRequest.Filter.Value.content}}'
      - '{{json.requestParameters.fileSystemId}}'
      - '{{json.requestParameters.GetLaunchTemplateDataRequest.InstanceId}}'
      - '{{json.requestParameters.trailName}}'
      - '{{json.requestParameters.resourceName}}'
      - '{{json.requestParameters.certificateArn}}'
      - '{{json.requestParameters.fingerprint}}'
      - '{{json.responseElements.instanceId}}'
      - '{{json.serviceEventDetails.snapshotId}}'
      - '{{json.responseElements.instancesSet.items.networkInterfaceSet.items.networkInterfaceId}}'
      - '{{json.responseElements.instancesSet.items.networkInterfaceSet.items.vpcId}}'
      - '{{json.responseElements.instancesSet.items.subnetId}}'
      - '{{json.responseElements.instancesSet.items.groupSet.items.groupId}}'
      - '{{json.responseElements.instancesSet.items.networkInterfaceSet.items.subnetId}}'
      - '{{json.requestParameters.instancesSet.items.imageId}}'
      - '{{json.responseElements.reservationId}}'
      - '{{json.responseElements.instancesSet.items.vpcId}}'
      - '{{json.responseElements.instancesSet.items.instanceId}}'
      - '{{json.requestParameters.networkInterfaceSet.items.groupSet.items.groupId}}'
      - '{{json.responseElements.instancesSet.items.imageId}}'
      - '{{json.responseElements.instancesSet.items.networkInterfaceSet.items.groupSet.items.groupId}}'
      - '{{json.responseElements.securityGroupRuleSet.items.groupId}}'
      - '{{json.requestParameters.groupId}}'
      - '{{json.responseElements.securityGroupRuleSet.items.securityGroupRuleId}}'
      - '{{json.responseElements.groupId}}'
      - '{{json.requestParameters.vpcId}}'
      - '{{json.requestParameters.keyId}}'
      - '{{json.requestParameters.encryptionContext.aws:ebs:id}}'
      - '{{json.responseElements.keyPairId}}'
      - '{{json.requestParameters.infrastructureConfigurationArn}}'
      - '{{json.requestParameters.secretId}}'
      - '{{json.requestParameters.encryptionContext.aws:dynamodb:tableName}}'
      - '{{json.requestParameters.routeTableIdSet.items.routeTableId}}'
      - '{{json.requestParameters.DescribeNatGatewaysRequest.NatGatewayId.content}}'
      - '{{json.requestParameters.internetGatewayIdSet.items.internetGatewayId}}'
      - '{{json.requestParameters.resourceIdList}}'
      - '{{json.requestParameters.networkAclIdSet.items.networkAclId}}'
      - '{{json.requestParameters.allocationIdsSet.items.allocationId}}'
      - '{{json.responseElements.keyId}}'
      - '{{json.requestParameters.allocationId}}'
      - '{{json.requestParameters.subnetId}}'
      - '{{json.requestParameters.internetGatewayId}}'
      - '{{json.requestParameters.DescribeFlowLogsRequest.Filter.Value.content}}'
      - '{{json.responseElements.CreateNetworkInterfacePermissionResponse.interfacePermission.networkInterfaceId}}'
      - '{{json.requestParameters.CreateNetworkInterfacePermissionRequest.NetworkInterfaceId}}'
      - '{{json.responseElements.networkInterface.groupSet.items.groupId}}'
      - '{{json.responseElements.networkInterface.subnetId}}'
      - '{{json.requestParameters.groupSet.items.groupId}}'
      - '{{json.responseElements.networkInterface.networkInterfaceId}}'
      - '{{json.responseElements.networkInterface.vpcId}}'
      - '{{json.requestParameters.routeTableId}}'
      - '{{json.requestParameters.DeleteNatGatewayRequest.NatGatewayId}}'
      - '{{json.responseElements.DeleteNatGatewayResponse.natGatewayId}}'
      - '{{json.requestParameters.associationId}}'
      - '{{json.requestParameters.DescribeLaunchTemplatesRequest.LaunchTemplateId.content}}'
      - '{{json.requestParameters.vpcSet.item.vpcId}}'
      - '{{json.requestParameters.DescribeVpcClassicLinkDnsSupportRequest.VpcIds.content}}'
      - '{{json.responseElements.revokedSecurityGroupRuleSet.items.referencedGroupId}}'
      - '{{json.requestParameters.ipPermissions.items.groups.items.groupId}}'
      - '{{json.responseElements.revokedSecurityGroupRuleSet.items.securityGroupRuleId}}'
      - '{{json.responseElements.revokedSecurityGroupRuleSet.items.groupId}}'
      - '{{json.vpcEndpointId}}'
      - '{{json.requestParameters.networkInterfaceId}}'
      - '{{json.responseElements.cluster.tags.project}}'
      - '{{json.responseElements.cluster.resourcesVpcConfig.clusterSecurityGroupId}}'
      - '{{json.responseElements.cluster.roleArn}}'
      - '{{json.responseElements.cluster.arn}}'
      - '{{json.responseElements.cluster.tags.owner}}'
      - '{{json.responseElements.cluster.resourcesVpcConfig.securityGroupIds}}'
      - '{{json.responseElements.cluster.resourcesVpcConfig.subnetIds}}'
      - '{{json.responseElements.cluster.resourcesVpcConfig.vpcId}}'
      - '{{json.responseElements.DeleteLaunchTemplateResponse.launchTemplate.launchTemplateId}}'
      - '{{json.responseElements.DeleteLaunchTemplateResponse.launchTemplate.createdBy}}'
      - '{{json.requestParameters.DeleteLaunchTemplateRequest.LaunchTemplateId}}'
      - '{{json.requestParameters.resourcesSet.items.resourceId}}'
      - '{{json.requestParameters.serviceNamespace}}'
      - '{{json.requestParameters.functionName}}'
      - '{{json.requestParameters.targets.arn}}'
      - '{{json.responseElements.ruleArn}}'
      - '{{json.requestParameters.tagSet.items.value}}'
      - '{{json.responseElements.nodegroup.tags.project}}'
      - '{{json.responseElements.nodegroup.launchTemplate.id}}'
      - '{{json.responseElements.nodegroup.nodegroupArn}}'
      - '{{json.responseElements.nodegroup.subnets}}'
      - '{{json.responseElements.nodegroup.tags.owner}}'
      - '{{json.responseElements.nodegroup.nodeRole}}'
      - '{{json.requestParameters.trailNameList}}'
      - '{{json.requestParameters.DescribeFlowLogsRequest.Filter.Value.content}}'
      - '{{json.requestParameters.DescribeFlowLogsRequest.Filter.Value.content}}'
      - '{{json.requestParameters.autoScalingConfigurationArn}}'
      - '{{json.userIdentity.principalId}}'
      - '{{json.userIdentity.identityProvider}}'
      - '{{json.responseElements.provider}}'
      - '{{json.userIdentity.sessionContext.webIdFederationData.federatedProvider}}'
      - '{{json.responseElements.domainConfigurationArn}}'
      - '{{json.responseElements.domainConfigurations.domainConfigurationArn}}'
      - '{{json.additionalEventData.lakeFormationPrincipal}}'
      - '{{json.requestParameters.analyzerArn}}'
      - '{{json.requestParameters.resource}}'
      - '{{json.requestParameters.Group}}'
      - '{{json.requestParameters.DescribeNetworkInsightsPathsRequest.NetworkInsightsPathId.content}}'
      - '{{json.requestParameters.resourceOwner}}'
      - '{{json.serviceEventDetails.resourceArn}}'
      - '{{json.serviceEventDetails.recoveryPointArn}}'
      - '{{json.serviceEventDetails.backupVaultArn}}'
      - '{{json.serviceEventDetails.iamRoleArn}}'
      - '{{json.requestParameters.recoveryPointArn}}'
      - '{{json.requestParameters.associationFilterList.value}}'
      - '{{json.requestParameters.uniqueId}}'
      - '{{json.requestParameters.tagSpecificationSet.items.tags.value}}'
      - '{{json.responseElements.instancesSet.items.tagSet.items.value}}'
      - '{{json.responseElements.instancesSet.items.iamInstanceProfile.arn}}'
      - '{{json.responseElements.stackId}}'
      - '{{json.requestParameters.taskDefinition}}'
      - '{{json.requestParameters.targetGroupArns}}'
      - '{{json.requestParameters.DescribeSecurityGroupRulesRequest.Filter.Value.content}}'
      - '{{json.requestParameters.identifier}}'
      - '{{json.requestParameters.dhcpOptionsSet.items.dhcpOptionsId}}'
      - '{{json.requestParameters.listenerArns}}'
      - '{{json.requestParameters.distributionConfigurationArn}}'
      - '{{json.requestParameters.keyPairIdSet.items.keyPairId}}'
      - '{{json.responseElements.networkInterfaceId}}'
      - '{{json.responseElements.networkInterface.tagSet.items.value}}'
      - '{{json.requestParameters.CreateFleetRequest.LaunchTemplateConfigs.LaunchTemplateSpecification.LaunchTemplateId}}'
      - '{{json.requestParameters.CreateFleetRequest.TagSpecification.Tag.Value}}'
      - '{{json.responseElements.CreateFleetResponse.fleetInstanceSet.item.launchTemplateAndOverrides.overrides.subnetId}}'
      - '{{json.responseElements.CreateFleetResponse.fleetInstanceSet.item.instanceIds.item}}'
      - '{{json.requestParameters.CreateFleetRequest.LaunchTemplateConfigs.Overrides.SubnetId}}'
      - '{{json.responseElements.CreateFleetResponse.fleetInstanceSet.item.launchTemplateAndOverrides.launchTemplateSpecification.launchTemplateId}}'
      - '{{json.requestParameters.launchTemplate.launchTemplateId}}'
      - '{{json.requestParameters.topicARN}}'
      - '{{json.requestParameters.lifecycleHookSpecificationList.notificationTargetARN}}'
      - '{{json.requestParameters.mixedInstancesPolicy.launchTemplate.launchTemplateSpecification.launchTemplateId}}'
      - '{{json.requestParameters.tags.value}}'
      - '{{json.requestParameters.CreateLaunchTemplateRequest.LaunchTemplateData.SecurityGroupId.content}}'
      - '{{json.requestParameters.CreateLaunchTemplateRequest.TagSpecification.Tag.Value}}'
      - '{{json.requestParameters.CreateLaunchTemplateRequest.LaunchTemplateData.TagSpecification.Tag.Value}}'
      - '{{json.responseElements.CreateLaunchTemplateResponse.launchTemplate.tagSet.item.value}}'
      - '{{json.responseElements.CreateLaunchTemplateResponse.launchTemplate.createdBy}}'
      - '{{json.requestParameters.CreateLaunchTemplateRequest.LaunchTemplateData.ImageId}}'
      - '{{json.responseElements.CreateLaunchTemplateResponse.launchTemplate.launchTemplateId}}'
      - '{{json.requestParameters.CreateLaunchTemplateRequest.TagSpecification.ResourceType}}'
      - '{{json.responseElements.nodegroup.tags.deployment}}'
      - '{{json.requestParameters.subnets}}'
      - '{{json.requestParameters.tags.project}}'
      - '{{json.responseElements.nodegroup.clusterName}}'
      - '{{json.requestParameters.tags.deployment}}'
      - '{{json.requestParameters.tags.owner}}'
      - '{{json.requestParameters.nodeRole}}'
      - '{{json.requestParameters.natGatewayId}}'
      - '{{json.responseElements.securityGroupRuleSet.items.referencedGroupInfo.groupId}}'
      - '{{json.requestParameters.resourcesVpcConfig.securityGroupIds}}'
      - '{{json.requestParameters.resourcesVpcConfig.subnetIds}}'
      - '{{json.responseElements.cluster.name}}'
      - '{{json.responseElements.cluster.tags.deployment}}'
      - '{{json.responseElements.associationId}}'
      - '{{json.requestParameters.CreateNatGatewayRequest.SubnetId}}'
      - '{{json.responseElements.CreateNatGatewayResponse.natGateway.vpcId}}'
      - '{{json.requestParameters.CreateNatGatewayRequest.AllocationId}}'
      - '{{json.responseElements.CreateNatGatewayResponse.natGateway.natGatewayId}}'
      - '{{json.responseElements.CreateNatGatewayResponse.natGateway.subnetId}}'
      - '{{json.responseElements.CreateNatGatewayResponse.natGateway.natGatewayAddressSet.item.allocationId}}'
      - '{{json.responseElements.subnet.subnetId}}'
      - '{{json.responseElements.subnet.subnetArn}}'
      - '{{json.responseElements.subnet.vpcId}}'
      - '{{json.requestParameters.gatewayId}}'
      - '{{json.responseElements.internetGateway.internetGatewayId}}'
      - '{{json.responseElements.routeTable.routeTableId}}'
      - '{{json.responseElements.routeTable.vpcId}}'
      - '{{json.responseElements.tagSet.items.value}}'
      - '{{json.requestParameters.granteePrincipal}}'
      - '{{json.requestParameters.constraints.encryptionContextSubset.aws:ebs:id}}'
      - '{{json.requestParameters.sourceEncryptionContext.aws:ebs:id}}'
      - '{{json.requestParameters.destinationEncryptionContext.aws:ebs:id}}'
      - '{{json.requestParameters.destinationKeyId}}'
      - '{{json.responseElements.vpc.dhcpOptionsId}}'
      - '{{json.responseElements.vpc.vpcId}}'
      - '{{json.responseElements.allocationId}}'
      - '{{json.requestParameters.GetSubnetCidrReservationsRequest.SubnetId}}'
      - '{{json.requestParameters.DescribeNatGatewaysRequest.NatGatewayId.content}}'
  - script:
      description: Ensure that only arns and resource ids are present on related.entity
      lang: painless
      source: |
        def resourceIdPattern = /^[a-zA-Z]+-([a-zA-Z0-9]{17}|[a-zA-Z0-9]{8})$/; 
        ctx.related.entity.removeIf(v -> v == null || v == "" || (!v.startsWith("arn:") && !resourceIdPattern.matcher(v).matches()));
  - rename:
      field: json.eventVersion
      target_field: aws.cloudtrail.event_version
      ignore_failure: true
  - rename:
      field: json.userIdentity.type
      target_field: aws.cloudtrail.user_identity.type
      ignore_failure: true
  - append:
      field: related.user
      value: '{{json.userIdentity.userName}}'
      allow_duplicates: false
      if: ctx.json?.userIdentity?.userName != null
  - rename:
      field: json.userIdentity.userName
      target_field: user.name
      ignore_failure: true
  - rename:
      field: json.userIdentity.principalId
      target_field: user.id
      ignore_failure: true
  - rename:
      field: json.userIdentity.arn
      target_field: aws.cloudtrail.user_identity.arn
      ignore_failure: true
  - rename:
      field: json.userIdentity.accountId
      target_field: cloud.account.id
      ignore_failure: true
  - rename:
      field: json.userIdentity.accessKeyId
      target_field: aws.cloudtrail.user_identity.access_key_id
      ignore_failure: true
  - rename:
      field: json.userIdentity.sessionContext.attributes.mfaAuthenticated
      target_field: aws.cloudtrail.user_identity.session_context.mfa_authenticated
      ignore_failure: true
  - date:
      field: json.userIdentity.sessionContext.attributes.creationDate
      target_field: aws.cloudtrail.user_identity.session_context.creation_date
      ignore_failure: true
      formats:
        - ISO8601
  - rename:
      field: json.userIdentity.sessionContext.sessionIssuer.type
      target_field: aws.cloudtrail.user_identity.session_context.session_issuer.type
      ignore_failure: true
  # userIdentity.sessionIssuer.userName is only set with assumed roles.
  - rename:
      field: json.userIdentity.sessionContext.sessionIssuer.userName
      target_field: user.name
      ignore_failure: true
  - rename:
      field: json.userIdentity.sessionContext.sessionIssuer.principalId
      target_field: aws.cloudtrail.user_identity.session_context.session_issuer.principal_id
      ignore_failure: true
  - rename:
      field: json.userIdentity.sessionContext.sessionIssuer.arn
      target_field: aws.cloudtrail.user_identity.session_context.session_issuer.arn
      ignore_failure: true
  - rename:
      field: json.userIdentity.sessionContext.sessionIssuer.accountId
      target_field: aws.cloudtrail.user_identity.session_context.session_issuer.account_id
      ignore_failure: true
  - rename:
      field: json.userIdentity.invokedBy
      target_field: aws.cloudtrail.user_identity.invoked_by
      ignore_failure: true
  - rename:
      field: json.eventSource
      target_field: event.provider
      ignore_failure: true
  - set:
      field: event.action
      value: '{{json.eventName}}'
      ignore_failure: true
      ignore_empty_value: true
  - rename:
      field: json.eventCategory
      target_field: aws.cloudtrail.event_category
      ignore_failure: true
  - set:
      field: cloud.region
      copy_from: json.awsRegion
      ignore_empty_value: true
  - rename:
      field: json.sourceIPAddress
      target_field: source.address
      ignore_failure: true
  - grok:
      field: source.address
      ignore_failure: true
      patterns:
        - ^%{IP:source.ip}$
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_failure: true
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - user_agent:
      field: json.userAgent
      target_field: user_agent
      on_failure:
        - rename:
            field: json.userAgent
            target_field: user_agent.original
            ignore_failure: true
  - rename:
      field: json.errorCode
      target_field: aws.cloudtrail.error_code
      ignore_failure: true
  - rename:
      field: json.errorMessage
      target_field: aws.cloudtrail.error_message
      ignore_failure: true
  - script:
      lang: painless
      source: |
        if (ctx.aws.cloudtrail?.flattened == null) {
            Map map = new HashMap();
            ctx.aws.cloudtrail.put("flattened", map);
          }
        if (ctx.json?.requestParameters != null) {
          ctx.aws.cloudtrail.request_parameters = ctx.json.requestParameters.toString();
          if (ctx.aws.cloudtrail.request_parameters.length() < 32766) {
            ctx.aws.cloudtrail.flattened.put("request_parameters", ctx.json.requestParameters);
          }
        }
        if (ctx.json?.responseElements != null) {
          ctx.aws.cloudtrail.response_elements = ctx.json.responseElements.toString();
          if (ctx.aws.cloudtrail.response_elements.length() < 32766) {
            ctx.aws.cloudtrail.flattened.put("response_elements", ctx.json.responseElements);
          }
        }
        if (ctx.json?.additionalEventData != null) {
          ctx.aws.cloudtrail.additional_eventdata = ctx.json.additionalEventData.toString();
          if (ctx.aws.cloudtrail.additional_eventdata.length() < 32766) {
            ctx.aws.cloudtrail.flattened.put("additional_eventdata", ctx.json.additionalEventData);
          }
        }
        if (ctx.json?.serviceEventDetails != null) {
          ctx.aws.cloudtrail.service_event_details = ctx.json.serviceEventDetails.toString();
          if (ctx.aws.cloudtrail.service_event_details.length() < 32766) {
            ctx.aws.cloudtrail.flattened.put("service_event_details", ctx.json.serviceEventDetails);
          }
        }
      ignore_failure: true
  - rename:
      field: json.requestID
      target_field: aws.cloudtrail.request_id
      ignore_failure: true
  - rename:
      field: json.eventID
      target_field: event.id
      ignore_failure: true
  - rename:
      field: json.eventType
      target_field: aws.cloudtrail.event_type
      ignore_failure: true
  - rename:
      field: json.apiVersion
      target_field: aws.cloudtrail.api_version
      ignore_failure: true
  - rename:
      field: json.managementEvent
      target_field: aws.cloudtrail.management_event
      ignore_failure: true
  - rename:
      field: json.readOnly
      target_field: aws.cloudtrail.read_only
      ignore_failure: true
  - script:
      description: 'Drops duplicates where the same combination of ARN, accountId and type is found multiple times in the resources list.'
      lang: painless
      source: >
        if (ctx.json?.resources instanceof List) {
              def resources = ctx.json.resources;
              
              Map uniqueResources = new HashMap();
              for (def originalResource : resources) {
                if (originalResource instanceof Map) {
                  Map resource = new HashMap();
                  resource.putAll(originalResource);
                  if (resource.containsKey('ARN')) {
                    resource['arn'] = resource.remove('ARN');
                  }
                  if (resource.containsKey('accountId')) {
                    resource['account_id'] = resource.remove('accountId');
                  }
                  String key = (resource.containsKey('arn') ? resource.arn : '') + '_' +
                               (resource.containsKey('account_id') ? resource.account_id : '') + '_' +
                               (resource.containsKey('type') ? resource.type : '');
                  uniqueResources[key] = resource;
                }
              }
             ctx.json.resources = new ArrayList(uniqueResources.values());
            }
  - rename:
      field: json.resources
      target_field: aws.cloudtrail.resources
      ignore_failure: true
  - rename:
      field: json.recipientAccountId
      target_field: aws.cloudtrail.recipient_account_id
      ignore_failure: true
  - rename:
      field: json.sharedEventId
      target_field: aws.cloudtrail.shared_event_id
      ignore_failure: true
  - rename:
      field: json.vpcEndpointId
      target_field: aws.cloudtrail.vpc_endpoint_id
      ignore_failure: true
  - append:
      field: related.user
      value: '{{aws.cloudtrail.flattened.request_parameters.userName}}'
      allow_duplicates: false
      if: ctx.aws?.cloudtrail?.flattened?.request_parameters?.userName != null
  - append:
      field: related.user
      value: '{{aws.cloudtrail.flattened.request_parameters.newUserName}}'
      allow_duplicates: false
      if: ctx.aws?.cloudtrail?.flattened?.request_parameters?.newUserName != null
  - script:
      lang: painless
      ignore_failure: true
      source: >-
        if (ctx.json?.eventName != 'ConsoleLogin') {
          return;
        }
        Map aed_map = new HashMap();
        if (ctx?.aws?.cloudtrail?.flattened?.additional_eventdata?.MobileVersion != null) {
          if (ctx.aws.cloudtrail.flattened.additional_eventdata.MobileVersion == 'No') {
            aed_map.put("mobile_version", false);
          } else {
            aed_map.put("mobile_version", true);
          }
        }
        if (ctx?.aws?.cloudtrail?.flattened?.additional_eventdata?.LoginTo != null) {
          aed_map.put("login_to", ctx.aws.cloudtrail.flattened.additional_eventdata.LoginTo);
        }
        if (ctx?.aws?.cloudtrail?.flattened?.additional_eventdata?.MFAUsed != null) {
          if (ctx.aws.cloudtrail.flattened.additional_eventdata.MFAUsed == 'No') {
            aed_map.put("mfa_used", false);
          } else {
            aed_map.put("mfa_used", true);
          }
        }
        if (aed_map.size() > 0) {
          Map cl_map = new HashMap();
          cl_map.put("additional_eventdata", aed_map);
          ctx.aws.cloudtrail.put("console_login", cl_map);
        }
  - script:
      lang: painless
      tag: Add ECS categorization
      params:
        AddUserToGroup:
          category:
            - iam
          type:
            - group
            - change
        AssumeRole:
          category:
            - authentication
          type:
            - info
        AttachGroupPolicy:
          category:
            - iam
          type:
            - group
            - change
        AttachUserPolicy:
          category:
            - iam
          type:
            - user
            - change
        ChangePassword:
          category:
            - iam
          type:
            - user
            - change
        ConsoleLogin:
          category:
            - authentication
          type:
            - info
        CreateAccessKey:
          category:
            - iam
          type:
            - user
            - change
        CreateBucket:
          category:
            - file
          type:
            - creation
        CreateGroup:
          category:
            - iam
          type:
            - group
            - creation
        CreateKeyPair:
          category:
            - iam
          type:
            - admin
            - creation
        CreateUser:
          category:
            - iam
          type:
            - user
            - creation
        CreateVirtualMFADevice:
          category:
            - iam
          type:
            - user
            - change
        DeactivateMFADevice:
          category:
            - iam
          type:
            - user
            - change
        DeleteAccessKey:
          category:
            - iam
          type:
            - user
            - change
        DeleteBucket:
          category:
            - file
          type:
            - deletion
        DeleteGroup:
          category:
            - iam
          type:
            - group
            - deletion
        DeleteGroupPolicy:
          category:
            - iam
          type:
            - group
            - change
        DeleteSSHPublicKey:
          category:
            - iam
          type:
            - user
            - change
        DeleteUser:
          category:
            - iam
          type:
            - user
            - deletion
        DeleteUserPermissionsBoundary:
          category:
            - iam
          type:
            - user
            - change
        DeleteUserPolicy:
          category:
            - iam
          type:
            - user
            - change
        DeleteVirtualMFADevice:
          category:
            - iam
          type:
            - user
            - change
        DetachGroupPolicy:
          category:
            - iam
          type:
            - group
            - change
        DetachUserPolicy:
          category:
            - iam
          type:
            - user
            - change
        EnableMFADevice:
          category:
            - iam
          type:
            - user
            - change
        GetGroup:
          category:
            - iam
          type:
            - group
            - info
        GetGroupPolicy:
          category:
            - iam
          type:
            - group
            - info
        GetUser:
          category:
            - iam
          type:
            - user
            - info
        GetUserPolicy:
          category:
            - iam
          type:
            - user
            - info
        ListAttachedGroupPolicies:
          category:
            - iam
          type:
            - group
            - info
        ListAttachedUserPolicies:
          category:
            - iam
          type:
            - user
            - info
        ListGroupPolicies:
          category:
            - iam
          type:
            - group
            - info
        ListGroups:
          category:
            - iam
          type:
            - group
            - info
        ListGroupsForUser:
          category:
            - iam
          type:
            - user
            - info
        ListUserPolicies:
          category:
            - iam
          type:
            - user
            - info
        ListUsers:
          category:
            - iam
          type:
            - user
            - info
        ListUserTags:
          category:
            - iam
          type:
            - user
            - info
        PutGroupPolicy:
          category:
            - iam
          type:
            - group
            - change
        PutUserPermissionsBoundary:
          category:
            - iam
          type:
            - user
            - change
        PutUserPolicy:
          category:
            - iam
          type:
            - user
            - change
        RemoveUserFromGroup:
          category:
            - iam
          type:
            - group
            - change
        SetDefaultPolicyVersion:
          category:
            - iam
          type:
            - admin
            - change
        SetSecurityTokenServicePreferences:
          category:
            - iam
          type:
            - admin
            - change
        TagUser:
          category:
            - iam
          type:
            - user
            - change
        UntagUser:
          category:
            - iam
          type:
            - user
            - change
        UpdateAccessKey:
          category:
            - iam
          type:
            - user
            - change
        UpdateAccountPasswordPolicy:
          category:
            - iam
          type:
            - admin
            - change
        UpdateGroup:
          category:
            - iam
          type:
            - group
            - change
        UpdateLoginProfile:
          category:
            - iam
          type:
            - user
            - change
        UpdateRole:
          category:
            - iam
          type:
            - admin
            - change
        UpdateSSHPublicKey:
          category:
            - iam
          type:
            - user
            - change
        UpdateUser:
          category:
            - iam
          type:
            - user
            - change
      source: >-
        ctx.event.kind = 'event';
        ctx.event.type = ['info'];

        if (ctx?.aws?.cloudtrail?.error_code != null || ctx?.aws?.cloudtrail?.error_message != null) {
            ctx.event.outcome = 'failure'
        } else {
            ctx.event.outcome = 'success'
        }

        if (ctx?.event?.action == null) {
            return;
        }

        if (ctx.event.action == 'ConsoleLogin' && ctx?.aws?.cloudtrail?.flattened?.response_elements.ConsoleLogin != null) {
            ctx.event.outcome = Processors.lowercase(ctx.aws.cloudtrail.flattened.response_elements.ConsoleLogin);
        }

        if (params.get(ctx.event.action) == null) {
            return;
        }

        def hm = new HashMap(params.get(ctx.event.action));
        hm.forEach((k, v) -> ctx.event[k] = v);

  - rename:
      field: json.awsAccountId
      target_field: cloud.account.id
      ignore_failure: true
  - rename:
      field: json.digestS3Object
      target_field: file.path
      ignore_failure: true
  - rename:
      field: json.previousDigestSignature
      target_field: file.hash.sha256
      if: >-
        ctx.json?.previousDigestHashAlgorithm != null && ctx.json?.previousDigestHashAlgorithm == 'SHA-256'
  - append:
      field: related.hash
      value: '{{file.hash.sha256}}'
      if: ctx.file?.hash?.sha256 != null
  - rename:
      field: json.logFiles
      target_field: aws.cloudtrail.digest.log_files
      ignore_failure: true
  - date:
      field: json.digestStartTime
      target_field: aws.cloudtrail.digest.start_time
      ignore_failure: true
      formats:
        - ISO8601
  - date:
      field: json.digestEndTime
      target_field: "@timestamp"
      ignore_failure: true
      formats:
        - ISO8601
  - date:
      field: json.digestEndTime
      target_field: aws.cloudtrail.digest.end_time
      ignore_failure: true
      formats:
        - ISO8601
  - rename:
      field: json.digestS3Bucket
      target_field: aws.cloudtrail.digest.s3_bucket
      ignore_failure: true
  - date:
      field: json.newestEventTime
      target_field: aws.cloudtrail.digest.newest_event_time
      ignore_failure: true
      formats:
        - ISO8601
  - date:
      field: json.oldestEventTime
      target_field: aws.cloudtrail.digest.oldest_event_time
      ignore_failure: true
      formats:
        - ISO8601
  - rename:
      field: json.previousDigestS3Bucket
      target_field: aws.cloudtrail.digest.previous_s3_bucket
      ignore_failure: true
  - rename:
      field: json.previousDigestHashAlgorithm
      target_field: aws.cloudtrail.digest.previous_hash_algorithm
      ignore_failure: true
  - rename:
      field: json.publicKeyFingerprint
      target_field: aws.cloudtrail.digest.public_key_fingerprint
      ignore_failure: true
  - rename:
      field: json.digestSignatureAlgorithm
      target_field: aws.cloudtrail.digest.signature_algorithm
      ignore_failure: true
  - rename:
      field: json.insightDetails
      target_field: aws.cloudtrail.insight_details
      ignore_failure: true
  - set:
      field: group.id
      value: '{{aws.cloudtrail.flattened.response_elements.group.groupId}}'
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: user.target.id
      value: '{{aws.cloudtrail.flattened.response_elements.user.userId}}'
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: user.changes.name
      value: '{{aws.cloudtrail.flattened.request_parameters.newUserName}}'
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: group.name
      value: '{{aws.cloudtrail.flattened.request_parameters.groupName}}'
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: user.target.name
      value: '{{aws.cloudtrail.flattened.request_parameters.userName}}'
      ignore_empty_value: true
      ignore_failure: true
  - rename:
      field: aws.cloudtrail.digest
      target_field: aws.cloudtrail.flattened.digest
      ignore_missing: true
  - rename:
      field: aws.cloudtrail.insight_details
      target_field: aws.cloudtrail.flattened.insight_details
      ignore_missing: true
  - dissect:
      field: json.tlsDetails.tlsVersion
      pattern: "%{tls.version_protocol}v%{tls.version}"
      ignore_missing: true
  - lowercase:
      field: tls.version_protocol
      ignore_missing: true
  - rename:
      field: json.tlsDetails.cipherSuite
      target_field: tls.cipher
      ignore_missing: true
  - rename:
      field: json.tlsDetails.clientProvidedHostHeader
      target_field: tls.client.server_name
      ignore_missing: true
  - remove:
      field: json
      ignore_missing: true
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - set:
      field: error.message
      value: |-
        Processor "{{ _ingest.on_failure_processor_type }}" with tag "{{ _ingest.on_failure_processor_tag }}" in pipeline "{{ _ingest.on_failure_pipeline }}" failed with message "{{ _ingest.on_failure_message }}"
