---
description: Pipeline for parsing AWS lambda logs in JSON format
processors:
- json:
    field: event.original
    target_field: parsed
    ignore_failure: true

# 1. Powertools structured logs (timestamp field)
- date:
    if: "ctx.parsed?.timestamp != null"
    field: parsed.timestamp
    target_field: "@timestamp"
    formats: ["yyyy-MM-dd HH:mm:ss,SSSZ"]
    ignore_failure: true

# 2. Platform report logs (time field)
- date:
    if: "ctx.parsed?.time != null"
    field: parsed.time
    target_field: "@timestamp"
    formats: ["ISO8601"]
    ignore_failure: true

# 3. EMF metrics (_aws.Timestamp)
- date:
    if: "ctx.parsed?._aws?.Timestamp != null"
    field: parsed._aws.Timestamp
    target_field: "@timestamp"
    formats: ["UNIX_MS"]
    ignore_failure: true

# Flatten important fields from each log type
- set:
    field: aws.lambda.message
    if: "ctx.parsed?.record != null"
    copy_from: parsed.record
    ignore_failure: true

- set:
    field: aws.lambda.message
    if: "ctx.parsed?._aws != null"
    copy_from: parsed._aws
    ignore_failure: true

- rename:
    field: parsed.service
    target_field: service.name
    ignore_missing: true

- rename:
    field: parsed.level
    target_field: log.level
    ignore_missing: true

- rename:
    field: parsed.requestId
    target_field: aws.lambda.request_id
    ignore_missing: true

- script:
    description: "Join stackTrace arrays into single multiline strings if present"
    if: "ctx.parsed instanceof Map"
    lang: painless
    source: |
        // Flatten ctx.parsed.stackTrace if it's a list
        if (ctx.parsed.containsKey('stackTrace') && ctx.parsed.stackTrace instanceof List) {
            def completionText = new StringBuilder();
            for (int i = 0; i < ctx.parsed.stackTrace.length; i++) {
                completionText.append(ctx.parsed.stackTrace[i]);
                if (i != ctx.parsed.stackTrace.length - 1) {
                    completionText.append("\\n");
                }
            }
            ctx.parsed.stack_trace_flattened = completionText.toString();
        }
        // Flatten ctx.parsed.message.stackTrace if message is a map and contains a list
        if (ctx.parsed.containsKey('message') && ctx.parsed.message instanceof Map && ctx.parsed.message.containsKey('stackTrace') && ctx.parsed.message.stackTrace instanceof List) {
            def completionText = new StringBuilder();
            for (int i = 0; i < ctx.parsed.message.stackTrace.length; i++) {
                completionText.append(ctx.parsed.message.stackTrace[i]);
                if (i != ctx.parsed.message.stackTrace.length - 1) {
                    completionText.append("\\n");
                }
            }
            ctx.parsed.message.stack_trace_flattened = completionText.toString();
        }

- rename:
    field: parsed.record.functionArn
    target_field: aws.lambda.arn
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.requestId
    target_field: aws.lambda.request_id
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.version
    target_field: aws.lambda.version
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.status
    target_field: aws.lambda.status
    ignore_missing: true
    ignore_failure: true

# Rename Lambda metrics
- script:
    lang: painless
    description: Replace spaces, dashes and bom character in field names under parsed.record.metrics.
    tag: painless_purge_spaces_and_dashes
    ignore_failure: true
    if: ctx.parsed?.record instanceof Map && ctx.parsed.record.metrics instanceof Map
    source: |
        String underscore(String s) {
            def regex = /_?([a-z])([A-Z]+)/;
            s = regex.matcher(s).replaceAll('$1_$2').toLowerCase();
            String result = /[ -]/.matcher(s).replaceAll('_').toLowerCase();
            String result1 = /[\ufeff]/.matcher(result).replaceAll('');
            return /[()]/.matcher(result1).replaceAll('')
        }
        
        def out = [:];
        for (def item : ctx.parsed.record.metrics.entrySet()) {
            out[underscore(item.getKey())] = item.getValue();
        }
        ctx.aws.lambda.metrics = out

# Rename Lambda tracing fields
- rename:
    field: parsed.record.tracing.spanId
    target_field: aws.lambda.tracing.span_id
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.tracing.type
    target_field: aws.lambda.tracing.type
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.tracing.value
    target_field: aws.lambda.tracing.value
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.errorType
    target_field: aws.lambda.error.type
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.initializationType
    target_field: aws.lambda.initialization_type
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.phase
    target_field: aws.lambda.phase
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.functionVersion
    target_field: aws.lambda.version
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.functionName
    target_field: aws.lambda.name
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.instanceId
    target_field: aws.lambda.instance_id
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.runtimeVersion
    target_field: aws.lambda.runtime_version
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.runtimeVersionArn
    target_field: aws.lambda.runtime_version_arn
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.name
    target_field: aws.lambda.extension.name
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.state
    target_field: aws.lambda.extension.state
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.events
    target_field: aws.lambda.extension.events
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.record.spans
    target_field: aws.lambda.spans
    ignore_missing: true
    ignore_failure: true

# General fields
- rename:
    field: parsed.time
    target_field: "@timestamp"
    ignore_missing: true
    ignore_failure: true
    if: "ctx['@timestamp'] == null"

- rename:
    field: parsed.errorMessage
    target_field: aws.lambda.error.message
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.errorType
    target_field: aws.lambda.error.type
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.logger
    target_field: log.logger
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.stack_trace_flattened
    target_field: aws.lambda.error.stack_trace
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.message.stack_trace_flattened
    target_field: aws.lambda.error.stack_trace
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.message.errorType
    target_field: aws.lambda.error.type
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.message.errorMessage
    target_field: aws.lambda.error.message
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.time
    target_field: "@timestamp"
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.timestamp
    target_field: "@timestamp"
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.type
    target_field: aws.lambda.event_type
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.cold_start
    target_field: aws.lambda.cold_start
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.correlation_id
    target_field: aws.lambda.correlation_id
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.function_arn
    target_field: aws.lambda.arn
    ignore_missing: true
    ignore_failure: true

- convert:
    field: parsed.function_memory_size
    target_field: aws.lambda.metrics.memory_size_mb
    type: long
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.function_name
    target_field: aws.lambda.name
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.function_request_id
    target_field: aws.lambda.request_id
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.location
    target_field: aws.lambda.error.location
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.message
    target_field: aws.lambda.message
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.users
    target_field: aws.lambda.users
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.timestamp
    target_field: "@timestamp"
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.tracing.xray_trace_id
    target_field: aws.lambda.xray_trace_id
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.ColdStart
    target_field: aws.lambda.cold_start_int
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.FunctionName
    target_field: aws.lambda.name
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.Service
    target_field: aws.lambda.service.name
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.executionEnvironment
    target_field: aws.lambda.execution_environment
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.functionVersion
    target_field: aws.lambda.version
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.logStreamId
    target_field: aws.lambda.log_stream_id
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.traceId
    target_field: aws.lambda.trace_id
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed.AWSRequestId
    target_field: aws.lambda.aws_request_id
    ignore_missing: true
    ignore_failure: true

- rename:
    field: parsed
    target_field: aws.lambda.message
    ignore_missing: true
    ignore_failure: true
    if: "ctx.parsed instanceof Map && !(ctx.parsed.containsKey('message') || ctx.parsed.containsKey('record') || ctx.parsed.containsKey('_aws') || ctx.parsed.containsKey('time') || ctx.parsed.containsKey('timestamp'))"

- set:
    field: aws.lambda.message
    copy_from: event.original
    if: "ctx.parsed == null"

- remove:
    field: parsed
    ignore_missing: true
    ignore_failure: true

- remove:
    field: parsed._aws
    ignore_missing: true
    ignore_failure: true

- script:
    description: Drops null/empty values recursively
    lang: painless
    source: |
        boolean drop(Object o) {
            if (o == null || o == "") {
            return true;
            } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
            } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
            }
            return false;
        }
        drop(ctx);

on_failure:
- set:
    field: event.kind
    value: pipeline_error
- set:
    field: error.message
    value: >-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{{#_ingest.on_failure_processor_tag}}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{{/_ingest.on_failure_processor_tag}}}failed with message '{{{ _ingest.on_failure_message }}}'