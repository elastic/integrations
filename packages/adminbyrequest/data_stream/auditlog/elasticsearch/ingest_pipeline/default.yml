---
description: Pipeline for processing Admin By Request Audit logs
processors:
  - drop:
      if: ctx.error?.statuscode != null && ctx.error.statuscode != 200

  - rename:
      field: message
      target_field: adminbyrequest.auditlog

  - fingerprint:
      fields:
        - adminbyrequest.auditlog.id
      target_field: "_id"

####################
# Scripts for processing input #
####################
  - script:
      description: Drops null/empty values recursively.
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);

  - script:
      description: Convert Additional Info keys to snake case.
      tag: additional-info-keys-to-snake-case
      lang: painless
      source: |
        Map keysToSnakeCase(Map m) {
          def regex = /_?([a-z])([A-Z]+)/;
          def snakeCaseMap = [:];

          for (entry in m.entrySet()) {
            def k = entry.getKey();
            def v = entry.getValue();

            if (v instanceof Map) {
              v = keysToSnakeCase(v);
            } else if (v instanceof List) {
              for (int i = 0; i < v.size(); i++) {
                def item = v.get(i);
                if (item instanceof Map) {
                  v.set(i, keysToSnakeCase(item));
                }
              }
            }

            k = regex.matcher(k).replaceAll('$1_$2').toLowerCase();
            snakeCaseMap.put(k, v);
          }
          return snakeCaseMap;
        }

        if (ctx.adminbyrequest.auditlog != null) {
          ctx.adminbyrequest.auditlog = keysToSnakeCase(ctx.adminbyrequest.auditlog);
        }


####################
# ECS Fields #
####################
  - set:
      field: ecs.version
      value: '8.11.0'

  - set:
      field: event.kind
      value: event

  - append:
      field: event.category
      value: configuration

  - append:
      field: event.type
      value: info

  - set:
      field: event.dataset
      value: adminbyrequest.auditlog

  - set:
      field: event.module
      value: adminbyrequest

  - set:
      field: user.full_name
      copy_from: adminbyrequest.auditlog.user.full_name
      ignore_empty_value: true

  - append:
      field: related.user
      value: '{{adminbyrequest.auditlog.user.full_name}}'
      allow_duplicates: false
      if: ctx.adminbyrequest.auditlog.user.full_name != null

  - set:
      field: user.email
      copy_from: adminbyrequest.auditlog.user.email
      ignore_empty_value: true

  - append:
      field: related.user
      value: '{{adminbyrequest.auditlog.user.email}}'
      allow_duplicates: false
      if: ctx.adminbyrequest.auditlog.user.email != null

  - set:
      field: host.hostname
      copy_from: adminbyrequest.auditlog.computer.name
      ignore_empty_value: true

  - append:
      field: related.hosts
      value: '{{adminbyrequest.auditlog.computer.name}}'
      allow_duplicates: false
      if: ctx.adminbyrequest.auditlog.computer.name != null

  - set:
      field: os.platform
      copy_from: adminbyrequest.auditlog.computer.platform
      ignore_empty_value: true

  - set:
      field: file.name
      copy_from: adminbyrequest.auditlog.application.file
      ignore_empty_value: true

  - set:
      field: file.path
      copy_from: adminbyrequest.auditlog.application.path
      ignore_empty_value: true

  - set:
      field: hash.sha256
      copy_from: adminbyrequest.auditlog.application.sha256
      ignore_empty_value: true

  - append:
      field: related.hash
      value: '{{adminbyrequest.auditlog.application.sha256}}'
      allow_duplicates: false
      if: ctx.adminbyrequest.auditlog.application?.sha256 != null

  - set:
      field: "@timestamp"
      copy_from: adminbyrequest.auditlog.request_time_utc

####################
# Admin By Request Auditlog Fields #
####################
  # convert response time into a numeric field
  - grok:
      field: adminbyrequest.auditlog.response_time
      if: ctx.adminbyrequest.auditlog.response_time != null
      patterns: ["%{HOUR:hours}:%{MINUTE:minutes}:%{SECOND:seconds}.%{NANOSECOND:nanoseconds}"]
      pattern_definitions:
        NANOSECOND: \d{7}

  - script:
      lang: painless
      description: Creating new field response_time_in_seconds from hours, minutes, seconds and nanoseconds
      if: ctx.adminbyrequest.auditlog.response_time != null
      source: |
        ctx.adminbyrequest.auditlog.response_time_in_seconds = (Integer.parseInt(ctx.hours) * 3600) + 
                              (Integer.parseInt(ctx.minutes) * 60) + 
                              Integer.parseInt(ctx.seconds) + 
                              (Integer.parseInt(ctx.nanoseconds) / 10000000.0);

  - remove:
      field:
        - adminbyrequest.auditlog.request_time
        - adminbyrequest.auditlog.start_time
        - adminbyrequest.auditlog.end_time
        - hours
        - minutes
        - seconds
        - nanoseconds
      ignore_missing: true


on_failure:
  - append:
      field: error.message
      value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      value: pipeline_error