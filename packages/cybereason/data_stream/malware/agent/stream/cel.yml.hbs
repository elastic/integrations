config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: https://{{host}}:{{port}}
state:
  username: {{username}}
  password: {{password}}
  page_no: 0
  want_more: false
  batch: {{batch_size}}
  initial_interval: {{initial_interval}}
redact:
  fields:
    - username
    - password
program: |
  (
      state.with(!(state.want_more) ?
        post_request(
          state.url + "/login.html",
          "application/x-www-form-urlencoded",
          "username="+ state.username.replace("@", "%40", -1) + "&password=" + state.password.replace("@", "%40", -1)
        ).do_request().as(resp, (
              resp.Request.URL.contains("error") ?
                ""
              :
                resp.Request.Response.Request.Response.Header["Set-Cookie"].filter(e, e.contains("JSESSIONID")).size() > 0 ?
                  (resp.Request.Response.Request.Response.Header["Set-Cookie"].filter(e, e.contains("JSESSIONID"))[0].split(";").filter(e, e.contains("JSESSIONID")).size() > 0 ?
                    resp.Request.Response.Request.Response.Header["Set-Cookie"].filter(e, e.contains("JSESSIONID"))[0].split(";").filter(e, e.contains("JSESSIONID"))[0]
                  :
                    ""
                  )
                :
                  ""
            )).as(body, {
            "cookie": body,
        })
        :
        {}
      ).as(cookie_obj, (
          has(cookie_obj.cookie) && cookie_obj.cookie.contains("JSESSIONID") || has(state.cookie) && state.cookie.contains("JSESSIONID") ?
            (post_request(
              state.url + "/rest/malware/query",
              "application/json",
                {
                "filters": [
                  {
                    "fieldName": "needsAttention",
                    "operator": "Is",
                    "values": [
                      true,
                      false
                    ]
                  },
                  {
                    "values": [
                      (
                      state.want_more ?
                        (has(state.cursor) && has(state.cursor.first_timestamp) && state.cursor.first_timestamp != null ?
                          state.cursor.first_timestamp
                        :
                          null
                        )
                      :
                        (has(state.cursor) && has(state.cursor.last_timestamp) && state.cursor.last_timestamp != null ?
                          state.cursor.last_timestamp
                        :
                          int(now - duration(state.initial_interval)) * 1000
                        ))
                    ],
                    "fieldName": "timestamp",
                    "operator": "GreaterThan"
                  },
                  {
                    "values": [
                      int(now) * 1000
                    ],
                    "fieldName": "timestamp",
                    "operator": "LessThan"
                  }
                ],
                "sortingFieldName": "timestamp",
                "sortDirection": "ASC",
                "limit": state.batch,
                "offset": state.page_no
              }.encode_json()
            ).with({
              "Header": {"Cookie": [has(state.cookie) ? state.cookie : cookie_obj.cookie], "Content-Type": ["application/json"]}
            }).do_request().as(resp,
              resp.StatusCode == 200 ?
                bytes(resp.Body).decode_json().as(body, {
                  "events": (has(body.data) && has(body.data.malwares) ?
                    (
                      body.data.malwares.size() > 0 ?
                        (
                          body.data.malwares.map(e,{
                            "message": e.encode_json()
                          })
                        )
                      :
                        [{}]
                    )
                  :
                    (
                      [{}]
                    )
                  ),
                  "want_more": has(body.data.hasMoreResults) && body.data.hasMoreResults,
                  "batch": state.batch,
                  "initial_interval": state.initial_interval,
                  "page_no": has(body.data.hasMoreResults) && body.data.hasMoreResults ? int(state.page_no) + 1 : 0,
                  "username": state.username,
                  "password": state.password,
                  "cookie": has(state.cookie) && has(body.data.hasMoreResults) && body.data.hasMoreResults ? state.cookie : cookie_obj.cookie,
                  "cursor": {
                    "last_timestamp": (
                      has(body.data) && has(body.data.malwares) && body.data.malwares.size() > 0 ?
                        (has(state.cursor) && has(state.cursor.last_timestamp) && body.data.malwares.map(e, e.timestamp).max() < state.cursor.last_timestamp ?
                          state.cursor.last_timestamp
                        :
                          int(body.data.malwares.map(e, e.timestamp).max())
                        )
                      :
                        has(state.cursor) && has(state.cursor.last_timestamp) ?
                          state.cursor.last_timestamp
                        :
                          int(now - duration(state.initial_interval)) * 1000
                      ),
                    "first_timestamp": (
                      has(state.cursor) && has(state.cursor.first_timestamp) && has(body.data) && has(body.data.malwares) && state.cursor.first_timestamp != null ?
                        (has(body.data.hasMoreResults) && body.data.hasMoreResults ?
                          state.cursor.first_timestamp
                        :
                          state.cursor.last_timestamp)
                      :
                        int(now - duration(state.initial_interval)) * 1000
                    )
                  }
                })
              :
                {
                  "events": {
                    "error": {
                      "code": string(resp.StatusCode),
                      "id": string(resp.Status),
                      "message": string(resp.Body)
                    }
                  },
                  "want_more": false,
                  "batch": state.batch,
                  "initial_interval": state.initial_interval,
                  "page_no": 0,
                  "username": state.username,
                  "password": state.password,
                }
              )
            )
          :
          ({"events": []})
        )
      )
    )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
