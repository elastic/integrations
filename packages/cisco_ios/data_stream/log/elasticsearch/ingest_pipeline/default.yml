---
description: Pipeline for Cisco IOS logs.

processors:
  - set:
      tag: set_ecs_version_f5923549
      field: ecs.version
      value: '8.17.0'
  - set:
      tag: set_event_category_dbab8a4e
      field: event.category
      value: [network]
  - set:
      tag: set_event_provider_4a3b5b7b
      field: event.provider
      value: firewall
  - set:
      tag: set_observer_vendor_e0ee74d1
      field: observer.vendor
      value: Cisco
  - set:
      tag: set_observer_product_b4ddab2e
      field: observer.product
      value: IOS
  - set:
      tag: set_observer_type_5dddf3ba
      field: observer.type
      value: firewall
  - set:
      tag: set_event_type_ec95f7f2
      field: event.type
      value: [info]

  - set:
      tag: set_event_original_49bb683a
      field: event.original
      copy_from: message
      override: false
  - remove:
      tag: remove_message_884e8cdd
      field: message
      ignore_missing: true
  - grok:
      field: event.original
      tag: grok_kiwi_header
      description: |-
        The Kiwi syslog header is expected to be in the following format:
        <PRI>Original Address=IP [RFC 5424 header] [Cisco IOS log]
        
        This grok pattern currently only extracts the Cisco IOS log from
        the event. It does not extract any Kiwi syslog header fields.
      patterns:
        - '^<%{NONNEGINT:log.syslog.priority:long}>Original Address=(?:%{DATA} ){7}%{GREEDYDATA:_temp_.message}$'
        - '^%{GREEDYDATA:_temp_.message}$'
  - grok:
      field: _temp_.message
      tag: grok_header
      patterns:
        - '^%{CISCO_PRIORITY_MSGCOUNT}?%{TIMESTAMP_ISO8601:_temp_.cisco_timestamp} %{CISCO_HOSTNAME:log.syslog.hostname} %{GREEDYDATA:_temp_.message}$'
        - '^%{CISCO_PRIORITY_MSGCOUNT}?%{SYSLOGTIMESTAMP} %{IP} (?:%{CISCO_HOSTNAME:log.syslog.hostname}: )?(?:%{NUMBER:cisco.ios.sequence}: )?(?:%{CISCO_UPTIME:cisco.ios.uptime}|%{CISCO_TIMESTAMP}): %{GREEDYDATA:_temp_.message}$'
        - '^%{CISCO_PRIORITY_MSGCOUNT}?%{SYSLOGTIMESTAMP} (?:%{IP}|%{CISCO_HOSTNAME:log.syslog.hostname}) %{NUMBER:cisco.ios.sequence}: (?:%{CISCO_UPTIME:cisco.ios.uptime}|%{CISCO_TIMESTAMP}): %{GREEDYDATA:_temp_.message}$'
        - '^%{CISCO_PRIORITY_MSGCOUNT}?%{CISCO_TIMESTAMP:_temp_.timestamp}: %{GREEDYDATA:_temp_.message}$'
        - '^%{CISCO_PRIORITY_MSGCOUNT}?(?:(?:%{IP}|%{CISCO_HOSTNAME:log.syslog.hostname})(?:: \*%{DATA}:|:?)? )?(?:%{NUMBER:cisco.ios.sequence}: )?(?:%{CISCO_UPTIME:cisco.ios.uptime}|%{CISCO_TIMESTAMP:_temp_.timestamp}): %{GREEDYDATA:_temp_.message}$'
        - '^%{SYSLOGTIMESTAMP} (?:%{IP}|%{HOSTNAME:log.syslog.hostname}) %{CISCO_PRIORITY_MSGCOUNT}?(?:%{NUMBER:cisco.ios.sequence}: )(?:(?:%{CISCO_UPTIME:cisco.ios.uptime}|%{CISCO_TIMESTAMP}): )?%{GREEDYDATA:_temp_.message}$'
        - '^%{CISCO_PRIORITY_MSGCOUNT}?%{SYSLOGTIMESTAMP} (?:%{IP:log.syslog.hostname}|%{CISCO_HOSTNAME:log.syslog.hostname}) %{GREEDYDATA:_temp_.message}$'
      pattern_definitions:
        ISO8601_TIMEZONE: "(?:Z|[+-]%{HOUR}(?::?%{MINUTE}))"
        TIMESTAMP_ISO8601: "%{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE:_temp_.tz}?"
        CISCO_PRIORITY_MSGCOUNT: '<%{NONNEGINT:log.syslog.priority:long}>(?:%{NONNEGINT:cisco.ios.message_count})?(?:: )?'
        CISCO_TIMESTAMP: '[*]?%{CISCOTIMESTAMP_EX:_temp_.cisco_timestamp}(?: %{CISCO_TZ:_temp_.tz})?'
        CISCOTIMESTAMP_EX: '(%{CISCOTIMESTAMP})|(%{YEAR} %{MONTH} %{MONTHDAY} %{TIME})'
        CISCO_UPTIME: '(?:\d{1,4}:\d{2}:\d{2}|(?:(\d+)y)?(?:(\d+)w)?(?:(\d+)d)?(?:(\d+)h)?(?:(\d+)m)?(?:(\d+)s)?)'
        CISCO_HOSTNAME: '[0-9a-zA-Z][.0-9a-zA-Z_-]{0,253}[0-9a-zA-Z]?'
        CISCO_TZ: '[a-zA-Z]{1,7}([+-]\d{1,2}|[+-]\d{2}:\d{2})?'
  - grok:
      field: _temp_.message
      tag: grok_message_at_top_level
      patterns:
        - '^%%{GREEDYDATA:message}$'
        - '^%{GREEDYDATA}%%{GREEDYDATA:message}$' # Extract part after % in message
        - '^%{GREEDYDATA:_temp_.generic_message}$'
  # Handle all-digit hostnames as sequence numbers
  - grok:
      tag: grok_log_syslog_hostname_54433610
      field: log.syslog.hostname
      patterns:
        - '^%{NUMBER:_temp_.sequence}$'
      ignore_missing: true
      ignore_failure: true
  - set:
      tag: set_cisco_ios_sequence_c92644b4
      field: cisco.ios.sequence
      copy_from: _temp_.sequence
      if: ctx._temp_?.sequence != null
  - remove:
      tag: remove_log_syslog_hostname_c2980acf
      field: log.syslog.hostname
      if: ctx._temp_?.sequence != null
      ignore_missing: true
  - remove:
      tag: remove__temp__sequence_0d8feeaa
      field: _temp_.sequence
      if: ctx._temp_?.sequence != null
      ignore_missing: true
  - remove:
      tag: remove_log_syslog_e1fd9ebc
      field: log.syslog
      if: "ctx.log?.syslog != null && ctx.log.syslog.isEmpty()"
      ignore_missing: true
  - set:
      tag: set_event_sequence_87d344b3
      field: event.sequence
      copy_from: cisco.ios.sequence
      if: ctx.cisco?.ios?.sequence != null
  - convert:
      field: cisco.ios.message_count
      tag: convert_message_count
      type: long
      if: ctx.cisco?.ios?.message_count != null
  - set:
      tag: set_event_sequence_f800e4a1
      field: event.sequence
      copy_from: cisco.ios.message_count
      if: ctx.cisco?.ios?.message_count != null && ctx.event?.sequence == null
  - gsub:
      description: Remove double spacing from the date.
      field: _temp_.cisco_timestamp
      tag: gsub_cisco_timestamp
      ignore_missing: true
      pattern: '\s+'
      replacement: ' '
  - script:
      lang: painless
      tag: script_timezone
      description: >-
        Add support to map timezone abbreviations that are not supported by
        Java manually. If no match is found, it will default back to
        _conf.tz_offset as before. If tz_offset is not set, it will default to
        UTC as before.
      if: ctx._temp_?.cisco_timestamp != null
      source: |-
        String get_timezone(def ctx) {
          if (ctx._temp_?.tz != null) {
            if (ctx._conf?.tz_map != null) {
              for (def item : ctx._conf.tz_map) {
                if (item.tz_short == ctx._temp_.tz) {
                  return item.tz_long;
                }
              }
            }

            if (ctx._temp_.tz.length() <= 4) {
              // all time zone abbreviations need to be uppercase
              return ctx._temp_.tz.toUpperCase();
            }

            return ctx._temp_.tz;
          }

          if (ctx._conf?.tz_offset != null) {
              ctx.event.timezone = ctx._conf.tz_offset;
              return ctx._conf.tz_offset;
          }

          ctx.event.timezone = 'UTC';
          return 'UTC';
        }

        def event_timezone = get_timezone(ctx);
        if (!event_timezone.contains('+') && !event_timezone.contains('-') && !(event_timezone.length() > 4)) {
          // timezone abbreviation e.g. CEST need to be put inside the timestamp
          SimpleDateFormat sdf = new SimpleDateFormat("z");
          sdf.parse(event_timezone);
          ctx._temp_.date_timezone = ZoneId.of(sdf.getTimeZone().getID(), ZoneId.SHORT_IDS).getId();
          ctx?._temp_.cisco_timestamp = ctx?._temp_.cisco_timestamp + " " + event_timezone;
        } else {
          // timezone is either abbreviation+-offset e.g. UTC+1 or long representation
          // e.g. Europe/Athens needs to be put as a ZoneId and *not* inside the timestamp
          ctx._temp_.date_timezone = event_timezone;
        }
  - date:
      if: ctx?._temp_.cisco_timestamp != null
      field: _temp_.cisco_timestamp
      tag: date_cisco_timestamp
      formats:
        - "ISO8601"
        - "MMM d yyyy HH:mm:ss.SSS z"
        - "MMM d yyyy HH:mm:ss.SSS"
        - "MMM d yyyy HH:mm:ss z"
        - "MMM d yyyy HH:mm:ss"

        # Repeat without year.
        - "MMM d HH:mm:ss.SSS z"
        - "MMM d HH:mm:ss.SSS"
        - "MMM d HH:mm:ss z"
        - "MMM d HH:mm:ss"

        # Year first
        - "yyyy MMM d HH:mm:ss.SSS z"
        - "yyyy MMM d HH:mm:ss.SSS"
        - "yyyy MMM d HH:mm:ss z"
        - "yyyy MMM d HH:mm:ss"
      timezone: '{{{_temp_.date_timezone}}}'
  - grok:
      field: message
      tag: grok_message
      patterns:
        - '%{DATA:cisco.ios.facility}-%{POSINT:event.severity}-%{DATA:event.code}:\s+(\w+\d+(/\d+)?\:\s+)?([a-zA-Z0-9_]+\:\s+)?%{GREEDYDATA:message}'
      ignore_missing: true
  - grok:
      field: message
      tag: grok_child_message
      patterns:
        - '%%{DATA:cisco.ios.facility}-%{POSINT:event.severity}-%{DATA:event.code}:\s+(\w+\d+(/\d+)?\:\s+)?([a-zA-Z0-9_]+\:\s+)?%{GREEDYDATA:message}'
      ignore_missing: true
      if: "ctx.cisco?.ios?.facility == 'IOSXE' && ctx.event?.code == 'PLATFORM' && ctx.message.indexOf('%') != -1"
  - grok:
      field: message
      tag: grok_audit_details
      patterns:
        - 'initiator \(%{IP:source.ip}:%{NUMBER:source.port:long}\) sent %{NUMBER:source.bytes:long} bytes -- responder \(%{IP:destination.ip}:%{NUMBER:destination.port:long}\) sent %{NUMBER:destination.bytes:long} bytes, from %{NOTSPACE:cisco.ios.interface.name}'
      ignore_missing: true
      if: ctx.cisco?.ios?.facility == 'FW' && ctx.event?.code == 'SESS_AUDIT_TRAIL'
  - grok:
      field: message
      tag: grok_drop_details
      patterns:
        - '^Dropping %{WORD} %{WORD} from %{NOTSPACE:cisco.ios.interface.name} %{IP:source.ip}:%{NUMBER:source.port:long} ?=> ?%{IP:destination.ip}:%{NUMBER:destination.port:long}'
      ignore_missing: true
      if: ctx.cisco?.ios?.facility == 'FW' && ctx.event?.code == 'DROP_PKT'
  - rename:
      field: _temp_.generic_message
      target_field: message
      tag: rename_generic_message
      if: ctx._temp_?.generic_message != null
  - convert:
      field: event.severity
      type: long
      tag: convert_severity
      ignore_missing: true
  - convert:
      field: event.sequence
      type: long
      tag: convert_sequence
      ignore_missing: true
  - trim:
      field: event.code
      tag: trim_event_code
      ignore_missing: true
  - dissect:
      field: message
      tag: dissect_gp
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.action} %{network.transport} %{source.address}(%{source.port}) %{} %{destination.address}(%{destination.port}), %{source.packets} packet"
      if: "['IPACCESSLOGP', 'ACCESSLOGP', 'IPV6ACCESSLOGP'].contains(ctx.event?.code)"
      ignore_failure: true
  - dissect:
      field: message
      tag: dissect_gp_access_list
      pattern: "access-list %{cisco.ios.access_list} %{_temp_.event.action} %{network.transport} %{source.address}(%{source.port}) %{} %{destination.address}(%{destination.port}), %{source.packets} packet"
      if: "['IPACCESSLOGP', 'ACCESSLOGP', 'IPV6ACCESSLOGP'].contains(ctx.event?.code)"
      ignore_failure: true
  - dissect:
      field: message
      tag: dissect_gdp
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.action} %{network.transport} %{source.address} %{} %{destination.address} (%{icmp.type}/%{icmp.code}), %{source.packets} packet"
      if: "['IPACCESSLOGDP', 'ACCESSLOGDP'].contains(ctx.event?.code)"
  - dissect:
      field: message
      tag: dissect_grp
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.action} %{network.transport} %{source.address} %{} %{destination.address}, %{source.packets} packet"
      if: "ctx.event?.code == 'IPACCESSLOGRP'"
  - dissect:
      field: message
      tag: dissect_gsp
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.action} %{network.transport} %{source.address} %{} %{destination.address} (%{igmp.type}), %{source.packets} packet"
      if: "ctx.event?.code == 'IPACCESSLOGSP'"
  - dissect:
      field: message
      tag: dissect_sp
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.action} %{network.type} %{source.address} %{} %{destination.address}, %{source.packets} packet"
      if: "ctx.event?.code == 'ACCESSLOGSP'"
  - dissect:
      field: message
      tag: dissect_gnp
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.action} %{network.iana_number} %{source.address} %{} %{destination.address}, %{source.packets} packet"
      if: "['IPACCESSLOGNP', 'ACCESSLOGNP'].contains(ctx.event?.code)"
  - dissect:
      field: message
      tag: dissect_login
      pattern: "%{cisco.ios.action} %{_temp_.event.action} [user: %{source.user.name}] [Source: %{source.address}] [localport: %{destination.port}] at %{}"
      if: "ctx.event?.code == 'LOGIN_SUCCESS'"
  - dissect:
      field: message
      tag: dissect_logout
      pattern: "User %{source.user.name} has %{cisco.ios.action} %{cisco.ios.session.type} session %{cisco.ios.session.number}(%{source.address})"
      if: "ctx.event?.code == 'LOGOUT'"
  - dissect:
      field: message
      tag: dissect_invalid_replay_ctr
      if: "ctx.event?.code == 'INVALID_REPLAY_CTR'"
      pattern: "%{} Invalid replay counter from client %{source.mac} - got %{}, expected %{}"
  - grok:
      field: message
      tag: grok_badauth
      patterns:
        - '^(?:No|Invalid) MD5 digest from %{DATA:source.address}(\(%{INT:source.port}\)|\:%{INT:source.port}) to %{DATA:destination.address}(\(%{INT:destination.port}\)|\:%{INT:destination.port})(?:(?: \(RST\))? (?:tableid - %{DATA:cisco.ios.tableid}|%{GREEDYDATA:_temp_.rst}))?$'
      ignore_missing: true
      if: ctx.event?.code == 'BADAUTH'
  - grok:
      field: message
      tag: grok_message_rp_join
      patterns:
        - 'Received \(%{PIM_SOURCE}, %{DATA:cisco.ios.pim.group.ip}\) %{WORD:cisco.ios.action} from %{IP:source.address} for %{DATA:cisco.ios.outcome} %{IP:destination.address}'
      pattern_definitions:
        PIM_SOURCE: (%{IP:cisco.ios.pim.source.ip}|%{DATA})
      if: "ctx.event?.code == 'INVALID_RP_JOIN'"
  - set:
       tag: set_event_action_1270922c
       field: event.action
       value: "multicast-join"
       if: ctx.event?.code == "INVALID_RP_JOIN"
  - set:
       tag: set_event_outcome_030de70b
       field: event.outcome
       value: "failure"
       if: ctx.event?.code == "INVALID_RP_JOIN"
  - set:
       tag: set_event_reason_64638ad4
       field: event.reason
       value: "Invalid RP"
       if: ctx.event?.code == "INVALID_RP_JOIN"
  - convert:
      field: destination.address
      target_field: destination.ip
      type: ip
      tag: convert_destination_ip
      ignore_missing: true
      on_failure:
        - set:
            tag: set_destination_domain_1a39ddcb
            field: destination.domain
            copy_from: destination.address
  - convert:
      field: source.address
      target_field: source.ip
      type: ip
      tag: convert_source_ip
      ignore_missing: true
      on_failure:
        - set:
            tag: set_source_domain_5044c678
            field: source.domain
            copy_from: source.address
  - convert:
      field: cisco.ios.pim.source.ip
      tag: convert_pim_source_ip
      type: ip
      ignore_missing: true
  - convert:
      field: source.port
      tag: convert_source_port
      type: long
      ignore_missing: true
  - convert:
      field: source.packets
      tag: convert_source_packets
      type: long
      ignore_missing: true
  - convert:
      field: destination.port
      type: long
      tag: convert_destination_port
      ignore_missing: true
  - script:
      tag: script_a90fa837
      lang: painless
      source: |
        long n = 0;
        if (ctx.source?.bytes != null) {
          n += ctx.source.bytes
        }
        if (ctx.destination?.bytes != null) {
          n += ctx.destination.bytes
        }
        if (ctx.network == null) {
          ctx.network = new HashMap();
        }
        ctx.network.bytes = n;
      if: ctx.source?.bytes != null || ctx.destination?.bytes != null
      ignore_failure: true
  - set:
      tag: set_network_packets_4ee14814
      field: network.packets
      copy_from: source.packets
      if: ctx.source?.packets != null
  - set:
      tag: set_network_type_d0af2f05
      field: network.type
      value: ipv4
      if: "ctx.source?.ip != null && ctx.source?.ip.contains('.')"
  - set:
      tag: set_network_type_ff656ae2
      field: network.type
      value: ipv6
      if: "ctx.source?.ip != null && ctx.network?.type == null"
  - set:
      tag: set_event_action_71eb8b93
      field: event.action
      value: deny
      if: "ctx._temp_?.event?.action == 'denied'"
  - append:
      tag: append_event_type_afe34446
      field: event.type
      value: denied
      if: "ctx.event?.action == 'deny'"
  - set:
      tag: set_event_action_6a3a5c5f
      field: event.action
      value: allow
      if: "ctx._temp_?.event?.action == 'permitted'"
  - append:
      tag: append_event_type_75dc8690
      field: event.type
      value: allowed
      if: "ctx.event?.action == 'allow'"
  - set:
      tag: set_log_level_e81fb788
      field: "log.level"
      if: "ctx.event.severity == 0"
      value: emergencies
  - set:
      tag: set_log_level_e663c8d8
      field: "log.level"
      if: "ctx.event.severity == 1"
      value: alert
  - set:
      tag: set_log_level_0f36429c
      field: "log.level"
      if: "ctx.event.severity == 2"
      value: critical
  - set:
      tag: set_log_level_201bba1e
      field: "log.level"
      if: "ctx.event.severity == 3"
      value: error
  - set:
      tag: set_log_level_4f08a3cf
      field: "log.level"
      if: "ctx.event.severity == 4"
      value: warning
  - set:
      tag: set_log_level_1f2f675b
      field: "log.level"
      if: "ctx.event.severity == 5"
      value: notification
  - set:
      tag: set_log_level_f5ee75b0
      field: "log.level"
      if: "ctx.event.severity == 6"
      value: informational
  - set:
      tag: set_log_level_da9bfdc1
      field: "log.level"
      if: "ctx.event.severity == 7"
      value: debug

  # IP Geolocation Lookup
  - geoip:
      field: source.ip
      tag: geoip_source_ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      field: destination.ip
      tag: geoip_destination_ip
      target_field: destination.geo
      ignore_missing: true

  # IP Autonomous System (AS) Lookup
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      tag: geoip_source_as
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      tag: geoip_destination_as
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      tag: rename_source_as_asn_to_source_as_number_a917047d
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      tag: rename_source_as_organization_name_to_source_as_organization_name_f1362d0b
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename:
      tag: rename_destination_as_asn_to_destination_as_number_3b459fcd
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      tag: rename_destination_as_organization_name_to_destination_as_organization_name_814bd459
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true

  - gsub:
      tag: gsub_source_mac_328298a4
      field: source.mac
      pattern: ':'
      replacement: '-'
      ignore_missing: true
  - uppercase:
      tag: uppercase_source_mac_5b4e7be2
      field: source.mac
      ignore_missing: true

  - append:
      tag: append_related_ip_8121c591
      field: related.ip
      value: "{{{source.ip}}}"
      allow_duplicates: false
      if: ctx.source?.ip != null
  - append:
      tag: append_related_ip_c1a6356b
      field: related.ip
      value: "{{{destination.ip}}}"
      allow_duplicates: false
      if: ctx.destination?.ip != null
  - append:
      tag: append_related_hosts_b0d2e007
      field: related.hosts
      value: "{{{source.domain}}}"
      allow_duplicates: false
      if: ctx.source?.domain != null
  - append:
      tag: append_related_hosts_b0d7ba0b
      field: related.hosts
      value: "{{{destination.domain}}}"
      allow_duplicates: false
      if: ctx.destination?.domain != null
  - append:
      tag: append_related_user_f745a124
      field: related.user
      value: "{{{source.user.name}}}"
      allow_duplicates: false
      if: ctx.source?.user?.name != null
  - community_id:
      tag: community_id_99f56bc8
      ignore_missing: true
      ignore_failure: true
  - remove:
      tag: remove_75b58725
      field:
       - _temp_
       - _conf
      ignore_missing: true
  - append:
      tag: append_preserve_original_event_on_error
      field: tags
      value: preserve_original_event
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - remove:
      field:
        - _temp_
        - _conf
      ignore_missing: true
  - append:
      field: error.message
      value: >-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{#_ingest.on_failure_processor_tag}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{/_ingest.on_failure_processor_tag}}in pipeline '{{{ _ingest.pipeline }}}'
        failed with message '{{{ _ingest.on_failure_message }}}'
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
