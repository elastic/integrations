---
description: Pipeline for Cisco IOS logs.

processors:
  - set:
      field: ecs.version
      value: '8.5.0'
  - set:
      field: event.category
      value: network
  - set:
      field: event.provider
      value: firewall
  - set:
      field: event.type
      value: info

  - set:
      field: event.original
      copy_from: message
      override: false
  - remove:
      field: message
      ignore_missing: true
  - dissect:
      field: event.original
      pattern: '%{_temp_.header} %%{message}'
  - grok:
      field: _temp_.header
      patterns:
        - '^<%{NONNEGINT:log.syslog.priority:long}>%{NUMBER:cisco.ios.message_count}?: (?:%{SYSLOGHOST:log.syslog.hostname}: )?(?:%{NUMBER:cisco.ios.sequence}: )?(%{CISCO_TIMESTAMP:_temp_.cisco_timestamp}|%{NOTSPACE:cisco.ios.uptime}:)'
        - '%{SYSLOGHOST:log.syslog.hostname} (%{NUMBER:cisco.ios.sequence}: )?%{CISCO_TIMESTAMP:_temp_.cisco_timestamp}'
      pattern_definitions:
        CISCO_TIMESTAMP: '%{CISCOTIMESTAMP}(?: %{TZ})?'
      ignore_failure: true
  - set:
      field: event.sequence
      copy_from: cisco.ios.sequence
      if: ctx.cisco?.ios?.sequence != null
  - convert:
      field: cisco.ios.message_count
      type: long
      ignore_failure: true
  - set:
      field: event.sequence
      copy_from: cisco.ios.message_count
      if: ctx.cisco?.ios?.message_count != null && ctx.event?.sequence == null
      ignore_failure: true
  - gsub:
      description: Remove double spacing from the date.
      field: _temp_.cisco_timestamp
      ignore_missing: true
      pattern: ' {2,}'
      replacement: ' '
  - set:
      field: _conf.tz_offset
      value: UTC
      override: false
  - date:
      if: ctx?._temp_.cisco_timestamp != null
      field: _temp_.cisco_timestamp
      formats:
        - "MMM d yyyy HH:mm:ss.SSS z"
        - "MMM d yyyy HH:mm:ss.SSS"
        - "MMM d yyyy HH:mm:ss z"
        - "MMM d yyyy HH:mm:ss"

        # Repeat without year.
        - "MMM d HH:mm:ss.SSS z"
        - "MMM d HH:mm:ss.SSS"
        - "MMM d HH:mm:ss z"
        - "MMM d HH:mm:ss"
      timezone: '{{{_conf.tz_offset}}}'
  - grok:
      field: message
      patterns:
        - "%{DATA:cisco.ios.facility}-%{POSINT:event.severity}-%{DATA:event.code}: %{GREEDYDATA:message}"
  - convert:
      field: event.severity
      type: long
      ignore_missing: true
  - convert:
      field: event.sequence
      type: long
      ignore_missing: true
  - dissect:
      field: message
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.action} %{network.transport} %{source.address}(%{source.port}) %{} %{destination.address}(%{destination.port}), %{source.packets} packet"
      if: "['IPACCESSLOGP', 'ACCESSLOGP'].contains(ctx.event?.code)"
  - dissect:
      field: message
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.action} %{network.transport} %{source.address} %{} %{destination.address} (%{icmp.type}/%{icmp.code}), %{source.packets} packet"
      if: "['IPACCESSLOGDP', 'ACCESSLOGDP'].contains(ctx.event?.code)"
  - dissect:
      field: message
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.action} %{network.transport} %{source.address} %{} %{destination.address}, %{source.packets} packet"
      if: "ctx.event?.code == 'IPACCESSLOGRP'"
  - dissect:
      field: message
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.action} %{network.transport} %{source.address} %{} %{destination.address} (%{igmp.type}), %{source.packets} packet"
      if: "['IPACCESSLOGSP', 'ACCESSLOGSP'].contains(ctx.event?.code)"
  - dissect:
      field: message
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.action} %{network.iana_number} %{source.address} %{} %{destination.address}, %{source.packets} packet"
      if: "['IPACCESSLOGNP', 'ACCESSLOGNP'].contains(ctx.event?.code)"
  - dissect:
      field: message
      pattern: "%{cisco.ios.action} %{_temp_.event.action} [user: %{source.user.name}] [Source: %{source.address}] [localport: %{destination.port}] at %{}"
      if: "ctx.event?.code == 'LOGIN_SUCCESS'"
  - dissect:
      field: message
      pattern: "User %{source.user.name} has %{cisco.ios.action} %{cisco.ios.session.type} session %{cisco.ios.session.number}(%{source.address})"
      if: "ctx.event?.code == 'LOGOUT'"
  - grok:
      field: message
      patterns: 
        - 'Received \(%{PIM_SOURCE}, %{DATA:cisco.ios.pim.group.ip}\) %{WORD:cisco.ios.action} from %{IP:source.address} for %{DATA:cisco.ios.outcome} %{IP:destination.address}'
      pattern_definitions:
        PIM_SOURCE: (%{IP:cisco.ios.pim.source.ip}|%{DATA})
      if: "ctx.event?.code == 'INVALID_RP_JOIN'"
  - set:
       field: event.action
       value: "multicast-join"
       if: ctx.event?.code == "INVALID_RP_JOIN"
  - set:
       field: event.outcome
       value: "failure"
       if: ctx.event?.code == "INVALID_RP_JOIN"
  - set:
       field: event.reason
       value: "Invalid RP"
       if: ctx.event?.code == "INVALID_RP_JOIN"      
  - convert:
      field: destination.address
      target_field: destination.ip
      type: ip
      ignore_failure: true
  - convert:
      field: source.address
      target_field: source.ip
      type: ip
      ignore_failure: true
  - convert:
      field: cisco.ios.pim.source.ip
      type: ip
      ignore_missing: true
  - convert:
      field: source.port
      type: long
      ignore_missing: true
  - convert:
      field: source.packets
      type: long
      ignore_missing: true
  - convert:
      field: destination.port
      type: long
      ignore_missing: true
  - set:
      field: network.packets
      copy_from: source.packets
      if: ctx.source?.packets != null
  - set:
      field: network.type
      value: ipv4
      if: "ctx.source?.ip != null && ctx.source?.ip.contains('.')"
  - set:
      field: network.type
      value: ipv6
      if: "ctx.source?.ip != null && ctx.network?.type == null"
  - set:
      field: event.action
      value: deny
      if: "ctx._temp_?.event?.action == 'denied'"
  - set:
      field: event.type
      value: denied
      if: "ctx.event?.action == 'deny'"
  - set:
      field: event.action
      value: allow
      if: "ctx._temp_?.event?.action == 'permitted'"
  - set:
      field: event.type
      value: allowed
      if: "ctx.event?.action == 'allow'"
  - set:
      field: "log.level"
      if: "ctx.event.severity == 0"
      value: emergencies
  - set:
      field: "log.level"
      if: "ctx.event.severity == 1"
      value: alert
  - set:
      field: "log.level"
      if: "ctx.event.severity == 2"
      value: critical
  - set:
      field: "log.level"
      if: "ctx.event.severity == 3"
      value: error
  - set:
      field: "log.level"
      if: "ctx.event.severity == 4"
      value: warning
  - set:
      field: "log.level"
      if: "ctx.event.severity == 5"
      value: notification
  - set:
      field: "log.level"
      if: "ctx.event.severity == 6"
      value: informational
  - set:
      field: "log.level"
      if: "ctx.event.severity == 7"
      value: debug

  # IP Geolocation Lookup
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true

  # IP Autonomous System (AS) Lookup
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true

  - append:
      field: related.ip
      value: "{{{source.ip}}}"
      allow_duplicates: false
      if: ctx.source?.ip != null
  - append:
      field: related.ip
      value: "{{{destination.ip}}}"
      allow_duplicates: false
      if: ctx.destination?.ip != null
  - append:
      field: related.user
      value: "{{{source.user.name}}}"
      allow_duplicates: false
      if: ctx.source?.user?.name != null
  - community_id:
      ignore_missing: true
      ignore_failure: true
  - remove:
      field:
       - _temp_
       - _conf
      ignore_missing: true
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true

on_failure:
  - remove:
      field:
        - _temp_
        - _conf
      ignore_missing: true
  - set:
      field: error.message
      value: "processor {{{ _ingest.on_failure_processor_type}}}: {{{ _ingest.on_failure_message }}}"
