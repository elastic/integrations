---
description: Pipeline for parsing Cassandra System logs
processors:
  - set:
      field: event.ingested
      value: "{{{_ingest.timestamp}}}"
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: ecs.version
      value: 8.0.0
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: event.module
      value: cassandra
      ignore_empty_value: true
      ignore_failure: true
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      ignore_failure: true
  - grok:
      field: event.original
      pattern_definitions:
        GREEDYMULTILINE: "(.|\\n|\\t)*"
      patterns:
              - "%{LOGLEVEL:log.level}%{SPACE}\\[%{GREEDYDATA:process.thread.name}\\]%{SPACE}%{TIMESTAMP_ISO8601:cassandra.log.timestamp}%{SPACE}%{DATA:log.origin.file.name}\\:%{INT:log.origin.file.line:long}%{SPACE}\\-%{SPACE}%{GREEDYDATA:message}%{GREEDYMULTILINE:cassandra.log.meta}"
      ignore_missing: true
  - date:
      field: cassandra.log.timestamp
      target_field: "@timestamp"
      formats: ["yyyy-MM-dd HH:mm:ss,SSS"]
  - remove:
      field:
        - cassandra.log.timestamp
      ignore_missing: true
      ignore_failure: true
  - set:
      field: event.kind
      value: event
      ignore_empty_value: true
      ignore_failure: true
  - append:
      field: event.category
      value: database
  - script:
      if: "ctx.log?.level != null"
      lang: painless
      source: >-
        def err_levels = ["FATAL", "ERROR", "WARN"];
        if (err_levels.contains(ctx.log.level)) {
          ctx.event.type = "error";
        } else {
          ctx.event.type = "info";
        }
  - script:
      description: Drops null/empty values recursively.
      lang: painless
      source: |
          boolean drop(Object o) {
              if (o == null || o == "") {
              return true;
              } else if (o instanceof Map) {
              ((Map) o).values().removeIf(v -> drop(v));
              return (((Map) o).size() == 0);
              } else if (o instanceof List) {
              ((List) o).removeIf(v -> drop(v));
              return (((List) o).length == 0);
              }
              return false;
          }
          drop(ctx);
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_missing: true
      ignore_failure: true
on_failure:
- set:
    field: error.message
    value: "{{{ _ingest.on_failure_message }}}"
