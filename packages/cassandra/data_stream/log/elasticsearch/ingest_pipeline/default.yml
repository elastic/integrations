---
description: Pipeline for parsing Cassandra system logs
processors:
  - set:
      field: event.ingested
      value: '{{_ingest.timestamp}}'
  - set:
      field: ecs.version
      value: '1.12.0'
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - grok:
      field: event.original
      pattern_definitions:
        GREEDYMULTILINE: "(.|\\n|\\t)*"
      patterns:
        - "%{LOGLEVEL:log.level}%{SPACE}\\[%{GREEDYDATA:process.thread.name}\\]%{SPACE}%{TIMESTAMP_ISO8601:cassandra.log.timestamp}%{SPACE}%{DATA:log.origin.file.name}\\:%{INT:log.origin.file.line}%{SPACE}\\-%{SPACE}%{GREEDYDATA:message}%{GREEDYMULTILINE:cassandra.log.meta}"
      ignore_missing: true
  - date:
      field: cassandra.log.timestamp
      target_field: "@timestamp"
      formats: ["yyyy-MM-dd HH:mm:ss,SSS"]
  - remove:
      field:
        - cassandra.log.timestamp
  - set:
      field: event.kind
      value: event
  - append:
      field: event.category
      value: database
  - script:
      if: "ctx?.log?.level != null"
      lang: painless
      source: >-
        def err_levels = ["FATAL", "ERROR", "WARN"];
        if (err_levels.contains(ctx.log.level)) {
          ctx.event.type = "error";
        } else {
          ctx.event.type = "info";
        }
on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}'