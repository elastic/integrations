config_version: 2
interval: {{interval}}
resource.tracer:
  enabled: {{enable_request_tracer}}
  filename: "../../logs/cel/http-request-trace-*.ndjson"
  maxbackups: 5
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  batch_size : {{batch_size}}
  client_id: {{client_id}}
  secret: {{client_secret}}
redact:
  fields:
    - client_id
    - secret
program: |-
  state.with(
    has(state.?next.expiry) && timestamp(state.next.expiry) > now ?
      {
        "access_token": state.next.access_token,
        "expiry": state.next.expiry,
      }
    :
      post_request(
        state.url.trim_right("/") + "/v1/login",
        "",
        {
          "clientId": state.client_id,
          "secret": state.secret,
        }.encode_json()
      ).with(
        {
          "Header": {
            "Accept": ["application/json"],
            "Content-Type": ["application/json"],
          },
        }
      ).do_request().as(resp, resp.StatusCode == 200 ?
        resp.Body.decode_json().as(body,
          {
            "next": {
              "access_token": body.jwt,
              "expiry": try(
                // Attempt to parse the expiry from the absolute value.
                body.expires.parse_time(
                  [
                    time_layout.RFC1123,
                    time_layout.RFC1123Z,
                  ]
                ),
                "error"
              ).as(t, !has(t.error) ?
                t
              :
                // But fall back to the relative time if that fails.
                now() + duration(string(body.expiresIn) + "s")
              ).format(time_layout.RFC3339),
            },
            "offset": 0,
            "counter": 0,
          }
        )
      :
        {
          "events": {
            "error": {
              "code": string(resp.StatusCode),
              "id": string(resp.Status),
              "message": "POST " + state.url.trim_right("/") + "/v1/login " + (
                size(resp.Body) != 0 ?
                  string(resp.Body)
                :
                  string(resp.Status) + " (" + string(resp.StatusCode) + ")"
              ),
            },
          },
          "want_more": false,
        }
      )
  ).as(state,
    state.with(
      request(
        "GET",
        state.url.trim_right("/") + "/v1/classifications?" + {
          "limit": [string(state.batch_size)],
          "offset": [string(state.offset)],
        }.format_query()
      ).with(
        {
          "Header": {
            "Authorization": ["Bearer " + state.next.access_token],
            "Accept": ["application/json"],
          },
        }
      ).do_request().as(resp, resp.StatusCode == 200 ?
        resp.Body.decode_json().as(body,
          {
            "events": has(body.results) && body.results != null ?
              body.results.map(e,
                {
                  "message": e.encode_json(),
                }
              )
            :
              [],
            "offset": has(body.results) && int(state.counter) + int(size(body.results)) < int(body.?total.orValue(-1)) ?
              int(state.offset) + int(size(body.results))
            :
              state.batch_size,
            "counter": int(state.counter) + int(body.?limit.orValue(0)) < int(body.?total.orValue(-1)) ?
              int(state.counter) + int(body.limit)
            :
              0,
            "want_more": has(body.limit) && has(body.total) && int(state.counter) + int(body.?limit.orValue(0)) < int(body.?total.orValue(-1)),
          }
        )
      :
        {
          "events": {
            "error": {
              "code": string(resp.StatusCode),
              "id": string(resp.Status),
              "message": "POST " + state.url.trim_right("/") + "/v2/classifications " + (
                size(resp.Body) != 0 ?
                  string(resp.Body)
                :
                  string(resp.Status) + " (" + string(resp.StatusCode) + ")"
              ),
            },
          },
          "want_more": false,
        }
      )
    )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
