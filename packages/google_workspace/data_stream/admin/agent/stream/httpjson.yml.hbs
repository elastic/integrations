config_version: "2"
interval: {{interval}}
auth.oauth2.provider: google
auth.oauth2.google.jwt_file: {{jwt_file}}
auth.oauth2.google.delegated_account: {{delegated_account}}
auth.oauth2.scopes:
  - https://www.googleapis.com/auth/admin.reports.audit.readonly
request.url: https://www.googleapis.com/admin/reports/v1/activity/users/{{user_key}}/applications/admin
{{#if http_client_timeout}}
request.timeout: {{http_client_timeout}}
{{/if}}
request.transforms:
  - set:
      target: url.params.startTime
      value: "[[.cursor.last_execution_datetime]]"
      default: '[[formatDate (now (parseDuration "-{{initial_interval}}"))]]'
response.split:
  target: body.items
  split:
    target: body.events
    keep_parent: true
response.pagination:
  - set:
      target: url.params.pageToken
      value: "[[.last_response.body.nextPageToken]]"
cursor:
  last_execution_datetime:
    value: "[[formatDate now]]"
tags:
{{#each tags as |tag i|}}
 - {{tag}}
{{/each}}
{{#contains tags "forwarded"}}
publisher_pipeline.disable_host: true
{{/contains}}
processors:
  - script:
      lang: javascript
      id: gworkspace-admin
      source: 
            var setRelatedUserInfo = function(evt) {
                var email = evt.Get("google_workspace.admin.user.email");
                if (!email) {
                    return;
                }

                var data = email.split("@");
                if (data.length !== 2) {
                    return;
                }

                evt.AppendTo("related.user", data[0]);
                evt.Put("user.target.name", data[0]);
                evt.Put("user.target.domain", data[1]);
                evt.Put("user.target.email", email);
                var groupName = evt.Get("group.name");
                if (groupName) {
                    evt.Put("user.target.group.name", groupName);
                }
                var groupDomain = evt.Get("group.domain");
                if (groupDomain) {
                    evt.Put("user.target.group.domain", groupDomain);
                }
            };

            var setEventDuration = function(evt) {
                var start = evt.Get("event.start");
                var end = evt.Get("event.end");
                if (!start || !end) {
                    return;
                }

                evt.Put("event.duration", end.UnixNano() - start.UnixNano());
            };

            var setEventOutcome = function(evt) {
                var failed = evt.Get("google_workspace.admin.group.bulk_upload.failed");
                if (failed === null) {
                    return;
                }

                if (failed === 0) {
                    evt.Put("event.outcome", "success");
                } else {
                    evt.Put("event.outcome", "failure");
                }
            };

            var setGroupAllowedlist = function(evt) {
                var allowedList = evt.Get("google_workspace.admin.WHITELISTED_GROUPS");
                if (!allowedList) {
                    return;
                }

                evt.Put("google_workspace.admin.group.allowed_list", allowedList.split(","));
                evt.Delete("google_workspace.admin.WHITELISTED_GROUPS");
            };

            var deleteField = function(field) {
                return function(evt) {
                    evt.Delete(field);
                };
            };

            var parseDate = function(field, targetField) {
                return new processor.Chain()
                    .Add(new processor.Timestamp({
                        field: field,
                        target_field: targetField,
                        timezone: "UTC",
                        layouts: [
                            "2006-01-02T15:04:05Z",
                            "2006-01-02T15:04:05.999Z",
                            "2006/01/02 15:04:05 UTC",
                        ],
                        tests: [
                            "2020-02-05T18:19:23Z",
                            "2020-02-05T18:19:23.599Z",
                            "2020/07/28 04:59:59 UTC",
                        ],
                        ignore_missing: true,
                    }))
                    .Add(deleteField(field))
                    .Build()
            };
                .Add(parseDate(
                    "google_workspace.admin.EMAIL_LOG_SEARCH_END_DATE",
                    "google_workspace.admin.email.log_search_filter.end_date"
                ))
                .Add(parseDate(
                    "google_workspace.admin.EMAIL_LOG_SEARCH_START_DATE",
                    "google_workspace.admin.email.log_search_filter.start_date"
                ))
                .Add(parseDate(
                    "google_workspace.admin.BIRTHDATE",
                    "google_workspace.admin.user.birthdate"
                ))
                .Add(parseDate(
                    "google_workspace.admin.BEGIN_DATE_TIME",
                    "event.start"
                ))
                .Add(parseDate(
                    "google_workspace.admin.START_DATE",
                    "event.start"
                ))
                .Add(parseDate(
                    "google_workspace.admin.END_DATE",
                    "event.end"
                ))
                .Add(parseDate(
                    "google_workspace.admin.END_DATE_TIME",
                    "event.end"
                ))
                .Add(setGroupInfo)
                .Add(setRelatedUserInfo)
                .Add(setEventDuration)
                .Add(setEventOutcome)
                .Add(setGroupAllowedlist)
                .Build();

            return {
                process: pipeline.Run,
            };
        }());

        function process(evt) {
            return login.process(evt);
        }
