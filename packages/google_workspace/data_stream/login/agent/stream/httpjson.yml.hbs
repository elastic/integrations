config_version: "2"
interval: {{interval}}
auth.oauth2.provider: google
auth.oauth2.google.jwt_file: {{jwt_file}}
auth.oauth2.google.delegated_account: {{delegated_account}}
auth.oauth2.scopes:
  - https://www.googleapis.com/auth/admin.reports.audit.readonly
request.url: https://www.googleapis.com/admin/reports/v1/activity/users/{{user_key}}/applications/login
{{#if http_client_timeout}}
request.timeout: {{http_client_timeout}}
{{/if}}
request.transforms:
  - set:
      target: url.params.startTime
      value: "[[.cursor.last_execution_datetime]]"
      default: '[[parseDate now (parseDuration "-{{initial_interval}}")]]'
response.split:
  target: body.items
  split:
    target: body.events
    keep_parent: true
response.pagination:
  - set:
      target: url.params.pageToken
      value: "[[.last_response.body.nextPageToken]]"
cursor:
  last_execution_datetime:
    value: "[[now]]"
tags:
{{#each tags as |tag i|}}
 - {{tag}}
{{/each}}
{{#contains tags "forwarded"}}
publisher_pipeline.disable_host: true
{{/contains}}
processors:
  - add_fields:
      target: ''
      fields:
        ecs.version: 1.8.0
  - script:
      lang: javascript
      id: gworkspace-common
      source: |
        // Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
        // or more contributor license agreements. Licensed under the Elastic License;
        // you may not use this file except in compliance with the Elastic License.

        var googleWorkspace = (function () {
            var processor = require("processor");

            var decodeJson = new processor.DecodeJSONFields({
                fields: ["message"],
                target: "json",
            });

            var parseTimestamp = new processor.Timestamp({
                field: "json.id.time",
                timezone: "UTC",
                layouts: ["2006-01-02T15:04:05.999Z"],
                tests: ["2020-02-05T18:19:23.599Z"],
                ignore_missing: true,
            });

            var convertFields = new processor.Convert({
                fields: [
                    { from: "message", to: "event.original" },
                    { from: "json.events.name", to: "event.action" },
                    { from: "json.id.applicationName", to: "event.provider" },
                    { from: "json.id.uniqueQualifier", to: "event.id", type: "string" },
                    { from: "json.actor.email", to: "source.user.email" },
                    { from: "json.actor.profileId", to: "source.user.id", type: "string" },
                    { from: "json.ipAddress", to: "source.ip", type: "ip" },
                    { from: "json.kind", to: "google_workspace.kind" },
                    { from: "json.id.customerId", to: "organization.id", type: "string" },
                    { from: "json.actor.callerType", to: "google_workspace.actor.type" },
                    { from: "json.actor.key", to: "google_workspace.actor.key" },
                    { from: "json.ownerDomain", to: "google_workspace.organization.domain" },
                    { from: "json.events.type", to: "google_workspace.event.type" },
                ],
                mode: "rename",
                ignore_missing: true,
                fail_on_error: false,
            });

            var completeUserData = function(evt) {
                var email = evt.Get("source.user.email");
                if (!email) {
                    return;
                }

                var data = email.split("@");
                if (data.length !== 2) {
                    return;
                }

                evt.Put("user.id", evt.Get("source.user.id"));
                evt.Put("user.name", data[0]);
                evt.Put("source.user.name", data[0]);
                evt.Put("user.domain", data[1]);
                evt.Put("source.user.domain", data[1]);
            };

            var copyFields = function(evt) {
                var ip = evt.Get("source.ip");
                if (ip) {
                    evt.Put("related.ip", [ip]);
                }
                var userName = evt.Get("source.user.name");
                if (userName) {
                    evt.Put("related.user", [userName]);
                }
            };

            var pipeline = new processor.Chain()
                .Add(decodeJson)
                .Add(parseTimestamp)
                .Add(convertFields)
                .Add(completeUserData)
                .Add(copyFields)
                .Build();

            return {
                process: pipeline.Run,
            };
        }());

        function process(evt) {
            return googleWorkspace.process(evt);
        }

  - script:
      lang: javascript
      id: gworkspace-login
      source: |
        // Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
        // or more contributor license agreements. Licensed under the Elastic License;
        // you may not use this file except in compliance with the Elastic License.

        var login = (function () {
            var processor = require("processor");

            var categorizeEvent = function(evt) {
                evt.Put("event.category", ["authentication"]);
                switch (evt.Get("event.action")) {
                    case "login_failure":
                        evt.AppendTo("event.category", "session");
                        evt.Put("event.type", ["start"]);
                        evt.Put("event.outcome", "failure");
                        break;
                    case "login_success":
                        evt.AppendTo("event.category", "session");
                        evt.Put("event.type", ["start"]);
                        evt.Put("event.outcome", "success");
                        break;
                    case "logout":
                        evt.AppendTo("event.category", "session");
                        evt.Put("event.type", ["end"]);
                        break;
                    case "account_disabled_generic":
                    case "account_disabled_spamming_through_relay":
                    case "account_disabled_spamming":
                    case "account_disabled_hijacked":
                    case "account_disabled_password_leak":
                        evt.Put("event.type", ["user", "change"]);
                        break;
                    case "gov_attack_warning":
                    case "login_challenge":
                    case "login_verification":
                    case "suspicious_login":
                    case "suspicious_login_less_secure_app":
                    case "suspicious_programmatic_login":
                        evt.Put("event.type", ["info"]);
                        break;
                }
            };

            var getParamValue = function(param) {
                if (param.value) {
                    return param.value;
                }
                if (param.multiValue) {
                    return param.multiValue;
                }
            };

            var processParams = function(evt) {
                var params = evt.Get("json.events.parameters");
                if (!params || !Array.isArray(params)) {
                    return;
                }

                var prefixRegex = /^(login_)/;

                params.forEach(function(p){
                    p.name = p.name.replace(prefixRegex, "");
                    switch (p.name) {
                        // According to https://developers.google.com/admin-sdk/reports/v1/appendix/activity/login
                        // this is a timestamp in microseconds
                        case "timestamp":
                            var millis = p.intValue / 1000;
                            evt.Put("event.start", new Date(millis).toUTCString());
                            break;
                        case "challenge_status":
                            if (p.value === "Challenge Passed") {
                                evt.Put("event.outcome", "success");
                            } else {
                                evt.Put("event.outcome", "failure");
                            }
                            break;
                        case "is_second_factor":
                        case "is_suspicious":
                            evt.Put("google_workspace.login."+p.name, p.boolValue);
                            break;
                        // the rest of params are strings
                        default:
                            evt.Put("google_workspace.login."+p.name, getParamValue(p));
                    }
                });

                evt.Delete("json.events.parameters");
            };

            var addTargetUser = function(evt) {
                var affectedEmail = evt.Get("google_workspace.login.affected_email_address");
                if (affectedEmail) {
                    evt.Put("user.target.email", affectedEmail);
                    var data = affectedEmail.split("@");
                    if (data.length !== 2) {
                        return;
                    }

                    evt.Put("user.target.name", data[0]);
                    evt.Put("user.target.domain", data[1]);
                    evt.AppendTo("related.user", data[0]);
                }
            };

            var pipeline = new processor.Chain()
                .Add(categorizeEvent)
                .Add(processParams)
                .Add(addTargetUser)
                .Build();

            return {
                process: pipeline.Run,
            };
        }());

        function process(evt) {
            return login.process(evt);
        }
