{
    "id": "c6bcde81-4ca4-5f6f-9ef0-1116b4a02f4c",
    "type": "csp-rule-template",
    "attributes": {
        "enabled": true,
        "muted": false,
        "metadata": {
            "id": "c6bcde81-4ca4-5f6f-9ef0-1116b4a02f4c",
            "name": "Ensure that the RotateKubeletServerCertificate argument is set to true (Manual)",
            "profile_applicability": "* Level 1\n",
            "description": "Enable kubelet server certificate rotation.\n",
            "rationale": "`RotateKubeletServerCertificate` causes the kubelet to both request a serving certificate after bootstrapping its client credentials and rotate the certificate as its existing credentials expire. This automated periodic rotation ensures that the there are no downtimes due to expired certificates and thus addressing availability in the CIA security triad. Note: This recommendation only applies if you let kubelets get their certificates from the API server. In case your kubelet certificates come from an outside authority/tool (e.g. Vault) then you need to take care of rotation yourself.\n",
            "audit": "**Audit Method 1:**\nIf using a Kubelet configuration file, check that there is an entry for\n`RotateKubeletServerCertificate` is set to `true`.\nFirst, SSH to the relevant node:\nRun the following command on each node to find the appropriate Kubelet config file:\n```\nps -ef | grep kubelet\n```\nThe output of the above command should return something similar to `--config`\n`/etc/kubernetes/kubelet/kubelet-config.json` which is the location of the Kubelet\nconfig file.\nOpen the Kubelet config file:\n```\ncat /etc/kubernetes/kubelet/kubelet-config.json\n```\nVerify that `RotateKubeletServerCertificate` argument exists and is set to `true`.\n**Audit Method 2:**\nIf using the api configz endpoint consider searching for the status of\n`\"RotateKubeletServerCertificate\":true` by extracting the live configuration from the\nnodes running kubelet.\nSet the local proxy port and the following variables and provide proxy port number and\nnode name;\n`HOSTNAME_PORT=\"localhost-and-port-number\"`\n`NODE_NAME=\"The-Name-Of-Node-To-Extract-Configuration\" from the output of`\n`\"kubectl get nodes\"`\n```\nkubectl proxy --port=8001 \u0026\nexport HOSTNAME_PORT=localhost:8001 (example host and port number)\nexport NODE_NAME=ip-192.168.31.226.ec2.internal (example node name from\n\"kubectl get nodes\")\ncurl -sSL \"http://${HOSTNAME_PORT}/api/v1/nodes/${NODE_NAME}/proxy/configz\"\n```\n",
            "remediation": "**Remediation Method 1:**\nIf modifying the Kubelet config file, edit the kubelet-config.json file\n`/etc/kubernetes/kubelet/kubelet-config.json` and set the below parameter to `true`\n```\n\"RotateKubeletServerCertificate\":true\n```\n**Remediation Method 2:**\nIf using a Kubelet config file, edit the file to set `RotateKubeletServerCertificate` to\n`true`.\nIf using executable arguments, edit the kubelet service file\n`/etc/systemd/system/kubelet.service.d/10-kubelet-args.conf` on each worker node\nand add the below parameter at the end of the `KUBELET_ARGS` variable string.\n```\n--rotate-kubelet-server-certificate=true\n```\n**Remediation Method 3:**\nIf using the api configz endpoint consider searching for the status of\n`\"RotateKubeletServerCertificate\"`: by extracting the live configuration from the nodes\nrunning kubelet.\n**See detailed step-by-step configmap procedures in Reconfigure a Node's Kubelet in a Live\nCluster, and then rerun the curl statement from audit process to check for kubelet\nconfiguration changes\n```\nkubectl proxy --port=8001 \u0026\nexport HOSTNAME_PORT=localhost:8001 (example host and port number)\nexport NODE_NAME=ip-192.168.31.226.ec2.internal (example node name from\n\"kubectl get nodes\")\ncurl -sSL \"http://${HOSTNAME_PORT}/api/v1/nodes/${NODE_NAME}/proxy/configz\"\n```\n**For all three remediations:**\nBased on your system, restart the `kubelet` service and check status\n```\nsystemctl daemon-reload\nsystemctl restart kubelet.service\nsystemctl status kubelet -l\n```\n",
            "impact": "None\n",
            "default_value": "See the Amazon EKS documentation for the default value.\n",
            "references": "1. https://github.com/kubernetes/kubernetes/pull/45059\n2. https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/#kubelet-configuration\n",
            "section": "Kubelet",
            "version": "1.0",
            "tags": [
                "CIS",
                "EKS",
                "CIS 3.2.11",
                "Kubelet"
            ],
            "benchmark": {
                "name": "CIS Amazon Elastic Kubernetes Service (EKS) Benchmark",
                "version": "v1.0.1",
                "id": "cis_eks"
            },
            "rego_rule_id": "cis_3_2_11"
        }
    },
    "migrationVersion": {
        "csp-rule-template": "8.4.0"
    },
    "coreMigrationVersion": "8.4.0"
}