{
    "id": "92ab0102-d825-52ce-87a8-1d0b4e06166c",
    "type": "csp-rule-template",
    "attributes": {
        "metadata": {
            "impact": "Enabling the pgAudit extension can lead to increased data storage requirements and to ensure durability of pgAudit log records in the event of unexpected storage issues, it is recommended to enable the `Enable automatic storage increases` setting on the instance. Enabling flags via the command line will also overwrite all existing flags, so you should apply all needed flags in the CLI command. Also flags may require a restart of the server to be implemented or will break existing functionality so update your servers at a time of low usage.",
            "default_value": "",
            "references": "1. https://cloud.google.com/sql/docs/postgres/flags#list-flags-postgres\n2. https://cloud.google.com/sql/docs/postgres/pg-audit#enable-auditing-flag\n3. https://cloud.google.com/sql/docs/postgres/pg-audit#customizing-database-audit-logging\n4. https://cloud.google.com/logging/docs/audit/configure-data-access#config-console-enable",
            "id": "92ab0102-d825-52ce-87a8-1d0b4e06166c",
            "name": "Ensure That 'cloudsql.enable_pgaudit' Database Flag for each Cloud Sql Postgresql Instance Is Set to 'on' For Centralized Logging",
            "profile_applicability": "* Level 1",
            "description": "Ensure `cloudsql.enable_pgaudit` database flag for Cloud SQL PostgreSQL instance is set to `on` to allow for centralized logging.",
            "rationale": "As numerous other recommendations in this section consist of turning on flags for logging purposes, your organization will need a way to manage these logs.\nYou may have a solution already in place.\nIf you do not, consider installing and enabling the open source pgaudit extension within PostgreSQL and enabling its corresponding flag of `cloudsql.enable_pgaudit`.\nThis flag and installing the extension enables database auditing in PostgreSQL through the open-source pgAudit extension.\nThis extension provides detailed session and object logging to comply with government, financial, & ISO standards and provides auditing capabilities to mitigate threats by monitoring security events on the instance.\nEnabling the flag and settings later in this recommendation will send these logs to Google Logs Explorer so that you can access them in a central location.\nto This recommendation is applicable only to PostgreSQL database instances.",
            "audit": "**Determining if the pgAudit Flag is set to 'on'**\n\n**From Google Cloud Console**\n\n1. Go to [https://console.cloud.google.com/sql/instances](https://console.cloud.google.com/sql/instances).\n2. Select the instance to open its `Overview` page.\n3. Click `Edit`.\n4. Scroll down and expand `Flags`.\n5. Ensure that `cloudsql.enable_pgaudit` flag is set to `on`.\n\n**From Google Cloud CLI**\n\nRun the command by providing `<INSTANCE_NAME>`.\nEnsure the value of the flag is `on`.\n\n``` \ngcloud sql instances describe <INSTANCE_NAME> --format=\"json\" | jq '.settings|.|.databaseFlags[]|select(.name==\"cloudsql.enable_pgaudit\")|.value' \n```\n\n**Determine if the pgAudit extension is installed**\n\n6. Connect to the the server running PostgreSQL or through a SQL client of your choice.\n7. Via command line open the PostgreSQL shell by typing `psql`\n8. Run the following command\n\n```\nSELECT * \nFROM pg_extension;\n```\n\n9. If pgAudit is in this list. If so, it is installed.\n\n**Determine if Data Access Audit logs are enabled for your project and have sufficient privileges**\n\n10. From the homepage open the hamburger menu in the top left.\n11. Scroll down to `IAM & Admin`and hover over it.\n12. In the menu that opens up, select `Audit Logs`\n13. In the middle of the page, in the search box next to `filter` search for `Cloud Composer API`\n14. Select it, and ensure that both 'Admin Read' and 'Data Read' are checked.\n\n**Determine if logs are being sent to Logs Explorer**\n\n15. From the Google Console home page, open the hamburger menu in the top left.\n16. In the menu that pops open, scroll down to Logs Explorer under Operations.\n17. In the query box, paste the following and search\n```\nresource.type=\"cloudsql_database\"\nlogName=\"projects/<your-project-name>/logs/cloudaudit.googleapis.com%2Fdata_access\"\nprotoPayload.request.@type=\"type.googleapis.com/google.cloud.sql.audit.v1.PgAuditEntry\"\n```\n18. If it returns any log sources, they are correctly setup.",
            "remediation": "**Initialize the pgAudit flag**\n\n**From Google Cloud Console**\n\n1. Go to [https://console.cloud.google.com/sql/instances](https://console.cloud.google.com/sql/instances).\n2. Select the instance to open its `Overview` page.\n3. Click `Edit`.\n4. Scroll down and expand `Flags`.\n5. To set a flag that has not been set on the instance before, click `Add item`.\n6. Enter `cloudsql.enable_pgaudit` for the flag name and set the flag to `on`.\n7. Click `Done`.\n8. Click `Save` to update the configuration.\n9. Confirm your changes under `Flags` on the `Overview` page.\n\n**From Google Cloud CLI**\n\nRun the below command by providing `<INSTANCE_NAME>` to enable `cloudsql.enable_pgaudit` flag.\n\n```\ngcloud sql instances patch <INSTANCE_NAME> --database-flags cloudsql.enable_pgaudit=on\n```\n\nNote: `RESTART` is required to get this configuration in effect.\n\n**Creating the extension**\n\n10. Connect to the the server running PostgreSQL or through a SQL client of your choice.\n11. If SSHing to the server in the command line open the PostgreSQL shell by typing `psql`\n12. Run the following command as a superuser.\n\n```\nCREATE EXTENSION pgaudit;\n```\n\n**Updating the previously created pgaudit.log flag for your Logging Needs**\n\n**From Console:**\n\nNote: there are multiple options here.\nThis command will enable logging for all databases on a server.\nPlease see the customizing database audit logging reference for more flag options.\n\n\n13. Go to [https://console.cloud.google.com/sql/instances](https://console.cloud.google.com/sql/instances).\n14. Select the instance to open its `Overview` page.\n15. Click `Edit`.\n16. Scroll down and expand `Flags`.\n17. To set a flag that has not been set on the instance before, click `Add item`.\n18. Enter `pgaudit.log=all` for the flag name and set the flag to `on`.\n19. Click `Done`.\n20. Click `Save` to update the configuration.\n21. Confirm your changes under `Flags` on the `Overview` page.\n\n**From Command Line:**\n\nRun the command\n\n```\ngcloud sql instances patch <INSTANCE_NAME> --database-flags \\\n cloudsql.enable_pgaudit=on,pgaudit.log=all\n```\n\n**Determine if logs are being sent to Logs Explorer**\n\n22. From the Google Console home page, open the hamburger menu in the top left.\n23. In the menu that pops open, scroll down to Logs Explorer under Operations.\n24. In the query box, paste the following and search\n\nresource.type=\"cloudsql_database\"\nlogName=\"projects/<your-project-name>/logs/cloudaudit.googleapis.com%2Fdata_access\"\nprotoPayload.request.@type=\"type.googleapis.com/google.cloud.sql.audit.v1.PgAuditEntry\"\n\n If it returns any log sources, they are correctly setup.",
            "section": "PostgreSQL Database",
            "version": "1.0",
            "tags": [
                "CIS",
                "GCP",
                "CIS 6.2.8",
                "PostgreSQL Database"
            ],
            "benchmark": {
                "name": "CIS Google Cloud Platform Foundation",
                "version": "v2.0.0",
                "id": "cis_gcp",
                "rule_number": "6.2.8",
                "posture_type": "cspm"
            },
            "rego_rule_id": "cis_6_2_8"
        }
    },
    "migrationVersion": {
        "csp-rule-template": "8.7.0"
    },
    "coreMigrationVersion": "8.7.0"
}