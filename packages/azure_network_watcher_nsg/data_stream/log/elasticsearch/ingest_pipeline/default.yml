---
description: Pipeline for processing NSG logs.
processors:
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: 8.12.0
  - set:
      field: event.kind
      tag: set_event_kind
      value: event
  - append:
      field: event.category
      tag: append_event_category
      value: network
      allow_duplicates: false
  - append:
      field: event.type
      tag: append_event_type
      value: info
      allow_duplicates: false
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      ignore_missing: true
      description: Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.
      if: ctx.event?.original == null
  - remove:
      field: message
      tag: remove_message
      ignore_missing: true
      description: The `message` field is no longer required if the document has an `event.original` field.
      if: ctx.event?.original != null
  - json:
      field: event.original
      tag: json_event_original
      target_field: json
      if: ctx.event?.original != null
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: json.time
      tag: date_time
      target_field: azure_network_watcher_nsg.log.time
      formats:
        - ISO8601
      if: ctx.json?.time != null && ctx.json.time != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: '@timestamp'
      tag: set_timestamp
      copy_from: azure_network_watcher_nsg.log.time
      ignore_empty_value: true
  - rename:
      field: json.systemId
      tag: rename_systemId
      target_field: azure_network_watcher_nsg.log.system_id
      ignore_missing: true
  - rename:
      field: json.category
      tag: rename_category
      target_field: azure_network_watcher_nsg.log.category
      ignore_missing: true
  - rename:
      field: json.resourceId
      tag: rename_resourceId
      target_field: azure_network_watcher_nsg.log.resource_id
      ignore_missing: true
  - rename:
      field: json.operationName
      tag: rename_operationName
      target_field: azure_network_watcher_nsg.log.operation_name
      ignore_missing: true
  - convert:
      field: json.properties.Version
      tag: convert_properties_version_to_string
      target_field: azure_network_watcher_nsg.log.properties.version
      type: string
      ignore_missing: true
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_add_mac_from_flows
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_add_mac_from_flows
          field: _ingest._value.flows
          processor:
           uppercase:
            field: _ingest._value.mac
            tag: uppercase_mac
            ignore_missing: true  
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_add_mac_from_flows
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_add_mac_from_flows
          field: _ingest._value.flows
          processor:
            gsub:
              field: _ingest._value.mac
              pattern: '(..)(?!$)'
              replacement: '$1-'
              ignore_missing: true
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_add_mac_to_source_mac
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_add_mac_to_source_mac
          field: _ingest._value.flows
          processor:
           append:
            field: source.mac
            tag: append_mac_to_source_mac
            value: '{{{_ingest._value.mac}}}'
            allow_duplicates: false
  - foreach:
      field: json.properties.flows
      tag: foreach_flows_to_append_rule_name
      if: ctx.json?.properties?.flows instanceof List
      processor:
        append:
         field: rule.name
         tag: append_rule_to_rule_name
         value: '{{{_ingest._value.rule}}}'
         allow_duplicates: false
  - script:
      lang: painless
      description: Extracts the values from the flows tuples list.
      tag: extracts_values_from_the_flows_tuples_list
      if: ctx.json?.properties?.flows instanceof List
      source: |
        def convertToArray(def list) {
          List arrayList = new ArrayList(new HashSet(list));
          return arrayList;
        }
        List flowsList = ctx.json.properties.flows;
        List destinationBytes = new ArrayList();
        List sourceBytes = new ArrayList();
        List destinationPackets = new ArrayList();
        List sourcePackets = new ArrayList();
        List srcPort = new ArrayList();
        List destinationPort = new ArrayList();
        List destinationIp = new ArrayList();
        List srcIp = new ArrayList();
        for (Object flowEntryObj: flowsList) {
          Map flowEntry = (Map) flowEntryObj;
          List innerFlowsList = flowEntry.containsKey('flows') ? (List) flowEntry.get('flows') : Collections.emptyList();
          for (Object innerFlowEntryObj: innerFlowsList) {
            Map innerFlowEntry = (Map) innerFlowEntryObj;
            List flowTuplesList = innerFlowEntry.containsKey('flowTuples') ? (List) innerFlowEntry.get('flowTuples') : Collections.emptyList();
            List newFlowTuplesList = new ArrayList();

            for (Object flowTupleObj: flowTuplesList) {
              if (flowTupleObj instanceof String) {
                String flowTupleStr = (String) flowTupleObj;
                String[] flowTupleParts = flowTupleStr.splitOnToken(",");
                if (flowTupleParts.length == 13) {
                  Map flowTupleMap = new HashMap();
                  if (flowTupleParts.length > 0 && !flowTupleParts[0].isEmpty()) {
                    flowTupleMap.put("timestamp", flowTupleParts[0]);
                  }

                  if (flowTupleParts.length > 1 && !flowTupleParts[1].isEmpty()) {
                    srcIp.add(flowTupleParts[1]);
                    flowTupleMap.put("sourceIp", flowTupleParts[1]);
                  }

                  if (flowTupleParts.length > 2 && !flowTupleParts[2].isEmpty()) {
                    destinationIp.add(flowTupleParts[2]);
                    flowTupleMap.put("destIp", flowTupleParts[2]);
                  }

                  if (flowTupleParts.length > 3 && !flowTupleParts[3].isEmpty()) {
                    srcPort.add(flowTupleParts[3]);
                    flowTupleMap.put("sourcePort", flowTupleParts[3]);
                  }

                  if (flowTupleParts.length > 4 && !flowTupleParts[4].isEmpty()) {
                    destinationPort.add(flowTupleParts[4]);
                    flowTupleMap.put("destPort", flowTupleParts[4]);
                  }

                  String protocol = flowTupleParts[5];
                  if (protocol.contains("T")) {
                    protocol = "TCP";
                  } else if (protocol.contains("U")) {
                    protocol = "UDP";
                  }


                  if (flowTupleParts.length > 5 && !flowTupleParts[5].isEmpty()) {
                    flowTupleMap.put("protocol", protocol);
                  }

                  String trafficFlow = flowTupleParts[6];
                  if (trafficFlow.contains("I")) {
                    trafficFlow = "Inbound";
                  } else if (trafficFlow.contains("O")) {
                    trafficFlow = "Outbound";
                  }

                  if (flowTupleParts.length > 6 && !flowTupleParts[6].isEmpty()) {
                    flowTupleMap.put("trafficFlow", trafficFlow);
                  }

                  String trafficDecision = flowTupleParts[7];
                  if (trafficDecision.contains("A")) {
                    trafficDecision = "Allowed";
                  } else if (trafficDecision.contains("D")) {
                    trafficDecision = "Denied";
                  }

                  if (flowTupleParts.length > 7 && !flowTupleParts[7].isEmpty()) {
                    flowTupleMap.put("trafficDecision", trafficDecision);
                  }

                  String flowState = flowTupleParts[8];
                  if (flowState.contains("B")) {
                    flowState = "Begin";
                  } else if (flowState.contains("C")) {
                    flowState = "Continue";
                  } else if (flowState.contains("E")) {
                    flowState = "End";
                  }

                  if (flowTupleParts.length > 8 && !flowTupleParts[8].isEmpty()) {
                    flowTupleMap.put("flowState", flowState);
                  }

                  if (flowTupleParts.length > 9 && !flowTupleParts[9].isEmpty()) {
                    sourcePackets.add(flowTupleParts[9]);
                    flowTupleMap.put("packetsSent", flowTupleParts[9]);
                  }

                  if (flowTupleParts.length > 10 && !flowTupleParts[10].isEmpty()) {
                    sourceBytes.add(flowTupleParts[10]);
                    flowTupleMap.put("bytesSent", flowTupleParts[10]);
                  }

                  if (flowTupleParts.length > 11 && !flowTupleParts[11].isEmpty()) {
                    destinationPackets.add(flowTupleParts[11]);
                    flowTupleMap.put("packetsReceived", flowTupleParts[11]);
                  }

                  if (flowTupleParts.length > 12 && !flowTupleParts[12].isEmpty()) {
                    destinationBytes.add(flowTupleParts[12]);
                    flowTupleMap.put("bytesReceived", flowTupleParts[12]);
                  }
                  newFlowTuplesList.add(flowTupleMap);

                }
              }
            }
            innerFlowEntry.put("flowTuples", newFlowTuplesList);
          }
        }
        ctx.json.properties.flows = flowsList;
           if (ctx.destination == null ) {
          Map map = new HashMap();
          ctx.put("destination", map);
        }
        if (ctx.source == null ) {
          Map map = new HashMap();
          ctx.put("source", map);
        }
        if (ctx.destination?.packets == null ) {
          ctx.destination.put("packets", convertToArray(destinationPackets));
        }
        if (ctx.destination?.bytes == null ) {
          ctx.destination.put("bytes", convertToArray(destinationBytes));
        }
        if (ctx.source?.packets == null ) {
          ctx.source.put("packets", convertToArray(sourcePackets));
        }
        if (ctx.source?.bytes == null ) {
          ctx.source.put("bytes", convertToArray(sourceBytes));
        }

        if (ctx.source?.port == null ) {
          ctx.source.put("port", convertToArray(srcPort));
        }
        if (ctx.destination?.port == null ) {
          ctx.destination.put("port", convertToArray(destinationPort));
        }
        if (ctx.source?.ip == null ) {
          ctx.source.put("ip", convertToArray(srcIp));
        }
        if (ctx.destination?.ip == null ) {
          ctx.destination.put("ip", convertToArray(destinationIp));
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_append_protocol_to_network_transport
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_append_protocol_to_network_transport
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_append_protocol_to_network_transport
              field: _ingest._value.flowTuples
              processor:
                append:
                 field: network.transport
                 tag: append_protocol_to_network_transport
                 value: '{{_ingest._value.protocol}}'
                 allow_duplicates: false
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_add_destination_port_from_dest_port
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_add_destination_port_from_dest_port
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_add_destination_port_from_dest_port
              field: _ingest._value.flowTuples
              processor:
                convert:
                  field: _ingest._value.destPort
                  tag: convert_destPort_to_long
                  target_field: _ingest._value.destination.port
                  type: long
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.destPort
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_convert_source_port_to_long
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_convert_source_port_to_long
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_convert_source_port_to_long
              field: _ingest._value.flowTuples
              processor:
                convert:
                  field: _ingest._value.sourcePort
                  tag: convert_sourcePort_to_long
                  target_field: _ingest._value.source.port
                  type: long
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.sourcePort
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_convert_destIp_to_ip
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_convert_destIp_to_ip
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_convert_destIp_to_ip
              field: _ingest._value.flowTuples
              processor:
                convert:
                  field: _ingest._value.destIp
                  tag: convert_destIp_to_ip
                  target_field: _ingest._value.destination.ip
                  type: ip
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.destIp
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_convert_sourceIp_to_ip
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_convert_sourceIp_to_ip
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_convert_sourceIp_to_ip
              field: _ingest._value.flowTuples
              processor:
                convert:
                  field: _ingest._value.sourceIp
                  tag: convert_sourceIp_to_ip
                  target_field: _ingest._value.source.ip
                  type: ip
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.sourceIp
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_convert_packetsReceived_to_long
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_convert_packetsReceived_to_long
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_convert_packetsReceived_to_long
              field: _ingest._value.flowTuples
              processor:
                convert:
                  field: _ingest._value.packetsReceived
                  tag: convert_packetsReceived_to_long
                  target_field: _ingest._value.packets.received
                  type: long
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.packetsReceived
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_convert_packetsSent_to_long
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_convert_packetsSent_to_long
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_convert_packetsSent_to_long
              field: _ingest._value.flowTuples
              processor:
                convert:
                  field: _ingest._value.packetsSent
                  tag: convert_packetsSent_to_long
                  target_field: _ingest._value.packets.sent
                  type: long
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.packetsSent
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_convert_bytesReceived_to_long
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_convert_bytesReceived_to_long
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_convert_bytesReceived_to_long
              field: _ingest._value.flowTuples
              processor:
                convert:
                  field: _ingest._value.bytesReceived
                  tag: convert_bytesReceived_to_long
                  target_field: _ingest._value.bytes.received
                  type: long
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.bytesReceived
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_convert_bytesSent_to_long
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_convert_bytesSent_to_long
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_convert_bytesSent_to_long
              field: _ingest._value.flowTuples
              processor:
                convert:
                  field: _ingest._value.bytesSent
                  tag: convert_bytesSent_to_long
                  target_field: _ingest._value.bytes.sent
                  type: long
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.bytesSent
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_rename_trafficFlow
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_rename_trafficFlow
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_rename_trafficFlow
              field: _ingest._value.flowTuples
              processor:
                rename:
                  field: _ingest._value.trafficFlow
                  tag: rename_trafficFlow
                  target_field: _ingest._value.traffic.flow
                  ignore_missing: true
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_append_traffic_flow_to_network_direction
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_append_traffic_flow_to_network_direction
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_append_traffic_flow_to_network_direction
              field: _ingest._value.flowTuples
              processor:
               append:
                 field: network.direction
                 tag: append_traffic_flow_to_network_direction
                 value: '{{_ingest._value.traffic.flow}}'
                 allow_duplicates: false
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_rename_trafficDecision
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_rename_trafficDecision
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_rename_trafficDecision
              field: _ingest._value.flowTuples
              processor:
                rename:
                  field: _ingest._value.trafficDecision
                  tag: rename_trafficDecision
                  target_field: _ingest._value.traffic.decision
                  ignore_missing: true
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_rename_flowState
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_rename_flowState
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_rename_flowState
              field: _ingest._value.flowTuples
              processor:
                rename:
                  field: _ingest._value.flowState
                  tag: rename_flowState
                  target_field: _ingest._value.flow_state
                  ignore_missing: true
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_set_date
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_set_date
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_set_date
              field: _ingest._value.flowTuples
              processor:
                date:
                  field: _ingest._value.timestamp
                  tag: date_timestamp
                  target_field: _ingest._value.timestamp
                  formats:
                    - UNIX
                  on_failure:
                    - remove:
                        field: _ingest._value.timestamp
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_remove_type_converted_fields
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_remove_type_converted_fields
          field: _ingest._value.flows
          processor:
            foreach:
              tag: foreach_flowTuples_to_remove_type_converted_fields
              field: _ingest._value.flowTuples
              processor:
                remove:
                  field:
                    - _ingest._value.destPort
                    - _ingest._value.sourcePort
                    - _ingest._value.destIp
                    - _ingest._value.sourceIp
                    - _ingest._value.packetsReceived
                    - _ingest._value.packetsSent
                    - _ingest._value.bytesReceived
                    - _ingest._value.bytesSent
                  tag: remove_type_converted_fields
                  ignore_missing: true
  - foreach:
      field: json.properties.flows
      tag: foreach_properties_flows_to_rename_flowTuples
      if: ctx.json?.properties?.flows instanceof List
      processor:
        foreach:
          tag: foreach_flows_to_rename_flowTuples
          field: _ingest._value.flows
          processor:
           rename:
            field: _ingest._value.flowTuples
            tag: rename_flowTuples
            target_field: _ingest._value.tuples
            ignore_missing: true
  - rename:
      field: json.properties.flows
      tag: rename_properties_flows
      target_field: azure_network_watcher_nsg.log.properties.flows
      ignore_missing: true
  - foreach:
      field: source.port
      tag: foreach_source_port_to_convert_source_port_to_long
      if: ctx.source?.port instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_source_port_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: destination.port
      tag: foreach_destination_port_to_convert_destination_port_to_long
      if: ctx.destination?.port instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_destination_port_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: source.ip
      tag: foreach_source_ip_to_convert_source_ip_to_ip
      if: ctx.source?.ip instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_source_ip_to_ip
          type: ip
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: destination.ip
      tag: foreach_destination_ip_to_convert_destination_ip_to_ip
      if: ctx.destination?.ip instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_destination_ip_to_ip
          type: ip
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: source.packets
      tag: foreach_source_packets_to_convert_source_packets_to_long
      if: ctx.source?.packets instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_source_packets_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: source.bytes
      tag: foreach_source_bytes_to_convert_source_bytes_to_long
      if: ctx.source?.bytes instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_source_bytes_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: destination.packets
      tag: foreach_destination_packets_to_convert_destination_packets_to_long
      if: ctx.destination?.packets instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_destination_packets_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: destination.bytes
      tag: foreach_destination_bytes_to_convert_destination_bytes_to_long
      if: ctx.destination?.bytes instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_destination_bytes_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: destination.ip
      tag: foreach_destination_ip_to_append_related_ip_from_destination_ip
      if: ctx.destination?.ip instanceof List
      processor:
        append:
          field: related.ip
          tag: append_related_ip_from_destination_ip
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - foreach:
      field: source.ip
      tag: foreach_source_ip_to_append_related_ip_from_source_ip
      if: ctx.source?.ip instanceof List
      processor:
        append:
          field: related.ip
          tag: append_related_ip_from_source_ip
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - foreach:
      field: network.direction
      tag: foreach_network_direction_to_make_network_direction_lowercase
      if: ctx.network?.direction instanceof List
      processor:
        lowercase:
          field: _ingest._value
          tag: lowercase_network_direction
          ignore_missing: true
  - foreach:
      field: network.transport
      tag: foreach_network_transport_to_make_network_transport_lowercase
      if: ctx.network?.transport instanceof List
      processor:
        lowercase:
          field: _ingest._value
          tag: lowercase_network_transport
          ignore_missing: true
  - remove:
      field: json
      tag: remove_json
      ignore_missing: true
  - remove:
      field: event.original
      tag: remove_event_original
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
  - script:
      lang: painless
      description: Drops null/empty values recursively.
      tag: painless_remove_null
      source: |-
        boolean drop(Object object) {
          if (object == null || object == '') {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(v -> drop(v));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(v -> drop(v));
            return (((List) object).length == 0);
          }
          return false;
        }
        drop(ctx);
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      value: pipeline_error
      tag: set_pipeline_error_into_event_kind
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      value: pipeline_error
