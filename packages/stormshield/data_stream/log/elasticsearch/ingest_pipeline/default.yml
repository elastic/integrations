---
description: Pipeline for processing sample logs
processors:
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      copy_from: message
      field: event.original
      ignore_failure: true 
  - set:
      field: process.name
      copy_from: log.syslog.appname
      if: ctx.log?.syslog?.appname != null
  - set:
      field: observer.vendor
      value: Stormshield

  #
  # Extract the key=value pairs into nested objects
  #
  # The syslog header should have been stripped off, so we need to process the key=value data
  # We will be using painless here, because it is the best option we have.
  - script:
      tag: script_kv_parse
      description: Parse key/value pairs from message.
      lang: painless
      source: >-
        ctx["stormshield"] = new HashMap();

        def kvStart = 0;
        def kvSplit = 0;
        def kvEnd = 0;
        def inQuote = false;

        for (int i = 0, n = ctx["message"].length(); i < n; ++i) {
          char c = ctx["message"].charAt(i);
          if (c == (char)'"') {
            inQuote = !inQuote;
          }
          if (inQuote) {
            continue;
          }
          
          if (c == (char)'=') {
            kvSplit = i;
          }
          if (c == (char)' ' || (i == n - 1)) {
            if (kvStart != kvSplit) {
              def key = ctx["message"].substring(kvStart, kvSplit);
              def value = ctx["message"].substring(kvSplit + 1, i).replace("\"", "");
              ctx["stormshield"][key] = value;
            }

            kvStart = i + 1;
            kvSplit = i + 1;
          }
        }

  - grok:
      field: stormshield.tz
      patterns:
        - "(?:%{OFFSET:_temp_.tz_offset})(?:%{HOUR:_temp_.tz_hour}):?(?:%{MINUTE:_temp_.tz_minute})"
      pattern_definitions:
        OFFSET: "[+-]?"
  
  # rename some fields

  - set:
      field: "event.timezone"
      value: "{{{_temp_.tz_offset}}}{{{_temp_.tz_hour}}}:{{{_temp_.tz_minute}}}"
      if: ctx._temp_?.tz_hour != null

  - date:
      tag: format_startime
      field: stormshield.startime
      target_field: "event.created"
      formats:
        - "yyyy-MM-dd HH:mm:ss"
      timezone: "{{{event.timezone}}}"
      on_failure:
        - remove:
            field: event.created
            ignore_missing: true

  # Set @timestamp to the time when the log indicates.
  - set:
      copy_from: event.created
      field: '@timestamp'
      if: ctx.event?.created != null

  - pipeline:
      name: '{{ IngestPipeline "filterstat" }}'
      if: ctx.stormshield.logtype == 'filterstat'

  - pipeline:
      name: '{{ IngestPipeline "monitor" }}'
      if: ctx.stormshield.logtype == 'monitor'

  - pipeline:
      name: '{{ IngestPipeline "count" }}'
      if: ctx.stormshield.logtype == 'count'

  #########################################################
  # Now rename things to ECS

  - rename:
      field: stormshield.dstname
      target_field: destination.domain
      if: ctx.stormshield?.dstname != null

  - convert:
      field: stormshield.dst
      target_field: destination.ip
      type: ip
      if: ctx.stormshield?.dst != null && ctx.destination?.ip == null

  - remove:
      field: stormshield.dst
      if: ctx.stormshield?.dst != null

  - uppercase:
      field: stormshield.dstmac
      ignore_missing: true

  - gsub:
      field: stormshield.dstmac
      pattern: ':'
      replacement: '-'
      target_field: destination.mac
      if: ctx.stormshield?.dstmac != null && ctx.destination?.mac == null

  - convert:
      field: stormshield.dstport
      target_field: destination.port
      type: long
      if: ctx.stormshield?.dstport != null && ctx.destination?.port == null

  - remove:
      field: stormshield.dstport
      if: ctx.stormshield?.dstport != null

  - convert:
      field: stormshield.src
      target_field: source.ip
      type: ip
      if: ctx.stormshield?.src != null && ctx.source?.ip == null

  - remove:
      field: stormshield.src
      if: ctx.stormshield?.src != null

  - uppercase:
      field: stormshield.srcmac
      ignore_missing: true

  - gsub:
      field: stormshield.srcmac
      pattern: ':'
      replacement: '-'
      target_field: source.mac
      if: ctx.stormshield?.srcmac != null && ctx.source?.mac == null

  - convert:
      field: stormshield.srcport
      target_field: source.port
      type: long
      if: ctx.stormshield?.srcport != null && ctx.source?.port == null

  - remove:
      field: stormshield.srcport
      if: ctx.stormshield?.srcport != null

  - geoip:
      tag: geoio_source
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      tag: geoio_destination
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true

  - remove:
      tag: remove_source_country_reserved
      field: source.geo
      if: ctx.source?.geo?.country_name == 'Reserved'
  - remove:
      tag: remove_destination_country_reserved
      field: destination.geo
      if: ctx.destination?.geo?.country_name == 'Reserved'

  # ------------------------------------------------------------
  # Cleanup

  - remove:
      field: _temp_
      ignore_missing: true
      ignore_failure: true

  - remove:
      field: event.original
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: message
      ignore_failure: true
      ignore_missing: true

  - convert:
      field: stormshield.Accepted
      type: long
      if: ctx.stormshield?.Accepted != null

  - convert:
      field: stormshield.AssocMem
      type: long
      if: ctx.stormshield?.AssocMem != null

  - convert:
      field: stormshield.Blocked
      type: long
      if: ctx.stormshield?.Blocked != null

  - convert:
      field: stormshield.ConnMem
      type: long
      if: ctx.stormshield?.ConnMem != null

  - convert:
      field: stormshield.DTrackMem
      type: long
      if: ctx.stormshield?.DTrackMem != null

  - convert:
      field: stormshield.DynamicMem
      type: long
      if: ctx.stormshield?.DynamicMem != null

  - convert:
      field: stormshield.EtherStateConn
      type: long
      if: ctx.stormshield?.EtherStateConn != null

  - convert:
      field: stormshield.EtherStateMem
      type: long
      if: ctx.stormshield?.EtherStateMem != null

  - convert:
      field: stormshield.EtherStatePacket
      type: long
      if: ctx.stormshield?.EtherStatePacket != null

  - convert:
      field: stormshield.FragMem
      type: long
      if: ctx.stormshield?.FragMem != null

  - convert:
      field: stormshield.Fragmented
      type: long
      if: ctx.stormshield?.Fragmented != null

  - convert:
      field: stormshield.HostMem
      type: long
      if: ctx.stormshield?.HostMem != null

  - convert:
      field: stormshield.HostrepMax
      type: long
      if: ctx.stormshield?.HostrepMax != null

  - convert:
      field: stormshield.HostrepRequests
      type: long
      if: ctx.stormshield?.HostrepRequests != null

  - convert:
      field: stormshield.HostrepScore
      type: long
      if: ctx.stormshield?.HostrepScore != null

  - convert:
      field: stormshield.ICMPMem
      type: long
      if: ctx.stormshield?.ICMPMem != null

  - convert:
      field: stormshield.ICMPPacket
      type: long
      if: ctx.stormshield?.ICMPPacket != null

  - convert:
      field: stormshield.IPStateConn
      type: long
      if: ctx.stormshield?.IPStateConn != null

  - convert:
      field: stormshield.IPStateConnNatDst
      type: long
      if: ctx.stormshield?.IPStateConnNatDst != null

  - convert:
      field: stormshield.IPStateConnNatSrc
      type: long
      if: ctx.stormshield?.IPStateConnNatSrc != null

  - convert:
      field: stormshield.IPStateConnNoNatDst
      type: long
      if: ctx.stormshield?.IPStateConnNoNatDst != null

  - convert:
      field: stormshield.IPStateConnNoNatSrc
      type: long
      if: ctx.stormshield?.IPStateConnNoNatSrc != null

  - convert:
      field: stormshield.IPStateMem
      type: long
      if: ctx.stormshield?.IPStateMem != null

  - convert:
      field: stormshield.IPStatePacket
      type: long
      if: ctx.stormshield?.IPStatePacket != null

  - convert:
      field: stormshield.LogOverflow
      type: long
      if: ctx.stormshield?.LogOverflow != null

  - convert:
      field: stormshield.Logged
      type: long
      if: ctx.stormshield?.Logged != null

  - convert:
      field: stormshield.PvmFacts
      type: long
      if: ctx.stormshield?.PvmFacts != null

  - convert:
      field: stormshield.PvmOverflow
      type: long
      if: ctx.stormshield?.PvmOverflow != null

  - convert:
      field: stormshield.SCTPAssoc
      type: long
      if: ctx.stormshield?.SCTPAssoc != null

  - convert:
      field: stormshield.SCTPAssocPacket
      type: long
      if: ctx.stormshield?.SCTPAssocPacket != null

  - convert:
      field: stormshield.SavedEvaluation
      type: long
      if: ctx.stormshield?.SavedEvaluation != null

  - convert:
      field: stormshield.TCPConn
      type: long
      if: ctx.stormshield?.TCPConn != null

  - convert:
      field: stormshield.TCPConnNatDst
      type: long
      if: ctx.stormshield?.TCPConnNatDst != null

  - convert:
      field: stormshield.TCPConnNatSrc
      type: long
      if: ctx.stormshield?.TCPConnNatSrc != null

  - convert:
      field: stormshield.TCPConnNoNatDst
      type: long
      if: ctx.stormshield?.TCPConnNoNatDst != null

  - convert:
      field: stormshield.TCPConnNoNatSrc
      type: long
      if: ctx.stormshield?.TCPConnNoNatSrc != null

  - convert:
      field: stormshield.TCPPacket
      type: long
      if: ctx.stormshield?.TCPPacket != null

  - convert:
      field: stormshield.TLSCertCacheEntriesNb
      type: long
      if: ctx.stormshield?.TLSCertCacheEntriesNb != null

  - convert:
      field: stormshield.TLSCertCacheExpiredNb
      type: long
      if: ctx.stormshield?.TLSCertCacheExpiredNb != null

  - convert:
      field: stormshield.TLSCertCacheFlushOp
      type: long
      if: ctx.stormshield?.TLSCertCacheFlushOp != null

  - convert:
      field: stormshield.TLSCertCacheFlushedNb
      type: long
      if: ctx.stormshield?.TLSCertCacheFlushedNb != null

  - convert:
      field: stormshield.TLSCertCacheInsert
      type: long
      if: ctx.stormshield?.TLSCertCacheInsert != null

  - convert:
      field: stormshield.TLSCertCachePurgeOp
      type: long
      if: ctx.stormshield?.TLSCertCachePurgeOp != null

  - convert:
      field: stormshield.TLSCertCachePurgedNb
      type: long
      if: ctx.stormshield?.TLSCertCachePurgedNb != null

  - convert:
      field: stormshield.UDPConn
      type: long
      if: ctx.stormshield?.UDPConn != null

  - convert:
      field: stormshield.UDPConnNatDst
      type: long
      if: ctx.stormshield?.UDPConnNatDst != null

  - convert:
      field: stormshield.UDPConnNatSrc
      type: long
      if: ctx.stormshield?.UDPConnNatSrc != null

  - convert:
      field: stormshield.UDPConnNoNatDst
      type: long
      if: ctx.stormshield?.UDPConnNoNatDst != null

  - convert:
      field: stormshield.UDPConnNoNatSrc
      type: long
      if: ctx.stormshield?.UDPConnNoNatSrc != null

  - convert:
      field: stormshield.UDPPacket
      type: long
      if: ctx.stormshield?.UDPPacket != null

on_failure:
- append:
    field: error.message
    value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- set:
    field: event.kind
    value: pipeline_error
