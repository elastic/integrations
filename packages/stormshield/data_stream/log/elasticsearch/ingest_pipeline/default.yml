---
description: Pipeline for processing sample logs
processors:
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      copy_from: message
      field: event.original
      ignore_failure: true 
  - set:
      field: process.name
      copy_from: log.syslog.appname
      if: ctx.log?.syslog?.appname != null
  - set:
      field: observer.vendor
      value: Stormshield

  #
  # Extract the key=value pairs into nested objects
  #
  # The syslog header should have been stripped off, so we need to process the key=value data
  # We will be using painless here, because it is the best option we have.
  - script:
      tag: script_kv_parse
      description: Parse key/value pairs from message.
      lang: painless
      source: >-
        ctx["stormshield"] = new HashMap();

        def kvStart = 0;
        def kvSplit = 0;
        def kvEnd = 0;
        def inQuote = false;

        for (int i = 0, n = ctx["message"].length(); i < n; ++i) {
          char c = ctx["message"].charAt(i);
          if (c == (char)'"') {
            inQuote = !inQuote;
          }
          if (inQuote) {
            continue;
          }
          
          if (c == (char)'=') {
            kvSplit = i;
          }
          if (c == (char)' ' || (i == n - 1)) {
            if (kvStart != kvSplit) {
              def key = ctx["message"].substring(kvStart, kvSplit);
              def value = ctx["message"].substring(kvSplit + 1, i).replace("\"", "");
              ctx["stormshield"][key] = value;
            }

            kvStart = i + 1;
            kvSplit = i + 1;
          }
        }

  - grok:
      field: stormshield.tz
      patterns:
        - "(?:%{OFFSET:_temp_.tz_offset})(?:%{HOUR:_temp_.tz_hour}):?(?:%{MINUTE:_temp_.tz_minute})"
      pattern_definitions:
        OFFSET: "[+-]?"
  
  # rename some fields

  - set:
      field: "event.timezone"
      value: "{{{_temp_.tz_offset}}}{{{_temp_.tz_hour}}}:{{{_temp_.tz_minute}}}"
      if: ctx._temp_?.tz_hour != null

  - date:
      tag: format_startime
      field: stormshield.startime
      target_field: "event.created"
      formats:
        - "yyyy-MM-dd HH:mm:ss"
      timezone: "{{{event.timezone}}}"
      on_failure:
        - remove:
            field: event.created
            ignore_missing: true

  # Set @timestamp to the time when the log indicates.
  - set:
      copy_from: event.created
      field: '@timestamp'
      if: ctx.event?.created != null

  - pipeline:
      name: '{{ IngestPipeline "filterstat" }}'
      if: ctx.stormshield?.logtype == 'filterstat'

  - pipeline:
      name: '{{ IngestPipeline "monitor" }}'
      if: ctx.stormshield?.logtype == 'monitor'

  - pipeline:
      name: '{{ IngestPipeline "count" }}'
      if: ctx.stormshield?.logtype == 'count'

  - script:
      tag: handle_nat_things
      lang: painless
      description: Make sure we properly handle NAT source/destination fields.
      source:
        if (ctx.stormshield.containsKey("origdst")) {
            ctx.destination.ip = ctx.stormshield.origdst;
            ctx.destination.nat.ip = ctx.stormshield.dst;
        }

  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true
      if: ctx.destination?.geo == null
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
      - asn
      - organization_name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
      if: ctx.source?.geo == null
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
      - asn
      - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true

  #########################################################
  # Now rename things to ECS

  - rename:
      field: stormshield.action
      target_field: event.action
      if: ctx.stormshield?.action != null

  - rename:
      field: stormshield.ipproto
      target_field: network.transport
      if: ctx.stormshield?.ipproto != null

  - rename:
      field: stormshield.proto
      target_field: network.protocol
      if: ctx.stormshield?.proto != null

  - rename:
      field: stormshield.ruleid
      target_field: rule.id
      if: ctx.stormshield?.ruleid != null

  - rename:
      field: stormshield.rulename
      target_field: rule.name
      if: ctx.stormshield?.rulename != null

  - convert:
      field: stormshield.sent
      target_field: source.bytes
      type: long
      if: ctx.stormshield?.sent != null

  - rename:
      field: stormshield.dstname
      target_field: destination.domain
      if: ctx.stormshield?.dstname != null

  - convert:
      field: stormshield.dst
      target_field: destination.ip
      type: ip
      if: ctx.stormshield?.dst != null && ctx.destination?.ip == null

  - remove:
      field: stormshield.dst
      if: ctx.stormshield?.dst != null

  - uppercase:
      field: stormshield.dstmac
      ignore_missing: true

  - gsub:
      field: stormshield.dstmac
      pattern: ':'
      replacement: '-'
      target_field: destination.mac
      if: ctx.stormshield?.dstmac != null && ctx.destination?.mac == null

  - convert:
      field: stormshield.dstport
      target_field: destination.port
      type: long
      if: ctx.stormshield?.dstport != null && ctx.destination?.port == null

  - remove:
      field: stormshield.dstport
      if: ctx.stormshield?.dstport != null

  - rename:
      field: stormshield.dstcontinent
      target_field: destination.geo.continent_code
      if: ctx.stormshield?.dstcontinent != null

  - rename:
      field: stormshield.dstcountry
      target_field: destination.geo.country_iso_code
      if: ctx.stormshield?.dstcountry != null
  - rename:
      field: stormshield.srccontinent
      target_field: source.geo.continent_code
      if: ctx.stormshield?.srccontinent != null

  - rename:
      field: stormshield.srccountry
      target_field: source.geo.country_iso_code
      if: ctx.stormshield?.srccountry != null

  - convert:
      field: stormshield.src
      target_field: source.ip
      type: ip
      if: ctx.stormshield?.src != null && ctx.source?.ip == null

  - remove:
      field: stormshield.src
      if: ctx.stormshield?.src != null

  - uppercase:
      field: stormshield.srcmac
      ignore_missing: true

  - gsub:
      field: stormshield.srcmac
      pattern: ':'
      replacement: '-'
      target_field: source.mac
      if: ctx.stormshield?.srcmac != null && ctx.source?.mac == null

  - remove:
      field: stormshield.srcmac
      ignore_missing: true

  - rename:
      field: stormshield.duration
      target_field: event.duration
      ignore_missing: true

  - convert:
      field: stormshield.srcport
      target_field: source.port
      type: long
      if: ctx.stormshield?.srcport != null && ctx.source?.port == null

  - remove:
      field: stormshield.srcport
      if: ctx.stormshield?.srcport != null

  - remove:
      tag: remove_source_country_reserved
      field: source.geo
      if: ctx.source?.geo?.country_name == 'Reserved'
  - remove:
      tag: remove_destination_country_reserved
      field: destination.geo
      if: ctx.destination?.geo?.country_name == 'Reserved'

  - rename:
      tag: rename_user_name
      field: stormshield.user
      target_field: user.name

  - script:
      tag: handle_ipv_fields
      lang: painless
      description: Set the network.type for some things.
      if: ctx.stormshield?.ipv != null
      source: >-
        if (ctx.stormshield.ipv == "4") {
            ctx.network.type = "ipv4";
        } else if (ctx.stormshield.ipv.compare)
        if (!ctx.stormshield.containsKey("metadata")) {
            ctx.stormshield.metadata = [:];
        }
        params.names.forEach(k -> {
            if (ctx.stormshield.containsKey(k)) {
                ctx.stormshield.metadata[k] = ctx.stormshield[k];
                ctx.stormshield.remove(k);
            }
            return true;
        });
        
  - script:
      tag: script_move_things
      lang: painless
      description: Move the list of fields we don't want to drop.
      params:
        names:
            - srcportname
            - Pvm
            - auth
            - authcaptive
            - authconsole
            - authipsec
            - authsslvpn
            - authtotp
            - authwebadmin
            - confid
            - dstportname
            - id
            - mem
            - modsrc
            - modsrcport
            - pri
            - rcvd
            - security
            - sent
            - slotlevel
            - slotname
            - srcname
      source: >-
        if (!ctx.stormshield.containsKey("metadata")) {
            ctx.stormshield.metadata = [:];
        }
        params.names.forEach(k -> {
            if (ctx.stormshield.containsKey(k)) {
                ctx.stormshield.metadata[k] = ctx.stormshield[k];
                ctx.stormshield.remove(k);
            }
            return true;
        });
        

  # ------------------------------------------------------------
  # Cleanup

  - remove:
      field: _temp_
      ignore_missing: true
      ignore_failure: true

  - remove:
      field: event.original
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: message
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: stormshield.srcportname
      ignore_failure: true
      ignore_missing: true


on_failure:
- append:
    field: error.message
    value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- set:
    field: event.kind
    value: pipeline_error
