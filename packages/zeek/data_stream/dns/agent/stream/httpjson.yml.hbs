config_version: 2
interval: {{interval}}
auth.basic.user: {{username}}
auth.basic.password: {{password}}
cursor:
  index_earliest:
    value: '[[.last_event.result.max_indextime]]'
request.url: {{url}}/services/search/jobs/export
{{#if ssl}}
request.ssl: {{ssl}}
{{/if}}
request.method: POST
request.transforms:
  - set:
      target: url.params.search
      value: {{search}} | streamstats max(_indextime) AS max_indextime
  - set:
      target: url.params.output_mode
      value: "json"
  - set:
      target: url.params.index_earliest
      value: '[[ .cursor.index_earliest ]]'
      default: '[[(now (parseDuration "-{{interval}}")).Unix]]'
  - set:
      target: url.params.index_latest
      value: '[[(now).Unix]]'
  - set:
      target: header.Content-Type
      value: application/x-www-form-urlencoded
response.decode_as: application/x-ndjson
response.split:
  target: body.result._raw
  type: string
  delimiter: "\n"
{{#contains tags "forwarded"}}
publisher_pipeline.disable_host: true
{{/contains}}
tags:
{{#each tags as |tag i|}}
  - {{tag}}
{{/each}}
  - registered_domain:
      ignore_missing: true
      fail_on_error: false
      field: zeek.dns.query
      target_field: dns.question.registered_domain
      target_subdomain_field: dns.question.subdomain
      target_etld_field: dns.question.top_level_domain
  - script:
      lang: javascript
        function addDnsAnswers(evt) {
            var answers = evt.Get("zeek.dns.answers");
            var ttls = evt.Get("zeek.dns.TTLs");
            if (!answers || !ttls || answers.length != ttls.length) {
                return;
            }
            var resolvedIps = [];
            var answersObjs = [];
            for (var i = 0; i < answers.length; i++) {
                var answer = answers[i];
                answersObjs.push({
                    data: answer,
                    ttl: ttls[i],
                })
                if (net.isIP(answer)) {
                    resolvedIps.push(answer);
                }
            }
            evt.Put("dns.answers", answersObjs);
            if (resolvedIps.length > 0) {
                evt.Put("dns.resolved_ip", resolvedIps);
            }
        }
