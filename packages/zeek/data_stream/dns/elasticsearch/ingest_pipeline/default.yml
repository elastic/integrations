---
description: Pipeline for Filebeat Zeek dns.log
processors:
  - set:
      field: event.ingested
      value: "{{_ingest.timestamp}}"
# Sets event.created from the @timestamp field generated by filebeat before being overwritten further down
  - set:
      field: event.created
      copy_from: "@timestamp"
  - set:
      field: event.kind
      value: event
  - set:
      field: ecs.version
      value: '1.10.0'
  - append:
      field: event.category
      value: network
  - append:
      field: event.type
      value: connection
  - append:
      field: event.type
      value: protocol
  - append:
      field: event.type
      value: info
  - set:
      field: network.protocol
      value: dns
  - rename:
      field: message
      target_field: event.original
  - json:
      field: event.original
      target_field: _temp_.json
  - drop:
      description: Drop if it is a Splunk event but it is empty.
      if: 'ctx?._temp_?.json?.result == null && ctx?._temp_?.json?.ts == null' 
# Splunk specific parsing start
  - fingerprint:
      fields: 
        - _temp_.json.result._cd
        - _temp_.json.result._indextime
        - _temp_.json.result._raw
        - _temp_.json.result._time
        - _temp_.json.result.host
        - _temp_.json.result.source
      target_field: '_id'
      if: 'ctx?._temp_?.json?.result != null && ctx?._temp_?.json?.ts == null'
  - remove:
      field: event.original
      ignore_missing: true
      if: 'ctx?._temp_?.json?.result != null && ctx?._temp_?.json?.ts == null'
  - set:
      field: event.original
      copy_from: _temp_.json.result._raw
      ignore_empty_value: true
      ignore_failure: true
      if: 'ctx?._temp_?.json?.result != null && ctx?._temp_?.json?.ts == null'
  - set:
      field: host.name
      copy_from: _temp_.json.result.host
      ignore_empty_value: true
      if: 'ctx?._temp_?.json?.result != null && ctx?._temp_?.json?.ts == null'
  - rename:
      field: _temp_.json.result.source
      target_field: log.file.path
      ignore_missing: true
  - remove:
      field: _temp_
      ignore_missing: true
# Splunk parsing end
  - json:
      field: event.original
      target_field: zeek.dns
      ignore_failure: true
      if: ctx?.event?.original != null
  - dot_expander:
      path: zeek.dns
      field: id.orig_p
      ignore_failure: true
  - dot_expander:
      path: zeek.dns
      field: id.orig_h
      ignore_failure: true
  - dot_expander:
      path: zeek.dns
      field: id.resp_h
      ignore_failure: true
  - dot_expander:
      path: zeek.dns
      field: id.resp_p
      ignore_failure: true
  - rename:
      field: zeek.dns.id.orig_h
      target_field: source.address
      ignore_missing: true
  - rename:
      field: zeek.dns.id.orig_p
      target_field: source.port
      ignore_missing: true
  - rename:
      field: zeek.dns.id.resp_h
      target_field: destination.address
      ignore_missing: true
  - rename:
      field: zeek.dns.id.resp_p
      target_field: destination.port
      ignore_missing: true
  - rename:
      field: zeek.dns.uid
      target_field: zeek.session_id
      ignore_missing: true
  - rename:
      field: zeek.dns.proto
      target_field: network.transport
      ignore_missing: true
  - set:
      field: event.id
      copy_from: zeek.session_id
      ignore_empty_value: true
  - set:
      field: source.ip
      copy_from: source.address
      ignore_empty_value: true
  - set:
      field: destination.ip
      copy_from: destination.address
      ignore_empty_value: true
  - append:
      field: dns.header_flags
      value: AA
      if: ctx?.zeek?.dns?.AA == true
  - append:
      field: dns.header_flags
      value: TC
      if: ctx?.zeek?.dns?.TC == true
  - append:
      field: dns.header_flags
      value: RD
      if: ctx?.zeek?.dns?.RD == true
  - append:
      field: dns.header_flags
      value: RA
      if: ctx?.zeek?.dns?.RA == true
  - set:
      field: dns.question.class
      value: IN
      if: ctx?.zeek?.dns?.qclass == 1
  - set:
      field: dns.question.class
      value: CH
      if: ctx?.zeek?.dns?.qclass == 3
  - set:
      field: dns.question.class
      value: HS
      if: ctx?.zeek?.dns?.qclass == 4
  - set:
      field: dns.question.class
      value: NONE
      if: ctx?.zeek?.dns?.qclass == 254
  - set:
      field: dns.question.class
      value: ANY
      if: ctx?.zeek?.dns?.qclass == 255
  - set:
      field: dns.type
      value: answer
      if: ctx?.zeek?.dns?.rcode_name != null
  - set:
      field: dns.type
      value: query
      if: ctx?.dns?.type == null
  - script:
      lang: painless
      source: >-
        ctx.event.duration = ctx.zeek.dns.rtt * 1000000000L;
      if: "ctx?.zeek?.dns?.rtt != null"
  - script:
      lang: painless
      source: >-
        def answers = ctx.zeek.dns.answers;
        def ttls = ctx.zeek.dns.TTLs;
        if (answers.isEmpty() || ttls.isEmpty() || answers.length != ttls.length) {
          return;
        }
        def lst = new ArrayList();
        for (def i = 0; i < answers.length; i++) {
          lst.add([
            "data": answers[i],
            "ttl": (int)ttls[i]
          ])
        }
        if (ctx?.dns == null) {
          ctx.dns = new HashMap();
        }
        ctx.dns.answers = lst;
      if: "ctx?.zeek?.dns?.answers != null && ctx?.zeek?.dns?.TTLs != null"
  - foreach:
      field: dns.answers
      processor:
        convert:
          field: _ingest._value.data
          target_field: _ingest._value.tmpip
          type: ip
          ignore_failure: true
          ignore_missing: true
      if: 'ctx?.dns?.answers != null && !ctx?.dns?.answers.isEmpty()'
  - script:
      lang: painless
      source: >-
        def answers = ctx.dns.answers;
        def iplist = new ArrayList();
        for (def i = 0; i < ctx.dns.answers.length; i++) {
          if (answers[i].containsKey("tmpip")) {
            iplist.add(answers[i].tmpip);
            answers[i].remove("tmpip");
          }
        }
        ctx.dns.resolved_ip = iplist;
      if: 'ctx?.dns?.answers != null && !ctx?.dns?.answers.isEmpty()'
  - set:
      field: event.outcome
      value: success
      if: ctx?.dns?.rcode == 0
  - set:
      field: event.outcome
      value: success
      if: ctx?.event?.outcome == null
  - convert:
      field: zeek.dns.trans_id
      type: string
      ignore_missing: true
  - set:
      field: dns.id
      copy_from: zeek.dns.trans_id
      ignore_empty_value: true
  - set:
      field: dns.question.type
      copy_from: zeek.dns.qtype_name
      ignore_empty_value: true
  - set:
      field: dns.response_code
      copy_from: zeek.dns.rcode_name
      ignore_empty_value: true
  - registered_domain:
      field: zeek.dns.query
      target_field: dns.question
      ignore_missing: true
  - date:
      field: zeek.dns.ts
      formats:
        - UNIX
  - remove:
      field: zeek.dns.ts

  # IP Geolocation Lookup
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true

  # IP Autonomous System (AS) Lookup
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true
  - community_id:
      target_field: network.community_id
  - append:
      field: related.ip
      value: "{{source.ip}}"
      if: ctx?.source?.address != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: "{{destination.ip}}"
      if: ctx?.destination?.ip != null
      allow_duplicates: false
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx?.event?.original == null
  - remove:
      field: 
        - json
        - zeek.dns.Z
        - zeek.dns.auth
        - zeek.dns.addl
        - zeek.dns.id
        - message
      ignore_missing: true
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - set:
      field: error.message
      value: "{{ _ingest.on_failure_message }}"
