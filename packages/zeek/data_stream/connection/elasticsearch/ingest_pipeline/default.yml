---
description: Pipeline for normalizing Zeek conn.log
processors:
  - set:
      field: event.ingested
      value: "{{_ingest.timestamp}}"
# Sets event.created from the @timestamp field generated by filebeat before being overwritten further down
  - set:
      field: event.created
      copy_from: "@timestamp"
  - set:
      field: ecs.version
      value: '1.9.0'
  - set:
      field: event.kind
      value: event
  - set:
      field: event.category
      value: network
  - json:
      field: message
      target_field: json
      ignore_failure: true
      if: ctx?.message != null
  - drop:
      if: 'ctx?.json?.result == null && ctx?.json?.ts == null'
  - rename:
      field: json
      target_field: zeek.connection
      if: ctx?.json?.ts != null
  - fingerprint:
      fields: 
        - json.result._cd
        - json.result._indextime
        - json.result._raw
        - json.result._time
        - json.result.host
        - json.result.source
      target_field: '_id'
      if: 'ctx?.json?.result != null && ctx?.json?.ts == null'
  - rename:
      field: json.result._raw
      target_field: event.original
      ignore_missing: true
  - rename:
      field: json.result.host
      target_field: host.name
      ignore_missing: true
  - rename:
      field: json.result.source
      target_field: log.file.path
      ignore_missing: true
  - json:
      field: event.original
      target_field: zeek.connection
      ignore_failure: true
      if: ctx?.event?.original != null
  - dot_expander:
      path: zeek.connection
      field: id.orig_p
      ignore_failure: true
  - dot_expander:
      path: zeek.connection
      field: id.orig_h
      ignore_failure: true
  - dot_expander:
      path: zeek.connection
      field: id.resp_h
      ignore_failure: true
  - dot_expander:
      path: zeek.connection
      field: id.resp_p
      ignore_failure: true
  - rename:
      field: zeek.connection.duration
      target_field: temp.duration
      ignore_missing: true
  - rename:
      field: zeek.connection.id.orig_h
      target_field: source.address
      ignore_missing: true
  - rename:
      field: zeek.connection.id.orig_p
      target_field: source.port
      ignore_missing: true
  - rename:
      field: zeek.connection.id.resp_h
      target_field: destination.address
      ignore_missing: true
  - rename:
      field: zeek.connection.id.resp_p
      target_field: destination.port
      ignore_missing: true
  - rename:
      field: zeek.connection.proto
      target_field: network.transport
      ignore_missing: true
  - rename:
      field: zeek.connection.service
      target_field: network.protocol
      ignore_missing: true
  - rename:
      field: zeek.connection.uid
      target_field: zeek.session_id
      ignore_missing: true
  - rename:
      field: zeek.connection.orig_ip_bytes
      target_field: source.bytes
      ignore_missing: true
  - rename:
      field: zeek.connection.resp_ip_bytes
      target_field: destination.bytes
      ignore_missing: true
  - rename:
      field: zeek.connection.orig_pkts
      target_field: source.packets
      ignore_missing: true
  - rename:
      field: zeek.connection.resp_pkts
      target_field: destination.packets
      ignore_missing: true
  - rename:
      field: zeek.connection.conn_state
      target_field: zeek.connection.state
      ignore_missing: true
  - rename:
      field: zeek.connection.orig_l2_addr
      target_field: source.mac
      ignore_missing: true
  - rename:
      field: zeek.connection.resp_l2_addr
      target_field: destination.mac
      ignore_missing: true
  - rename:
      field: source.port
      target_field: zeek.connection.icmp.type
      ignore_missing: true
      if: 'ctx?.network?.transport == "icmp"'
  - rename:
      field: destination.port
      target_field: zeek.connection.icmp.code
      ignore_missing: true
      if: 'ctx?.network?.transport == "icmp"'
  - set:
      field: source.ip
      copy_from: source.address
      if: ctx?.source?.address != null
  - set:
      field: destination.ip
      copy_from: destination.address
      if: ctx?.destination?.address != null
  - community_id:
      if: 'ctx?.network?.transport != "icmp"'
  - community_id:
      icmp_type: zeek.connection.icmp.type
      icmp_code: zeek.connection.icmp.code
      if: 'ctx?.network?.transport == "icmp"'
  - date:
      field: zeek.connection.ts
      formats:
        - UNIX
  - remove:
      field: zeek.connection.ts
  - set:
      field: event.id
      copy_from: zeek.session_id
      if: ctx.zeek.session_id != null
  - script:
      source: ctx.event.duration = Math.round(ctx.temp.duration * params.scale)
      params:
        scale: 1000000000
      if: ctx.temp?.duration != null
  - append:
      field: tags
      value: 
        - local_orig
      if: ctx?.zeek?.connection?.local_orig != null
      allow_duplicates: false
  - append:
      field: tags
      value: 
        - local_resp
      if: ctx?.zeek?.connection?.local_resp != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: "{{source.ip}}"
      if: ctx?.source?.ip != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: "{{destination.ip}}"
      if: ctx?.destination?.ip != null
      allow_duplicates: false
  - script:
      source: ctx.network.packets = ctx.source.packets + ctx.destination.packets
      ignore_failure: true
  - script:
      source: ctx.network.bytes = ctx.source.bytes + ctx.destination.bytes
      ignore_failure: true
  - script:
      source: |-
        if (ctx?.zeek?.connection?.local_orig == null ||
            ctx?.zeek?.connection?.local_resp == null) {
          return;
        }
        if (ctx.zeek.connection.local_orig == true &&
            ctx.zeek.connection.local_resp == true) {
          ctx.network.direction = "internal";
          return;
        }
        if (ctx.zeek.connection.local_orig == true &&
            ctx.zeek.connection.local_resp == false) {
          ctx.network.direction = "outbound";
          return;
        }
        if (ctx.zeek.connection.local_orig == false &&
            ctx.zeek.connection.local_resp == true) {
          ctx.network.direction = "inbound";
          return;
        }
        if (ctx.zeek.connection.local_orig == false &&
            ctx.zeek.connection.local_resp == false) {
          ctx.network.direction = "external";
          return;
        }
  - geoip:
      field: destination.ip
      target_field: destination.geo
      if: ctx?.destination?.ip != null
  - geoip:
      field: source.ip
      target_field: source.geo
      if: ctx?.source?.ip != null
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true
  - script:
      params:
        S0:
          conn_str: "Connection attempt seen, no reply."
          types:
            - connection
            - start
        S1:
          conn_str: "Connection established, not terminated."
          types:
            - connection
            - start
        SF:
          conn_str: "Normal establishment and termination."
          types:
            - connection
            - start
            - end
        REJ:
          conn_str: "Connection attempt rejected."
          types:
            - connection
            - start
            - denied
        S2:
          conn_str: "Connection established and close attempt by originator seen (but no reply from responder)."
          types:
            - connection
            - info
        S3:
          conn_str: "Connection established and close attempt by responder seen (but no reply from originator)."
          types:
            - connection
            - info
        RSTO:
          conn_str: "Connection established, originator aborted (sent a RST)."
          types:
            - connection
            - info
        RSTR:
          conn_str: "Responder sent a RST."
          types:
            - connection
            - info
        RSTOS0:
          conn_str: "Originator sent a SYN followed by a RST, we never saw a SYN-ACK from the responder."
          types:
            - connection
            - info
        RSTRH:
          conn_str: "Responder sent a SYN ACK followed by a RST, we never saw a SYN from the (purported) originator."
          types:
            - connection
            - info
        SH:
          conn_str: "Originator sent a SYN followed by a FIN, we never saw a SYN ACK from the responder (hence the connection was 'half' open)."
          types:
            - connection
            - info
        SHR:
          conn_str: "Responder sent a SYN ACK followed by a FIN, we never saw a SYN from the originator."
          types:
            - connection
            - info
        OTH:
          conn_str: "No SYN seen, just midstream traffic (a 'partial connection' that was not later closed)."
          types:
            - connection
            - info
      source: >-
        if (ctx?.zeek?.connection?.state == null) {
          return;
        }
        if (params.containsKey(ctx.zeek.connection.state)) {
          ctx.zeek.connection.state_message = params[ctx.zeek.connection.state]["conn_str"];
          ctx.event.type = params[ctx.zeek.connection.state]["types"];
        }
  - remove:
      field: 
        - zeek.connection.orig_bytes
        - zeek.connection.resp_bytes
        - zeek.connection.tunnel_parents
        - message
        - json
        - temp
      ignore_missing: true
on_failure:
  - set:
      field: error.message
      value: "{{ _ingest.on_failure_message }}"
