config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/openai-completions-http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
{{/if}}
resource.url: {{api_url}}
fields_under_root: true
keep_null: true
state:
  initial_interval: {{initial_interval}}
  access_token: {{admin_token}}
  page: null
redact:
  fields:
    - access_token
program: |
  (
    !has(state.initial_start_time) ?
      state.with({
          "initial_start_time": int(timestamp(now - duration(state.initial_interval)))
      })
    :
      state
  ).as(state,
    (
      state.?want_more.orValue(false) ?
        state
      :
        state.with({
          "page": null,
          "initial_start_time": state.?cursor.last_bucket_start.orValue(int(timestamp(now - duration(state.initial_interval))))
        })
    ).as(state,
      request(
        "GET",
        state.url + "?" + {
          "start_time": [string(int(state.initial_start_time))],
          "page": state.page != null ? [state.page] : [],
          "bucket_width": ["{{ bucket_width }}"],
          "group_by": ["project_id,user_id,api_key_id,model,batch"]
        }.format_query()
      ).with({
        "Header": {
          "Authorization": ["Bearer " + state.access_token],
          "Content-Type": ["application/json"]
        }
      }).do_request().as(resp, resp.StatusCode == 200 ?
          bytes(resp.Body).decode_json().as(body,
            {
              "events": body.data.filter(bucket,
                    !(body.has_more == false && bucket.start_time >= body.data.map(bucket, bucket.start_time).max()))
                  .map(bucket, size(bucket.results) > 0 ? bucket.results.map(result, { "message": result.with({"start_time": bucket.start_time, "end_time": bucket.end_time }).encode_json() }) : [{}]).flatten()
              ,
              "cursor": {
                "last_bucket_start": size(body.data) > 0 ? body.data.map(bucket, bucket.start_time).max() : state.?cursor.last_bucket_start,
                "last_bucket_end": size(body.data) > 0 ? body.data.map(bucket, bucket.end_time).max() : state.?cursor.last_bucket_end
              },
              "want_more": body.has_more,
              "page": body.has_more ? body.next_page : null,
              "access_token": state.access_token,
              "initial_start_time": state.initial_start_time,
              "url": state.url
            }
          )
        :
          {
            "events": {
              "error": {
                "code": string(resp.StatusCode),
                "message": "GET: " + (size(resp.Body) != 0 ? string(resp.Body) : string(resp.Status) + " (" + string(resp.StatusCode) + ")")
              }
            },
            "want_more": false,
            "access_token": state.access_token,
            "initial_start_time": state.initial_start_time
          }
      )
    )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
