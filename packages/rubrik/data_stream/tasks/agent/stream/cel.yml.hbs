config_version: 2
interval: {{interval}}
auth.oauth2:
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{token_url}}

resource.url: https://{{hostname}}.my.rubrik.com/api/graphql
{{#if ssl}}
resource.ssl: 
  {{ssl}}
{{/if}}
{{#if resource_timeout}}
resource.timeout: {{resource_timeout}}
{{/if}}

{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
{{/if}}

tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}

state:
  index: 0
  queries:
    - |
        query ReportChartDataQuery(
            $chartView: ChartViewType!
            $filters: [ReportFilterInput!]
            $reportRoom: ReportRoomType
            $chartConfig: ReportChartConfigInput
        ) {
            reportChartData(
                chartView: $chartView
                filters: $filters
                reportRoom: $reportRoom
                chartConfig: $chartConfig
            ) {
                chartType
                chartData {
                    name {
                        displayValue
                        serializedValue
                    }
                    value {
                        displayValue
                        serializedValue
                        ... on DisplayableValueInteger {
                            intValue: value
                        }
                        ... on DisplayableValueFloat {
                            floatValue: value
                        }
                        ... on DisplayableValueLong {
                            longValue: value
                        }
                    }
                    secondaryGroupBy {
                        name {
                            displayValue
                            serializedValue
                        }
                        value {
                            displayValue
                            serializedValue
                            ... on DisplayableValueInteger {
                                intValue: value
                            }
                            ... on DisplayableValueFloat {
                                floatValue: value
                            }
                            ... on DisplayableValueLong {
                                longValue: value
                            }
                        }
                    }
                }
            }
        }


program: |-
  state.with(
    request("POST", state.url).with(
      {
        "Header": {
          "Content-Type": ["application/json"],
        },
        "Body": {
          "query": state.queries[state.index],
          "variables": {
              "chartView": "OBJECT_BACKUP_TASK_SUMMARY_BY_SLA_CHART",
              "reportRoom": "REPORT_ROOM_NONE",
              "filter": [
                {{#if filters}}
                  {{#each filters}}
                    {
                      "field": "{{field}}",
                      "texts": [{{#each values}}"{{this}}"{{#unless @last}}, {{/unless}}{{/each}}]
                    }{{#unless @last}},{{/unless}}
                  {{/each}}
                {{/if}}
              ]
            }
        }.encode_json(),
      }
    ).do_request().as(resp, (resp.StatusCode == 200) ?
      bytes(resp.Body).decode_json().as(body,
        {
          "events": body.data.reportChartData.chartData.map(chartDataNode,
            chartDataNode.secondaryGroupBy.map(childNode,
              {
                "slaDomainId": childNode.name.serializedValue,
                "slaDomainName": childNode.name.displayValue,
                "succeededTasksValue": chartDataNode.name.serializedValue == "succeeded_tasks" ? childNode.value.intValue : null,
                "failedTasksValue": chartDataNode.name.serializedValue == "failed_tasks" ? childNode.value.intValue : null,
                "canceledTasksValue": chartDataNode.name.serializedValue == "canceled_tasks" ? childNode.value.intValue : null,
                "missedTasksValue": chartDataNode.name.serializedValue == "missed_tasks" ? childNode.value.intValue : null,
                "metricType": chartDataNode.name.serializedValue
              }
            )
          ).flatten().map(event, { "message": event.encode_json() }),
          "want_more": int(state.index) < (size(state.queries) - 1),
          "queries": state.queries,
          "index": (int(state.index) + 1) % size(state.queries)
        }
      )
    :
      {
        "events": {
          "error": {
            "code": string(resp.StatusCode),
            "id": string(resp.Status),
            "message": "POST:" +
            (
              (size(resp.Body) != 0) ?
                string(resp.Body)
              :
                string(resp.Status) + " (" + string(resp.StatusCode) + ")"
            ),
          },
        },
        "want_more": false,
      }
    )
  )