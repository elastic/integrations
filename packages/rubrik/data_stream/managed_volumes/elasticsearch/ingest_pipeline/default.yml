---
description: Pipeline to parse Rubrik Managed Volumes data
processors:
  - set:
      field: ecs.version
      value: 8.16.0
  - set:
      field: event.kind
      value: metric
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: "ctx.event?.original != null"
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - json:
      field: event.original
      target_field: response
      on_failure:
        - set:
            field: error.message
            value: 'Received invalid JSON. Unable to parse the source log message'
            ignore_failure: true
  - rename:
      field: response.name
      target_field: rubrik.managed_volumes.name
      ignore_missing: true
  - rename:
      field: response.state
      target_field: rubrik.managed_volumes.state
      ignore_missing: true
  - rename:
      field: response.provisionedSize
      target_field: rubrik.managed_volumes.volume_size.bytes
      ignore_missing: true
  - rename:
      field: response.mainMount.logicalUsedSize
      target_field: rubrik.managed_volumes.used_size.bytes
      ignore_missing: true
  - rename:
      field: response.snapshotDistribution.totalCount
      target_field: rubrik.managed_volumes.total_snapshots.count
      ignore_missing: true
  - rename:
      field: response.numChannels
      target_field: rubrik.managed_volumes.num_channels.count
      ignore_missing: true
  - script:
        lang: painless
        source: |
            if (ctx.rubrik.managed_volumes?.volume_size?.bytes != null && ctx.rubrik.managed_volumes?.used_size?.bytes != null) {
                ctx.rubrik.managed_volumes.free_size = [:];
                ctx.rubrik.managed_volumes.free_size.bytes = ctx.rubrik.managed_volumes.volume_size.bytes - ctx.rubrik.managed_volumes.used_size.bytes;
            } else {
                ctx.rubrik.managed_volumes.free_size = [:];
                ctx.rubrik.managed_volumes.free_size.bytes = 0;
            }

            // Calculate pending snapshots which is the difference of the total snapshot count and the scheduled snapshot count.
             if (ctx.response?.snapshotDistribution != null) {
                def snapshotDistribution = ctx.response.snapshotDistribution;

                def totalCount = snapshotDistribution.totalCount != null ? snapshotDistribution.totalCount : 0;
                def scheduledCount = snapshotDistribution.scheduledCount != null ? snapshotDistribution.scheduledCount : 0;

                // Initialize pending_snapshots field and set the count
                ctx.rubrik.managed_volumes.pending_snapshots = [:];
                ctx.rubrik.managed_volumes.pending_snapshots.count = totalCount - scheduledCount;
            } else {
                // If snapshotDistribution is missing, initialize pending_snapshots with a default value
                ctx.rubrik.managed_volumes.pending_snapshots = [:];
                ctx.rubrik.managed_volumes.pending_snapshots.count = 0;
            }

  - remove:
      field: response
      ignore_missing: true
      if: "ctx.rubrik.managed_volumes != null"
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - set:
      field: error.message
      value: "{{{_ingest.on_failure_message}}}"
