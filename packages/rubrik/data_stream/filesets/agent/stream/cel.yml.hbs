config_version: 2
interval: {{interval}}
auth.oauth2:
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{token_url}}

resource.url: https://{{hostname}}.my.rubrik.com/api/graphql
{{#if ssl}}
resource.ssl: 
  {{ssl}}
{{/if}}
{{#if resource_timeout}}
resource.timeout: {{resource_timeout}}
{{/if}}

{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
{{/if}}

tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}

state:
    index: 0
    queries:
      - |
        query LinuxFilesetTemplateListQuery($first: Int, $filter: [Filter!]) {
          filesetTemplates(
            hostRoot: LINUX_HOST_ROOT
            first: $first
            filter: $filter
          ) {
            nodes {
              physicalChildConnection {
                nodes {
                  cluster {
                    id
                    name
                  }
                  ... on LinuxFileset {
                    name
                    host {
                      osType
                    }
                    reportWorkload {
                      complianceStatus
                      archiveStorage
                      localStorage
                      totalSnapshots
                      archiveSnapshots
                    }
                    effectiveSlaDomain {
                      name
                      id
                    }
                  }
                }
              }
            }
            pageInfo {
              hasNextPage
            }
          }
        }

      - |
        query WindowsFilesetTemplateListQuery($first: Int, $filter: [Filter!]) {
          filesetTemplates(
            hostRoot: WINDOWS_HOST_ROOT
            first: $first
            filter: $filter
          ) {
            nodes {
              physicalChildConnection {
                nodes {
                  cluster {
                    id
                    name
                  }
                  ... on WindowsFileset {
                    name
                    host {
                      osType
                    }
                    reportWorkload {
                      complianceStatus
                      archiveStorage
                      localStorage
                      totalSnapshots
                      archiveSnapshots
                    }
                    effectiveSlaDomain {
                      name
                      id
                    }
                  }
                }
              }
            }
            pageInfo {
              hasNextPage
            }
          }
        }

program: |-
  state.with(
    request("POST", state.url).with(
      {
        "Header": {
          "Content-Type": ["application/json"]
        },
        "Body": {
          "query": state.queries[state.index],
          "variables": {
            {{#if first}}
            "first": {{first}},
            {{/if}}
            "filter": [
              {{#if filters}}
                {{#each filters}}
                  {
                    "field": "{{field}}",
                    "texts": [{{#each values}}"{{this}}"{{#unless @last}}, {{/unless}}{{/each}}]
                  }{{#unless @last}},{{/unless}}
                {{/each}}
              {{/if}}
            ]
          }
        }.encode_json(),
      }
    ).do_request().as(resp, (resp.StatusCode == 200) ?
      bytes(resp.Body).decode_json().as(body,
        {
          "events": body.data.filesetTemplates.nodes.map(filesetNode,
            filesetNode.physicalChildConnection.nodes.map(childNode,
              {
                "filesetName": childNode.name,
                "osType": childNode.host.osType,
                "complianceStatus": childNode.reportWorkload != null ? childNode.reportWorkload.complianceStatus : null,
                "archiveStorage": childNode.reportWorkload != null ? childNode.reportWorkload.archiveStorage : null,
                "localStorage": childNode.reportWorkload != null ? childNode.reportWorkload.localStorage : null,
                "totalSnapshots": childNode.reportWorkload != null ? childNode.reportWorkload.totalSnapshots : null,
                "archiveSnapshots": childNode.reportWorkload != null ? childNode.reportWorkload.archiveSnapshots : null,
                "clusterName": childNode.cluster != null ? childNode.cluster.name : null,
                "clusterID": childNode.cluster != null ? childNode.cluster.id : null,
                "effectiveSlaDomainID": childNode.effectiveSlaDomain != null ? childNode.effectiveSlaDomain.id : null,
                "effectiveSlaDomainName": childNode.effectiveSlaDomain != null ? childNode.effectiveSlaDomain.name : null
              }
            )
          ).flatten().map(event, { "message": event.encode_json() }),
          "want_more": int(state.index) < (size(state.queries) - 1),
          "queries": state.queries,
          "index": (int(state.index) + 1) % size(state.queries)
        }
      )
      :
      {
        "events": [
          {
            "error": {
              "code": string(resp.StatusCode),
              "id": string(resp.Status),
              "message": "POST:" +
              (
                (size(resp.Body) != 0) ?
                  string(resp.Body)
                :
                  string(resp.Status) + " (" + string(resp.StatusCode) + ")"
              )
            }
          }
        ],
        "want_more": false
      }
    )
  )