---
description: Pipeline to parse rubrik.node_statistics data
processors:
  - set:
      field: ecs.version
      value: 8.16.0
  - set:
      field: event.kind
      value: metric
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: 'ctx.event?.original != null'
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - json:
      field: event.original
      target_field: response
      on_failure:
        - set:
            field: error.message
            value: 'Received invalid JSON. Unable to parse the source log message'
            ignore_failure: true
  - rename:
      field: response.clusterName
      target_field: rubrik.cluster.name
      ignore_missing: true
  - rename:
      field: response.clusterId
      target_field: rubrik.cluster.id
      ignore_missing: true
  - rename:
      field: response.clusterType
      target_field: rubrik.cluster.type
      ignore_missing: true
  - rename:
      field: response.nodeId
      target_field: rubrik.node_statistics.node_id
      ignore_missing: true
  - rename:
      field: response.cpuStat
      target_field: rubrik.node_statistics.cpu_stat.pct
      ignore_missing: true
  - rename:
      field: response.usedMemoryStat
      target_field: rubrik.node_statistics.used_memory.pct
      ignore_missing: true
  - rename:
      field: response.networkBytesReceived
      target_field: rubrik.node_statistics.network.received.bytes
      ignore_missing: true
  - rename:
      field: response.networkBytesTransmitted
      target_field: rubrik.node_statistics.network.transmitted.bytes
      ignore_missing: true
  - rename:
      field: response.iopsReadsPerSecond
      target_field: rubrik.node_statistics.iops.reads
      ignore_missing: true
  - rename:
      field: response.iopsWritesPerSecond
      target_field: rubrik.node_statistics.iops.writes
      ignore_missing: true
  - rename:
      field: response.readThroughputBytesPerSecond
      target_field: rubrik.node_statistics.throughput.read.bytes
      ignore_missing: true
  - rename:
      field: response.writeThroughputBytesPerSecond
      target_field: rubrik.node_statistics.throughput.write.bytes
      ignore_missing: true
  - date:
      field: response.time
      target_field: rubrik.node_statistics.time
      formats:
        - ISO8601
      if: ctx.response?.time != null && ctx.response.time != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: '@timestamp'
      copy_from: rubrik.node_statistics.time
      ignore_empty_value: true      
  - remove:
      field: response
      ignore_missing: true
  - script:
      description: Drops null/empty values recursively
      lang: painless
      ignore_failure: true
      source: |
        boolean drop(Object o) {
          if (o == null || o == "") {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);     
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: >-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{{#_ingest.on_failure_processor_tag}}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{{/_ingest.on_failure_processor_tag}}}failed with message '{{{ _ingest.on_failure_message }}}'