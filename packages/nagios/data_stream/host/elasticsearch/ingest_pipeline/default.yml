---
description: Pipeline for processing Nagios Hosts metrics
processors:
- set:
    field: ecs.version
    value: '8.0.0'
- rename:
    field: message
    target_field: event.original
    ignore_missing: true
- json:
    field: event.original
    target_field: json
    ignore_failure: true
- dissect:
    field: json.performance_data
    pattern: rta=%{json.rta}ms%{json.temp1}pl=%{json.pl}%%{json.temp2}
    ignore_missing: true
    ignore_failure: true
- remove:
    ignore_failure: true
    field: json.performance_data
    ignore_missing: true
- date:
    field: json.status_update_time
    formats:
    - yyyy-MM-dd HH:mm:ss
    target_field: "@timestamp"
    ignore_failure: true
- set:
    field: json.status_update_time
    value: "{{{@timestamp}}}"
    ignore_empty_value: true
    ignore_failure: true
- date:
    field: json.status_update_time
    formats:
    - yyyy-MM-dd'T'HH:mm:ss.SSSXXX
    target_field: json.status_update_time
    ignore_failure: true
- date:
    field: json.last_check
    formats:
    - yyyy-MM-dd HH:mm:ss
    target_field: nagios.metrics.host.last_check
    ignore_failure: true
- date:
    field: json.next_check
    formats:
    - yyyy-MM-dd HH:mm:ss
    target_field: nagios.metrics.host.next_check
    ignore_failure: true
- convert:
    field: json.pl
    target_field: nagios.metrics.host.performance_data.pl
    type: double
    ignore_missing: true
    ignore_failure: true
- convert:
    field: json.rta
    target_field: nagios.metrics.host.performance_data.rta
    type: double
    ignore_missing: true
    ignore_failure: true
- convert:
    field: json.address
    target_field: nagios.metrics.host.address
    type: ip
    ignore_missing: true
    ignore_failure: true
- set:
    copy_from: nagios.metrics.host.address
    field: host.ip
    override: true
    ignore_failure: true
- append: 
    field: related.ip
    value: "{{{host.ip}}}"
    if: ctx?.host?.ip != null
    allow_duplicates: false
    ignore_failure: true
- convert:
    field: json.normal_check_interval
    target_field: nagios.metrics.host.normal_check_interval
    type: double
    ignore_missing: true
    ignore_failure: true
- convert:
    field: json.retry_check_interval
    target_field: nagios.metrics.host.retry_check_interval
    type: double
    ignore_missing: true
    ignore_failure: true
- convert:
    field: json.latency
    target_field: nagios.metrics.host.latency
    type: double
    ignore_missing: true
    ignore_failure: true
- convert:
    field: json.execution_time
    target_field: nagios.metrics.host.execution_time
    type: double
    ignore_missing: true
    ignore_failure: true
- rename:
    field: json.name
    target_field: nagios.metrics.host.name
    ignore_missing: true
    ignore_failure: true
- rename:
    field: json.status_update_time
    target_field: nagios.metrics.host.status_update_time
    ignore_missing: true
    ignore_failure: true
- rename:
    field: json.status_text
    target_field: nagios.metrics.host.status_text
    ignore_missing: true
    ignore_failure: true
- rename:
    field: json.check_command
    target_field: nagios.metrics.host.check_command
    ignore_missing: true
    ignore_failure: true

- set:
    field: event.dataset
    value: nagios.host
    ignore_empty_value: true
    ignore_failure: true
- set:
    field: event.kind
    value: metrics
    ignore_empty_value: true
    ignore_failure: true
- set:
    field: event.module
    value: nagios
    ignore_empty_value: true
    ignore_failure: true
- set:
    field: event.type
    value: info
    ignore_empty_value: true
    ignore_failure: true

- script:
    description: Drops null/empty values recursively
    lang: painless
    source: |
        boolean drop(Object o) {
            if (o == null || o == "") {
            return true;
            } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
            } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
            }
            return false;
        }
        drop(ctx);

- remove:
    field: event.original
    if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
    ignore_failure: true
    ignore_missing: true

- remove:
    field:
    - json
    ignore_missing: true
    ignore_failure: true

on_failure:
- set:
    field: error.message
    value: "{{{ _ingest.on_failure_message }}}"
