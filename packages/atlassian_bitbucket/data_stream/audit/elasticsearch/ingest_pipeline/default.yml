---
description: Pipeline for processing sample logs
processors:
- set:
    field: ecs.version
    value: '8.4.0'
- rename:
    field: message
    target_field: event.original
- json:
    field: event.original
    target_field: json
- set:
    field: _tmp.timestamp
    copy_from: json.timestamp
    if: ctx.json?.timestamp != null && ctx.json?.timestamp instanceof String
- set:
    field: _tmp.timestamp
    value: "{{json.timestamp.epochSecond}}.{{json.timestamp.nano}}"
    if: ctx.json?.timestamp != null && ctx.json?.timestamp instanceof Map && ctx.json?.timestamp?.epochSecond != null && ctx.json?.timestamp?.nano != null
- date:
    field: _tmp.timestamp
    formats:
    - UNIX
    - ISO8601
    target_field: "@timestamp"
- rename:
    field: json.source
    target_field: source.address
    ignore_missing: true
- convert:
    field: source.address
    target_field: source.ip
    type: ip
    ignore_missing: true
- geoip:
    field: source.ip
    target_field: source.geo
    ignore_missing: true
- geoip:
    database_file: GeoLite2-ASN.mmdb
    field: source.ip
    target_field: source.as
    properties:
    - asn
    - organization_name
    ignore_missing: true
- rename:
    field: source.as.asn
    target_field: source.as.number
    ignore_missing: true
- rename:
    field: source.as.organization_name
    target_field: source.as.organization.name
    ignore_missing: true
- rename:
    field: json.author.id
    target_field: user.id
    ignore_missing: true
- rename:
    field: json.author.name
    target_field: user.name
    ignore_missing: true
- rename:
    field: json.auditType
    target_field: bitbucket.audit.type
    ignore_missing: true
- rename:
    field: json.type
    target_field: bitbucket.audit.type
    ignore_missing: true
- rename:
    field: json.method
    target_field: bitbucket.audit.method
    ignore_missing: true
- rename:
    field: json.system
    target_field: service.address
    ignore_missing: true
- uri_parts:
    field: service.address
    target_field: _tmp.service
    ignore_failure: true
    if: ctx.service?.address != null
- rename:
    field: json.extraAttributes
    target_field: bitbucket.audit.extra_attributes
    ignore_missing: true
- rename:
    field: json.changedValues
    target_field: bitbucket.audit.changed_values
    ignore_missing: true
- rename:
    field: json.affectedObjects
    target_field: bitbucket.audit.affected_objects
    ignore_missing: true
- set:
    field: event.action
    copy_from: bitbucket.audit.type.actionI18nKey
    ignore_empty_value: true
- script:
    lang: painless
    tag: Add ECS categorization
    params:
      bitbucket.service.user.audit.action.usercreated:
        category:
          - iam
        type:
          - user
          - creation
      bitbucket.service.user.audit.action.userrenamed:
        category:
          - iam
        type:
          - user
          - change
      bitbucket.service.user.audit.action.usercredentialupdated:
        category:
          - iam
        type:
          - user
          - change
        outcome: success
      bitbucket.service.user.audit.action.userdeleted:
        category:
          - iam
        type:
          - user
          - deletion
      bitbucket.service.user.audit.action.groupmembershipscreated.user:
        category:
          - iam
        type:
          - group
          - change
      bitbucket.service.user.audit.action.groupmembershipdeleted:
        category:
          - iam
        type:
          - group
          - change
      bitbucket.service.user.audit.action.authenticationsuccess:
        category:
          - authentication
        type:
          - start
        outcome: success
      bitbucket.web.audit.action.logoutsuccess:
        category:
          - authentication
        type:
          - end
      bitbucket.service.user.audit.action.authenticationfailure:
        category:
          - authentication
        type:
          - info
        outcome: failure
      bitbucket.service.user.audit.action.groupcreated:
        category:
          - iam
        type:
          - group
          - creation
      bitbucket.service.user.audit.action.groupdeleted:
        category:
          - iam
        type:
          - group
          - deletion
      bitbucket.service.user.audit.action.projectpermissiongranted:
        category:
          - iam
          - configuration
        type:
          - admin
          - creation
      bitbucket.access.tokens.audit.action.accesstokencreated.personal:
        category:
          - iam
        type:
          - admin
          - creation
      bitbucket.access.tokens.audit.action.accesstokendeleted.personal:
        category:
          - iam
        type:
          - admin
          - deletion
      bitbucket.access.tokens.audit.action.accesstokenmodified.personal:
        category:
          - iam
        type:
          - admin
          - change
      bitbucket.access.tokens.audit.action.accesstokencreated.repository:
        category:
          - iam
        type:
          - admin
          - creation
      bitbucket.access.tokens.audit.action.accesstokendeleted.repository:
        category:
          - iam
        type:
          - admin
          - deletion
      bitbucket.access.tokens.audit.action.accesstokenmodified.repository:
        category:
          - iam
        type:
          - admin
          - change
      bitbucket.ssh.audit.action.sshkeycreated:
        category:
          - iam
        type:
          - admin
          - creation
      bitbucket.ssh.audit.action.sshkeydeleted:
        category:
          - iam
        type:
          - admin
          - deletion
      bitbucket.ssh.audit.action.sshaccesskeygranted.repository:
        category:
          - iam
        type:
          - admin
          - creation
      bitbucket.ssh.audit.action.sshaccesskeyrevoked.repository:
        category:
          - iam
        type:
          - admin
          - deletion
      bitbucket.plugins.gpg.audit.action.gpgevent.created:
        category:
          - iam
        type:
          - admin
          - creation
      bitbucket.plugins.gpg.audit.action.gpgevent.deleted:
        category:
          - iam
        type:
          - admin
          - deletion
      bitbucket.service.user.audit.action.repositorypermissiongranted:
        category:
          - iam
          - configuration
        type:
          - admin
          - creation
      bitbucket.service.user.audit.action.repositorypermissiongrantrequested:
        category:
          - iam
          - configuration
        type:
          - admin
          - creation
      bitbucket.service.user.audit.action.repositorypermissionrevoked:
        category:
          - iam
          - configuration
        type:
          - admin
          - deletion
      bitbucket.service.user.audit.action.repositorypermissionrevocationrequested:
        category:
          - iam
          - configuration
        type:
          - admin
          - deletion
      atlassian.audit.event.action.audit.config.updated:
        category:
          - configuration
        type:
          - admin
          - change
      bitbucket.service.repository.audit.action.repositoryaccessed:
        category:
          - web
        type:
          - access
      bitbucket.service.repository.audit.action.repositorymodified:
        category:
          - configuration
        type:
          - change
      bitbucket.service.repository.audit.action.repositorymodificationrequested:
        category:
          - configuration
        type:
          - change
      bitbucket.service.repository.audit.action.repositorydeleted:
        category:
          - configuration
        type:
          - deletion
      bitbucket.service.project.audit.action.projectcreated:
        category:
          - configuration
        type:
          - creation
      bitbucket.service.project.audit.action.projectdeleted:
        category:
          - configuration
        type:
          - deletion
      bitbucket.service.project.audit.action.projectdeletionrequested:
        category:
          - configuration
        type:
          - deletion
      bitbucket.service.project.audit.action.projectmodified:
        category:
          - configuration
        type:
          - change
      bitbucket.service.project.audit.action.projectmodificationrequested:
        category:
          - configuration
        type:
          - change
    source: >-
      ctx.event.kind = 'event';
      ctx.event.type = 'info';

      if (ctx?.event?.action == null) {
          return;
      }

      if (params.get(ctx.event.action) == null) {
          return;
      }

      def hm = new HashMap(params.get(ctx.event.action));
      hm.forEach((k, v) -> ctx.event[k] = v);
- script:
    lang: painless
    description: Add ECS User fields
    if: "['bitbucket.service.audit.category.usersandgroups'].contains(ctx.bitbucket?.audit?.type?.categoryI18nKey)"
    source: >-
      if (ctx?.event?.action == null) {
          return;
      }
      if (ctx.group == null) {
        Map map = new HashMap();
        ctx.put("group", map);
      }
      if (ctx.user == null) {
        Map map = new HashMap();
        ctx.put("user", map);
      }
      if (ctx.user?.target == null) {
        Map map = new HashMap();
        ctx.user.put("target", map);
      }
      if (ctx.user?.changes == null) {
        Map map = new HashMap();
        ctx.user.put("changes", map);
      }
      if (ctx.user?.target?.group == null) {
        Map map = new HashMap();
        ctx.user.target.put("group", map);
      }
      if(ctx.bitbucket?.audit?.affected_objects != null) {
        for (def j = 0; j < ctx.bitbucket?.audit?.affected_objects.length; j++) {
          if(ctx.bitbucket?.audit?.affected_objects[j]?.type == 'GROUP') {
            if(['bitbucket.service.user.audit.action.groupcreated', 'bitbucket.service.user.audit.action.groupdeleted'].contains(ctx.event.action)) {
              ctx.group.put("name", ctx.bitbucket?.audit?.affected_objects[j]?.name);
              ctx.group.put("id", ctx.bitbucket?.audit?.affected_objects[j]?.id);
            }
            if(['bitbucket.service.user.audit.action.groupmembershipscreated.user', 'bitbucket.service.user.audit.action.groupmembershipdeleted'].contains(ctx.event.action)) {
              ctx.user.target.group.put("name", ctx.bitbucket?.audit?.affected_objects[j]?.name);
              ctx.user.target.group.put("id", ctx.bitbucket?.audit?.affected_objects[j]?.id);
            }
          }
          if(ctx.bitbucket?.audit?.affected_objects[j]?.type == 'USER') {
            if(['bitbucket.service.user.audit.action.usercreated', 'bitbucket.service.user.audit.action.userdeleted', 'bitbucket.service.user.audit.action.userrenamed', 'bitbucket.service.user.audit.action.usercredentialupdated','bitbucket.service.user.audit.action.groupmembershipscreated.user', 'bitbucket.service.user.audit.action.groupmembershipdeleted'].contains(ctx.event.action)) {
              ctx.user.target.put("name", ctx.bitbucket?.audit?.affected_objects[j]?.name);
              ctx.user.target.put("id", ctx.bitbucket?.audit?.affected_objects[j]?.id);
            }
          }
        }
      }
      if(ctx.bitbucket?.audit?.changed_values != null) {
        for (def j = 0; j < ctx.bitbucket?.audit?.changed_values.length; j++) {
          if(['bitbucket.service.user.audit.action.userrenamed'].contains(ctx.event.action)) {
            if(ctx.bitbucket?.audit?.changed_values[j]?.i18nKey == 'bitbucket.service.user.audit.attribute.user.name') {
              ctx.user.changes.put("name", ctx.bitbucket?.audit?.changed_values[j]?.to);
              ctx.user.target.put("name", ctx.bitbucket?.audit?.changed_values[j]?.from);
            }
          }
        }
      }
- append:
    field: related.user
    value: '{{user.name}}'
    allow_duplicates: false
    if: ctx.user?.name != null
- append:
    field: related.user
    value: '{{user.target.name}}'
    allow_duplicates: false
    if: ctx.user?.target?.name != null
- append:
    field: related.user
    value: '{{user.changes.name}}'
    allow_duplicates: false
    if: ctx.user?.changes?.name != null
- append:
    field: related.ip
    value: '{{source.ip}}'
    allow_duplicates: false
    if: ctx.source?.ip != null
- append:
    field: related.hosts
    value: '{{_tmp.service.domain}}'
    allow_duplicates: false
    if: ctx._tmp?.service?.domain != null
- remove:
    field:
      - json
      - _tmp
    ignore_missing: true
- remove:
    field: event.original
    if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
    ignore_failure: true
    ignore_missing: true
- script:
    lang: painless
    description: This script processor iterates over the whole document to remove fields with null values.
    source: |
      void handleMap(Map map) {
        for (def x : map.values()) {
          if (x instanceof Map) {
              handleMap(x);
          } else if (x instanceof List) {
              handleList(x);
          }
        }
        map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      void handleList(List list) {
        for (def x : list) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
        }
        list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      handleMap(ctx);
on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}'
