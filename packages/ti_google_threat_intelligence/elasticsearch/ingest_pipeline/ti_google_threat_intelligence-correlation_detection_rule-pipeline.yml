---
description: Pipeline for processing detected IOC events from the user's environment.
processors:
  - script:
      lang: painless
      if: ctx.threat?.enrichments != null;
      description: Store the first 'matched' and 'indicator' object from the alert, as it comes from Google Threat Intelligence API.
      source: >
        for (def obj : ctx.threat.enrichments) {
          if (obj.containsKey('matched') && obj.containsKey('indicator')) {
            ctx.temp_fields = obj;
            break;
          }
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
# Retain event.dataset and event.module from the matched source index in temp_fields,
# as they originate from the source event's module and dataset in the alert
# and are essential for navigating to the corresponding document.
  - rename:
      field: event.dataset
      tag : keep_event_dataset_from_alert
      target_field: temp_fields.dataset
      ignore_missing: true
  - rename:
      field: event.module
      tag : keep_event_module_from_alert
      target_field: temp_fields.module
      ignore_missing: true
  - script:
      lang: painless
      source: |-
        // Define the list of fields to retain
        def fieldsToKeep = ["@timestamp"];

        // Define regex patterns
        def gtiPattern = /^temp_fields.*/;  // Matches keys starting with 'temp_fields'
        def underscorePattern = /^_.*/;  // Matches keys starting with '_'

        // Get a copy of the current document keys
        def keys = new ArrayList(ctx.keySet());

        // Iterate over the keys
        for (def key : keys) {
          // If the key is not in fieldsToKeep, does not match any Pattern, remove it
          if (!fieldsToKeep.contains(key) && !(key =~ gtiPattern) && !(key =~ underscorePattern)) {
            ctx.remove(key);
          }
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
# Define hardcoded values required for processing.
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: 8.11.0
  - set:
      field: event.kind
      tag: set_event_kind_to_enrichment
      value: enrichment
  - append:
      field: event.category
      tag: append_event_category
      value: threat
  - append:
      field: event.type
      tag: append_event_type
      value: indicator
  - set:
      field: observer.vendor
      tag: set_observer_vendor
      value: Google
  - set:
      field: observer.product
      tag: set_observer_product
      value: Threat Intelligence
  - set:
      field: data_stream.dataset
      tag: set_data_stream_dataset
      value: ti_google_threat_intelligence.enriched_ioc
  - set:
      field: event.dataset
      tag: set_event_dataset
      value: ti_google_threat_intelligence.enriched_ioc
# Extract relevant fields from temp_fields and map them to threat.indicator.
  - rename:
      field: temp_fields.indicator
      tag : rename_temp_fields_to_indicator
      target_field: threat.indicator
      ignore_missing: true
  - rename:
      field: temp_fields.matched.atomic
      tag : rename_temp_fields_to_matched_value
      target_field: threat.indicator.matched.value
      ignore_missing: true
  - rename:
      field: temp_fields.matched.field
      tag : rename_temp_fields_to_matched_field
      target_field: threat.indicator.matched.field
      ignore_missing: true
  - rename:
      field: temp_fields.dataset
      tag : rename_temp_fields_to_matched_field
      target_field: threat.indicator.matched.dataset
      ignore_missing: true
  - rename:
      field: temp_fields.module
      tag : rename_temp_fields_to_matched_field
      target_field: threat.indicator.matched.module
      ignore_missing: true
# Create ECS-compliant mappings for threat.indicator fields.
  - append:
      field: related.hash
      tag: append_file_hash_md5_into_related_hash
      value: '{{{threat.indicator.file.hash.md5}}}'
      allow_duplicates: false
      if: ctx.threat?.indicator?.file?.hash?.md5 != null
  - append:
      field: related.hash
      tag: append_vhash_into_related_hash
      value: '{{{threat.indicator.vhash}}}'
      allow_duplicates: false
      if: ctx.threat?.indicator?.vhash != null
  - append:
      field: related.hash
      tag: append_jarm_into_related_hash
      value: '{{{threat.indicator.jarm}}}'
      allow_duplicates: false
      if: ctx.threat?.indicator?.jarm != null
  - append:
      field: related.hash
      tag: append_file_hash_sha256_into_related_hash
      value: '{{{threat.indicator.file.hash.sha256}}}'
      allow_duplicates: false
      if: ctx.threat?.indicator?.file?.hash?.sha256 != null
  - append:
      field: related.ip
      tag: append_ip_into_related_ip
      value: '{{{threat.indicator.ip}}}'
      allow_duplicates: false
      if: ctx.threat?.indicator?.ip != null
  - set:
      field: event.created
      tag: set_gti_enriched_ioc_event_created
      copy_from: threat.indicator.created
      ignore_empty_value: true
  - set:
      field: http.response.status_code
      tag: set_http_response_status_code
      copy_from: threat.indicator.http_response_code
      ignore_empty_value: true
  - set:
      field: event.ingested
      tag: set_event_ingested_as_timestamp
      copy_from: '@timestamp'
      ignore_empty_value: true
  - remove:
      field: temp_fields
      tag: remove_temp_fields
      ignore_missing: true
  - set:
      field: event.kind
      tag: set_pipeline_error_into_event_kind
      value: pipeline_error
      if: ctx.error?.message != null
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
