---
description: Pipeline for processing sample logs
processors:
- script:
    description: Convert Additional Info keys to snake case.
    tag: additional-info-keys-to-snake-case
    lang: painless
    source: |
      Map keysToSnakeCase(Map m) {
        def regex = /_?([a-z])([A-Z]+)/;
        def snakeCaseMap = [:];

        for (entry in m.entrySet()) {
          def k = entry.getKey();
          def v = entry.getValue();

          if (v instanceof Map) {
            v = keysToSnakeCase(v);
          } else if (v instanceof List) {
            for (int i = 0; i < v.size(); i++) {
              def item = v.get(i);
              if (item instanceof Map) {
                v.set(i, keysToSnakeCase(item));
              }
            }
          }

          k = regex.matcher(k).replaceAll('$1_$2').toLowerCase();
          snakeCaseMap.put(k, v);
        }
        return snakeCaseMap;
      }
            
      if(ctx.message != null) {
        ctx.message = keysToSnakeCase(ctx.message);
      }



##############
# ECS compat #
##############

- append:
    if: "ctx?.message != null && ctx?.message.event.reported_ip_address != ''"
    field: host.ip
    value: '{{{message.event.reported_ip_address}}}'
    ignore_failure: true

- set:
    field: host.address
    copy_from: host.ip
    ignore_empty_value: true

- set:
    field: user.name
    copy_from: message.?computer.username
    ignore_empty_value: true
- set:
    field: user.email
    copy_from: message.?computer.email_address
    ignore_empty_value: true


rename: 
    field: message
    target_field: jamf_pro.events.{{{message.webhook.webhook_event}}}


on_failure:
- set:
    field: event.kind
    value: pipeline_error
- append:
    field: error.message
    value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  

