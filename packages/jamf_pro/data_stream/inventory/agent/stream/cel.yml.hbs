config_version: 2
resource.url: "{{api_host}}/api/v1/computers-inventory"
auth.oauth2.client.id: {{client_id}}
auth.oauth2.client.secret: {{client_secret}}
auth.oauth2.token_url: "{{api_host}}/api/oauth/token"
auth.oauth2.endpoint_params.grant_type: "client_credentials" 
interval: {{interval}}
max_executions: {{max_executions}}
resource.timeout: {{http_client_timeout}}
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/jamf_pro-versions/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
{{/if}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
page: 0
fields_under_root: true
keep_null: true
program: |
  request(
    "GET",
    state.url + "?section=GENERAL&section=OPERATING_SYSTEM&section=HARDWARE&page_size=100&page=0"
  ).with({
    "Header": ({
      "Content-Type": ["application/json"]
    })
  }).do_request().as(resp,
    bytes(resp.Body).decode_json().as(body,
      {{!-- has(body.errors) && size(body.errors) > 0 ?
        state.with({
          "events": [{
            "error": { "message": body.errors.map(e, e.message) },
            "event": { "original": body.encode_json() }
          }]
        })
       : --}}
      state.with({
        "events": body.results,
      }) 
    )
  )
state:
  total_count: {{total_count}}
  page_size: {{page_size}}
  page: {{page}}
  preserve_original_event: {{preserve_original_event}}
