config_version: 2
resource:
  url: "{{api_host}}/api/v1/computers-inventory"
  timeout: {{http_client_timeout}}
{{#if enable_request_tracer}}
  tracer:
    filename: "../../logs/jamf_pro-versions/http-request-trace-*.ndjson"
    maxbackups: 5
{{/if}}
auth:
  oauth2:
    client:
      id: {{client_id}}
      secret: {{client_secret}}
    token_url: "{{api_host}}/api/oauth/token"
    endpoint_params:
      grant_type: "client_credentials" 
interval: {{interval}}
max_executions: {{max_executions}}
tags:
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}

{{#if processors}}
processors:
{{processors}}
{{/if}}

keep_null: true
program: |
  request(
    "GET",
      state.url.trim_right("/")  + "?" +	{
      "section" : state.sections,
      "page-size": [string(state.page_size)],
      "page": [string(state.?cursor.?page.orValue(int(0)))]
    }.format_query()
  ).with({
    "Header": ({
      "Content-Type": ["application/json"]
    })
  }).do_request().as(resp,
    bytes(resp.Body).decode_json().as(body,
      resp.StatusCode != 200 ?
        {
          "events": [{
            "error": { "message": "response: " + string(resp.StatusCode) },
            "event": { "original": resp.Body }
          }]
        }
      :
        state.with({
          "events": body.results.map(e, {
              "message": e,
          }),
          "want_more": (int(state.?cursor.?page.orValue(int(0))) + 1) * int(state.page_size) < int(body.totalCount),
          "cursor": {"page": int(state.?cursor.?page.orValue(int(0))) + 1},
        })
    )
  )
state:
  page_size: {{page_size}}
  sections: [
  {{#if enable_section_general }} "GENERAL", {{/if}}
  {{#if DISK_ENCRYPTION }} "DISK_ENCRYPTION", {{/if}}
  {{#if PURCHASING }} "PURCHASING", {{/if}}
  {{#if APPLICATIONS }} "APPLICATIONS", {{/if}}
  {{#if STORAGE }} "STORAGE", {{/if}}
  {{#if USER_AND_LOCATION }} "USER_AND_LOCATION", {{/if}}
  {{#if CONFIGURATION_PROFILES }} "CONFIGURATION_PROFILES", {{/if}}
  {{#if PRINTERS }} "PRINTERS", {{/if}}
  {{#if SERVICES }} "SERVICES", {{/if}}
  {{#if HARDWARE }} "HARDWARE", {{/if}}
  {{#if LOCAL_USER_ACCOUNTS }} "LOCAL_USER_ACCOUNTS", {{/if}}
  {{#if CERTIFICATES }} "CERTIFICATES", {{/if}}
  {{#if ATTACHMENTS }} "ATTACHMENTS", {{/if}}
  {{#if PLUGINS }} "PLUGINS", {{/if}}
  {{#if PACKAGE_RECEIPTS }} "PACKAGE_RECEIPTS", {{/if}}
  {{#if FONTS }} "FONTS", {{/if}}
  {{#if SECURITY }} "SECURITY", {{/if}}
  {{#if OPERATING_SYSTEM }} "OPERATING_SYSTEM", {{/if}}
  {{#if LICENSED_SOFTWARE }} "LICENSED_SOFTWARE", {{/if}}
  {{#if IBEACONS }} "IBEACONS", {{/if}}
  {{#if SOFTWARE_UPDATES }} "SOFTWARE_UPDATES", {{/if}}
  {{#if EXTENSION_ATTRIBUTES }} "EXTENSION_ATTRIBUTES", {{/if}}
  {{#if CONTENT_CACHING }} "CONTENT_CACHING", {{/if}}
  {{#if GROUP_MEMBERSHIP }} "GROUP_MEMBERSHIP", {{/if}}
  ]


