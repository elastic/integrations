---
description: Pipeline for processing sample logs
processors:

- set:
    field: ecs.version
    value: '8.11.0'

- rename:
    field: json
    target_field: jamf_pro.events
    # all valid events will now have jamf_pro.events.{event,webhook}

- convert:
    field: jamf_pro.events.event.management_id
    type: string
    if: >
      ctx.jamf_pro.events.event?.management_id != null &&
      !(ctx.jamf_pro.events.event.management_id instanceof String)

- rename:
    field: jamf_pro.events.event.computer
    target_field: jamf_pro.events.event.is_computer
    if: ctx.jamf_pro.events.event.computer instanceof boolean

- script:
    description: Convert Additional Info keys to snake case.
    tag: additional-info-keys-to-snake-case
    lang: painless
    source: |
      Map keysToSnakeCase(Map m) {
        def regex = /_?([a-z])([A-Z]+)/;
        def snakeCaseMap = [:];

        for (entry in m.entrySet()) {
          def k = entry.getKey();
          def v = entry.getValue();

          if (v instanceof Map) {
            v = keysToSnakeCase(v);
          } else if (v instanceof List) {
            for (int i = 0; i < v.size(); i++) {
              def item = v.get(i);
              if (item instanceof Map) {
                v.set(i, keysToSnakeCase(item));
              }
            }
          }

          k = regex.matcher(k).replaceAll('$1_$2').toLowerCase();
          snakeCaseMap.put(k, v);
        }
        return snakeCaseMap;
      }

      if(ctx.jamf_pro.events != null) {
        ctx.jamf_pro.events = keysToSnakeCase(ctx.jamf_pro.events);
      }

##############
# Timestamps #
##############

- date:
    field: jamf_pro.events.webhook.event_timestamp
    target_field: jamf_pro.events.webhook.event_timestamp
    formats:
      - UNIX_MS

- date:
    field: jamf_pro.events.event.last_update
    target_field: jamf_pro.events.event.last_update
    if: ctx.jamf_pro.events.event.last_update != null
    formats:
      - UNIX_MS

##############
#   IP src   #
##############

- set:
    if: "ctx.jamf_pro.events.event.ip_address != null && ctx.jamf_pro.events.event.ip_address != ''"
    field: host.ip
    value: 
     - '{{{jamf_pro.events.event.ip_address}}}'
    ignore_empty_value: true

- set:
    if: >
      ctx.jamf_pro.events.event.computer?.reported_ip_address != null &&
      ctx.jamf_pro.events.event.computer.reported_ip_address != ''
    field: host.ip
    value: 
     - "{{{jamf_pro.events.event.computer.reported_ip_address}}}"
    ignore_empty_value: true

##############
#  User src  #
##############

- set:
    field: user.name
    copy_from: jamf_pro.events.event.username
    ignore_empty_value: true

- set:
    field: user.name
    copy_from: jamf_pro.events.event.computer.username
    ignore_empty_value: true

- set:
    field: user.email
    copy_from: jamf_pro.events.event.computer.email_address
    ignore_empty_value: true

- set:
    field: user.email
    copy_from: jamf_pro.events.event.email_address
    ignore_empty_value: true

##############
#   OS src   #
##############

- set:
    if: ctx.jamf_pro.events.event.os_version != null
    field: os.version
    copy_from: jamf_pro.events.event.os_version

- set:
    if: ctx.jamf_pro.events.event.computer?.os_version != null
    field: os.version
    copy_from: jamf_pro.events.event.computer.os_version


##############
# ECS compat #
##############

- set:
    field: host.address
    copy_from: host.ip
    ignore_empty_value: true

- geoip:
    if: ctx.host?.ip != null && ctx.host.ip != ''
    field: host.ip
    target_field: host.geo
    ignore_missing: true

- append:
    field: related.user
    value: "{{{user.name}}}"
    if: ctx.user?.name != null && ctx.user.name != ""

- append:
    field: related.user
    value: "{{{user.email}}}"
    if: ctx.user?.email != null && ctx.user.email != ""

- set:
    field: event.kind
    value: event

##################
# Error handling #
##################

on_failure:
- set:
    field: event.kind
    value: pipeline_error
- append:
    field: tags
    value: preserve_original_event
    allow_duplicates: false
- append:
    field: error.message
    value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
