---
description: Pipeline for processing Vectra Detect Account Detection logs.
processors:
  - set:
      field: event.kind
      value: alert
  - rename:
      field: json.href
      target_field: vectra_detect.log.href
      ignore_missing: true
  - set:
      field: event.reference
      copy_from: vectra_detect.log.href
      ignore_empty_value: true
  - uri_parts:
      field: event.reference
      tag: 'uri_parts_to_split_reference'
      if: ctx.event?.reference != null
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.dvchost
      target_field: vectra_detect.log.dvchost
      ignore_missing: true
  - set:
      field: observer.hostname
      copy_from: vectra_detect.log.dvchost
      ignore_empty_value: true
  - append:
      field: related.hosts
      value: '{{{observer.hostname}}}'
      allow_duplicates: false
      if: ctx.observer?.hostname != null
  - convert:
      field: json.severity
      tag: 'convert_severity_to_double'
      target_field: vectra_detect.log.severity
      type: double
      ignore_missing: true
      if: ctx.json?.severity != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - json:
      field: json.service_info
      tag: 'json_to_split_service_info'
      if: ctx.json?.service_info instanceof String
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.service_info
      target_field: vectra_detect.log.service.info
      ignore_missing: true
  - foreach:
      field: vectra_detect.log.service.info
      if: ctx.vectra_detect?.log?.service?.info instanceof List
      processor:
        convert:
          field: _ingest._value.count
          target_field: _ingest._value.counts
          tag: 'convert_service_info_count_to_long'
          type: long
          ignore_missing: true
          on_failure:
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: vectra_detect.log.service.info
      if: ctx.vectra_detect?.log?.service?.info instanceof List
      ignore_missing: true
      processor:
        append:
          field: related.user
          value: '{{{_ingest._value.account_uid}}}'
          allow_duplicates: false
  - foreach:
      field: vectra_detect.log.service.info
      if: ctx.vectra_detect?.log?.service?.info instanceof List
      ignore_missing: true
      processor:
        remove:
          field:
            - _ingest._value.count
          ignore_missing: true
  - rename:
      field: json.service_name
      target_field: vectra_detect.log.service.name
      ignore_missing: true
  - set:
      field: service.name
      copy_from: vectra_detect.log.service.name
      ignore_empty_value: true
  - rename:
      field: json.account_uid
      target_field: vectra_detect.log.account.uid
      ignore_missing: true
  - dissect:
      field: vectra_detect.log.account.uid
      tag: 'dissect_account_uid'
      pattern: '%{vectra_detect.log.account.user_id}@%{user.domain}'
      if: ctx.vectra_detect?.log?.account?.uid?.contains('@') == true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: user.id
      copy_from: vectra_detect.log.account.uid
      ignore_empty_value: true
  - set:
      field: user.email
      copy_from: vectra_detect.log.account.uid
      if: ctx.user?.domain != null && ctx.user.domain != '' && ctx.vectra_detect?.log?.account?.user_id != ''
      ignore_empty_value: true
  - registered_domain:
      field: user.domain
      target_field: vectra_detect.log.user
      ignore_missing: true
  - rename:
      field: json.account_name
      target_field: vectra_detect.log.account.name
      ignore_missing: true
  - json:
      field: json.account_info
      tag: 'json_to_split_account_info'
      if: ctx.json?.account_info instanceof String
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.account_info
      target_field: vectra_detect.log.account.info
      ignore_missing: true
  - foreach:
      field: vectra_detect.log.account.info
      if: ctx.vectra_detect?.log?.account?.info instanceof List
      processor:
        convert:
          field: _ingest._value.count
          target_field: _ingest._value.counts
          tag: 'convert_account_info_count_to_long'
          type: long
          ignore_missing: true
          on_failure:
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: vectra_detect.log.account.info
      if: ctx.vectra_detect?.log?.account?.info instanceof List
      ignore_missing: true
      processor:
        append:
          field: related.user
          value: '{{{_ingest._value.account_uid}}}'
          allow_duplicates: false
  - foreach:
      field: vectra_detect.log.account.info
      if: ctx.vectra_detect?.log?.account?.info instanceof List
      ignore_missing: true
      processor:
        remove:
          field:
            - _ingest._value.count
          ignore_missing: true
  - set:
      field: user.target.name
      copy_from: vectra_detect.log.account.uid
      ignore_empty_value: true
  - append:
      field: related.user
      value: '{{{user.target.name}}}'
      allow_duplicates: false
      if: ctx.user?.target?.name != null
  - convert:
      field: json.threat
      tag: 'convert_threat_to_long'
      target_field: vectra_detect.log.threat.score
      type: long
      ignore_missing: true
      if: ctx.json?.threat != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: json.detection_id
      tag: 'convert_detection_id_to_string'
      target_field: vectra_detect.log.detection.id
      type: string
      ignore_missing: true
      if: ctx.json?.detection_id != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.id
      copy_from: vectra_detect.log.detection.id
      ignore_empty_value: true
  - rename:
      field: json.d_type_vname
      target_field: vectra_detect.log.d_type.vname
      ignore_missing: true
  - rename:
      field: json.d_type
      target_field: vectra_detect.log.d_type.name
      ignore_missing: true
  - convert:
      field: json.certainty
      tag: 'convert_certainty_to_long'
      target_field: vectra_detect.log.certainty
      type: long
      ignore_missing: true
      if: ctx.json?.certainty != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: json.dd_dst_port
      tag: 'convert_dd_dst_port_to_long'
      target_field: vectra_detect.log.dd.dst.port
      type: long
      ignore_missing: true
      if: ctx.json?.dd_dst_port != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: destination.port
      copy_from: vectra_detect.log.dd.dst.port
      ignore_empty_value: true
  - convert:
      field: json.dd_dst_ip
      tag: 'convert_dd_dst_ip_to_ip'
      target_field: vectra_detect.log.dd.dst.ip
      type: ip
      ignore_missing: true
      if: ctx.json?.dd_dst_ip != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: destination.ip
      copy_from: vectra_detect.log.dd.dst.ip
      ignore_empty_value: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true
  - append:
      field: related.ip
      value: '{{{destination.ip}}}'
      allow_duplicates: false
      if: ctx.destination?.ip != null
  - rename:
      field: json.dd_dst_dns
      target_field: vectra_detect.log.dd.dst.dns
      ignore_missing: true
  - set:
      field: destination.domain
      copy_from: vectra_detect.log.dd.dst.dns
      ignore_empty_value: true
  - convert:
      field: json.dd_bytes_sent
      tag: 'convert_dd_bytes_sent_to_long'
      target_field: vectra_detect.log.dd.bytes.sent
      type: long
      ignore_missing: true
      if: ctx.json?.dd_bytes_sent != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: json.dd_bytes_rcvd
      tag: 'convert_dd_bytes_rcvd_to_long'
      target_field: vectra_detect.log.dd.bytes.rcvd
      type: long
      ignore_missing: true
      if: ctx.json?.dd_bytes_rcvd != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.category
      target_field: vectra_detect.log.category
      ignore_missing: true
  - convert:
      field: json.triaged
      tag: 'convert_triaged_to_boolean'
      target_field: vectra_detect.log.triaged
      type: boolean
      ignore_missing: true
      if: ctx.json?.triaged != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.proxied_dst
      target_field: vectra_detect.log.proxied_dst
      ignore_missing: true
on_failure:
  - append:
      field: error.message
      value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      value: pipeline_error
