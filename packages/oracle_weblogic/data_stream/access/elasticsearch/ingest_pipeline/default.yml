---
description: Pipeline for processing Weblogic HTTP Access logs
processors:
- set:
    field: event.ingested
    value: "{{_ingest.timestamp}}"
    ignore_empty_value: true
    ignore_failure: true
- set:
    field: ecs.version
    value: 8.2.0
    ignore_empty_value: true
    ignore_failure: true
- set:
    field: event.module
    value: oracle_weblogic
    ignore_empty_value: true
    ignore_failure: true
- set:
    field: event.kind
    value: event
    ignore_empty_value: true
    ignore_failure: true
- set:
    field: event.type
    value: access
    ignore_empty_value: true
    ignore_failure: true
- append:
    field: event.category
    value:
    - log
    ignore_failure: true
- rename:
    field: message
    target_field: event.original
    ignore_missing: true
    ignore_failure: true
- dissect:
    field: event.original
    pattern: '%{oracle_weblogic.access.host_address} %{} %{oracle_weblogic.access.authuser} [%{@timestamp}] "%{http.request.method}
      %{http.request.referrer} HTTP/%{http.version}" %{http.response.status_code}
      %{http.response.bytes}'
    ignore_missing: true
    ignore_failure: true
- date:
    field: "@timestamp"
    formats:
    - dd/MMM/yyyy:HH:mm:ss Z
    ignore_failure: true
- convert:
    field: oracle_weblogic.access.host_address
    type: ip
    target_field: host.ip
    ignore_missing: true
    ignore_failure: true
- convert:
    field: http.response.status_code
    type: long
    target_field: http.response.status_code
    ignore_missing: true
    ignore_failure: true
- trim:
    field: http.response.bytes
    target_field: http.response.bytes
    ignore_missing: true
    ignore_failure: true
- convert:
    field: http.response.bytes
    type: long
    ignore_missing: true
    ignore_failure: true
- script:
    description: Drops null/empty values recursively
    lang: painless
    source: |
        boolean drop(Object o) {
            if (o == null || o == "") {
            return true;
            } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
            } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
            }
            return false;
        }
        drop(ctx);
on_failure:
- set:
    field: error.message
    value: "{{ _ingest.on_failure_message }}"