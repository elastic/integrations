---
description: Pipeline for processing sample logs
processors:
    - rename:
          field: message
          target_field: event.original
          ignore_missing: true
    - set:
          field: ecs.version
          value: "8.6.0"
    - grok:
          field: event.original
          patterns:
              - <%{DATA:_temp.logTypeValue}>%{TIMESTAMP_ISO8601:_temp.time} %{ISO8601_TIMEZONE:_temp.timezone}(?:%{SPACE}|%{SPACE}%{SPACE})%{GREEDYDATA:_temp.full_message}
    - dissect:
          field: _temp.full_message
          pattern: "%{barracuda.unit_name} %{barracuda.log_type} %{_temp.remMessage}"

    ################################################################
    # Collect the time related fields from the event and join them to form a pattern to parse
    ################################################################
    - append:
          value: ["{{{_temp.time}}}", "{{{_temp.timezone}}}"]
          field: _temp.timearray
    - join:
          field: _temp.timearray
          separator: ""
          target_field: _temp.timestamp
    - date:
          field: _temp.timestamp
          target_field: "@timestamp"
          formats: ["yyyy-MM-dd HH:mm:ss.SSSX"]
    - set:
          field: event.created
          copy_from: "@timestamp"

    ################################################################
    # Run different pipelines for different log types
    ################################################################
    - pipeline:
          name: '{{ IngestPipeline "webfirewall" }}'
          if: ctx.barracuda?.log_type != null && ctx.barracuda?.log_type == "WF"
    - pipeline:
          name: '{{ IngestPipeline "networkfirewall" }}'
          if: ctx.barracuda?.log_type != null && ctx.barracuda?.log_type == "NF"
    - pipeline:
          name: '{{ IngestPipeline "audit" }}'
          if: ctx.barracuda?.log_type != null && ctx.barracuda?.log_type == "AUDIT"
    - pipeline:
          name: '{{ IngestPipeline "system" }}'
          if: ctx.barracuda?.log_type != null && ctx.barracuda?.log_type == "SYS"
    - pipeline:
          name: '{{ IngestPipeline "access" }}'
          if: ctx.barracuda?.log_type != null && ctx.barracuda?.log_type == "TR"

################################################################
## Cleanup script to remove null, empty , '-' values in the document
################################################################
    - script:
          lang: painless
          description: This script processor iterates over the whole document to remove fields with null values.
          source: |
              void handleMap(Map map) {
                  for (def x : map.values()) {
                      if (x instanceof Map) {
                          handleMap(x);
                      } else if (x instanceof List) {
                          handleList(x);
                      }
                  }
                  map.values().removeIf(v -> v == null || v == "" || v == "-" || v == "\"-\"" || ((v instanceof List || v instanceof Map) && v.isEmpty()));
              }
              void handleList(List list) {
                  for (def x : list) {
                      if (x instanceof Map) {
                          handleMap(x);
                      } else if (x instanceof List) {
                          handleList(x);
                      }
                  }
              }
              handleMap(ctx);

################################################################
# Cleanup temporary resources
################################################################
    - remove:
          field:
              - _temp

################################################################
# Handle failures
################################################################
on_failure:
    - remove:
          field:
              - _temp
          ignore_missing: true
    - append:
          field: error.message
          value: "fail-{{{ _ingest.on_failure_processor_tag }}}"
    - fail:
          message: "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message: {{ _ingest.on_failure_message }}"
