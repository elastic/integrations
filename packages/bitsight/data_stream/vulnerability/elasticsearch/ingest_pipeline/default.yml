---
description: Pipeline for processing Bitsight Vulnerability output
processors:
  - rename:
      field: message
      target_field: bitsight

  - drop:
      if: ctx.bitsight?.event?.reason == 'polling'

  - fingerprint:
      fields:
        - bitsight
      tag: fingerprinting
      target_field: "_id"
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

  ##################### Scripts for processing input #####################

  - script:
      description: Drops null/empty values recursively.
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).size() == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);

  - date:
      field: bitsight.threat.last_seen_date
      formats: ["yyyy-MM-dd"]
      target_field: '@timestamp'
      ignore_failure: true

  - set:
      field: vulnerability.id
      copy_from: bitsight.threat.name
      ignore_failure: true

  - set:
      field: vulnerability.scanner.vendor
      value: "Bitsight"
      ignore_failure: true

  # Map Bitsight severity.level â†’ ECS severity
  - script:
      lang: painless
      source: |
        if (ctx.bitsight?.threat?.severity?.level != null) {
          String lvl = ctx.bitsight.threat.severity.level;
          if (lvl.equalsIgnoreCase('minor')) {
            ctx.vulnerability.severity = 'Low';
          } else if (lvl.equalsIgnoreCase('moderate')) {
            ctx.vulnerability.severity = 'Medium';
          } else if (lvl.equalsIgnoreCase('material')) {
            ctx.vulnerability.severity = 'High';
          } else if (lvl.equalsIgnoreCase('severe')) {
            ctx.vulnerability.severity = 'Critical';
          } else {
            ctx.vulnerability.severity = lvl;
          }
        }
      ignore_failure: true

  # Extract score from severity.details field
  - grok:
      field: bitsight.threat.severity.details
      patterns: ["CVSS %{NUMBER:vulnerability.score.base:float}"]
      ignore_failure: true

  # Extract IP from evidence identifier field (e.g., 1.2.3.4:443)
  - remove:
      field: host
      ignore_failure: true
  - grok:
      field: bitsight.evidence.identifier
      patterns: ["%{IP:extracted_ip}:%{NUMBER}"]
      ignore_failure: true
  - append:
      field: host.ip
      value: "{{extracted_ip}}"
      if: ctx?.extracted_ip != null
      ignore_failure: true
      allow_duplicates: false
  - remove:
      field: extracted_ip
      ignore_failure: true

#################### Error Log fields ####################

on_failure:
  - append:
      field: error.message
      value: '{{{_ingest.on_failure_message}}}'

  - set:
      field: event.kind
      value: pipeline_error