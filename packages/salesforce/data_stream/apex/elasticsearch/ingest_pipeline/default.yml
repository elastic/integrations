---
description: Pipeline for parsing Salesforce Apex logs
processors:
  - json:
      field: message
      target_field: json
      on_failure:
        - append:
            field: error.message
            value: "Failed to parse JSON: {{{_ingest.on_failure_message}}}"
  - set:
      field: event.original
      copy_from: message
      ignore_empty_value: true
      ignore_failure: true
      if: "ctx.event?.original == null"
  - set:
      field: ecs.version
      value: "8.11.0"
      ignore_failure: true
      ignore_empty_value: true
  - set:
      field: event.ingested
      copy_from: _ingest.timestamp
  - date:
      field: json.TIMESTAMP_DERIVED
      target_field: "@timestamp"
      formats:
        - ISO8601
      on_failure:
        - append:
            field: error.message
            value: "Failed to parse TIMESTAMP_DERIVED field: {{{_ingest.on_failure_message}}}"
  - script:
      lang: painless
      source: |
        def apex = ctx.salesforce?.apex ?: [:];
        def json = ctx.json ?: [:];

        def fieldsToConvert = [
          'CALLOUT_TIME': 'callout_time',
          'CPU_TIME': 'cpu_time',
          'DB_CPU_TIME': 'db_cpu_time',
          'DB_TOTAL_TIME': 'db_total_time',
          'EXECUTE_MS': 'execute_ms',
          'FETCH_MS': 'fetch_ms',
          'LIMIT_USAGE_PERCENT': 'limit_usage_pct',
          'THROUGHPUT': 'throughput',
          'RUN_TIME': 'run_time'
        ];
        for (def entry : fieldsToConvert.entrySet()) {
          if (json[entry.getKey()] != null) {
            def value = json[entry.getKey()];
            if (value instanceof String && value.length() > 0) {
              apex[entry.getValue()] = Float.parseFloat(value);
            }
          }
        }

        def longFields = [
          'DB_BLOCKS': 'db_blocks',
          'LIMIT': 'limit',
          'NUMBER_FIELDS': 'fields_count',
          'NUMBER_SOQL_QUERIES': 'soql_queries_count',
          'OFFSET': 'offset',
          'ROWS': 'rows_total',
          'ROWS_FETCHED': 'rows_fetched',
          'ROWS_PROCESSED': 'rows_processed'
        ];
        for (def entry : longFields.entrySet()) {
          if (json[entry.getKey()] != null) {
            def value = json[entry.getKey()];
            if (value instanceof String && value.length() > 0) {
              apex[entry.getValue()] = Long.parseLong(value);
            }
          }
        }

        def fieldsToRename = [
          'ACTION': 'action',
          'CLASS_NAME': 'class_name',
          'CLIENT_NAME': 'client_name',
          'ENTITY': 'entity',
          'ENTITY_NAME': 'entity_name',
          'ENTRY_POINT': 'entry_point',
          'EVENT_TYPE': 'event_type',
          'FILTER': 'filter',
          'IS_LONG_RUNNING_REQUEST': 'is_long_running_request',
          'LOGIN_KEY': 'login_key',
          'MEDIA_TYPE': 'media_type',
          'MESSAGE': 'message',
          'METHOD_NAME': 'method_name',
          'ORDERBY': 'orderby',
          'ORGANIZATION_ID': 'organization_id',
          'QUERY': 'query',
          'QUIDDITY': 'quiddity',
          'REQUEST_ID': 'request_id',
          'REQUEST_STATUS': 'request_status',
          'SELECT': 'select',
          'SUBQUERIES': 'subqueries',
          'TRIGGER_ID': 'trigger_id',
          'TRIGGER_NAME': 'trigger_name',
          'TRIGGER_TYPE': 'trigger_type',
          'TYPE': 'type',
          'URI': 'uri',
          'URI_ID_DERIVED': 'uri_derived_id',
          'USER_AGENT': 'user_agent',
          'USER_ID_DERIVED': 'user_id_derived'
        ];
        for (def entry : fieldsToRename.entrySet()) {
          if (json[entry.getKey()] != null) {
            apex[entry.getValue()] = json[entry.getKey()];
          }
        }

        ctx.salesforce = ctx.salesforce ?: [:];
        ctx.salesforce.apex = apex;
      on_failure:
        - append:
            field: error.message
            value: "Failed to process Apex fields: {{{_ingest.on_failure_message}}}"

  - script:
      description: Set request user agent value from user agent numeric code.
      lang: painless
      params:
        user_agent_map:
          "100": "Internet Explorer"
          "110": "Firefox"
          "130": "Chrome"
          "140": "Safari"
          "150": "Opera"
          "160": "Android"
          "170": "Netscape"
          "180": "Webkit"
          "190": "Gecko"
          "230": "Blackberry"
          "240": "Good Access"
          "999": "Unknown"
      if: "ctx.salesforce?.apex?.user_agent != null"
      source: |
        def userAgent = ctx.salesforce.apex.user_agent.toString();
        if (userAgent.length() >= 3) {
          def code = userAgent.substring(0, 3);
          if (params.user_agent_map.containsKey(code)) {
            ctx.salesforce.apex.user_agent = params.user_agent_map[code];
          }
        }
      on_failure:
        - append:
            field: error.message
            value: "Failed to set salesforce.apex.user_agent: {{{_ingest.on_failure_message}}}"

  #######################
  ## ECS Event Mapping ##
  #######################

  - set:
      field: event.kind
      value: event
      if: ctx.event?.kind == null
  - append:
      field: event.type
      value: connection
      if: ctx.salesforce?.apex?.event_type != "ApexExecution"
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: event.category
      value: network
      if: ctx.salesforce?.apex?.event_type != "ApexTrigger" && ctx.salesforce?.apex?.event_type != "ApexExecution"
      allow_duplicates: false
      ignore_failure: true
  - script:
      description: Set event.action field based on the type of Apex event received.
      if: ctx.salesforce?.apex?.event_type != null
      lang: painless
      params:
        event_action_map:
          apexcallout: apex-callout
          apextrigger: apex-trigger
          apexexecution: apex-execution
          apexrestapi: apex-rest
          apexsoap: apex-soap
          externalcustomapexcallout: apex-external-custom-callout
      source: |
        def eventType = ctx.salesforce.apex.event_type?.toLowerCase();
        if (eventType != null && params.event_action_map.containsKey(eventType)) {
          ctx.event = ctx.event ?: [:];
          ctx.event.action = params.event_action_map[eventType];
        }
      on_failure:
        - append:
            field: error.message
            value: "Failed to set event.action from salesforce.apex.event_type: {{{_ingest.on_failure_message}}}"

  - script:
      lang: painless
      source: |
        def apex = ctx.salesforce?.apex ?: [:];
        def json = ctx.json ?: [:];
        def event = ctx.event ?: [:];

        if (apex.event_type == "ApexCallout" && json.TIME != null) {
          event.duration = Float.parseFloat(json.TIME);
        } else if (json.EXEC_TIME != null && (apex.event_type == "ApexTrigger" || apex.event_type == "ApexExecution")) {
          event.duration = Float.parseFloat(json.EXEC_TIME);
        } else if (apex.run_time != null && (apex.event_type == "ApexRestApi" || apex.event_type == "ApexSoap")) {
          event.duration = apex.run_time;
        } else if (json.TOTAL_MS != null && apex.event_type == "ExternalCustomApexCallout") {
          event.duration = Float.parseFloat(json.TOTAL_MS);
        }

        if ((json.SUCCESS != null && json.SUCCESS == "1") || (json.STATUS != null && json.STATUS == "1")) {
          event.outcome = "success";
        } else if ((json.SUCCESS != null && json.SUCCESS != "1") || (json.STATUS != null && json.STATUS != "1")) {
          event.outcome = "failure";
        }

        if (json.URL != null && apex.event_type == "ApexCallout") {
          event.url = json.URL;
        } else if (apex.uri != null && apex.event_type != "ApexCallout" && apex.event_type != "ExternalCustomApexCallout") {
          event.url = apex.uri;
        }

        ctx.event = event;
      on_failure:
        - append:
            field: error.message
            value: "Failed to process event fields: {{{_ingest.on_failure_message}}}"

  - rename:
      field: json.USER_ID
      target_field: user.id
      ignore_missing: true
      ignore_failure: true
  - append:
      field: user.roles
      value: "{{{json.USER_TYPE}}}"
      allow_duplicates: false
      ignore_failure: true
  # A Salesforce internal IP (such as a login from Salesforce Workbench or AppExchange) is shown as "Salesforce.com IP"
  - rename:
      field: json.CLIENT_IP
      target_field: source.ip
      if: ctx.json?.CLIENT_IP != null && ctx.json?.CLIENT_IP != "Salesforce.com IP"
      ignore_missing: true
      ignore_failure: true
  - geoip:
      field: source.ip
      target_field: source.geo
      if: ctx?.source?.ip != null && ctx.source.ip != "Salesforce.com IP"
      ignore_missing: true
      ignore_failure: true
  - append:
      field: related.ip
      value: "{{{source.ip}}}"
      if: ctx?.source?.ip != null
      allow_duplicates: false
      ignore_failure: true
  - rename:
      field: json.METHOD
      target_field: http.request.method
      ignore_missing: true
      ignore_failure: true
  - convert:
      field: json.REQUEST_SIZE
      target_field: http.request.bytes
      type: long
      ignore_missing: true
      ignore_failure: true
  - convert:
      field: json.RESPONSE_SIZE
      target_field: http.response.bytes
      type: long
      ignore_missing: true
      ignore_failure: true
  - convert:
      field: json.STATUS_CODE
      target_field: http.response.status_code
      type: long
      ignore_missing: true
      ignore_failure: true

  - script:
      description: Drops null/empty values recursively
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return ((Map) object).isEmpty();
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return ((List) object).isEmpty();
          }
          return false;
        }
        dropEmptyFields(ctx);
      on_failure:
        - append:
            field: error.message
            value: "Failed to drop empty fields: {{{_ingest.on_failure_message}}}"

  - remove:
      field:
        - json
        - message
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true

on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - set:
      field: error.message
      value: "{{{_ingest.on_failure_message}}}"
  - set:
      field: error.type
      value: "{{{_ingest.on_failure_processor_type}}}"
