config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
auth.oauth2:
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{token_url}}
  scopes: {{scope}}
state.md5List:
{{#each md5_hash as |md5|}}
  - {{md5}}
{{/each}}
state.details: {{details}}
redact:
  fields: ~
program: |
    state.with({
      "events": state.md5List.map(md5, request(
          "GET",
          state.url + "/api/v1/sandbox/report/" + md5 + "?" + {
            "details": [state.details]
          }.format_query()
        ).do_request().as(resp, resp.StatusCode == 200 ?
             bytes(resp.Body).decode_json().as(body,
               has(body.Summary)
             ?
               [{
                 "message": body.Summary.encode_json()
               }]
             :
              [
                 "SystemSummary",
                 "Persistence",
                 "Networking",
                 "Exploit",
                 "Stealth",
                 "SecurityBypass",
               ].map(k, k in body["Full Details"], body["Full Details"][k].map(e, {
                 "message": {
                   ?"Summary": body[?"Full Details"].Summary,
                   ?"Classification": body[?"Full Details"].Classification,
                   ?"FileProperties": body[?"Full Details"].FileProperties,
                   ?"Origin": body[?"Full Details"].Origin,
                   k: e
                 }.encode_json()
               })).flatten()
             )
          :
            dyn({
              "error": {
                "code": string(resp.StatusCode),
                "id": string(resp.Status),
                "message": "GET:"+(
                  size(resp.Body) != 0 ?
                    string(resp.Body)
                  :
                    string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
                ),
              },
            })
          )
      ).flatten()
    })
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
