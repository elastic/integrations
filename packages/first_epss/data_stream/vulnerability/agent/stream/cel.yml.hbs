config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
resource.tracer.maxsize: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  batch_size: {{batch_size}}
max_executions: 5000
program: |-
  state.with(
        request(
                "GET",
                state.url + "?" + {
                        "limit": [string(state.batch_size)],
                        "offset": [
                                (has(state.cursor) && has(state.cursor.nextOffset) && state.cursor.nextOffset != null) ?
                                        string(state.cursor.nextOffset)
                                :
                                        "0",
                        ],
                }.format_query()
        ).do_request().as(resp, (resp.StatusCode != 200) ?
                {
                        "events": {
                                "error": {
                                        "code": string(resp.StatusCode),
                                        "id": string(resp.Status),
                                        "message": "GET:" + 
                                        (
                                                (size(resp.Body) != 0) ?
                                                        string(resp.Body)
                                                :
                                                        string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                                        ),
                                },
                        },
                        "want_more": false,
                }
        :
                bytes(resp.Body).decode_json().as(body, !has(body.data) ?
                        {
                                "events": [],
                                "want_more": false,
                        }
                :
                        {
                                "events": body.data.map(vulnerability,
                                        {
                                                "message": vulnerability.encode_json(),
                                        }
                                ),
                                "cursor": {
                                        "nextOffset": (body.offset + body.limit < body.total) ?
                                                (body.offset + body.limit)
                                        :
                                                null,
                                },
                                "want_more": body.offset + body.limit < body.total,
                        }
                )
        )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}