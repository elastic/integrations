---
description: Pipeline for processing IOCs.
processors:
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - set:
      field: ecs.version
      value: 8.4.0
  - set:
      field: event.type
      value: ["indicator"]
  - set:
      field: event.kind
      value: enrichment
  - set:
      field: event.category
      value: ["threat"]
  - set:
      field: event.module
      value: ti_rapid7_threat_command
  - json:
      field: event.original
      target_field: json
      ignore_failure: true
  - drop:
      if: ctx.json?.content != null && ctx.json.content.isEmpty()
  - rename:
      field: json.lastUpdateDate
      target_field: json.last_update_date
      ignore_missing: true
  - date:
      field: json.last_update_date
      target_field: threat.indicator.modified_at
      if: ctx.json?.last_update_date != null
      formats:
        - ISO8601
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
        - remove:
            field: json.last_update_date
  - set:
      field: '@timestamp'
      copy_from: threat.indicator.modified_at
      on_failure:
        - set:
            field: '@timestamp'
            copy_from: _ingest.timestamp
  - uri_parts:
      field: json.value
      target_field: threat.indicator.url
      if: ctx.json?.type == 'Urls'
      on_failure:
        - set:
            field: threat.indicator.url.original
            value: '{{{json.value}}}'
            ignore_empty_value: true
            if: ctx.json?.type == 'Urls' && !ctx.containsKey('threat.indicator.url')
            ignore_failure: true
  - set:
      field: threat.indicator.url.full
      value: '{{{threat.indicator.url.original}}}'
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: threat.indicator.type
      value: url
      if: ctx.json?.type == 'Urls'
  - script:
      lang: painless
      if: ctx.json?.type != null
      description: Maps ioc type field to Rapid7 values (threat.indicator.type).
      params:
        domains:
          type: domain-name
          target: threat.indicator.url.domain
        ipaddresses:
          type: ipv4-addr
          target: threat.indicator.ip
        emails:
          type: email-addr
          target: threat.indicator.email.address
        hashes:
          type: file
          target: json.file.hash
      source: >
        void _set(Map base, def path, def value) {
            if (path.length == 0) return;
            for (int i = 0; i < path.length - 1; i++) {
                String c = path[i];
                if (base[c] == null) base[c] = new HashMap();
                base = base[c];
            }
            base[path[path.length - 1]] = value;
        }
        void set(Map base, String path, def value) {
            _set(base, path.splitOnToken("."), value);
        }
        def mapping = params[ctx.json.type.toLowerCase()];
        if (mapping == null) return;
        set(ctx, "threat.indicator.type", mapping.type);
        def value = ctx.json.value;
        if (value == null) return;
        set(ctx, mapping.target, value);
      on_failure:
        - append:
            field: error.message
            value: >-
              Unable to determine indicator type from "{{{json.type}}}": {{{_ingest.on_failure_message}}}
  - convert:
      field: threat.indicator.ip
      type: ip
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
        - remove:
            field:
              - threat.indicator.ip
              - json.value
  - set:
      field: threat.indicator.type
      value: ipv6-addr
      if: ctx.threat?.indicator?.type == 'ipv4-addr' && ctx.json?.value != null && ctx.json.value.contains(":")
  - append:
      field: related.ip
      value: '{{{threat.indicator.ip}}}'
      ignore_failure: true
      allow_duplicates: false
  - append:
      field: related.hash
      value: '{{{json.file.hash}}}'
      ignore_failure: true
      allow_duplicates: false
  - geoip:
      field: threat.indicator.ip
      target_field: threat.indicator.geo
      ignore_missing: true
      ignore_failure: true
  - geoip:
      field: threat.indicator.ip
      target_field: threat.indicator.as
      database_file: GeoLite2-ASN.mmdb
      properties:
        - asn
        - organization_name
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: threat.indicator.as.asn
      target_field: threat.indicator.as.number
      ignore_missing: true
  - rename:
      field: threat.indicator.as.organization_name
      target_field: threat.indicator.as.organization.name
      ignore_missing: true
  - rename:
      field: json.firstSeen
      target_field: json.first_seen
      ignore_missing: true
  - rename:
      field: json.lastSeen
      target_field: json.last_seen
      ignore_missing: true
  - rename:
      field: json.relatedMalware
      target_field: json.related.malware
      ignore_missing: true
  - rename:
      field: json.relatedCampaigns
      target_field: json.related.campaigns
      ignore_missing: true
  - rename:
      field: json.relatedThreatActors
      target_field: json.related.threat_actors
      ignore_missing: true
  - rename:
      field: json.reportedFeeds
      target_field: json.reported_feeds
      ignore_missing: true
  - rename:
      field: json.file.hash
      target_field: threat.indicator.file.hash.md5
      ignore_missing: true
      if: ctx.json?.file?.hash?.length() == 32
  - rename:
      field: json.file.hash
      target_field: threat.indicator.file.hash.sha1
      ignore_missing: true
      if: ctx.json?.file?.hash?.length() == 40
  - rename:
      field: json.file.hash
      target_field: threat.indicator.file.hash.sha256
      ignore_missing: true
      if: ctx.json?.file?.hash?.length() == 64
  - rename:
      field: json.file.hash
      target_field: threat.indicator.file.hash.sha384
      ignore_missing: true
      if: ctx.json?.file?.hash?.length() == 96
  - rename:
      field: json.file.hash
      target_field: threat.indicator.file.hash.sha512
      ignore_missing: true
      if: ctx.json?.file?.hash?.length() == 128
  - convert:
      field: json.score
      target_field: event.risk_score
      ignore_missing: true
      type: float
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
        - remove:
            field: json.score
  - convert:
      field: json.whitelisted
      ignore_missing: true
      type: string
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
        - remove:
            field: json.whitelisted
  - date:
      field: json.last_seen
      target_field: threat.indicator.last_seen
      if: ctx.json?.last_seen != null
      formats:
        - ISO8601
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
        - remove:
            field: json.last_seen
  - date:
      field: json.first_seen
      target_field: threat.indicator.first_seen
      if: ctx.json?.first_seen != null
      formats:
        - ISO8601
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
        - remove:
            field: json.first_seen
  - set:
      field: threat.indicator.confidence
      copy_from: json.score
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: threat.indicator.geo.country_iso_code
      copy_from: json.geolocation
      ignore_empty_value: true
      if: ctx.threat?.indicator?.geo?.country_iso_code == null
      ignore_failure: true
  - foreach:
      field: json.reported_feeds
      processor:
        rename:
          field: _ingest._value.confidenceLevel
          target_field: _ingest._value.confidence
      ignore_failure: true
  - foreach:
      field: json.reported_feeds
      processor:
        append:
          field: threat.indicator.provider
          value: '{{{_ingest._value.name}}}'
      ignore_failure: true
  - foreach:
      field: json.tags
      processor:
        append:
          field: tags
          value: '{{{_ingest._value}}}'
      if: ctx.json?.tags != null
      ignore_failure: true
  - rename:
      field: json
      target_field: rapid7.tc.ioc
      ignore_missing: true
      ignore_failure: true
  - script:
      lang: painless
      if: ctx.threat?.indicator?.confidence != null
      description: Normalize confidence level.
      source: >
        def value = ctx.threat.indicator.confidence;
        if (value <= 0 || value > 100) {
          ctx.threat.indicator.confidence = "None";
          return;
        } else if (value >= 1 && value < 30) {
          ctx.threat.indicator.confidence = "Low";
          return;
        } else if (value >= 30 && value < 70) {
          ctx.threat.indicator.confidence = "Medium";
          return;
        } else if (value >= 70 && value <= 100) {
          ctx.threat.indicator.confidence = "High";
          return;
        }
      ignore_failure: true
  - script:
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: >
        boolean drop(Object o) {
          if (o == null || o == "") {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
      ignore_failure: true
  - remove:
      field: event.original
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_failure: true
  - fingerprint:
      fields:
        - rapid7.tc.ioc.last_update_date
        - rapid7.tc.ioc.value
        - rapid7.tc.ioc.reported_feeds
      target_field: _id
      ignore_missing: true
      ignore_failure: true
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: '{{{_ingest.on_failure_message}}}'
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
