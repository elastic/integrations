config_version: 2
interval: "{{interval}}h"
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
# Should be https://api.elastic-cloud.com/
resource.url: {{url}}
state:
  api_key: {{api_key}}
  organization_id: {{organization_id}}
  lookbehind: "{{lookbehind}}h"
redact:
  fields:
    - api_key
program: |
  (
    state.with({
      "url": state.url.trim_right("/") + "/api/v2/billing/organizations/" + state.organization_id + "/costs/instances",
      "from": (
        has(state.?cursor.last_to)
        ?
          state.cursor.last_to
        :
          (now().format(time_layout.DateOnly).parse_time(time_layout.DateOnly) - duration(state.lookbehind)).format(time_layout.RFC3339)
      ),
      "to": (
        has(state.?cursor.last_to)
        ?
          (state.cursor.last_to.parse_time(time_layout.RFC3339) + duration("24h")).format(time_layout.RFC3339)
        :
          (now().format(time_layout.DateOnly).parse_time(time_layout.DateOnly) - duration(state.lookbehind) + duration("24h")).format(time_layout.RFC3339)
      )
    }).as(state,
      // Check if we would try to fetch data in the future, in which case we back off
      (state.to.parse_time(time_layout.RFC3339) > now())
      ?
        {
          "events": [],
          "cursor": {
            // We don't change the last_to, we're just waiting
            "last_to": state.to
          },
          "want_more": false,
          "api_key": state.api_key,
          "organization_id": state.organization_id,
        }
      :
      get_request(state.url + "?from=" + state.from + "&to=" + state.to).with({
        "Header": {
          "Authorization": ["ApiKey " + state.api_key]
        }
      }).do_request().as(resp, resp.StatusCode == 200
      ?
        bytes(resp.Body).decode_json().as(body,
          {
            "events": body.instances.map(instance, instance.product_line_items.map(line_item,
              {
                "ess": {
                  "billing": line_item.with({
                    "deployment_name": instance.name,  // Include deployment name
                    "deployment_id": instance.id,      // Include deployment ID
                    "organization_id": state.organization_id,  // Include organization ID
                    "from": state.from,
                    "to": state.to,
                  })
                }
              }
            )).flatten(),  // Pass line_items as events, with added info
            "cursor": {
              "last_to": state.to
            },
            // Are we more than 1 day behind?
            "want_more": state.to.parse_time(time_layout.RFC3339) < now() - duration("24h"),
            "api_key": state.api_key,
            "organization_id": state.organization_id
          }
        )
      :
        {
          "events": {
            "error": {
              "code": string(resp.StatusCode),
              "id": string(resp.Status),
              "message": "GET " + "?from=" + state.from + "&to=" + state.to + " failed: " + (
                size(resp.Body) != 0 ?
                  string(resp.Body)
                :
                  string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
              ),
            },
          },
          "want_more": false,
        }
      )
    )
  )
{{#if tags.length}}
tags:
{{else if preserve_original_event}}
tags:
{{/if}}
{{#each tags as |tag i|}}
  - {{tag}}
{{/each}}
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}

{{#if processors}}
processors:
{{processors}}
{{/if}}
