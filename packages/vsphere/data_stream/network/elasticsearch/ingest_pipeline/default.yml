---
description: Pipeline for network
processors:
- set:
    field: ecs.version
    value: '8.11.0'
- script: 
    if: ctx.vsphere?.network?.triggered_alarms != null
    lang: painless
    source: >
        def alerts = [];
        def warnings = [];
        for (alarm in ctx.vsphere.network.triggered_alarms) {
            if (alarm.status == 'red') {
            alerts.add(alarm.name);
            }
            if (alarm.status == 'yellow') {
            warnings.add(alarm.name);
            }
        }
        ctx.alerts = alerts;
        ctx.warnings = warnings;
- rename:
    field: alerts
    target_field: vsphere.network.alert.names
    ignore_missing: true
- rename:
    field: warnings
    target_field: vsphere.network.warning.names
    ignore_missing: true
- script:
    description: "Drops null/empty values recursively."
    lang: painless
    source: |
      boolean drop(Object o) {
          if (o == null || o == "") {
          return true;
          } else if (o instanceof Map) {
          ((Map) o).values().removeIf(v -> drop(v));
          return (((Map) o).size() == 0);
          } else if (o instanceof List) {
          ((List) o).removeIf(v -> drop(v));
          return (((List) o).size() == 0);
          }
          return false;
      }
      drop(ctx);
on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}'
