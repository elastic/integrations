---
description: "Parse login and logout events from VMware vSphere/vCenter"
processors:
##### Parse out all the authentication messages ###
  - dissect:
      field: message
      pattern: "%{} user %{user.name}@%{user.domain}"
      if: ctx.message.contains('Authenticated user')
  - dissect:
      field: message
      pattern: "%{}User %{user.name}@%{client.ip} %{_tmp.event} as %{user_agent.original}"
      if: 'ctx.message.contains(''logged in as'') ?: false'
  - dissect:
      field: message
      pattern: "%{}User %{user.name}@%{client.ip} %{_tmp.event} out (login time: %{event.start}, number %{}: %{vsphere.log.api.invocations}, %{}: %{user_agent.original}"
      if: 'ctx.message.contains(''logged out'') ?: false'
  - dissect:
      field: message
      pattern: "Received %{_tmp.status} from %{client.ip} port %{client.port}:%{destination.port}: %{}"
      if: "ctx.message.startsWith('Received') ?: false"
  - dissect:
      field: message
      pattern: "%{_tmp.status} from %{client.ip} port %{client.port} %{}"
      if: "ctx.message.startsWith('Disconnected') ?: false"
  - dissect:
      field: message
      pattern: "Connection %{_tmp.status} by %{client.ip} port %{client.port} %{}"
      if: "ctx.message.startsWith('Connection') ?: false"
  - dissect:
      field: user.name
      pattern: "%{user.domain}\\%{user.name}"
      if: "ctx.user?.name?.contains('\\\\') ?: false"
      # Java contains must escape the \. So that it is \\ for a single `\` to match. JSON requires this to be escaped. YAML needs it escaped. We are only checking if a single `\`
      # is in the field such as domain\user
  - set:
      field: event.outcome
      value: success
      if: 'ctx.event?.outcome?.toLowerCase()?.startsWith(''s'') ?: false'
  - set:
      field: event.outcome
      value: failure
      if: 'ctx.event?.outcome?.toLowerCase()?.startsWith(''f'') ?: false'
  - grok:
      field: user_agent.original
      patterns:
        - "%{DATA:user_agent.original}(?:\\]|\\)+)"
      if: ctx.user_agent?.original != null && (ctx.user_agent.original.contains(')') || ctx.user_agent.original.contains(']'))
  - user_agent:
      field: user_agent.original
      if: ctx.user_agent?.original != null
### the logout message contains the login timestamp.
  - set:
      field: event.end
      value: "{{@timestamp}}"
      if: ctx.event?.start != null
  - date:
      field: event.start
      target_field: event.start
      if: ctx.event?.start != null
      formats:
        - "EEEE, dd MMMM, yyyy hh:mm:ss a"
  - script:
      source: "ZonedDateTime start = ZonedDateTime.parse(ctx.event.start);\n
        ZonedDateTime end = ZonedDateTime.parse(ctx.event.end);\n
        ctx.event.duration= ChronoUnit.NANOS.between(start, end);"
      if: ctx.event?.end != null && ctx.event?.start != null
  - set:
      field: event.action
      value: login
      if: ctx.log?.logger == 'vim.event.UserLoginSessionEvent'
  - set:
      field: event.action
      value: logout
      if: ctx.log?.logger == 'vim.event.UserLogoutSessionEvent'
  - set:
      field: event.type
      value: access
  - set:
      field: event.category
      value: authentication
  - convert:
      field: client.port
      type: long
      if: ctx.client?.port != null
  - convert:
      field: destination.port
      type: long
      if: ctx.destination?.port != null
  - convert:
      field: vsphere.log.api.invocations
      type: long
      if: ctx.vsphere?.log?.api?.invocations != null
    