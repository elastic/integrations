---
description: "Parse login and logout events from VMware vSphere/vCenter"
processors:
##### Parse out all the authentication messages ###
  - dissect:
      field: message
      pattern: "%{} user %{user.name}@%{user.domain}"
      if: ctx.message.contains('Authenticated user')
  - dissect:
      field: message
      pattern: "%{} [User %{user.name}@%{client.ip} %{_tmp.event} as %{user.agent.original}]"
      if: 'ctx.message.contains(''logged in as'') ?: false'
  - dissect:
      field: message
      pattern: "%{} [User %{user.name}@%{client.ip} %{_tmp.event} out (login time: %{event.start},
        number %{}: %{vsphere.api.invocations}, %{}: %{user.agent.original})]"
      if: 'ctx.message.contains(''logged out'') ?: false'
  - dissect:
      field: message
      pattern: "Received %{_tmp.status} from %{client.ip} port %{client.port}:%{destination.port}: %{}"
      if: "ctx.message.startsWith('Received') ?: false"
  - dissect:
      field: message
      pattern: "%{_tmp.status} from %{client.ip} port %{client.port} %{}"
      if: "ctx.message.startsWith('Disconnected') ?: false"
  - dissect:
      field: message
      pattern: "Connection %{_tmp.status} by %{client.ip} port %{client.port} %{}"
      if: "ctx.message.startsWith('Connection') ?: false"
  - dissect:
      field: user.name
      pattern: "%{user.domain}\\%{user.name}"
      ignore_failure: true
  - set:
      field: event.outcome
      value: success
      if: 'ctx.event?.outcome?.toLowerCase()?.startsWith(''s'') ?: false'
  - set:
      field: event.outcome
      value: failure
      if: 'ctx.event?.outcome?.toLowerCase()?.startsWith(''f'') ?: false'
  - user_agent:
      field: user.agent.original
      if: ctx.user?.agent?.original != null
### the logout message contains the login timestamp.
  - set:
      field: event.end
      value: "{{@timestamp}}"
      if: ctx.event?.start != null
  - script:
      source: "\n                ZonedDateTime start = ZonedDateTime.parse(ctx.event.start);\n
        \               ZonedDateTime end = ZonedDateTime.parse(ctx.event.end);\n                ctx.event.duration
        = ChronoUnit.NANOS.between(start, end);\n          "
      if: ctx.event?.end != null
  - set:
      field: event.action
      value: login
      if: ctx.log?.logger == 'vim.event.UserLoginSessionEvent'
  - set:
      field: event.action
      value: logout
      if: ctx.log?.logger == 'vim.event.UserLogoutSessionEvent'
  - set:
      field: event.kind
      value: event
  - set:
      field: event.type
      value: access
  - set:
      field: event.category
      value: authentication
  - convert:
      field: client.port
      type: long
      if: ctx.client?.port != null
  - convert:
      field: destination.port
      type: long
      if: ctx.destination?.port != null
    