---
description: Pipeline for Security events
processors:
  - convert:
      field: event.code
      type: string
      ignore_missing: true
  - script:
      tag: remove_empty_values_from_event_data
      description: Remove all empty values from event_data.
      lang: painless
      source: ctx.winlog?.event_data?.entrySet().removeIf(entry -> [null, "", "-", "{00000000-0000-0000-0000-000000000000}"].contains(entry.getValue()))
      if: ctx.winlog?.event_data instanceof Map
  - pipeline:
      name: '{{ IngestPipeline "standard" }}'
      if: 'ctx.winlog?.provider_name != null && ["Microsoft-Windows-Eventlog", "Microsoft-Windows-Security-Auditing"].contains(ctx.winlog.provider_name)'
  - gsub:
      field: source.ip
      pattern: '^\[?::ffff:([0-9]+\.[0-9]+\.[0-9]+\.[0-9]+)(?:\](?::[0-9]+)?)?$'
      replacement: '$1'
      ignore_missing: true
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
      - asn
      - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - append:
      field: related.ip
      value: '{{source.ip}}'
      allow_duplicates: false
      if: |-
        ctx.source?.ip != null &&
        ctx.source.ip != "-"
  - convert:
      field: winlog.record_id
      type: string
      ignore_missing: true
  - convert:
      field: winlog.event_id
      type: string
      ignore_missing: true
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: log.level
      copy_from: winlog.level
      ignore_empty_value: true
      ignore_failure: true
      if: ctx.winlog?.level != ""
  - date:
      field: winlog.time_created
      tag: "time_created_date"
      formats:
        - ISO8601
      if: ctx.winlog?.time_created != null
      on_failure:
        - remove:
            field: winlog.time_created
            ignore_failure: true
        - append:
            field: error.message
            value: "fail-{{{ _ingest.on_failure_processor_tag }}}"
        - fail:
            message: "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message: {{ _ingest.on_failure_message }}"
  - convert:
      field: error.code
      type: string
      ignore_missing: true
  - remove:
      description: Remove empty event data.
      field: winlog.event_data
      ignore_missing: true
      ignore_failure: true
      if: ctx.winlog?.event_data != null && ctx.winlog.event_data.size() == 0
  - remove:
      field:
        - winlog.event_data.SubjectUserSid
        - winlog.event_data.SubjectUserName
        - winlog.event_data.SubjectDomainName
        - winlog.event_data.ProviderName
        - winlog.event_data.ProcessName
        - winlog.event_data.RemoteAddress_ip
        - winlog.event_data.RemoteAddress_name
        - winlog.event_data.UserSid
        - winlog.event_data.UserName
        - winlog.event_data.RuleId
        - winlog.event_data.RuleName
        - winlog.event_data.ErrorCode
        - winlog.event_data.DeviceId
        - winlog.event_data.DeviceDescription
        - winlog.event_data.ShareName
        - winlog.event_data.ShareLocalPath
        - winlog.event_data.TargetUserSid
        - winlog.event_data.TargetUserName
        - winlog.event_data.TargetDomainName
        - winlog.event_data.Param1
        - winlog.event_data.FileName
      ignore_missing: true
      if: ctx.tags == null || !ctx.tags.contains('preserve_duplicate_custom_fields')
  - script:
      description: This script processor iterates over the whole document to remove fields with null values.
      tag: script_to_drop_null_values
      lang: painless
      source: |
        void handleMap(Map map) {
          map.values().removeIf(v -> {
            if (v instanceof Map) {
                handleMap(v);
            } else if (v instanceof List) {
                handleList(v);
            }
            return v == null || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)  || (v instanceof String && ((String) v).trim() == '')
          });
        }
        void handleList(List list) {
          list.removeIf(v -> {
            if (v instanceof Map) {
                handleMap(v);
            } else if (v instanceof List) {
                handleList(v);
            }
            return v == null || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)  || (v instanceof String && ((String) v).trim() == '')
          });
        }
        handleMap(ctx);
  - set:
      field: event.kind
      tag: set_pipeline_error_into_event_kind
      value: pipeline_error
      if: ctx.error?.message != null
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: >-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{{#_ingest.on_failure_processor_tag}}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{{/_ingest.on_failure_processor_tag}}}failed with message '{{{ _ingest.on_failure_message }}}'
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
