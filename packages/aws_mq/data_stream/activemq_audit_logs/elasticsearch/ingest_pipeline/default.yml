---
description: Pipeline for ActiveMQ audit logs in AmazonMQ.
processors:
  - set:
      field: event.ingested
      value: "{{{_ingest.timestamp}}}"
      ignore_empty_value: true
      ignore_failure: true
  - rename:
      field: message
      target_field: event.original
      if: 'ctx.event?.original == null'
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: ctx.event?.original != null
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - set:
      field: ecs.version
      value: 8.11.0
  - set:
      field: cloud.service.name
      value: amazonmq_activemq
  - set:
      field: cloud.provider
      value: aws
  - grok:
      field: event.original
      pattern_definitions:
        NOPIPEGREEDYDATA: "(\\n|(?! \\|).)*"
        THREAD_NAME: "((?! \n).)*"
      patterns:
        - "%{LOGLEVEL:log.level}%{SPACE}\\|%{SPACE}%{WORD:user.name}%{SPACE}%{NOPIPEGREEDYDATA:message}%{SPACE}\\|%{SPACE}%{THREAD_NAME:activemq.audit.thread}"
      ignore_missing: true
      ignore_failure: false
  - script:
      if: "ctx.log?.level != null"
      lang: painless
      source: >-
        def err_levels = ["FATAL", "ERROR", "WARN"];
        if (err_levels.contains(ctx.log.level)) {
          ctx.event.type = ["error"];
        } else {
          ctx.event.type = ["info"];
        }
  - script:
      description: Drops null/empty values recursively
      lang: painless
      ignore_failure: true
      source: |
        boolean drop(Object o) {
          if (o == null || o == "") {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - set:
      field: error.message
      value: >-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{{#_ingest.on_failure_processor_tag}}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{{/_ingest.on_failure_processor_tag}}}failed with message '{{{ _ingest.on_failure_message }}}'