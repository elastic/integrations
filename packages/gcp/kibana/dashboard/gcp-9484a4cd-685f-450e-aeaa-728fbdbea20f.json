{
    "attributes": {
        "description": "Overview of the VPC flow log data from Google Cloud.",
        "kibanaSavedObjectMeta": {
            "searchSourceJSON": {
                "filter": [
                    {
                        "$state": {
                            "store": "appState"
                        },
                        "meta": {
                            "alias": "Only data from gcp.vpcflow dataset",
                            "disabled": false,
                            "indexRefName": "kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index",
                            "key": "data_stream.dataset",
                            "negate": false,
                            "params": {
                                "query": "gcp.vpcflow"
                            },
                            "type": "phrase"
                        },
                        "query": {
                            "match_phrase": {
                                "data_stream.dataset": "gcp.vpcflow"
                            }
                        }
                    }
                ],
                "query": {
                    "language": "kuery",
                    "query": ""
                }
            }
        },
        "optionsJSON": {
            "hidePanelTitles": false,
            "syncColors": false,
            "syncCursor": true,
            "syncTooltips": false,
            "useMargins": true
        },
        "panelsJSON": [
            {
                "embeddableConfig": {
                    "attributes": {
                        "references": [
                            {
                                "id": "logs-*",
                                "name": "indexpattern-datasource-layer-9622b1fb-f543-4d05-b868-366fa865f9e7",
                                "type": "index-pattern"
                            },
                            {
                                "id": "logs-*",
                                "name": "c601ab58-c4c4-45aa-b9ba-852226356372",
                                "type": "index-pattern"
                            }
                        ],
                        "state": {
                            "adHocDataViews": {},
                            "datasourceStates": {
                                "formBased": {
                                    "layers": {
                                        "9622b1fb-f543-4d05-b868-366fa865f9e7": {
                                            "columnOrder": [
                                                "93e747d6-f202-45f4-9813-129bb91a9306",
                                                "a5152707-6084-46e1-a5a1-b3eb150a1a05"
                                            ],
                                            "columns": {
                                                "93e747d6-f202-45f4-9813-129bb91a9306": {
                                                    "dataType": "string",
                                                    "isBucketed": true,
                                                    "label": "Top values of gcp.vpcflow.reporter",
                                                    "operationType": "terms",
                                                    "params": {
                                                        "missingBucket": false,
                                                        "orderBy": {
                                                            "columnId": "a5152707-6084-46e1-a5a1-b3eb150a1a05",
                                                            "type": "column"
                                                        },
                                                        "orderDirection": "desc",
                                                        "otherBucket": true,
                                                        "size": 5
                                                    },
                                                    "scale": "ordinal",
                                                    "sourceField": "gcp.vpcflow.reporter"
                                                },
                                                "a5152707-6084-46e1-a5a1-b3eb150a1a05": {
                                                    "dataType": "number",
                                                    "isBucketed": false,
                                                    "label": "Sum of network.bytes",
                                                    "operationType": "sum",
                                                    "scale": "ratio",
                                                    "sourceField": "network.bytes"
                                                }
                                            },
                                            "incompleteColumns": {}
                                        }
                                    }
                                }
                            },
                            "filters": [
                                {
                                    "$state": {
                                        "store": "appState"
                                    },
                                    "meta": {
                                        "alias": null,
                                        "disabled": false,
                                        "field": "data_stream.dataset",
                                        "index": "c601ab58-c4c4-45aa-b9ba-852226356372",
                                        "key": "data_stream.dataset",
                                        "negate": false,
                                        "params": {
                                            "query": "gcp.vpcflow"
                                        },
                                        "type": "phrase"
                                    },
                                    "query": {
                                        "match_phrase": {
                                            "data_stream.dataset": "gcp.vpcflow"
                                        }
                                    }
                                }
                            ],
                            "internalReferences": [],
                            "query": {
                                "language": "kuery",
                                "query": ""
                            },
                            "visualization": {
                                "layers": [
                                    {
                                        "categoryDisplay": "default",
                                        "layerId": "9622b1fb-f543-4d05-b868-366fa865f9e7",
                                        "layerType": "data",
                                        "legendDisplay": "default",
                                        "legendSize": "auto",
                                        "metrics": [
                                            "a5152707-6084-46e1-a5a1-b3eb150a1a05"
                                        ],
                                        "nestedLegend": false,
                                        "numberDisplay": "value",
                                        "primaryGroups": [
                                            "93e747d6-f202-45f4-9813-129bb91a9306"
                                        ]
                                    }
                                ],
                                "shape": "donut"
                            }
                        },
                        "title": "",
                        "type": "lens",
                        "visualizationType": "lnsPie"
                    },
                    "enhancements": {},
                    "hidePanelTitles": false
                },
                "gridData": {
                    "h": 11,
                    "i": "fd65090b-d291-4771-865d-c5fa77a1b2a2",
                    "w": 8,
                    "x": 40,
                    "y": 0
                },
                "panelIndex": "fd65090b-d291-4771-865d-c5fa77a1b2a2",
                "title": "Bytes per reporter",
                "type": "lens",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "attributes": {
                        "references": [
                            {
                                "id": "logs-*",
                                "name": "indexpattern-datasource-layer-9622b1fb-f543-4d05-b868-366fa865f9e7",
                                "type": "index-pattern"
                            },
                            {
                                "id": "logs-*",
                                "name": "0aee1bff-9d1f-4651-b126-437df4cb99ba",
                                "type": "index-pattern"
                            }
                        ],
                        "state": {
                            "adHocDataViews": {},
                            "datasourceStates": {
                                "formBased": {
                                    "layers": {
                                        "9622b1fb-f543-4d05-b868-366fa865f9e7": {
                                            "columnOrder": [
                                                "93e747d6-f202-45f4-9813-129bb91a9306",
                                                "a5152707-6084-46e1-a5a1-b3eb150a1a05"
                                            ],
                                            "columns": {
                                                "93e747d6-f202-45f4-9813-129bb91a9306": {
                                                    "dataType": "string",
                                                    "isBucketed": true,
                                                    "label": "Top values of cloud.project.id",
                                                    "operationType": "terms",
                                                    "params": {
                                                        "missingBucket": false,
                                                        "orderBy": {
                                                            "columnId": "a5152707-6084-46e1-a5a1-b3eb150a1a05",
                                                            "type": "column"
                                                        },
                                                        "orderDirection": "desc",
                                                        "otherBucket": true,
                                                        "size": 5
                                                    },
                                                    "scale": "ordinal",
                                                    "sourceField": "cloud.project.id"
                                                },
                                                "a5152707-6084-46e1-a5a1-b3eb150a1a05": {
                                                    "dataType": "number",
                                                    "isBucketed": false,
                                                    "label": "Sum of network.bytes",
                                                    "operationType": "sum",
                                                    "scale": "ratio",
                                                    "sourceField": "network.bytes"
                                                }
                                            },
                                            "incompleteColumns": {}
                                        }
                                    }
                                }
                            },
                            "filters": [
                                {
                                    "$state": {
                                        "store": "appState"
                                    },
                                    "meta": {
                                        "alias": null,
                                        "disabled": false,
                                        "field": "data_stream.dataset",
                                        "index": "0aee1bff-9d1f-4651-b126-437df4cb99ba",
                                        "key": "data_stream.dataset",
                                        "negate": false,
                                        "params": {
                                            "query": "gcp.vpcflow"
                                        },
                                        "type": "phrase"
                                    },
                                    "query": {
                                        "match_phrase": {
                                            "data_stream.dataset": "gcp.vpcflow"
                                        }
                                    }
                                }
                            ],
                            "internalReferences": [],
                            "query": {
                                "language": "kuery",
                                "query": ""
                            },
                            "visualization": {
                                "layers": [
                                    {
                                        "categoryDisplay": "default",
                                        "layerId": "9622b1fb-f543-4d05-b868-366fa865f9e7",
                                        "layerType": "data",
                                        "legendDisplay": "default",
                                        "legendSize": "auto",
                                        "metrics": [
                                            "a5152707-6084-46e1-a5a1-b3eb150a1a05"
                                        ],
                                        "nestedLegend": false,
                                        "numberDisplay": "value",
                                        "primaryGroups": [
                                            "93e747d6-f202-45f4-9813-129bb91a9306"
                                        ]
                                    }
                                ],
                                "shape": "donut"
                            }
                        },
                        "title": "",
                        "type": "lens",
                        "visualizationType": "lnsPie"
                    },
                    "enhancements": {},
                    "hidePanelTitles": false
                },
                "gridData": {
                    "h": 11,
                    "i": "4489b109-a7f8-4a9d-b85f-0fe613368eda",
                    "w": 8,
                    "x": 0,
                    "y": 0
                },
                "panelIndex": "4489b109-a7f8-4a9d-b85f-0fe613368eda",
                "title": "Bytes per project",
                "type": "lens",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "attributes": {
                        "references": [
                            {
                                "id": "logs-*",
                                "name": "indexpattern-datasource-layer-9622b1fb-f543-4d05-b868-366fa865f9e7",
                                "type": "index-pattern"
                            },
                            {
                                "id": "logs-*",
                                "name": "78c11486-badb-4c46-8f7f-9483b88fc07f",
                                "type": "index-pattern"
                            }
                        ],
                        "state": {
                            "adHocDataViews": {},
                            "datasourceStates": {
                                "formBased": {
                                    "layers": {
                                        "9622b1fb-f543-4d05-b868-366fa865f9e7": {
                                            "columnOrder": [
                                                "93e747d6-f202-45f4-9813-129bb91a9306",
                                                "a5152707-6084-46e1-a5a1-b3eb150a1a05"
                                            ],
                                            "columns": {
                                                "93e747d6-f202-45f4-9813-129bb91a9306": {
                                                    "dataType": "string",
                                                    "isBucketed": true,
                                                    "label": "Top values of network.name",
                                                    "operationType": "terms",
                                                    "params": {
                                                        "missingBucket": false,
                                                        "orderBy": {
                                                            "columnId": "a5152707-6084-46e1-a5a1-b3eb150a1a05",
                                                            "type": "column"
                                                        },
                                                        "orderDirection": "desc",
                                                        "otherBucket": true,
                                                        "size": 5
                                                    },
                                                    "scale": "ordinal",
                                                    "sourceField": "network.name"
                                                },
                                                "a5152707-6084-46e1-a5a1-b3eb150a1a05": {
                                                    "dataType": "number",
                                                    "isBucketed": false,
                                                    "label": "Sum of network.bytes",
                                                    "operationType": "sum",
                                                    "scale": "ratio",
                                                    "sourceField": "network.bytes"
                                                }
                                            },
                                            "incompleteColumns": {}
                                        }
                                    }
                                }
                            },
                            "filters": [
                                {
                                    "$state": {
                                        "store": "appState"
                                    },
                                    "meta": {
                                        "alias": null,
                                        "disabled": false,
                                        "field": "data_stream.dataset",
                                        "index": "78c11486-badb-4c46-8f7f-9483b88fc07f",
                                        "key": "data_stream.dataset",
                                        "negate": false,
                                        "params": {
                                            "query": "gcp.vpcflow"
                                        },
                                        "type": "phrase"
                                    },
                                    "query": {
                                        "match_phrase": {
                                            "data_stream.dataset": "gcp.vpcflow"
                                        }
                                    }
                                }
                            ],
                            "internalReferences": [],
                            "query": {
                                "language": "kuery",
                                "query": ""
                            },
                            "visualization": {
                                "layers": [
                                    {
                                        "categoryDisplay": "default",
                                        "layerId": "9622b1fb-f543-4d05-b868-366fa865f9e7",
                                        "layerType": "data",
                                        "legendDisplay": "default",
                                        "legendSize": "auto",
                                        "metrics": [
                                            "a5152707-6084-46e1-a5a1-b3eb150a1a05"
                                        ],
                                        "nestedLegend": false,
                                        "numberDisplay": "value",
                                        "primaryGroups": [
                                            "93e747d6-f202-45f4-9813-129bb91a9306"
                                        ]
                                    }
                                ],
                                "shape": "donut"
                            }
                        },
                        "title": "",
                        "type": "lens",
                        "visualizationType": "lnsPie"
                    },
                    "enhancements": {},
                    "hidePanelTitles": false
                },
                "gridData": {
                    "h": 11,
                    "i": "061ff6b2-a70a-42dc-87fd-45d185b277ac",
                    "w": 8,
                    "x": 8,
                    "y": 0
                },
                "panelIndex": "061ff6b2-a70a-42dc-87fd-45d185b277ac",
                "title": "Bytes per sub-network",
                "type": "lens",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "attributes": {
                        "references": [
                            {
                                "id": "logs-*",
                                "name": "indexpattern-datasource-layer-9622b1fb-f543-4d05-b868-366fa865f9e7",
                                "type": "index-pattern"
                            },
                            {
                                "id": "logs-*",
                                "name": "a00f7a8d-d0aa-4fa6-8a94-1ba7c7a6262a",
                                "type": "index-pattern"
                            }
                        ],
                        "state": {
                            "adHocDataViews": {},
                            "datasourceStates": {
                                "formBased": {
                                    "layers": {
                                        "9622b1fb-f543-4d05-b868-366fa865f9e7": {
                                            "columnOrder": [
                                                "93e747d6-f202-45f4-9813-129bb91a9306",
                                                "a5152707-6084-46e1-a5a1-b3eb150a1a05"
                                            ],
                                            "columns": {
                                                "93e747d6-f202-45f4-9813-129bb91a9306": {
                                                    "dataType": "string",
                                                    "isBucketed": true,
                                                    "label": "Top values of cloud.region",
                                                    "operationType": "terms",
                                                    "params": {
                                                        "missingBucket": false,
                                                        "orderBy": {
                                                            "columnId": "a5152707-6084-46e1-a5a1-b3eb150a1a05",
                                                            "type": "column"
                                                        },
                                                        "orderDirection": "desc",
                                                        "otherBucket": true,
                                                        "size": 5
                                                    },
                                                    "scale": "ordinal",
                                                    "sourceField": "cloud.region"
                                                },
                                                "a5152707-6084-46e1-a5a1-b3eb150a1a05": {
                                                    "dataType": "number",
                                                    "isBucketed": false,
                                                    "label": "Sum of network.bytes",
                                                    "operationType": "sum",
                                                    "scale": "ratio",
                                                    "sourceField": "network.bytes"
                                                }
                                            },
                                            "incompleteColumns": {}
                                        }
                                    }
                                }
                            },
                            "filters": [
                                {
                                    "$state": {
                                        "store": "appState"
                                    },
                                    "meta": {
                                        "alias": null,
                                        "disabled": false,
                                        "field": "data_stream.dataset",
                                        "index": "a00f7a8d-d0aa-4fa6-8a94-1ba7c7a6262a",
                                        "key": "data_stream.dataset",
                                        "negate": false,
                                        "params": {
                                            "query": "gcp.vpcflow"
                                        },
                                        "type": "phrase"
                                    },
                                    "query": {
                                        "match_phrase": {
                                            "data_stream.dataset": "gcp.vpcflow"
                                        }
                                    }
                                }
                            ],
                            "internalReferences": [],
                            "query": {
                                "language": "kuery",
                                "query": ""
                            },
                            "visualization": {
                                "layers": [
                                    {
                                        "categoryDisplay": "default",
                                        "layerId": "9622b1fb-f543-4d05-b868-366fa865f9e7",
                                        "layerType": "data",
                                        "legendDisplay": "default",
                                        "legendSize": "auto",
                                        "metrics": [
                                            "a5152707-6084-46e1-a5a1-b3eb150a1a05"
                                        ],
                                        "nestedLegend": false,
                                        "numberDisplay": "value",
                                        "primaryGroups": [
                                            "93e747d6-f202-45f4-9813-129bb91a9306"
                                        ]
                                    }
                                ],
                                "shape": "donut"
                            }
                        },
                        "title": "",
                        "type": "lens",
                        "visualizationType": "lnsPie"
                    },
                    "enhancements": {},
                    "hidePanelTitles": false
                },
                "gridData": {
                    "h": 11,
                    "i": "42eee1cd-e816-4f6e-a700-401e8ff1a2f5",
                    "w": 8,
                    "x": 16,
                    "y": 0
                },
                "panelIndex": "42eee1cd-e816-4f6e-a700-401e8ff1a2f5",
                "title": "Bytes per region / zone",
                "type": "lens",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "attributes": {
                        "references": [
                            {
                                "id": "logs-*",
                                "name": "indexpattern-datasource-layer-9622b1fb-f543-4d05-b868-366fa865f9e7",
                                "type": "index-pattern"
                            },
                            {
                                "id": "logs-*",
                                "name": "5e9dfc1a-83f4-4bbd-a979-fb0c917938b5",
                                "type": "index-pattern"
                            }
                        ],
                        "state": {
                            "adHocDataViews": {},
                            "datasourceStates": {
                                "formBased": {
                                    "layers": {
                                        "9622b1fb-f543-4d05-b868-366fa865f9e7": {
                                            "columnOrder": [
                                                "93e747d6-f202-45f4-9813-129bb91a9306",
                                                "a0ef9781-cada-4dac-a5c6-50b6d36aaace",
                                                "a5152707-6084-46e1-a5a1-b3eb150a1a05"
                                            ],
                                            "columns": {
                                                "93e747d6-f202-45f4-9813-129bb91a9306": {
                                                    "dataType": "string",
                                                    "isBucketed": true,
                                                    "label": "Top values of source.geo.continent_name",
                                                    "operationType": "terms",
                                                    "params": {
                                                        "missingBucket": false,
                                                        "orderBy": {
                                                            "columnId": "a5152707-6084-46e1-a5a1-b3eb150a1a05",
                                                            "type": "column"
                                                        },
                                                        "orderDirection": "desc",
                                                        "otherBucket": true,
                                                        "size": 5
                                                    },
                                                    "scale": "ordinal",
                                                    "sourceField": "source.geo.continent_name"
                                                },
                                                "a0ef9781-cada-4dac-a5c6-50b6d36aaace": {
                                                    "dataType": "string",
                                                    "isBucketed": true,
                                                    "label": "Top values of destination.geo.continent_name",
                                                    "operationType": "terms",
                                                    "params": {
                                                        "missingBucket": false,
                                                        "orderBy": {
                                                            "columnId": "a5152707-6084-46e1-a5a1-b3eb150a1a05",
                                                            "type": "column"
                                                        },
                                                        "orderDirection": "desc",
                                                        "otherBucket": true,
                                                        "size": 5
                                                    },
                                                    "scale": "ordinal",
                                                    "sourceField": "destination.geo.continent_name"
                                                },
                                                "a5152707-6084-46e1-a5a1-b3eb150a1a05": {
                                                    "dataType": "number",
                                                    "isBucketed": false,
                                                    "label": "Sum of network.bytes",
                                                    "operationType": "sum",
                                                    "scale": "ratio",
                                                    "sourceField": "network.bytes"
                                                }
                                            },
                                            "incompleteColumns": {}
                                        }
                                    }
                                }
                            },
                            "filters": [
                                {
                                    "$state": {
                                        "store": "appState"
                                    },
                                    "meta": {
                                        "alias": null,
                                        "disabled": false,
                                        "field": "data_stream.dataset",
                                        "index": "5e9dfc1a-83f4-4bbd-a979-fb0c917938b5",
                                        "key": "data_stream.dataset",
                                        "negate": false,
                                        "params": {
                                            "query": "gcp.vpcflow"
                                        },
                                        "type": "phrase"
                                    },
                                    "query": {
                                        "match_phrase": {
                                            "data_stream.dataset": "gcp.vpcflow"
                                        }
                                    }
                                }
                            ],
                            "internalReferences": [],
                            "query": {
                                "language": "kuery",
                                "query": ""
                            },
                            "visualization": {
                                "layers": [
                                    {
                                        "categoryDisplay": "default",
                                        "layerId": "9622b1fb-f543-4d05-b868-366fa865f9e7",
                                        "layerType": "data",
                                        "legendDisplay": "default",
                                        "legendSize": "auto",
                                        "metrics": [
                                            "a5152707-6084-46e1-a5a1-b3eb150a1a05"
                                        ],
                                        "nestedLegend": false,
                                        "numberDisplay": "value",
                                        "primaryGroups": [
                                            "93e747d6-f202-45f4-9813-129bb91a9306",
                                            "a0ef9781-cada-4dac-a5c6-50b6d36aaace"
                                        ]
                                    }
                                ],
                                "shape": "donut"
                            }
                        },
                        "title": "",
                        "type": "lens",
                        "visualizationType": "lnsPie"
                    },
                    "enhancements": {},
                    "hidePanelTitles": false
                },
                "gridData": {
                    "h": 11,
                    "i": "9714edf3-3894-4567-b8ec-99b863f4fa74",
                    "w": 8,
                    "x": 24,
                    "y": 0
                },
                "panelIndex": "9714edf3-3894-4567-b8ec-99b863f4fa74",
                "title": "Bytes Source vs. Destination",
                "type": "lens",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "attributes": {
                        "references": [
                            {
                                "id": "logs-*",
                                "name": "indexpattern-datasource-layer-9622b1fb-f543-4d05-b868-366fa865f9e7",
                                "type": "index-pattern"
                            },
                            {
                                "id": "logs-*",
                                "name": "0708bf23-f9ba-4b7f-a706-40d436cd13af",
                                "type": "index-pattern"
                            }
                        ],
                        "state": {
                            "adHocDataViews": {},
                            "datasourceStates": {
                                "formBased": {
                                    "layers": {
                                        "9622b1fb-f543-4d05-b868-366fa865f9e7": {
                                            "columnOrder": [
                                                "93e747d6-f202-45f4-9813-129bb91a9306",
                                                "a5152707-6084-46e1-a5a1-b3eb150a1a05"
                                            ],
                                            "columns": {
                                                "93e747d6-f202-45f4-9813-129bb91a9306": {
                                                    "dataType": "string",
                                                    "isBucketed": true,
                                                    "label": "Top values of network.direction",
                                                    "operationType": "terms",
                                                    "params": {
                                                        "missingBucket": false,
                                                        "orderBy": {
                                                            "columnId": "a5152707-6084-46e1-a5a1-b3eb150a1a05",
                                                            "type": "column"
                                                        },
                                                        "orderDirection": "desc",
                                                        "otherBucket": true,
                                                        "size": 5
                                                    },
                                                    "scale": "ordinal",
                                                    "sourceField": "network.direction"
                                                },
                                                "a5152707-6084-46e1-a5a1-b3eb150a1a05": {
                                                    "dataType": "number",
                                                    "isBucketed": false,
                                                    "label": "Sum of network.bytes",
                                                    "operationType": "sum",
                                                    "scale": "ratio",
                                                    "sourceField": "network.bytes"
                                                }
                                            },
                                            "incompleteColumns": {}
                                        }
                                    }
                                }
                            },
                            "filters": [
                                {
                                    "$state": {
                                        "store": "appState"
                                    },
                                    "meta": {
                                        "alias": null,
                                        "disabled": false,
                                        "field": "data_stream.dataset",
                                        "index": "0708bf23-f9ba-4b7f-a706-40d436cd13af",
                                        "key": "data_stream.dataset",
                                        "negate": false,
                                        "params": {
                                            "query": "gcp.vpcflow"
                                        },
                                        "type": "phrase"
                                    },
                                    "query": {
                                        "match_phrase": {
                                            "data_stream.dataset": "gcp.vpcflow"
                                        }
                                    }
                                }
                            ],
                            "internalReferences": [],
                            "query": {
                                "language": "kuery",
                                "query": ""
                            },
                            "visualization": {
                                "layers": [
                                    {
                                        "categoryDisplay": "default",
                                        "layerId": "9622b1fb-f543-4d05-b868-366fa865f9e7",
                                        "layerType": "data",
                                        "legendDisplay": "default",
                                        "legendSize": "auto",
                                        "metrics": [
                                            "a5152707-6084-46e1-a5a1-b3eb150a1a05"
                                        ],
                                        "nestedLegend": false,
                                        "numberDisplay": "value",
                                        "primaryGroups": [
                                            "93e747d6-f202-45f4-9813-129bb91a9306"
                                        ]
                                    }
                                ],
                                "shape": "donut"
                            }
                        },
                        "title": "",
                        "type": "lens",
                        "visualizationType": "lnsPie"
                    },
                    "enhancements": {},
                    "hidePanelTitles": false
                },
                "gridData": {
                    "h": 11,
                    "i": "efe8857e-d137-4c24-ad83-dd7ddbea8c9e",
                    "w": 8,
                    "x": 32,
                    "y": 0
                },
                "panelIndex": "efe8857e-d137-4c24-ad83-dd7ddbea8c9e",
                "title": "Bytes per direction",
                "type": "lens",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "enhancements": {},
                    "hidePanelTitles": false,
                    "savedVis": {
                        "data": {
                            "aggs": [],
                            "searchSource": {
                                "filter": [
                                    {
                                        "$state": {
                                            "store": "appState"
                                        },
                                        "meta": {
                                            "alias": null,
                                            "disabled": false,
                                            "indexRefName": "kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index",
                                            "key": "data_stream.dataset",
                                            "negate": false,
                                            "params": {
                                                "query": "gcp.vpcflow"
                                            },
                                            "type": "phrase"
                                        },
                                        "query": {
                                            "match_phrase": {
                                                "data_stream.dataset": "gcp.vpcflow"
                                            }
                                        }
                                    }
                                ],
                                "query": {
                                    "language": "kuery",
                                    "query": ""
                                }
                            }
                        },
                        "description": "",
                        "params": {
                            "spec": "{\r\n  $schema: https://vega.github.io/schema/vega/v3.0.json\r\n  data: [\r\n    {\r\n      // query ES based on the currently selected time range and filter string\r\n      name: rawData\r\n      url: {\r\n        %context%: true\r\n        %timefield%: @timestamp\r\n        index: logs*\r\n        body: {\r\n          size: 0\r\n          aggs: {\r\n            table: {\r\n              composite: {\r\n                size: 10000\r\n                sources: [\r\n                  {\r\n                    stk1: {\r\n                      terms: {field: \"source.geo.country_iso_code\"}\r\n                    }\r\n                  }\r\n                  {\r\n                    stk2: {\r\n                      terms: {field: \"destination.geo.country_iso_code\"}\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // From the result, take just the data we are interested in\r\n      format: {property: \"aggregations.table.buckets\"}\r\n      // Convert key.stk1 -\u003e stk1 for simpler access below\r\n      transform: [\r\n        {type: \"formula\", expr: \"datum.key.stk1\", as: \"stk1\"}\r\n        {type: \"formula\", expr: \"datum.key.stk2\", as: \"stk2\"}\r\n        {type: \"formula\", expr: \"datum.doc_count\", as: \"size\"}\r\n      ]\r\n    }\r\n    {\r\n      name: nodes\r\n      source: rawData\r\n      transform: [\r\n        // when a country is selected, filter out unrelated data\r\n        {\r\n          type: filter\r\n          expr: !groupSelector || groupSelector.stk1 == datum.stk1 || groupSelector.stk2 == datum.stk2\r\n        }\r\n        // Set new key for later lookups - identifies each node\r\n        {type: \"formula\", expr: \"datum.stk1+datum.stk2\", as: \"key\"}\r\n        // instead of each table row, create two new rows,\r\n        // one for the source (stack=stk1) and one for destination node (stack=stk2).\r\n        // The country code stored in stk1 and stk2 fields is placed into grpId field.\r\n        {\r\n          type: fold\r\n          fields: [\"stk1\", \"stk2\"]\r\n          as: [\"stack\", \"grpId\"]\r\n        }\r\n        // Create a sortkey, different for stk1 and stk2 stacks.\r\n        // Space separator ensures proper sort order in some corner cases.\r\n        {\r\n          type: formula\r\n          expr: datum.stack == 'stk1' ? datum.stk1+' '+datum.stk2 : datum.stk2+' '+datum.stk1\r\n          as: sortField\r\n        }\r\n        // Calculate y0 and y1 positions for stacking nodes one on top of the other,\r\n        // independently for each stack, and ensuring they are in the proper order,\r\n        // alphabetical from the top (reversed on the y axis)\r\n        {\r\n          type: stack\r\n          groupby: [\"stack\"]\r\n          sort: {field: \"sortField\", order: \"descending\"}\r\n          field: size\r\n        }\r\n        // calculate vertical center point for each node, used to draw edges\r\n        {type: \"formula\", expr: \"(datum.y0+datum.y1)/2\", as: \"yc\"}\r\n      ]\r\n    }\r\n    {\r\n      name: groups\r\n      source: nodes\r\n      transform: [\r\n        // combine all nodes into country groups, summing up the doc counts\r\n        {\r\n          type: aggregate\r\n          groupby: [\"stack\", \"grpId\"]\r\n          fields: [\"size\"]\r\n          ops: [\"sum\"]\r\n          as: [\"total\"]\r\n        }\r\n        // re-calculate the stacking y0,y1 values\r\n        {\r\n          type: stack\r\n          groupby: [\"stack\"]\r\n          sort: {field: \"grpId\", order: \"descending\"}\r\n          field: total\r\n        }\r\n        // project y0 and y1 values to screen coordinates\r\n        // doing it once here instead of doing it several times in marks\r\n        {type: \"formula\", expr: \"scale('y', datum.y0)\", as: \"scaledY0\"}\r\n        {type: \"formula\", expr: \"scale('y', datum.y1)\", as: \"scaledY1\"}\r\n        // boolean flag if the label should be on the right of the stack\r\n        {type: \"formula\", expr: \"datum.stack == 'stk1'\", as: \"rightLabel\"}\r\n        // Calculate traffic percentage for this country using \"y\" scale\r\n        // domain upper bound, which represents the total traffic\r\n        {\r\n          type: formula\r\n          expr: datum.total/domain('y')[1]\r\n          as: percentage\r\n        }\r\n      ]\r\n    }\r\n    {\r\n      // This is a temp lookup table with all the 'stk2' stack nodes\r\n      name: destinationNodes\r\n      source: nodes\r\n      transform: [\r\n        {type: \"filter\", expr: \"datum.stack == 'stk2'\"}\r\n      ]\r\n    }\r\n    {\r\n      name: edges\r\n      source: nodes\r\n      transform: [\r\n        // we only want nodes from the left stack\r\n        {type: \"filter\", expr: \"datum.stack == 'stk1'\"}\r\n        // find corresponding node from the right stack, keep it as \"target\"\r\n        {\r\n          type: lookup\r\n          from: destinationNodes\r\n          key: key\r\n          fields: [\"key\"]\r\n          as: [\"target\"]\r\n        }\r\n        // calculate SVG link path between stk1 and stk2 stacks for the node pair\r\n        {\r\n          type: linkpath\r\n          orient: horizontal\r\n          shape: diagonal\r\n          sourceY: {expr: \"scale('y', datum.yc)\"}\r\n          sourceX: {expr: \"scale('x', 'stk1') + bandwidth('x')\"}\r\n          targetY: {expr: \"scale('y', datum.target.yc)\"}\r\n          targetX: {expr: \"scale('x', 'stk2')\"}\r\n        }\r\n        // A little trick to calculate the thickness of the line.\r\n        // The value needs to be the same as the hight of the node, but scaling\r\n        // size to screen's height gives inversed value because screen's Y\r\n        // coordinate goes from the top to the bottom, whereas the graph's Y=0\r\n        // is at the bottom. So subtracting scaled doc count from screen height\r\n        // (which is the \"lower\" bound of the \"y\" scale) gives us the right value\r\n        {\r\n          type: formula\r\n          expr: range('y')[0]-scale('y', datum.size)\r\n          as: strokeWidth\r\n        }\r\n        // Tooltip needs individual link's percentage of all traffic\r\n        {\r\n          type: formula\r\n          expr: datum.size/domain('y')[1]\r\n          as: percentage\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  scales: [\r\n    {\r\n      // calculates horizontal stack positioning\r\n      name: x\r\n      type: band\r\n      range: width\r\n      domain: [\"stk1\", \"stk2\"]\r\n      paddingOuter: 0.05\r\n      paddingInner: 0.95\r\n    }\r\n    {\r\n      // this scale goes up as high as the highest y1 value of all nodes\r\n      name: y\r\n      type: linear\r\n      range: height\r\n      domain: {data: \"nodes\", field: \"y1\"}\r\n    }\r\n    {\r\n      // use rawData to ensure the colors stay the same when clicking.\r\n      name: color\r\n      type: ordinal\r\n      range: category\r\n      domain: {data: \"rawData\", fields: [\"stk1\", \"stk2\"]}\r\n    }\r\n    {\r\n      // this scale is used to map internal ids (stk1, stk2) to stack names\r\n      name: stackNames\r\n      type: ordinal\r\n      range: [\"Source\", \"Destination\"]\r\n      domain: [\"stk1\", \"stk2\"]\r\n    }\r\n  ]\r\n  axes: [\r\n    {\r\n      // x axis should use custom label formatting to print proper stack names\r\n      orient: bottom\r\n      scale: x\r\n      encode: {\r\n        labels: {\r\n          update: {\r\n            text: {scale: \"stackNames\", field: \"value\"}\r\n          }\r\n        }\r\n      }\r\n    }\r\n    {orient: \"left\", scale: \"y\"}\r\n  ]\r\n  marks: [\r\n    {\r\n      // draw the connecting line between stacks\r\n      type: path\r\n      name: edgeMark\r\n      from: {data: \"edges\"}\r\n      // this prevents some autosizing issues with large strokeWidth for paths\r\n      clip: true\r\n      encode: {\r\n        update: {\r\n          // By default use color of the left node, except when showing traffic\r\n          // from just one country, in which case use destination color.\r\n          stroke: [\r\n            {\r\n              test: groupSelector \u0026\u0026 groupSelector.stack=='stk1'\r\n              scale: color\r\n              field: stk2\r\n            }\r\n            {scale: \"color\", field: \"stk1\"}\r\n          ]\r\n          strokeWidth: {field: \"strokeWidth\"}\r\n          path: {field: \"path\"}\r\n          // when showing all traffic, and hovering over a country,\r\n          // highlight the traffic from that country.\r\n          strokeOpacity: {\r\n            signal: !groupSelector \u0026\u0026 (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 0.9 : 0.3\r\n          }\r\n          // Ensure that the hover-selected edges show on top\r\n          zindex: {\r\n            signal: !groupSelector \u0026\u0026 (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 1 : 0\r\n          }\r\n          // format tooltip string\r\n          tooltip: {\r\n            signal: datum.stk1 + ' \u0026#x2192; ' + datum.stk2 + '    ' + format(datum.size, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\r\n          }\r\n        }\r\n        // Simple mouseover highlighting of a single line\r\n        hover: {\r\n          strokeOpacity: {value: 1}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // draw stack groups (countries)\r\n      type: rect\r\n      name: groupMark\r\n      from: {data: \"groups\"}\r\n      encode: {\r\n        enter: {\r\n          fill: {scale: \"color\", field: \"grpId\"}\r\n          width: {scale: \"x\", band: 1}\r\n        }\r\n        update: {\r\n          x: {scale: \"x\", field: \"stack\"}\r\n          y: {field: \"scaledY0\"}\r\n          y2: {field: \"scaledY1\"}\r\n          fillOpacity: {value: 0.6}\r\n          tooltip: {\r\n            signal: datum.grpId + '   ' + format(datum.total, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\r\n          }\r\n        }\r\n        hover: {\r\n          fillOpacity: {value: 1}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // draw country code labels on the inner side of the stack\r\n      type: text\r\n      from: {data: \"groups\"}\r\n      // don't process events for the labels - otherwise line mouseover is unclean\r\n      interactive: false\r\n      encode: {\r\n        update: {\r\n          // depending on which stack it is, position x with some padding\r\n          x: {\r\n            signal: scale('x', datum.stack) + (datum.rightLabel ? bandwidth('x') + 8 : -8)\r\n          }\r\n          // middle of the group\r\n          yc: {signal: \"(datum.scaledY0 + datum.scaledY1)/2\"}\r\n          align: {signal: \"datum.rightLabel ? 'left' : 'right'\"}\r\n          baseline: {value: \"middle\"}\r\n          fontWeight: {value: \"bold\"}\r\n          // only show text label if the group's height is large enough\r\n          text: {signal: \"abs(datum.scaledY0-datum.scaledY1) \u003e 13 ? datum.grpId : ''\"}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // Create a \"show all\" button. Shown only when a country is selected.\r\n      type: group\r\n      data: [\r\n        // We need to make the button show only when groupSelector signal is true.\r\n        // Each mark is drawn as many times as there are elements in the backing data.\r\n        // Which means that if values list is empty, it will not be drawn.\r\n        // Here I create a data source with one empty object, and filter that list\r\n        // based on the signal value. This can only be done in a group.\r\n        {\r\n          name: dataForShowAll\r\n          values: [{}]\r\n          transform: [{type: \"filter\", expr: \"groupSelector\"}]\r\n        }\r\n      ]\r\n      // Set button size and positioning\r\n      encode: {\r\n        enter: {\r\n          xc: {signal: \"width/2\"}\r\n          y: {value: 30}\r\n          width: {value: 80}\r\n          height: {value: 30}\r\n        }\r\n      }\r\n      marks: [\r\n        {\r\n          // This group is shown as a button with rounded corners.\r\n          type: group\r\n          // mark name allows signal capturing\r\n          name: groupReset\r\n          // Only shows button if dataForShowAll has values.\r\n          from: {data: \"dataForShowAll\"}\r\n          encode: {\r\n            enter: {\r\n              cornerRadius: {value: 6}\r\n              fill: {value: \"#f5f5f5\"}\r\n              stroke: {value: \"#c1c1c1\"}\r\n              strokeWidth: {value: 2}\r\n              // use parent group's size\r\n              height: {\r\n                field: {group: \"height\"}\r\n              }\r\n              width: {\r\n                field: {group: \"width\"}\r\n              }\r\n            }\r\n            update: {\r\n              // groups are transparent by default\r\n              opacity: {value: 1}\r\n            }\r\n            hover: {\r\n              opacity: {value: 0.7}\r\n            }\r\n          }\r\n          marks: [\r\n            {\r\n              type: text\r\n              // if true, it will prevent clicking on the button when over text.\r\n              interactive: false\r\n              encode: {\r\n                enter: {\r\n                  // center text in the paren group\r\n                  xc: {\r\n                    field: {group: \"width\"}\r\n                    mult: 0.5\r\n                  }\r\n                  yc: {\r\n                    field: {group: \"height\"}\r\n                    mult: 0.5\r\n                    offset: 2\r\n                  }\r\n                  align: {value: \"center\"}\r\n                  baseline: {value: \"middle\"}\r\n                  fontWeight: {value: \"bold\"}\r\n                  text: {value: \"Show All\"}\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  signals: [\r\n    {\r\n      // used to highlight traffic to/from the same country\r\n      name: groupHover\r\n      value: {}\r\n      on: [\r\n        {\r\n          events: @groupMark:mouseover\r\n          update: \"{stk1:datum.stack=='stk1' \u0026\u0026 datum.grpId, stk2:datum.stack=='stk2' \u0026\u0026 datum.grpId}\"\r\n        }\r\n        {events: \"mouseout\", update: \"{}\"}\r\n      ]\r\n    }\r\n    // used to filter only the data related to the selected country\r\n    {\r\n      name: groupSelector\r\n      value: false\r\n      on: [\r\n        {\r\n          // Clicking groupMark sets this signal to the filter values\r\n          events: @groupMark:click!\r\n          update: \"{stack:datum.stack, stk1:datum.stack=='stk1' \u0026\u0026 datum.grpId, stk2:datum.stack=='stk2' \u0026\u0026 datum.grpId}\"\r\n        }\r\n        {\r\n          // Clicking \"show all\" button, or double-clicking anywhere resets it\r\n          events: [\r\n            {type: \"click\", markname: \"groupReset\"}\r\n            {type: \"dblclick\"}\r\n          ]\r\n          update: \"false\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
                        },
                        "title": "[GCP] Sankey Source to Destination country",
                        "type": "vega",
                        "uiState": {}
                    }
                },
                "gridData": {
                    "h": 15,
                    "i": "8700819e-d34e-4ac8-8b65-e053db64f7b8",
                    "w": 24,
                    "x": 0,
                    "y": 11
                },
                "panelIndex": "8700819e-d34e-4ac8-8b65-e053db64f7b8",
                "title": "Sankey Source to Destination country",
                "type": "visualization",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "enhancements": {},
                    "hidePanelTitles": false,
                    "savedVis": {
                        "data": {
                            "aggs": [],
                            "searchSource": {
                                "filter": [
                                    {
                                        "$state": {
                                            "store": "appState"
                                        },
                                        "meta": {
                                            "alias": null,
                                            "disabled": false,
                                            "field": "data_stream.dataset",
                                            "indexRefName": "kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index",
                                            "key": "data_stream.dataset",
                                            "negate": false,
                                            "params": {
                                                "query": "gcp.vpcflow"
                                            },
                                            "type": "phrase"
                                        },
                                        "query": {
                                            "match_phrase": {
                                                "data_stream.dataset": "gcp.vpcflow"
                                            }
                                        }
                                    }
                                ],
                                "query": {
                                    "language": "kuery",
                                    "query": ""
                                }
                            }
                        },
                        "description": "",
                        "params": {
                            "spec": "{\r\n  $schema: https://vega.github.io/schema/vega/v3.0.json\r\n  data: [\r\n    {\r\n      // query ES based on the currently selected time range and filter string\r\n      name: rawData\r\n      url: {\r\n        %context%: true\r\n        %timefield%: @timestamp\r\n        index: logs*\r\n        body: {\r\n          size: 0\r\n          aggs: {\r\n            table: {\r\n              composite: {\r\n                size: 10000\r\n                sources: [\r\n                  {\r\n                    stk1: {\r\n                      terms: {field: \"gcp.source.vpc.project_id\"}\r\n                    }\r\n                  }\r\n                  {\r\n                    stk2: {\r\n                      terms: {field: \"gcp.destination.vpc.project_id\"}\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // From the result, take just the data we are interested in\r\n      format: {property: \"aggregations.table.buckets\"}\r\n      // Convert key.stk1 -\u003e stk1 for simpler access below\r\n      transform: [\r\n        {type: \"formula\", expr: \"datum.key.stk1\", as: \"stk1\"}\r\n        {type: \"formula\", expr: \"datum.key.stk2\", as: \"stk2\"}\r\n        {type: \"formula\", expr: \"datum.doc_count\", as: \"size\"}\r\n      ]\r\n    }\r\n    {\r\n      name: nodes\r\n      source: rawData\r\n      transform: [\r\n        // when a country is selected, filter out unrelated data\r\n        {\r\n          type: filter\r\n          expr: !groupSelector || groupSelector.stk1 == datum.stk1 || groupSelector.stk2 == datum.stk2\r\n        }\r\n        // Set new key for later lookups - identifies each node\r\n        {type: \"formula\", expr: \"datum.stk1+datum.stk2\", as: \"key\"}\r\n        // instead of each table row, create two new rows,\r\n        // one for the source (stack=stk1) and one for destination node (stack=stk2).\r\n        // The country code stored in stk1 and stk2 fields is placed into grpId field.\r\n        {\r\n          type: fold\r\n          fields: [\"stk1\", \"stk2\"]\r\n          as: [\"stack\", \"grpId\"]\r\n        }\r\n        // Create a sortkey, different for stk1 and stk2 stacks.\r\n        // Space separator ensures proper sort order in some corner cases.\r\n        {\r\n          type: formula\r\n          expr: datum.stack == 'stk1' ? datum.stk1+' '+datum.stk2 : datum.stk2+' '+datum.stk1\r\n          as: sortField\r\n        }\r\n        // Calculate y0 and y1 positions for stacking nodes one on top of the other,\r\n        // independently for each stack, and ensuring they are in the proper order,\r\n        // alphabetical from the top (reversed on the y axis)\r\n        {\r\n          type: stack\r\n          groupby: [\"stack\"]\r\n          sort: {field: \"sortField\", order: \"descending\"}\r\n          field: size\r\n        }\r\n        // calculate vertical center point for each node, used to draw edges\r\n        {type: \"formula\", expr: \"(datum.y0+datum.y1)/2\", as: \"yc\"}\r\n      ]\r\n    }\r\n    {\r\n      name: groups\r\n      source: nodes\r\n      transform: [\r\n        // combine all nodes into country groups, summing up the doc counts\r\n        {\r\n          type: aggregate\r\n          groupby: [\"stack\", \"grpId\"]\r\n          fields: [\"size\"]\r\n          ops: [\"sum\"]\r\n          as: [\"total\"]\r\n        }\r\n        // re-calculate the stacking y0,y1 values\r\n        {\r\n          type: stack\r\n          groupby: [\"stack\"]\r\n          sort: {field: \"grpId\", order: \"descending\"}\r\n          field: total\r\n        }\r\n        // project y0 and y1 values to screen coordinates\r\n        // doing it once here instead of doing it several times in marks\r\n        {type: \"formula\", expr: \"scale('y', datum.y0)\", as: \"scaledY0\"}\r\n        {type: \"formula\", expr: \"scale('y', datum.y1)\", as: \"scaledY1\"}\r\n        // boolean flag if the label should be on the right of the stack\r\n        {type: \"formula\", expr: \"datum.stack == 'stk1'\", as: \"rightLabel\"}\r\n        // Calculate traffic percentage for this country using \"y\" scale\r\n        // domain upper bound, which represents the total traffic\r\n        {\r\n          type: formula\r\n          expr: datum.total/domain('y')[1]\r\n          as: percentage\r\n        }\r\n      ]\r\n    }\r\n    {\r\n      // This is a temp lookup table with all the 'stk2' stack nodes\r\n      name: destinationNodes\r\n      source: nodes\r\n      transform: [\r\n        {type: \"filter\", expr: \"datum.stack == 'stk2'\"}\r\n      ]\r\n    }\r\n    {\r\n      name: edges\r\n      source: nodes\r\n      transform: [\r\n        // we only want nodes from the left stack\r\n        {type: \"filter\", expr: \"datum.stack == 'stk1'\"}\r\n        // find corresponding node from the right stack, keep it as \"target\"\r\n        {\r\n          type: lookup\r\n          from: destinationNodes\r\n          key: key\r\n          fields: [\"key\"]\r\n          as: [\"target\"]\r\n        }\r\n        // calculate SVG link path between stk1 and stk2 stacks for the node pair\r\n        {\r\n          type: linkpath\r\n          orient: horizontal\r\n          shape: diagonal\r\n          sourceY: {expr: \"scale('y', datum.yc)\"}\r\n          sourceX: {expr: \"scale('x', 'stk1') + bandwidth('x')\"}\r\n          targetY: {expr: \"scale('y', datum.target.yc)\"}\r\n          targetX: {expr: \"scale('x', 'stk2')\"}\r\n        }\r\n        // A little trick to calculate the thickness of the line.\r\n        // The value needs to be the same as the hight of the node, but scaling\r\n        // size to screen's height gives inversed value because screen's Y\r\n        // coordinate goes from the top to the bottom, whereas the graph's Y=0\r\n        // is at the bottom. So subtracting scaled doc count from screen height\r\n        // (which is the \"lower\" bound of the \"y\" scale) gives us the right value\r\n        {\r\n          type: formula\r\n          expr: range('y')[0]-scale('y', datum.size)\r\n          as: strokeWidth\r\n        }\r\n        // Tooltip needs individual link's percentage of all traffic\r\n        {\r\n          type: formula\r\n          expr: datum.size/domain('y')[1]\r\n          as: percentage\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  scales: [\r\n    {\r\n      // calculates horizontal stack positioning\r\n      name: x\r\n      type: band\r\n      range: width\r\n      domain: [\"stk1\", \"stk2\"]\r\n      paddingOuter: 0.05\r\n      paddingInner: 0.95\r\n    }\r\n    {\r\n      // this scale goes up as high as the highest y1 value of all nodes\r\n      name: y\r\n      type: linear\r\n      range: height\r\n      domain: {data: \"nodes\", field: \"y1\"}\r\n    }\r\n    {\r\n      // use rawData to ensure the colors stay the same when clicking.\r\n      name: color\r\n      type: ordinal\r\n      range: category\r\n      domain: {data: \"rawData\", fields: [\"stk1\", \"stk2\"]}\r\n    }\r\n    {\r\n      // this scale is used to map internal ids (stk1, stk2) to stack names\r\n      name: stackNames\r\n      type: ordinal\r\n      range: [\"Source\", \"Destination\"]\r\n      domain: [\"stk1\", \"stk2\"]\r\n    }\r\n  ]\r\n  axes: [\r\n    {\r\n      // x axis should use custom label formatting to print proper stack names\r\n      orient: bottom\r\n      scale: x\r\n      encode: {\r\n        labels: {\r\n          update: {\r\n            text: {scale: \"stackNames\", field: \"value\"}\r\n          }\r\n        }\r\n      }\r\n    }\r\n    {orient: \"left\", scale: \"y\"}\r\n  ]\r\n  marks: [\r\n    {\r\n      // draw the connecting line between stacks\r\n      type: path\r\n      name: edgeMark\r\n      from: {data: \"edges\"}\r\n      // this prevents some autosizing issues with large strokeWidth for paths\r\n      clip: true\r\n      encode: {\r\n        update: {\r\n          // By default use color of the left node, except when showing traffic\r\n          // from just one country, in which case use destination color.\r\n          stroke: [\r\n            {\r\n              test: groupSelector \u0026\u0026 groupSelector.stack=='stk1'\r\n              scale: color\r\n              field: stk2\r\n            }\r\n            {scale: \"color\", field: \"stk1\"}\r\n          ]\r\n          strokeWidth: {field: \"strokeWidth\"}\r\n          path: {field: \"path\"}\r\n          // when showing all traffic, and hovering over a country,\r\n          // highlight the traffic from that country.\r\n          strokeOpacity: {\r\n            signal: !groupSelector \u0026\u0026 (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 0.9 : 0.3\r\n          }\r\n          // Ensure that the hover-selected edges show on top\r\n          zindex: {\r\n            signal: !groupSelector \u0026\u0026 (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 1 : 0\r\n          }\r\n          // format tooltip string\r\n          tooltip: {\r\n            signal: datum.stk1 + ' \u0026#x2192; ' + datum.stk2 + '    ' + format(datum.size, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\r\n          }\r\n        }\r\n        // Simple mouseover highlighting of a single line\r\n        hover: {\r\n          strokeOpacity: {value: 1}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // draw stack groups (countries)\r\n      type: rect\r\n      name: groupMark\r\n      from: {data: \"groups\"}\r\n      encode: {\r\n        enter: {\r\n          fill: {scale: \"color\", field: \"grpId\"}\r\n          width: {scale: \"x\", band: 1}\r\n        }\r\n        update: {\r\n          x: {scale: \"x\", field: \"stack\"}\r\n          y: {field: \"scaledY0\"}\r\n          y2: {field: \"scaledY1\"}\r\n          fillOpacity: {value: 0.6}\r\n          tooltip: {\r\n            signal: datum.grpId + '   ' + format(datum.total, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\r\n          }\r\n        }\r\n        hover: {\r\n          fillOpacity: {value: 1}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // draw country code labels on the inner side of the stack\r\n      type: text\r\n      from: {data: \"groups\"}\r\n      // don't process events for the labels - otherwise line mouseover is unclean\r\n      interactive: false\r\n      encode: {\r\n        update: {\r\n          // depending on which stack it is, position x with some padding\r\n          x: {\r\n            signal: scale('x', datum.stack) + (datum.rightLabel ? bandwidth('x') + 8 : -8)\r\n          }\r\n          // middle of the group\r\n          yc: {signal: \"(datum.scaledY0 + datum.scaledY1)/2\"}\r\n          align: {signal: \"datum.rightLabel ? 'left' : 'right'\"}\r\n          baseline: {value: \"middle\"}\r\n          fontWeight: {value: \"bold\"}\r\n          // only show text label if the group's height is large enough\r\n          text: {signal: \"abs(datum.scaledY0-datum.scaledY1) \u003e 13 ? datum.grpId : ''\"}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // Create a \"show all\" button. Shown only when a country is selected.\r\n      type: group\r\n      data: [\r\n        // We need to make the button show only when groupSelector signal is true.\r\n        // Each mark is drawn as many times as there are elements in the backing data.\r\n        // Which means that if values list is empty, it will not be drawn.\r\n        // Here I create a data source with one empty object, and filter that list\r\n        // based on the signal value. This can only be done in a group.\r\n        {\r\n          name: dataForShowAll\r\n          values: [{}]\r\n          transform: [{type: \"filter\", expr: \"groupSelector\"}]\r\n        }\r\n      ]\r\n      // Set button size and positioning\r\n      encode: {\r\n        enter: {\r\n          xc: {signal: \"width/2\"}\r\n          y: {value: 30}\r\n          width: {value: 80}\r\n          height: {value: 30}\r\n        }\r\n      }\r\n      marks: [\r\n        {\r\n          // This group is shown as a button with rounded corners.\r\n          type: group\r\n          // mark name allows signal capturing\r\n          name: groupReset\r\n          // Only shows button if dataForShowAll has values.\r\n          from: {data: \"dataForShowAll\"}\r\n          encode: {\r\n            enter: {\r\n              cornerRadius: {value: 6}\r\n              fill: {value: \"#f5f5f5\"}\r\n              stroke: {value: \"#c1c1c1\"}\r\n              strokeWidth: {value: 2}\r\n              // use parent group's size\r\n              height: {\r\n                field: {group: \"height\"}\r\n              }\r\n              width: {\r\n                field: {group: \"width\"}\r\n              }\r\n            }\r\n            update: {\r\n              // groups are transparent by default\r\n              opacity: {value: 1}\r\n            }\r\n            hover: {\r\n              opacity: {value: 0.7}\r\n            }\r\n          }\r\n          marks: [\r\n            {\r\n              type: text\r\n              // if true, it will prevent clicking on the button when over text.\r\n              interactive: false\r\n              encode: {\r\n                enter: {\r\n                  // center text in the paren group\r\n                  xc: {\r\n                    field: {group: \"width\"}\r\n                    mult: 0.5\r\n                  }\r\n                  yc: {\r\n                    field: {group: \"height\"}\r\n                    mult: 0.5\r\n                    offset: 2\r\n                  }\r\n                  align: {value: \"center\"}\r\n                  baseline: {value: \"middle\"}\r\n                  fontWeight: {value: \"bold\"}\r\n                  text: {value: \"Show All\"}\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  signals: [\r\n    {\r\n      // used to highlight traffic to/from the same country\r\n      name: groupHover\r\n      value: {}\r\n      on: [\r\n        {\r\n          events: @groupMark:mouseover\r\n          update: \"{stk1:datum.stack=='stk1' \u0026\u0026 datum.grpId, stk2:datum.stack=='stk2' \u0026\u0026 datum.grpId}\"\r\n        }\r\n        {events: \"mouseout\", update: \"{}\"}\r\n      ]\r\n    }\r\n    // used to filter only the data related to the selected country\r\n    {\r\n      name: groupSelector\r\n      value: false\r\n      on: [\r\n        {\r\n          // Clicking groupMark sets this signal to the filter values\r\n          events: @groupMark:click!\r\n          update: \"{stack:datum.stack, stk1:datum.stack=='stk1' \u0026\u0026 datum.grpId, stk2:datum.stack=='stk2' \u0026\u0026 datum.grpId}\"\r\n        }\r\n        {\r\n          // Clicking \"show all\" button, or double-clicking anywhere resets it\r\n          events: [\r\n            {type: \"click\", markname: \"groupReset\"}\r\n            {type: \"dblclick\"}\r\n          ]\r\n          update: \"false\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
                        },
                        "title": "[GCP] Sankey Source to Destination project",
                        "type": "vega",
                        "uiState": {}
                    }
                },
                "gridData": {
                    "h": 15,
                    "i": "6d32c209-a24d-4bf4-8651-83a187ed7946",
                    "w": 24,
                    "x": 24,
                    "y": 11
                },
                "panelIndex": "6d32c209-a24d-4bf4-8651-83a187ed7946",
                "title": "Sankey Source to Destination project",
                "type": "visualization",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "enhancements": {},
                    "hidePanelTitles": false,
                    "savedVis": {
                        "data": {
                            "aggs": [],
                            "searchSource": {
                                "filter": [
                                    {
                                        "$state": {
                                            "store": "appState"
                                        },
                                        "meta": {
                                            "alias": null,
                                            "disabled": false,
                                            "field": "data_stream.dataset",
                                            "indexRefName": "kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index",
                                            "key": "data_stream.dataset",
                                            "negate": false,
                                            "params": {
                                                "query": "gcp.vpcflow"
                                            },
                                            "type": "phrase"
                                        },
                                        "query": {
                                            "match_phrase": {
                                                "data_stream.dataset": "gcp.vpcflow"
                                            }
                                        }
                                    }
                                ],
                                "query": {
                                    "language": "kuery",
                                    "query": ""
                                }
                            }
                        },
                        "description": "",
                        "params": {
                            "spec": "{\r\n  $schema: https://vega.github.io/schema/vega/v3.0.json\r\n  data: [\r\n    {\r\n      // query ES based on the currently selected time range and filter string\r\n      name: rawData\r\n      url: {\r\n        %context%: true\r\n        %timefield%: @timestamp\r\n        index: logs*\r\n        body: {\r\n          size: 0\r\n          aggs: {\r\n            table: {\r\n              composite: {\r\n                size: 10000\r\n                sources: [\r\n                  {\r\n                    stk1: {\r\n                      terms: {field: \"gcp.source.vpc.subnetwork_name\"}\r\n                    }\r\n                  }\r\n                  {\r\n                    stk2: {\r\n                      terms: {field: \"gcp.destination.vpc.subnetwork_name\"}\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // From the result, take just the data we are interested in\r\n      format: {property: \"aggregations.table.buckets\"}\r\n      // Convert key.stk1 -\u003e stk1 for simpler access below\r\n      transform: [\r\n        {type: \"formula\", expr: \"datum.key.stk1\", as: \"stk1\"}\r\n        {type: \"formula\", expr: \"datum.key.stk2\", as: \"stk2\"}\r\n        {type: \"formula\", expr: \"datum.doc_count\", as: \"size\"}\r\n      ]\r\n    }\r\n    {\r\n      name: nodes\r\n      source: rawData\r\n      transform: [\r\n        // when a country is selected, filter out unrelated data\r\n        {\r\n          type: filter\r\n          expr: !groupSelector || groupSelector.stk1 == datum.stk1 || groupSelector.stk2 == datum.stk2\r\n        }\r\n        // Set new key for later lookups - identifies each node\r\n        {type: \"formula\", expr: \"datum.stk1+datum.stk2\", as: \"key\"}\r\n        // instead of each table row, create two new rows,\r\n        // one for the source (stack=stk1) and one for destination node (stack=stk2).\r\n        // The country code stored in stk1 and stk2 fields is placed into grpId field.\r\n        {\r\n          type: fold\r\n          fields: [\"stk1\", \"stk2\"]\r\n          as: [\"stack\", \"grpId\"]\r\n        }\r\n        // Create a sortkey, different for stk1 and stk2 stacks.\r\n        // Space separator ensures proper sort order in some corner cases.\r\n        {\r\n          type: formula\r\n          expr: datum.stack == 'stk1' ? datum.stk1+' '+datum.stk2 : datum.stk2+' '+datum.stk1\r\n          as: sortField\r\n        }\r\n        // Calculate y0 and y1 positions for stacking nodes one on top of the other,\r\n        // independently for each stack, and ensuring they are in the proper order,\r\n        // alphabetical from the top (reversed on the y axis)\r\n        {\r\n          type: stack\r\n          groupby: [\"stack\"]\r\n          sort: {field: \"sortField\", order: \"descending\"}\r\n          field: size\r\n        }\r\n        // calculate vertical center point for each node, used to draw edges\r\n        {type: \"formula\", expr: \"(datum.y0+datum.y1)/2\", as: \"yc\"}\r\n      ]\r\n    }\r\n    {\r\n      name: groups\r\n      source: nodes\r\n      transform: [\r\n        // combine all nodes into country groups, summing up the doc counts\r\n        {\r\n          type: aggregate\r\n          groupby: [\"stack\", \"grpId\"]\r\n          fields: [\"size\"]\r\n          ops: [\"sum\"]\r\n          as: [\"total\"]\r\n        }\r\n        // re-calculate the stacking y0,y1 values\r\n        {\r\n          type: stack\r\n          groupby: [\"stack\"]\r\n          sort: {field: \"grpId\", order: \"descending\"}\r\n          field: total\r\n        }\r\n        // project y0 and y1 values to screen coordinates\r\n        // doing it once here instead of doing it several times in marks\r\n        {type: \"formula\", expr: \"scale('y', datum.y0)\", as: \"scaledY0\"}\r\n        {type: \"formula\", expr: \"scale('y', datum.y1)\", as: \"scaledY1\"}\r\n        // boolean flag if the label should be on the right of the stack\r\n        {type: \"formula\", expr: \"datum.stack == 'stk1'\", as: \"rightLabel\"}\r\n        // Calculate traffic percentage for this country using \"y\" scale\r\n        // domain upper bound, which represents the total traffic\r\n        {\r\n          type: formula\r\n          expr: datum.total/domain('y')[1]\r\n          as: percentage\r\n        }\r\n      ]\r\n    }\r\n    {\r\n      // This is a temp lookup table with all the 'stk2' stack nodes\r\n      name: destinationNodes\r\n      source: nodes\r\n      transform: [\r\n        {type: \"filter\", expr: \"datum.stack == 'stk2'\"}\r\n      ]\r\n    }\r\n    {\r\n      name: edges\r\n      source: nodes\r\n      transform: [\r\n        // we only want nodes from the left stack\r\n        {type: \"filter\", expr: \"datum.stack == 'stk1'\"}\r\n        // find corresponding node from the right stack, keep it as \"target\"\r\n        {\r\n          type: lookup\r\n          from: destinationNodes\r\n          key: key\r\n          fields: [\"key\"]\r\n          as: [\"target\"]\r\n        }\r\n        // calculate SVG link path between stk1 and stk2 stacks for the node pair\r\n        {\r\n          type: linkpath\r\n          orient: horizontal\r\n          shape: diagonal\r\n          sourceY: {expr: \"scale('y', datum.yc)\"}\r\n          sourceX: {expr: \"scale('x', 'stk1') + bandwidth('x')\"}\r\n          targetY: {expr: \"scale('y', datum.target.yc)\"}\r\n          targetX: {expr: \"scale('x', 'stk2')\"}\r\n        }\r\n        // A little trick to calculate the thickness of the line.\r\n        // The value needs to be the same as the hight of the node, but scaling\r\n        // size to screen's height gives inversed value because screen's Y\r\n        // coordinate goes from the top to the bottom, whereas the graph's Y=0\r\n        // is at the bottom. So subtracting scaled doc count from screen height\r\n        // (which is the \"lower\" bound of the \"y\" scale) gives us the right value\r\n        {\r\n          type: formula\r\n          expr: range('y')[0]-scale('y', datum.size)\r\n          as: strokeWidth\r\n        }\r\n        // Tooltip needs individual link's percentage of all traffic\r\n        {\r\n          type: formula\r\n          expr: datum.size/domain('y')[1]\r\n          as: percentage\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  scales: [\r\n    {\r\n      // calculates horizontal stack positioning\r\n      name: x\r\n      type: band\r\n      range: width\r\n      domain: [\"stk1\", \"stk2\"]\r\n      paddingOuter: 0.05\r\n      paddingInner: 0.95\r\n    }\r\n    {\r\n      // this scale goes up as high as the highest y1 value of all nodes\r\n      name: y\r\n      type: linear\r\n      range: height\r\n      domain: {data: \"nodes\", field: \"y1\"}\r\n    }\r\n    {\r\n      // use rawData to ensure the colors stay the same when clicking.\r\n      name: color\r\n      type: ordinal\r\n      range: category\r\n      domain: {data: \"rawData\", fields: [\"stk1\", \"stk2\"]}\r\n    }\r\n    {\r\n      // this scale is used to map internal ids (stk1, stk2) to stack names\r\n      name: stackNames\r\n      type: ordinal\r\n      range: [\"Source\", \"Destination\"]\r\n      domain: [\"stk1\", \"stk2\"]\r\n    }\r\n  ]\r\n  axes: [\r\n    {\r\n      // x axis should use custom label formatting to print proper stack names\r\n      orient: bottom\r\n      scale: x\r\n      encode: {\r\n        labels: {\r\n          update: {\r\n            text: {scale: \"stackNames\", field: \"value\"}\r\n          }\r\n        }\r\n      }\r\n    }\r\n    {orient: \"left\", scale: \"y\"}\r\n  ]\r\n  marks: [\r\n    {\r\n      // draw the connecting line between stacks\r\n      type: path\r\n      name: edgeMark\r\n      from: {data: \"edges\"}\r\n      // this prevents some autosizing issues with large strokeWidth for paths\r\n      clip: true\r\n      encode: {\r\n        update: {\r\n          // By default use color of the left node, except when showing traffic\r\n          // from just one country, in which case use destination color.\r\n          stroke: [\r\n            {\r\n              test: groupSelector \u0026\u0026 groupSelector.stack=='stk1'\r\n              scale: color\r\n              field: stk2\r\n            }\r\n            {scale: \"color\", field: \"stk1\"}\r\n          ]\r\n          strokeWidth: {field: \"strokeWidth\"}\r\n          path: {field: \"path\"}\r\n          // when showing all traffic, and hovering over a country,\r\n          // highlight the traffic from that country.\r\n          strokeOpacity: {\r\n            signal: !groupSelector \u0026\u0026 (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 0.9 : 0.3\r\n          }\r\n          // Ensure that the hover-selected edges show on top\r\n          zindex: {\r\n            signal: !groupSelector \u0026\u0026 (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 1 : 0\r\n          }\r\n          // format tooltip string\r\n          tooltip: {\r\n            signal: datum.stk1 + ' \u0026#x2192; ' + datum.stk2 + '    ' + format(datum.size, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\r\n          }\r\n        }\r\n        // Simple mouseover highlighting of a single line\r\n        hover: {\r\n          strokeOpacity: {value: 1}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // draw stack groups (countries)\r\n      type: rect\r\n      name: groupMark\r\n      from: {data: \"groups\"}\r\n      encode: {\r\n        enter: {\r\n          fill: {scale: \"color\", field: \"grpId\"}\r\n          width: {scale: \"x\", band: 1}\r\n        }\r\n        update: {\r\n          x: {scale: \"x\", field: \"stack\"}\r\n          y: {field: \"scaledY0\"}\r\n          y2: {field: \"scaledY1\"}\r\n          fillOpacity: {value: 0.6}\r\n          tooltip: {\r\n            signal: datum.grpId + '   ' + format(datum.total, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\r\n          }\r\n        }\r\n        hover: {\r\n          fillOpacity: {value: 1}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // draw country code labels on the inner side of the stack\r\n      type: text\r\n      from: {data: \"groups\"}\r\n      // don't process events for the labels - otherwise line mouseover is unclean\r\n      interactive: false\r\n      encode: {\r\n        update: {\r\n          // depending on which stack it is, position x with some padding\r\n          x: {\r\n            signal: scale('x', datum.stack) + (datum.rightLabel ? bandwidth('x') + 8 : -8)\r\n          }\r\n          // middle of the group\r\n          yc: {signal: \"(datum.scaledY0 + datum.scaledY1)/2\"}\r\n          align: {signal: \"datum.rightLabel ? 'left' : 'right'\"}\r\n          baseline: {value: \"middle\"}\r\n          fontWeight: {value: \"bold\"}\r\n          // only show text label if the group's height is large enough\r\n          text: {signal: \"abs(datum.scaledY0-datum.scaledY1) \u003e 13 ? datum.grpId : ''\"}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // Create a \"show all\" button. Shown only when a country is selected.\r\n      type: group\r\n      data: [\r\n        // We need to make the button show only when groupSelector signal is true.\r\n        // Each mark is drawn as many times as there are elements in the backing data.\r\n        // Which means that if values list is empty, it will not be drawn.\r\n        // Here I create a data source with one empty object, and filter that list\r\n        // based on the signal value. This can only be done in a group.\r\n        {\r\n          name: dataForShowAll\r\n          values: [{}]\r\n          transform: [{type: \"filter\", expr: \"groupSelector\"}]\r\n        }\r\n      ]\r\n      // Set button size and positioning\r\n      encode: {\r\n        enter: {\r\n          xc: {signal: \"width/2\"}\r\n          y: {value: 30}\r\n          width: {value: 80}\r\n          height: {value: 30}\r\n        }\r\n      }\r\n      marks: [\r\n        {\r\n          // This group is shown as a button with rounded corners.\r\n          type: group\r\n          // mark name allows signal capturing\r\n          name: groupReset\r\n          // Only shows button if dataForShowAll has values.\r\n          from: {data: \"dataForShowAll\"}\r\n          encode: {\r\n            enter: {\r\n              cornerRadius: {value: 6}\r\n              fill: {value: \"#f5f5f5\"}\r\n              stroke: {value: \"#c1c1c1\"}\r\n              strokeWidth: {value: 2}\r\n              // use parent group's size\r\n              height: {\r\n                field: {group: \"height\"}\r\n              }\r\n              width: {\r\n                field: {group: \"width\"}\r\n              }\r\n            }\r\n            update: {\r\n              // groups are transparent by default\r\n              opacity: {value: 1}\r\n            }\r\n            hover: {\r\n              opacity: {value: 0.7}\r\n            }\r\n          }\r\n          marks: [\r\n            {\r\n              type: text\r\n              // if true, it will prevent clicking on the button when over text.\r\n              interactive: false\r\n              encode: {\r\n                enter: {\r\n                  // center text in the paren group\r\n                  xc: {\r\n                    field: {group: \"width\"}\r\n                    mult: 0.5\r\n                  }\r\n                  yc: {\r\n                    field: {group: \"height\"}\r\n                    mult: 0.5\r\n                    offset: 2\r\n                  }\r\n                  align: {value: \"center\"}\r\n                  baseline: {value: \"middle\"}\r\n                  fontWeight: {value: \"bold\"}\r\n                  text: {value: \"Show All\"}\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  signals: [\r\n    {\r\n      // used to highlight traffic to/from the same country\r\n      name: groupHover\r\n      value: {}\r\n      on: [\r\n        {\r\n          events: @groupMark:mouseover\r\n          update: \"{stk1:datum.stack=='stk1' \u0026\u0026 datum.grpId, stk2:datum.stack=='stk2' \u0026\u0026 datum.grpId}\"\r\n        }\r\n        {events: \"mouseout\", update: \"{}\"}\r\n      ]\r\n    }\r\n    // used to filter only the data related to the selected country\r\n    {\r\n      name: groupSelector\r\n      value: false\r\n      on: [\r\n        {\r\n          // Clicking groupMark sets this signal to the filter values\r\n          events: @groupMark:click!\r\n          update: \"{stack:datum.stack, stk1:datum.stack=='stk1' \u0026\u0026 datum.grpId, stk2:datum.stack=='stk2' \u0026\u0026 datum.grpId}\"\r\n        }\r\n        {\r\n          // Clicking \"show all\" button, or double-clicking anywhere resets it\r\n          events: [\r\n            {type: \"click\", markname: \"groupReset\"}\r\n            {type: \"dblclick\"}\r\n          ]\r\n          update: \"false\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
                        },
                        "title": "[GCP] Sankey Source to Destination subnetwork",
                        "type": "vega",
                        "uiState": {}
                    }
                },
                "gridData": {
                    "h": 15,
                    "i": "0f9ac1ed-f75b-4788-a9fe-9277d5e0551a",
                    "w": 24,
                    "x": 0,
                    "y": 26
                },
                "panelIndex": "0f9ac1ed-f75b-4788-a9fe-9277d5e0551a",
                "title": "Sankey Source to Destination subnetwork",
                "type": "visualization",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "enhancements": {},
                    "hidePanelTitles": false,
                    "savedVis": {
                        "data": {
                            "aggs": [],
                            "searchSource": {
                                "filter": [
                                    {
                                        "$state": {
                                            "store": "appState"
                                        },
                                        "meta": {
                                            "alias": null,
                                            "disabled": false,
                                            "indexRefName": "kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index",
                                            "key": "data_stream.dataset",
                                            "negate": false,
                                            "params": {
                                                "query": "gcp.vpcflow"
                                            },
                                            "type": "phrase"
                                        },
                                        "query": {
                                            "match_phrase": {
                                                "data_stream.dataset": "gcp.vpcflow"
                                            }
                                        }
                                    }
                                ],
                                "query": {
                                    "language": "kuery",
                                    "query": ""
                                }
                            }
                        },
                        "description": "",
                        "params": {
                            "spec": "{\r\n  $schema: https://vega.github.io/schema/vega/v3.0.json\r\n  data: [\r\n    {\r\n      // query ES based on the currently selected time range and filter string\r\n      name: rawData\r\n      url: {\r\n        %context%: true\r\n        %timefield%: @timestamp\r\n        index: logs*\r\n        body: {\r\n          size: 0\r\n          aggs: {\r\n            table: {\r\n              composite: {\r\n                size: 10000\r\n                sources: [\r\n                  {\r\n                    stk1: {\r\n                      terms: {field: \"gcp.source.vpc.vpc_name\"}\r\n                    }\r\n                  }\r\n                  {\r\n                    stk2: {\r\n                      terms: {field: \"gcp.destination.vpc.vpc_name\"}\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // From the result, take just the data we are interested in\r\n      format: {property: \"aggregations.table.buckets\"}\r\n      // Convert key.stk1 -\u003e stk1 for simpler access below\r\n      transform: [\r\n        {type: \"formula\", expr: \"datum.key.stk1\", as: \"stk1\"}\r\n        {type: \"formula\", expr: \"datum.key.stk2\", as: \"stk2\"}\r\n        {type: \"formula\", expr: \"datum.doc_count\", as: \"size\"}\r\n      ]\r\n    }\r\n    {\r\n      name: nodes\r\n      source: rawData\r\n      transform: [\r\n        // when a country is selected, filter out unrelated data\r\n        {\r\n          type: filter\r\n          expr: !groupSelector || groupSelector.stk1 == datum.stk1 || groupSelector.stk2 == datum.stk2\r\n        }\r\n        // Set new key for later lookups - identifies each node\r\n        {type: \"formula\", expr: \"datum.stk1+datum.stk2\", as: \"key\"}\r\n        // instead of each table row, create two new rows,\r\n        // one for the source (stack=stk1) and one for destination node (stack=stk2).\r\n        // The country code stored in stk1 and stk2 fields is placed into grpId field.\r\n        {\r\n          type: fold\r\n          fields: [\"stk1\", \"stk2\"]\r\n          as: [\"stack\", \"grpId\"]\r\n        }\r\n        // Create a sortkey, different for stk1 and stk2 stacks.\r\n        // Space separator ensures proper sort order in some corner cases.\r\n        {\r\n          type: formula\r\n          expr: datum.stack == 'stk1' ? datum.stk1+' '+datum.stk2 : datum.stk2+' '+datum.stk1\r\n          as: sortField\r\n        }\r\n        // Calculate y0 and y1 positions for stacking nodes one on top of the other,\r\n        // independently for each stack, and ensuring they are in the proper order,\r\n        // alphabetical from the top (reversed on the y axis)\r\n        {\r\n          type: stack\r\n          groupby: [\"stack\"]\r\n          sort: {field: \"sortField\", order: \"descending\"}\r\n          field: size\r\n        }\r\n        // calculate vertical center point for each node, used to draw edges\r\n        {type: \"formula\", expr: \"(datum.y0+datum.y1)/2\", as: \"yc\"}\r\n      ]\r\n    }\r\n    {\r\n      name: groups\r\n      source: nodes\r\n      transform: [\r\n        // combine all nodes into country groups, summing up the doc counts\r\n        {\r\n          type: aggregate\r\n          groupby: [\"stack\", \"grpId\"]\r\n          fields: [\"size\"]\r\n          ops: [\"sum\"]\r\n          as: [\"total\"]\r\n        }\r\n        // re-calculate the stacking y0,y1 values\r\n        {\r\n          type: stack\r\n          groupby: [\"stack\"]\r\n          sort: {field: \"grpId\", order: \"descending\"}\r\n          field: total\r\n        }\r\n        // project y0 and y1 values to screen coordinates\r\n        // doing it once here instead of doing it several times in marks\r\n        {type: \"formula\", expr: \"scale('y', datum.y0)\", as: \"scaledY0\"}\r\n        {type: \"formula\", expr: \"scale('y', datum.y1)\", as: \"scaledY1\"}\r\n        // boolean flag if the label should be on the right of the stack\r\n        {type: \"formula\", expr: \"datum.stack == 'stk1'\", as: \"rightLabel\"}\r\n        // Calculate traffic percentage for this country using \"y\" scale\r\n        // domain upper bound, which represents the total traffic\r\n        {\r\n          type: formula\r\n          expr: datum.total/domain('y')[1]\r\n          as: percentage\r\n        }\r\n      ]\r\n    }\r\n    {\r\n      // This is a temp lookup table with all the 'stk2' stack nodes\r\n      name: destinationNodes\r\n      source: nodes\r\n      transform: [\r\n        {type: \"filter\", expr: \"datum.stack == 'stk2'\"}\r\n      ]\r\n    }\r\n    {\r\n      name: edges\r\n      source: nodes\r\n      transform: [\r\n        // we only want nodes from the left stack\r\n        {type: \"filter\", expr: \"datum.stack == 'stk1'\"}\r\n        // find corresponding node from the right stack, keep it as \"target\"\r\n        {\r\n          type: lookup\r\n          from: destinationNodes\r\n          key: key\r\n          fields: [\"key\"]\r\n          as: [\"target\"]\r\n        }\r\n        // calculate SVG link path between stk1 and stk2 stacks for the node pair\r\n        {\r\n          type: linkpath\r\n          orient: horizontal\r\n          shape: diagonal\r\n          sourceY: {expr: \"scale('y', datum.yc)\"}\r\n          sourceX: {expr: \"scale('x', 'stk1') + bandwidth('x')\"}\r\n          targetY: {expr: \"scale('y', datum.target.yc)\"}\r\n          targetX: {expr: \"scale('x', 'stk2')\"}\r\n        }\r\n        // A little trick to calculate the thickness of the line.\r\n        // The value needs to be the same as the hight of the node, but scaling\r\n        // size to screen's height gives inversed value because screen's Y\r\n        // coordinate goes from the top to the bottom, whereas the graph's Y=0\r\n        // is at the bottom. So subtracting scaled doc count from screen height\r\n        // (which is the \"lower\" bound of the \"y\" scale) gives us the right value\r\n        {\r\n          type: formula\r\n          expr: range('y')[0]-scale('y', datum.size)\r\n          as: strokeWidth\r\n        }\r\n        // Tooltip needs individual link's percentage of all traffic\r\n        {\r\n          type: formula\r\n          expr: datum.size/domain('y')[1]\r\n          as: percentage\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  scales: [\r\n    {\r\n      // calculates horizontal stack positioning\r\n      name: x\r\n      type: band\r\n      range: width\r\n      domain: [\"stk1\", \"stk2\"]\r\n      paddingOuter: 0.05\r\n      paddingInner: 0.95\r\n    }\r\n    {\r\n      // this scale goes up as high as the highest y1 value of all nodes\r\n      name: y\r\n      type: linear\r\n      range: height\r\n      domain: {data: \"nodes\", field: \"y1\"}\r\n    }\r\n    {\r\n      // use rawData to ensure the colors stay the same when clicking.\r\n      name: color\r\n      type: ordinal\r\n      range: category\r\n      domain: {data: \"rawData\", fields: [\"stk1\", \"stk2\"]}\r\n    }\r\n    {\r\n      // this scale is used to map internal ids (stk1, stk2) to stack names\r\n      name: stackNames\r\n      type: ordinal\r\n      range: [\"Source\", \"Destination\"]\r\n      domain: [\"stk1\", \"stk2\"]\r\n    }\r\n  ]\r\n  axes: [\r\n    {\r\n      // x axis should use custom label formatting to print proper stack names\r\n      orient: bottom\r\n      scale: x\r\n      encode: {\r\n        labels: {\r\n          update: {\r\n            text: {scale: \"stackNames\", field: \"value\"}\r\n          }\r\n        }\r\n      }\r\n    }\r\n    {orient: \"left\", scale: \"y\"}\r\n  ]\r\n  marks: [\r\n    {\r\n      // draw the connecting line between stacks\r\n      type: path\r\n      name: edgeMark\r\n      from: {data: \"edges\"}\r\n      // this prevents some autosizing issues with large strokeWidth for paths\r\n      clip: true\r\n      encode: {\r\n        update: {\r\n          // By default use color of the left node, except when showing traffic\r\n          // from just one country, in which case use destination color.\r\n          stroke: [\r\n            {\r\n              test: groupSelector \u0026\u0026 groupSelector.stack=='stk1'\r\n              scale: color\r\n              field: stk2\r\n            }\r\n            {scale: \"color\", field: \"stk1\"}\r\n          ]\r\n          strokeWidth: {field: \"strokeWidth\"}\r\n          path: {field: \"path\"}\r\n          // when showing all traffic, and hovering over a country,\r\n          // highlight the traffic from that country.\r\n          strokeOpacity: {\r\n            signal: !groupSelector \u0026\u0026 (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 0.9 : 0.3\r\n          }\r\n          // Ensure that the hover-selected edges show on top\r\n          zindex: {\r\n            signal: !groupSelector \u0026\u0026 (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 1 : 0\r\n          }\r\n          // format tooltip string\r\n          tooltip: {\r\n            signal: datum.stk1 + ' \u0026#x2192; ' + datum.stk2 + '    ' + format(datum.size, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\r\n          }\r\n        }\r\n        // Simple mouseover highlighting of a single line\r\n        hover: {\r\n          strokeOpacity: {value: 1}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // draw stack groups (countries)\r\n      type: rect\r\n      name: groupMark\r\n      from: {data: \"groups\"}\r\n      encode: {\r\n        enter: {\r\n          fill: {scale: \"color\", field: \"grpId\"}\r\n          width: {scale: \"x\", band: 1}\r\n        }\r\n        update: {\r\n          x: {scale: \"x\", field: \"stack\"}\r\n          y: {field: \"scaledY0\"}\r\n          y2: {field: \"scaledY1\"}\r\n          fillOpacity: {value: 0.6}\r\n          tooltip: {\r\n            signal: datum.grpId + '   ' + format(datum.total, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\r\n          }\r\n        }\r\n        hover: {\r\n          fillOpacity: {value: 1}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // draw country code labels on the inner side of the stack\r\n      type: text\r\n      from: {data: \"groups\"}\r\n      // don't process events for the labels - otherwise line mouseover is unclean\r\n      interactive: false\r\n      encode: {\r\n        update: {\r\n          // depending on which stack it is, position x with some padding\r\n          x: {\r\n            signal: scale('x', datum.stack) + (datum.rightLabel ? bandwidth('x') + 8 : -8)\r\n          }\r\n          // middle of the group\r\n          yc: {signal: \"(datum.scaledY0 + datum.scaledY1)/2\"}\r\n          align: {signal: \"datum.rightLabel ? 'left' : 'right'\"}\r\n          baseline: {value: \"middle\"}\r\n          fontWeight: {value: \"bold\"}\r\n          // only show text label if the group's height is large enough\r\n          text: {signal: \"abs(datum.scaledY0-datum.scaledY1) \u003e 13 ? datum.grpId : ''\"}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // Create a \"show all\" button. Shown only when a country is selected.\r\n      type: group\r\n      data: [\r\n        // We need to make the button show only when groupSelector signal is true.\r\n        // Each mark is drawn as many times as there are elements in the backing data.\r\n        // Which means that if values list is empty, it will not be drawn.\r\n        // Here I create a data source with one empty object, and filter that list\r\n        // based on the signal value. This can only be done in a group.\r\n        {\r\n          name: dataForShowAll\r\n          values: [{}]\r\n          transform: [{type: \"filter\", expr: \"groupSelector\"}]\r\n        }\r\n      ]\r\n      // Set button size and positioning\r\n      encode: {\r\n        enter: {\r\n          xc: {signal: \"width/2\"}\r\n          y: {value: 30}\r\n          width: {value: 80}\r\n          height: {value: 30}\r\n        }\r\n      }\r\n      marks: [\r\n        {\r\n          // This group is shown as a button with rounded corners.\r\n          type: group\r\n          // mark name allows signal capturing\r\n          name: groupReset\r\n          // Only shows button if dataForShowAll has values.\r\n          from: {data: \"dataForShowAll\"}\r\n          encode: {\r\n            enter: {\r\n              cornerRadius: {value: 6}\r\n              fill: {value: \"#f5f5f5\"}\r\n              stroke: {value: \"#c1c1c1\"}\r\n              strokeWidth: {value: 2}\r\n              // use parent group's size\r\n              height: {\r\n                field: {group: \"height\"}\r\n              }\r\n              width: {\r\n                field: {group: \"width\"}\r\n              }\r\n            }\r\n            update: {\r\n              // groups are transparent by default\r\n              opacity: {value: 1}\r\n            }\r\n            hover: {\r\n              opacity: {value: 0.7}\r\n            }\r\n          }\r\n          marks: [\r\n            {\r\n              type: text\r\n              // if true, it will prevent clicking on the button when over text.\r\n              interactive: false\r\n              encode: {\r\n                enter: {\r\n                  // center text in the paren group\r\n                  xc: {\r\n                    field: {group: \"width\"}\r\n                    mult: 0.5\r\n                  }\r\n                  yc: {\r\n                    field: {group: \"height\"}\r\n                    mult: 0.5\r\n                    offset: 2\r\n                  }\r\n                  align: {value: \"center\"}\r\n                  baseline: {value: \"middle\"}\r\n                  fontWeight: {value: \"bold\"}\r\n                  text: {value: \"Show All\"}\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  signals: [\r\n    {\r\n      // used to highlight traffic to/from the same country\r\n      name: groupHover\r\n      value: {}\r\n      on: [\r\n        {\r\n          events: @groupMark:mouseover\r\n          update: \"{stk1:datum.stack=='stk1' \u0026\u0026 datum.grpId, stk2:datum.stack=='stk2' \u0026\u0026 datum.grpId}\"\r\n        }\r\n        {events: \"mouseout\", update: \"{}\"}\r\n      ]\r\n    }\r\n    // used to filter only the data related to the selected country\r\n    {\r\n      name: groupSelector\r\n      value: false\r\n      on: [\r\n        {\r\n          // Clicking groupMark sets this signal to the filter values\r\n          events: @groupMark:click!\r\n          update: \"{stack:datum.stack, stk1:datum.stack=='stk1' \u0026\u0026 datum.grpId, stk2:datum.stack=='stk2' \u0026\u0026 datum.grpId}\"\r\n        }\r\n        {\r\n          // Clicking \"show all\" button, or double-clicking anywhere resets it\r\n          events: [\r\n            {type: \"click\", markname: \"groupReset\"}\r\n            {type: \"dblclick\"}\r\n          ]\r\n          update: \"false\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
                        },
                        "title": "[GCP] Sankey Source to Destination VPC",
                        "type": "vega",
                        "uiState": {}
                    }
                },
                "gridData": {
                    "h": 15,
                    "i": "4a23ce96-6f3b-4ae0-bec2-dc1594cedef6",
                    "w": 24,
                    "x": 24,
                    "y": 26
                },
                "panelIndex": "4a23ce96-6f3b-4ae0-bec2-dc1594cedef6",
                "title": "Sankey Source to Destination VPC",
                "type": "visualization",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "enhancements": {},
                    "hidePanelTitles": false,
                    "savedVis": {
                        "data": {
                            "aggs": [],
                            "searchSource": {
                                "filter": [
                                    {
                                        "$state": {
                                            "store": "appState"
                                        },
                                        "meta": {
                                            "alias": null,
                                            "disabled": false,
                                            "indexRefName": "kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index",
                                            "key": "data_stream.dataset",
                                            "negate": false,
                                            "params": {
                                                "query": "gcp.vpcflow"
                                            },
                                            "type": "phrase"
                                        },
                                        "query": {
                                            "match_phrase": {
                                                "data_stream.dataset": "gcp.vpcflow"
                                            }
                                        }
                                    }
                                ],
                                "query": {
                                    "language": "kuery",
                                    "query": ""
                                }
                            }
                        },
                        "description": "",
                        "params": {
                            "spec": "{\r\n  $schema: https://vega.github.io/schema/vega/v3.0.json\r\n  data: [\r\n    {\r\n      // query ES based on the currently selected time range and filter string\r\n      name: rawData\r\n      url: {\r\n        %context%: true\r\n        %timefield%: @timestamp\r\n        index: logs*\r\n        body: {\r\n          size: 0\r\n          aggs: {\r\n            table: {\r\n              composite: {\r\n                size: 10000\r\n                sources: [\r\n                  {\r\n                    stk1: {\r\n                      terms: {field: \"source.domain\"}\r\n                    }\r\n                  }\r\n                  {\r\n                    stk2: {\r\n                      terms: {field: \"destination.domain\"}\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // From the result, take just the data we are interested in\r\n      format: {property: \"aggregations.table.buckets\"}\r\n      // Convert key.stk1 -\u003e stk1 for simpler access below\r\n      transform: [\r\n        {type: \"formula\", expr: \"datum.key.stk1\", as: \"stk1\"}\r\n        {type: \"formula\", expr: \"datum.key.stk2\", as: \"stk2\"}\r\n        {type: \"formula\", expr: \"datum.doc_count\", as: \"size\"}\r\n      ]\r\n    }\r\n    {\r\n      name: nodes\r\n      source: rawData\r\n      transform: [\r\n        // when a country is selected, filter out unrelated data\r\n        {\r\n          type: filter\r\n          expr: !groupSelector || groupSelector.stk1 == datum.stk1 || groupSelector.stk2 == datum.stk2\r\n        }\r\n        // Set new key for later lookups - identifies each node\r\n        {type: \"formula\", expr: \"datum.stk1+datum.stk2\", as: \"key\"}\r\n        // instead of each table row, create two new rows,\r\n        // one for the source (stack=stk1) and one for destination node (stack=stk2).\r\n        // The country code stored in stk1 and stk2 fields is placed into grpId field.\r\n        {\r\n          type: fold\r\n          fields: [\"stk1\", \"stk2\"]\r\n          as: [\"stack\", \"grpId\"]\r\n        }\r\n        // Create a sortkey, different for stk1 and stk2 stacks.\r\n        // Space separator ensures proper sort order in some corner cases.\r\n        {\r\n          type: formula\r\n          expr: datum.stack == 'stk1' ? datum.stk1+' '+datum.stk2 : datum.stk2+' '+datum.stk1\r\n          as: sortField\r\n        }\r\n        // Calculate y0 and y1 positions for stacking nodes one on top of the other,\r\n        // independently for each stack, and ensuring they are in the proper order,\r\n        // alphabetical from the top (reversed on the y axis)\r\n        {\r\n          type: stack\r\n          groupby: [\"stack\"]\r\n          sort: {field: \"sortField\", order: \"descending\"}\r\n          field: size\r\n        }\r\n        // calculate vertical center point for each node, used to draw edges\r\n        {type: \"formula\", expr: \"(datum.y0+datum.y1)/2\", as: \"yc\"}\r\n      ]\r\n    }\r\n    {\r\n      name: groups\r\n      source: nodes\r\n      transform: [\r\n        // combine all nodes into country groups, summing up the doc counts\r\n        {\r\n          type: aggregate\r\n          groupby: [\"stack\", \"grpId\"]\r\n          fields: [\"size\"]\r\n          ops: [\"sum\"]\r\n          as: [\"total\"]\r\n        }\r\n        // re-calculate the stacking y0,y1 values\r\n        {\r\n          type: stack\r\n          groupby: [\"stack\"]\r\n          sort: {field: \"grpId\", order: \"descending\"}\r\n          field: total\r\n        }\r\n        // project y0 and y1 values to screen coordinates\r\n        // doing it once here instead of doing it several times in marks\r\n        {type: \"formula\", expr: \"scale('y', datum.y0)\", as: \"scaledY0\"}\r\n        {type: \"formula\", expr: \"scale('y', datum.y1)\", as: \"scaledY1\"}\r\n        // boolean flag if the label should be on the right of the stack\r\n        {type: \"formula\", expr: \"datum.stack == 'stk1'\", as: \"rightLabel\"}\r\n        // Calculate traffic percentage for this country using \"y\" scale\r\n        // domain upper bound, which represents the total traffic\r\n        {\r\n          type: formula\r\n          expr: datum.total/domain('y')[1]\r\n          as: percentage\r\n        }\r\n      ]\r\n    }\r\n    {\r\n      // This is a temp lookup table with all the 'stk2' stack nodes\r\n      name: destinationNodes\r\n      source: nodes\r\n      transform: [\r\n        {type: \"filter\", expr: \"datum.stack == 'stk2'\"}\r\n      ]\r\n    }\r\n    {\r\n      name: edges\r\n      source: nodes\r\n      transform: [\r\n        // we only want nodes from the left stack\r\n        {type: \"filter\", expr: \"datum.stack == 'stk1'\"}\r\n        // find corresponding node from the right stack, keep it as \"target\"\r\n        {\r\n          type: lookup\r\n          from: destinationNodes\r\n          key: key\r\n          fields: [\"key\"]\r\n          as: [\"target\"]\r\n        }\r\n        // calculate SVG link path between stk1 and stk2 stacks for the node pair\r\n        {\r\n          type: linkpath\r\n          orient: horizontal\r\n          shape: diagonal\r\n          sourceY: {expr: \"scale('y', datum.yc)\"}\r\n          sourceX: {expr: \"scale('x', 'stk1') + bandwidth('x')\"}\r\n          targetY: {expr: \"scale('y', datum.target.yc)\"}\r\n          targetX: {expr: \"scale('x', 'stk2')\"}\r\n        }\r\n        // A little trick to calculate the thickness of the line.\r\n        // The value needs to be the same as the hight of the node, but scaling\r\n        // size to screen's height gives inversed value because screen's Y\r\n        // coordinate goes from the top to the bottom, whereas the graph's Y=0\r\n        // is at the bottom. So subtracting scaled doc count from screen height\r\n        // (which is the \"lower\" bound of the \"y\" scale) gives us the right value\r\n        {\r\n          type: formula\r\n          expr: range('y')[0]-scale('y', datum.size)\r\n          as: strokeWidth\r\n        }\r\n        // Tooltip needs individual link's percentage of all traffic\r\n        {\r\n          type: formula\r\n          expr: datum.size/domain('y')[1]\r\n          as: percentage\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  scales: [\r\n    {\r\n      // calculates horizontal stack positioning\r\n      name: x\r\n      type: band\r\n      range: width\r\n      domain: [\"stk1\", \"stk2\"]\r\n      paddingOuter: 0.05\r\n      paddingInner: 0.95\r\n    }\r\n    {\r\n      // this scale goes up as high as the highest y1 value of all nodes\r\n      name: y\r\n      type: linear\r\n      range: height\r\n      domain: {data: \"nodes\", field: \"y1\"}\r\n    }\r\n    {\r\n      // use rawData to ensure the colors stay the same when clicking.\r\n      name: color\r\n      type: ordinal\r\n      range: category\r\n      domain: {data: \"rawData\", fields: [\"stk1\", \"stk2\"]}\r\n    }\r\n    {\r\n      // this scale is used to map internal ids (stk1, stk2) to stack names\r\n      name: stackNames\r\n      type: ordinal\r\n      range: [\"Source\", \"Destination\"]\r\n      domain: [\"stk1\", \"stk2\"]\r\n    }\r\n  ]\r\n  axes: [\r\n    {\r\n      // x axis should use custom label formatting to print proper stack names\r\n      orient: bottom\r\n      scale: x\r\n      encode: {\r\n        labels: {\r\n          update: {\r\n            text: {scale: \"stackNames\", field: \"value\"}\r\n          }\r\n        }\r\n      }\r\n    }\r\n    {orient: \"left\", scale: \"y\"}\r\n  ]\r\n  marks: [\r\n    {\r\n      // draw the connecting line between stacks\r\n      type: path\r\n      name: edgeMark\r\n      from: {data: \"edges\"}\r\n      // this prevents some autosizing issues with large strokeWidth for paths\r\n      clip: true\r\n      encode: {\r\n        update: {\r\n          // By default use color of the left node, except when showing traffic\r\n          // from just one country, in which case use destination color.\r\n          stroke: [\r\n            {\r\n              test: groupSelector \u0026\u0026 groupSelector.stack=='stk1'\r\n              scale: color\r\n              field: stk2\r\n            }\r\n            {scale: \"color\", field: \"stk1\"}\r\n          ]\r\n          strokeWidth: {field: \"strokeWidth\"}\r\n          path: {field: \"path\"}\r\n          // when showing all traffic, and hovering over a country,\r\n          // highlight the traffic from that country.\r\n          strokeOpacity: {\r\n            signal: !groupSelector \u0026\u0026 (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 0.9 : 0.3\r\n          }\r\n          // Ensure that the hover-selected edges show on top\r\n          zindex: {\r\n            signal: !groupSelector \u0026\u0026 (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 1 : 0\r\n          }\r\n          // format tooltip string\r\n          tooltip: {\r\n            signal: datum.stk1 + ' \u0026#x2192; ' + datum.stk2 + '    ' + format(datum.size, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\r\n          }\r\n        }\r\n        // Simple mouseover highlighting of a single line\r\n        hover: {\r\n          strokeOpacity: {value: 1}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // draw stack groups (countries)\r\n      type: rect\r\n      name: groupMark\r\n      from: {data: \"groups\"}\r\n      encode: {\r\n        enter: {\r\n          fill: {scale: \"color\", field: \"grpId\"}\r\n          width: {scale: \"x\", band: 1}\r\n        }\r\n        update: {\r\n          x: {scale: \"x\", field: \"stack\"}\r\n          y: {field: \"scaledY0\"}\r\n          y2: {field: \"scaledY1\"}\r\n          fillOpacity: {value: 0.6}\r\n          tooltip: {\r\n            signal: datum.grpId + '   ' + format(datum.total, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\r\n          }\r\n        }\r\n        hover: {\r\n          fillOpacity: {value: 1}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // draw country code labels on the inner side of the stack\r\n      type: text\r\n      from: {data: \"groups\"}\r\n      // don't process events for the labels - otherwise line mouseover is unclean\r\n      interactive: false\r\n      encode: {\r\n        update: {\r\n          // depending on which stack it is, position x with some padding\r\n          x: {\r\n            signal: scale('x', datum.stack) + (datum.rightLabel ? bandwidth('x') + 8 : -8)\r\n          }\r\n          // middle of the group\r\n          yc: {signal: \"(datum.scaledY0 + datum.scaledY1)/2\"}\r\n          align: {signal: \"datum.rightLabel ? 'left' : 'right'\"}\r\n          baseline: {value: \"middle\"}\r\n          fontWeight: {value: \"bold\"}\r\n          // only show text label if the group's height is large enough\r\n          text: {signal: \"abs(datum.scaledY0-datum.scaledY1) \u003e 13 ? datum.grpId : ''\"}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // Create a \"show all\" button. Shown only when a country is selected.\r\n      type: group\r\n      data: [\r\n        // We need to make the button show only when groupSelector signal is true.\r\n        // Each mark is drawn as many times as there are elements in the backing data.\r\n        // Which means that if values list is empty, it will not be drawn.\r\n        // Here I create a data source with one empty object, and filter that list\r\n        // based on the signal value. This can only be done in a group.\r\n        {\r\n          name: dataForShowAll\r\n          values: [{}]\r\n          transform: [{type: \"filter\", expr: \"groupSelector\"}]\r\n        }\r\n      ]\r\n      // Set button size and positioning\r\n      encode: {\r\n        enter: {\r\n          xc: {signal: \"width/2\"}\r\n          y: {value: 30}\r\n          width: {value: 80}\r\n          height: {value: 30}\r\n        }\r\n      }\r\n      marks: [\r\n        {\r\n          // This group is shown as a button with rounded corners.\r\n          type: group\r\n          // mark name allows signal capturing\r\n          name: groupReset\r\n          // Only shows button if dataForShowAll has values.\r\n          from: {data: \"dataForShowAll\"}\r\n          encode: {\r\n            enter: {\r\n              cornerRadius: {value: 6}\r\n              fill: {value: \"#f5f5f5\"}\r\n              stroke: {value: \"#c1c1c1\"}\r\n              strokeWidth: {value: 2}\r\n              // use parent group's size\r\n              height: {\r\n                field: {group: \"height\"}\r\n              }\r\n              width: {\r\n                field: {group: \"width\"}\r\n              }\r\n            }\r\n            update: {\r\n              // groups are transparent by default\r\n              opacity: {value: 1}\r\n            }\r\n            hover: {\r\n              opacity: {value: 0.7}\r\n            }\r\n          }\r\n          marks: [\r\n            {\r\n              type: text\r\n              // if true, it will prevent clicking on the button when over text.\r\n              interactive: false\r\n              encode: {\r\n                enter: {\r\n                  // center text in the paren group\r\n                  xc: {\r\n                    field: {group: \"width\"}\r\n                    mult: 0.5\r\n                  }\r\n                  yc: {\r\n                    field: {group: \"height\"}\r\n                    mult: 0.5\r\n                    offset: 2\r\n                  }\r\n                  align: {value: \"center\"}\r\n                  baseline: {value: \"middle\"}\r\n                  fontWeight: {value: \"bold\"}\r\n                  text: {value: \"Show All\"}\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  signals: [\r\n    {\r\n      // used to highlight traffic to/from the same country\r\n      name: groupHover\r\n      value: {}\r\n      on: [\r\n        {\r\n          events: @groupMark:mouseover\r\n          update: \"{stk1:datum.stack=='stk1' \u0026\u0026 datum.grpId, stk2:datum.stack=='stk2' \u0026\u0026 datum.grpId}\"\r\n        }\r\n        {events: \"mouseout\", update: \"{}\"}\r\n      ]\r\n    }\r\n    // used to filter only the data related to the selected country\r\n    {\r\n      name: groupSelector\r\n      value: false\r\n      on: [\r\n        {\r\n          // Clicking groupMark sets this signal to the filter values\r\n          events: @groupMark:click!\r\n          update: \"{stack:datum.stack, stk1:datum.stack=='stk1' \u0026\u0026 datum.grpId, stk2:datum.stack=='stk2' \u0026\u0026 datum.grpId}\"\r\n        }\r\n        {\r\n          // Clicking \"show all\" button, or double-clicking anywhere resets it\r\n          events: [\r\n            {type: \"click\", markname: \"groupReset\"}\r\n            {type: \"dblclick\"}\r\n          ]\r\n          update: \"false\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
                        },
                        "title": "[GCP] Sankey Source to Destination domain",
                        "type": "vega",
                        "uiState": {}
                    }
                },
                "gridData": {
                    "h": 15,
                    "i": "69f30a2e-79ff-4615-a83f-0aaf9b466ba7",
                    "w": 24,
                    "x": 0,
                    "y": 41
                },
                "panelIndex": "69f30a2e-79ff-4615-a83f-0aaf9b466ba7",
                "title": "Sankey Source to Destination domain",
                "type": "visualization",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "attributes": {
                        "references": [
                            {
                                "id": "logs-*",
                                "name": "indexpattern-datasource-layer-102a3f02-3222-48bb-8c57-b29990ae1d97",
                                "type": "index-pattern"
                            },
                            {
                                "id": "logs-*",
                                "name": "775d2dae-4f98-4d6f-8928-58b9f84d2c98",
                                "type": "index-pattern"
                            }
                        ],
                        "state": {
                            "adHocDataViews": {},
                            "datasourceStates": {
                                "formBased": {
                                    "layers": {
                                        "102a3f02-3222-48bb-8c57-b29990ae1d97": {
                                            "columnOrder": [
                                                "d25096dc-6121-497e-b444-42e92618a871",
                                                "5cb970e1-fff0-4b8c-8c74-7dc834bd2942",
                                                "0647e623-e5b9-4b20-afdf-eba0badc2297"
                                            ],
                                            "columns": {
                                                "0647e623-e5b9-4b20-afdf-eba0badc2297": {
                                                    "dataType": "number",
                                                    "isBucketed": false,
                                                    "label": "Sum of network.bytes",
                                                    "operationType": "sum",
                                                    "scale": "ratio",
                                                    "sourceField": "network.bytes"
                                                },
                                                "5cb970e1-fff0-4b8c-8c74-7dc834bd2942": {
                                                    "dataType": "date",
                                                    "isBucketed": true,
                                                    "label": "@timestamp",
                                                    "operationType": "date_histogram",
                                                    "params": {
                                                        "includeEmptyRows": true,
                                                        "interval": "auto"
                                                    },
                                                    "scale": "interval",
                                                    "sourceField": "@timestamp"
                                                },
                                                "d25096dc-6121-497e-b444-42e92618a871": {
                                                    "dataType": "string",
                                                    "isBucketed": true,
                                                    "label": "Top values of source.domain",
                                                    "operationType": "terms",
                                                    "params": {
                                                        "missingBucket": false,
                                                        "orderBy": {
                                                            "columnId": "0647e623-e5b9-4b20-afdf-eba0badc2297",
                                                            "type": "column"
                                                        },
                                                        "orderDirection": "desc",
                                                        "otherBucket": true,
                                                        "size": 5
                                                    },
                                                    "scale": "ordinal",
                                                    "sourceField": "source.domain"
                                                }
                                            },
                                            "incompleteColumns": {}
                                        }
                                    }
                                }
                            },
                            "filters": [
                                {
                                    "$state": {
                                        "store": "appState"
                                    },
                                    "meta": {
                                        "alias": null,
                                        "disabled": false,
                                        "field": "data_stream.dataset",
                                        "index": "775d2dae-4f98-4d6f-8928-58b9f84d2c98",
                                        "key": "data_stream.dataset",
                                        "negate": false,
                                        "params": {
                                            "query": "gcp.vpcflow"
                                        },
                                        "type": "phrase"
                                    },
                                    "query": {
                                        "match_phrase": {
                                            "data_stream.dataset": "gcp.vpcflow"
                                        }
                                    }
                                }
                            ],
                            "internalReferences": [],
                            "query": {
                                "language": "kuery",
                                "query": ""
                            },
                            "visualization": {
                                "axisTitlesVisibilitySettings": {
                                    "x": true,
                                    "yLeft": true,
                                    "yRight": true
                                },
                                "fittingFunction": "None",
                                "gridlinesVisibilitySettings": {
                                    "x": true,
                                    "yLeft": true,
                                    "yRight": true
                                },
                                "labelsOrientation": {
                                    "x": 0,
                                    "yLeft": 0,
                                    "yRight": 0
                                },
                                "layers": [
                                    {
                                        "accessors": [
                                            "0647e623-e5b9-4b20-afdf-eba0badc2297"
                                        ],
                                        "layerId": "102a3f02-3222-48bb-8c57-b29990ae1d97",
                                        "layerType": "data",
                                        "position": "top",
                                        "seriesType": "bar_stacked",
                                        "showGridlines": false,
                                        "splitAccessor": "d25096dc-6121-497e-b444-42e92618a871",
                                        "xAccessor": "5cb970e1-fff0-4b8c-8c74-7dc834bd2942"
                                    }
                                ],
                                "legend": {
                                    "isVisible": true,
                                    "legendSize": "auto",
                                    "position": "right"
                                },
                                "preferredSeriesType": "bar_stacked",
                                "tickLabelsVisibilitySettings": {
                                    "x": true,
                                    "yLeft": true,
                                    "yRight": true
                                },
                                "valueLabels": "hide",
                                "yLeftExtent": {
                                    "mode": "full"
                                },
                                "yRightExtent": {
                                    "mode": "full"
                                }
                            }
                        },
                        "title": "",
                        "type": "lens",
                        "visualizationType": "lnsXY"
                    },
                    "enhancements": {},
                    "hidePanelTitles": false
                },
                "gridData": {
                    "h": 7,
                    "i": "289e8233-5d54-49c7-9b3a-30bab73711bb",
                    "w": 24,
                    "x": 24,
                    "y": 41
                },
                "panelIndex": "289e8233-5d54-49c7-9b3a-30bab73711bb",
                "title": "Sum of bytes per source",
                "type": "lens",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "attributes": {
                        "references": [
                            {
                                "id": "logs-*",
                                "name": "indexpattern-datasource-layer-102a3f02-3222-48bb-8c57-b29990ae1d97",
                                "type": "index-pattern"
                            },
                            {
                                "id": "logs-*",
                                "name": "1a4ef3f1-b9e4-474b-bf32-2c86d1258905",
                                "type": "index-pattern"
                            }
                        ],
                        "state": {
                            "adHocDataViews": {},
                            "datasourceStates": {
                                "formBased": {
                                    "layers": {
                                        "102a3f02-3222-48bb-8c57-b29990ae1d97": {
                                            "columnOrder": [
                                                "d25096dc-6121-497e-b444-42e92618a871",
                                                "5cb970e1-fff0-4b8c-8c74-7dc834bd2942",
                                                "0647e623-e5b9-4b20-afdf-eba0badc2297"
                                            ],
                                            "columns": {
                                                "0647e623-e5b9-4b20-afdf-eba0badc2297": {
                                                    "customLabel": true,
                                                    "dataType": "number",
                                                    "isBucketed": false,
                                                    "label": "Bytes",
                                                    "operationType": "sum",
                                                    "params": {
                                                        "format": {
                                                            "id": "bytes",
                                                            "params": {
                                                                "decimals": 2
                                                            }
                                                        }
                                                    },
                                                    "scale": "ratio",
                                                    "sourceField": "network.bytes"
                                                },
                                                "5cb970e1-fff0-4b8c-8c74-7dc834bd2942": {
                                                    "dataType": "date",
                                                    "isBucketed": true,
                                                    "label": "@timestamp",
                                                    "operationType": "date_histogram",
                                                    "params": {
                                                        "includeEmptyRows": true,
                                                        "interval": "auto"
                                                    },
                                                    "scale": "interval",
                                                    "sourceField": "@timestamp"
                                                },
                                                "d25096dc-6121-497e-b444-42e92618a871": {
                                                    "dataType": "string",
                                                    "isBucketed": true,
                                                    "label": "Top values of destination.domain",
                                                    "operationType": "terms",
                                                    "params": {
                                                        "missingBucket": false,
                                                        "orderBy": {
                                                            "columnId": "0647e623-e5b9-4b20-afdf-eba0badc2297",
                                                            "type": "column"
                                                        },
                                                        "orderDirection": "desc",
                                                        "otherBucket": true,
                                                        "size": 5
                                                    },
                                                    "scale": "ordinal",
                                                    "sourceField": "destination.domain"
                                                }
                                            },
                                            "incompleteColumns": {}
                                        }
                                    }
                                }
                            },
                            "filters": [
                                {
                                    "$state": {
                                        "store": "appState"
                                    },
                                    "meta": {
                                        "alias": null,
                                        "disabled": false,
                                        "field": "data_stream.dataset",
                                        "index": "1a4ef3f1-b9e4-474b-bf32-2c86d1258905",
                                        "key": "data_stream.dataset",
                                        "negate": false,
                                        "params": {
                                            "query": "gcp.vpcflow"
                                        },
                                        "type": "phrase"
                                    },
                                    "query": {
                                        "match_phrase": {
                                            "data_stream.dataset": "gcp.vpcflow"
                                        }
                                    }
                                }
                            ],
                            "internalReferences": [],
                            "query": {
                                "language": "kuery",
                                "query": ""
                            },
                            "visualization": {
                                "axisTitlesVisibilitySettings": {
                                    "x": true,
                                    "yLeft": true,
                                    "yRight": true
                                },
                                "fittingFunction": "None",
                                "gridlinesVisibilitySettings": {
                                    "x": true,
                                    "yLeft": true,
                                    "yRight": true
                                },
                                "labelsOrientation": {
                                    "x": 0,
                                    "yLeft": 0,
                                    "yRight": 0
                                },
                                "layers": [
                                    {
                                        "accessors": [
                                            "0647e623-e5b9-4b20-afdf-eba0badc2297"
                                        ],
                                        "layerId": "102a3f02-3222-48bb-8c57-b29990ae1d97",
                                        "layerType": "data",
                                        "position": "top",
                                        "seriesType": "bar_stacked",
                                        "showGridlines": false,
                                        "splitAccessor": "d25096dc-6121-497e-b444-42e92618a871",
                                        "xAccessor": "5cb970e1-fff0-4b8c-8c74-7dc834bd2942"
                                    }
                                ],
                                "legend": {
                                    "isVisible": true,
                                    "legendSize": "auto",
                                    "position": "right"
                                },
                                "preferredSeriesType": "bar_stacked",
                                "tickLabelsVisibilitySettings": {
                                    "x": true,
                                    "yLeft": true,
                                    "yRight": true
                                },
                                "valueLabels": "hide",
                                "yLeftExtent": {
                                    "mode": "full"
                                },
                                "yRightExtent": {
                                    "mode": "full"
                                }
                            }
                        },
                        "title": "",
                        "type": "lens",
                        "visualizationType": "lnsXY"
                    },
                    "enhancements": {},
                    "hidePanelTitles": false
                },
                "gridData": {
                    "h": 8,
                    "i": "9d413864-ae26-4e79-a93d-df49fbad4913",
                    "w": 24,
                    "x": 24,
                    "y": 48
                },
                "panelIndex": "9d413864-ae26-4e79-a93d-df49fbad4913",
                "title": "Sum of bytes per destination",
                "type": "lens",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "enhancements": {},
                    "hidePanelTitles": false,
                    "savedVis": {
                        "data": {
                            "aggs": [],
                            "searchSource": {
                                "filter": [
                                    {
                                        "$state": {
                                            "store": "appState"
                                        },
                                        "meta": {
                                            "alias": null,
                                            "disabled": false,
                                            "indexRefName": "kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index",
                                            "key": "data_stream.dataset",
                                            "negate": false,
                                            "params": {
                                                "query": "gcp.vpcflow"
                                            },
                                            "type": "phrase"
                                        },
                                        "query": {
                                            "match_phrase": {
                                                "data_stream.dataset": "gcp.vpcflow"
                                            }
                                        }
                                    }
                                ],
                                "query": {
                                    "language": "kuery",
                                    "query": ""
                                }
                            }
                        },
                        "description": "",
                        "params": {
                            "spec": "{\r\n  $schema: https://vega.github.io/schema/vega/v3.0.json\r\n  data: [\r\n    {\r\n      // query ES based on the currently selected time range and filter string\r\n      name: rawData\r\n      url: {\r\n        %context%: true\r\n        %timefield%: @timestamp\r\n        index: logs*\r\n        body: {\r\n          size: 0\r\n          aggs: {\r\n            table: {\r\n              composite: {\r\n                size: 10000\r\n                sources: [\r\n                  {\r\n                    stk1: {\r\n                      terms: {field: \"source.as.organization.name\"}\r\n                    }\r\n                  }\r\n                  {\r\n                    stk2: {\r\n                      terms: {field: \"destination.as.organization.name\"}\r\n                    }\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // From the result, take just the data we are interested in\r\n      format: {property: \"aggregations.table.buckets\"}\r\n      // Convert key.stk1 -\u003e stk1 for simpler access below\r\n      transform: [\r\n        {type: \"formula\", expr: \"datum.key.stk1\", as: \"stk1\"}\r\n        {type: \"formula\", expr: \"datum.key.stk2\", as: \"stk2\"}\r\n        {type: \"formula\", expr: \"datum.doc_count\", as: \"size\"}\r\n      ]\r\n    }\r\n    {\r\n      name: nodes\r\n      source: rawData\r\n      transform: [\r\n        // when a country is selected, filter out unrelated data\r\n        {\r\n          type: filter\r\n          expr: !groupSelector || groupSelector.stk1 == datum.stk1 || groupSelector.stk2 == datum.stk2\r\n        }\r\n        // Set new key for later lookups - identifies each node\r\n        {type: \"formula\", expr: \"datum.stk1+datum.stk2\", as: \"key\"}\r\n        // instead of each table row, create two new rows,\r\n        // one for the source (stack=stk1) and one for destination node (stack=stk2).\r\n        // The country code stored in stk1 and stk2 fields is placed into grpId field.\r\n        {\r\n          type: fold\r\n          fields: [\"stk1\", \"stk2\"]\r\n          as: [\"stack\", \"grpId\"]\r\n        }\r\n        // Create a sortkey, different for stk1 and stk2 stacks.\r\n        // Space separator ensures proper sort order in some corner cases.\r\n        {\r\n          type: formula\r\n          expr: datum.stack == 'stk1' ? datum.stk1+' '+datum.stk2 : datum.stk2+' '+datum.stk1\r\n          as: sortField\r\n        }\r\n        // Calculate y0 and y1 positions for stacking nodes one on top of the other,\r\n        // independently for each stack, and ensuring they are in the proper order,\r\n        // alphabetical from the top (reversed on the y axis)\r\n        {\r\n          type: stack\r\n          groupby: [\"stack\"]\r\n          sort: {field: \"sortField\", order: \"descending\"}\r\n          field: size\r\n        }\r\n        // calculate vertical center point for each node, used to draw edges\r\n        {type: \"formula\", expr: \"(datum.y0+datum.y1)/2\", as: \"yc\"}\r\n      ]\r\n    }\r\n    {\r\n      name: groups\r\n      source: nodes\r\n      transform: [\r\n        // combine all nodes into country groups, summing up the doc counts\r\n        {\r\n          type: aggregate\r\n          groupby: [\"stack\", \"grpId\"]\r\n          fields: [\"size\"]\r\n          ops: [\"sum\"]\r\n          as: [\"total\"]\r\n        }\r\n        // re-calculate the stacking y0,y1 values\r\n        {\r\n          type: stack\r\n          groupby: [\"stack\"]\r\n          sort: {field: \"grpId\", order: \"descending\"}\r\n          field: total\r\n        }\r\n        // project y0 and y1 values to screen coordinates\r\n        // doing it once here instead of doing it several times in marks\r\n        {type: \"formula\", expr: \"scale('y', datum.y0)\", as: \"scaledY0\"}\r\n        {type: \"formula\", expr: \"scale('y', datum.y1)\", as: \"scaledY1\"}\r\n        // boolean flag if the label should be on the right of the stack\r\n        {type: \"formula\", expr: \"datum.stack == 'stk1'\", as: \"rightLabel\"}\r\n        // Calculate traffic percentage for this country using \"y\" scale\r\n        // domain upper bound, which represents the total traffic\r\n        {\r\n          type: formula\r\n          expr: datum.total/domain('y')[1]\r\n          as: percentage\r\n        }\r\n      ]\r\n    }\r\n    {\r\n      // This is a temp lookup table with all the 'stk2' stack nodes\r\n      name: destinationNodes\r\n      source: nodes\r\n      transform: [\r\n        {type: \"filter\", expr: \"datum.stack == 'stk2'\"}\r\n      ]\r\n    }\r\n    {\r\n      name: edges\r\n      source: nodes\r\n      transform: [\r\n        // we only want nodes from the left stack\r\n        {type: \"filter\", expr: \"datum.stack == 'stk1'\"}\r\n        // find corresponding node from the right stack, keep it as \"target\"\r\n        {\r\n          type: lookup\r\n          from: destinationNodes\r\n          key: key\r\n          fields: [\"key\"]\r\n          as: [\"target\"]\r\n        }\r\n        // calculate SVG link path between stk1 and stk2 stacks for the node pair\r\n        {\r\n          type: linkpath\r\n          orient: horizontal\r\n          shape: diagonal\r\n          sourceY: {expr: \"scale('y', datum.yc)\"}\r\n          sourceX: {expr: \"scale('x', 'stk1') + bandwidth('x')\"}\r\n          targetY: {expr: \"scale('y', datum.target.yc)\"}\r\n          targetX: {expr: \"scale('x', 'stk2')\"}\r\n        }\r\n        // A little trick to calculate the thickness of the line.\r\n        // The value needs to be the same as the hight of the node, but scaling\r\n        // size to screen's height gives inversed value because screen's Y\r\n        // coordinate goes from the top to the bottom, whereas the graph's Y=0\r\n        // is at the bottom. So subtracting scaled doc count from screen height\r\n        // (which is the \"lower\" bound of the \"y\" scale) gives us the right value\r\n        {\r\n          type: formula\r\n          expr: range('y')[0]-scale('y', datum.size)\r\n          as: strokeWidth\r\n        }\r\n        // Tooltip needs individual link's percentage of all traffic\r\n        {\r\n          type: formula\r\n          expr: datum.size/domain('y')[1]\r\n          as: percentage\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  scales: [\r\n    {\r\n      // calculates horizontal stack positioning\r\n      name: x\r\n      type: band\r\n      range: width\r\n      domain: [\"stk1\", \"stk2\"]\r\n      paddingOuter: 0.05\r\n      paddingInner: 0.95\r\n    }\r\n    {\r\n      // this scale goes up as high as the highest y1 value of all nodes\r\n      name: y\r\n      type: linear\r\n      range: height\r\n      domain: {data: \"nodes\", field: \"y1\"}\r\n    }\r\n    {\r\n      // use rawData to ensure the colors stay the same when clicking.\r\n      name: color\r\n      type: ordinal\r\n      range: category\r\n      domain: {data: \"rawData\", fields: [\"stk1\", \"stk2\"]}\r\n    }\r\n    {\r\n      // this scale is used to map internal ids (stk1, stk2) to stack names\r\n      name: stackNames\r\n      type: ordinal\r\n      range: [\"Source\", \"Destination\"]\r\n      domain: [\"stk1\", \"stk2\"]\r\n    }\r\n  ]\r\n  axes: [\r\n    {\r\n      // x axis should use custom label formatting to print proper stack names\r\n      orient: bottom\r\n      scale: x\r\n      encode: {\r\n        labels: {\r\n          update: {\r\n            text: {scale: \"stackNames\", field: \"value\"}\r\n          }\r\n        }\r\n      }\r\n    }\r\n    {orient: \"left\", scale: \"y\"}\r\n  ]\r\n  marks: [\r\n    {\r\n      // draw the connecting line between stacks\r\n      type: path\r\n      name: edgeMark\r\n      from: {data: \"edges\"}\r\n      // this prevents some autosizing issues with large strokeWidth for paths\r\n      clip: true\r\n      encode: {\r\n        update: {\r\n          // By default use color of the left node, except when showing traffic\r\n          // from just one country, in which case use destination color.\r\n          stroke: [\r\n            {\r\n              test: groupSelector \u0026\u0026 groupSelector.stack=='stk1'\r\n              scale: color\r\n              field: stk2\r\n            }\r\n            {scale: \"color\", field: \"stk1\"}\r\n          ]\r\n          strokeWidth: {field: \"strokeWidth\"}\r\n          path: {field: \"path\"}\r\n          // when showing all traffic, and hovering over a country,\r\n          // highlight the traffic from that country.\r\n          strokeOpacity: {\r\n            signal: !groupSelector \u0026\u0026 (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 0.9 : 0.3\r\n          }\r\n          // Ensure that the hover-selected edges show on top\r\n          zindex: {\r\n            signal: !groupSelector \u0026\u0026 (groupHover.stk1 == datum.stk1 || groupHover.stk2 == datum.stk2) ? 1 : 0\r\n          }\r\n          // format tooltip string\r\n          tooltip: {\r\n            signal: datum.stk1 + ' \u0026#x2192; ' + datum.stk2 + '    ' + format(datum.size, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\r\n          }\r\n        }\r\n        // Simple mouseover highlighting of a single line\r\n        hover: {\r\n          strokeOpacity: {value: 1}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // draw stack groups (countries)\r\n      type: rect\r\n      name: groupMark\r\n      from: {data: \"groups\"}\r\n      encode: {\r\n        enter: {\r\n          fill: {scale: \"color\", field: \"grpId\"}\r\n          width: {scale: \"x\", band: 1}\r\n        }\r\n        update: {\r\n          x: {scale: \"x\", field: \"stack\"}\r\n          y: {field: \"scaledY0\"}\r\n          y2: {field: \"scaledY1\"}\r\n          fillOpacity: {value: 0.6}\r\n          tooltip: {\r\n            signal: datum.grpId + '   ' + format(datum.total, ',.0f') + '   (' + format(datum.percentage, '.1%') + ')'\r\n          }\r\n        }\r\n        hover: {\r\n          fillOpacity: {value: 1}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // draw country code labels on the inner side of the stack\r\n      type: text\r\n      from: {data: \"groups\"}\r\n      // don't process events for the labels - otherwise line mouseover is unclean\r\n      interactive: false\r\n      encode: {\r\n        update: {\r\n          // depending on which stack it is, position x with some padding\r\n          x: {\r\n            signal: scale('x', datum.stack) + (datum.rightLabel ? bandwidth('x') + 8 : -8)\r\n          }\r\n          // middle of the group\r\n          yc: {signal: \"(datum.scaledY0 + datum.scaledY1)/2\"}\r\n          align: {signal: \"datum.rightLabel ? 'left' : 'right'\"}\r\n          baseline: {value: \"middle\"}\r\n          fontWeight: {value: \"bold\"}\r\n          // only show text label if the group's height is large enough\r\n          text: {signal: \"abs(datum.scaledY0-datum.scaledY1) \u003e 13 ? datum.grpId : ''\"}\r\n        }\r\n      }\r\n    }\r\n    {\r\n      // Create a \"show all\" button. Shown only when a country is selected.\r\n      type: group\r\n      data: [\r\n        // We need to make the button show only when groupSelector signal is true.\r\n        // Each mark is drawn as many times as there are elements in the backing data.\r\n        // Which means that if values list is empty, it will not be drawn.\r\n        // Here I create a data source with one empty object, and filter that list\r\n        // based on the signal value. This can only be done in a group.\r\n        {\r\n          name: dataForShowAll\r\n          values: [{}]\r\n          transform: [{type: \"filter\", expr: \"groupSelector\"}]\r\n        }\r\n      ]\r\n      // Set button size and positioning\r\n      encode: {\r\n        enter: {\r\n          xc: {signal: \"width/2\"}\r\n          y: {value: 30}\r\n          width: {value: 80}\r\n          height: {value: 30}\r\n        }\r\n      }\r\n      marks: [\r\n        {\r\n          // This group is shown as a button with rounded corners.\r\n          type: group\r\n          // mark name allows signal capturing\r\n          name: groupReset\r\n          // Only shows button if dataForShowAll has values.\r\n          from: {data: \"dataForShowAll\"}\r\n          encode: {\r\n            enter: {\r\n              cornerRadius: {value: 6}\r\n              fill: {value: \"#f5f5f5\"}\r\n              stroke: {value: \"#c1c1c1\"}\r\n              strokeWidth: {value: 2}\r\n              // use parent group's size\r\n              height: {\r\n                field: {group: \"height\"}\r\n              }\r\n              width: {\r\n                field: {group: \"width\"}\r\n              }\r\n            }\r\n            update: {\r\n              // groups are transparent by default\r\n              opacity: {value: 1}\r\n            }\r\n            hover: {\r\n              opacity: {value: 0.7}\r\n            }\r\n          }\r\n          marks: [\r\n            {\r\n              type: text\r\n              // if true, it will prevent clicking on the button when over text.\r\n              interactive: false\r\n              encode: {\r\n                enter: {\r\n                  // center text in the paren group\r\n                  xc: {\r\n                    field: {group: \"width\"}\r\n                    mult: 0.5\r\n                  }\r\n                  yc: {\r\n                    field: {group: \"height\"}\r\n                    mult: 0.5\r\n                    offset: 2\r\n                  }\r\n                  align: {value: \"center\"}\r\n                  baseline: {value: \"middle\"}\r\n                  fontWeight: {value: \"bold\"}\r\n                  text: {value: \"Show All\"}\r\n                }\r\n              }\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n  signals: [\r\n    {\r\n      // used to highlight traffic to/from the same country\r\n      name: groupHover\r\n      value: {}\r\n      on: [\r\n        {\r\n          events: @groupMark:mouseover\r\n          update: \"{stk1:datum.stack=='stk1' \u0026\u0026 datum.grpId, stk2:datum.stack=='stk2' \u0026\u0026 datum.grpId}\"\r\n        }\r\n        {events: \"mouseout\", update: \"{}\"}\r\n      ]\r\n    }\r\n    // used to filter only the data related to the selected country\r\n    {\r\n      name: groupSelector\r\n      value: false\r\n      on: [\r\n        {\r\n          // Clicking groupMark sets this signal to the filter values\r\n          events: @groupMark:click!\r\n          update: \"{stack:datum.stack, stk1:datum.stack=='stk1' \u0026\u0026 datum.grpId, stk2:datum.stack=='stk2' \u0026\u0026 datum.grpId}\"\r\n        }\r\n        {\r\n          // Clicking \"show all\" button, or double-clicking anywhere resets it\r\n          events: [\r\n            {type: \"click\", markname: \"groupReset\"}\r\n            {type: \"dblclick\"}\r\n          ]\r\n          update: \"false\"\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n}"
                        },
                        "title": "[GCP] Sankey Source to Destination subnetwork",
                        "type": "vega",
                        "uiState": {}
                    }
                },
                "gridData": {
                    "h": 15,
                    "i": "eedf536b-4b23-4689-957b-482f4d7a3332",
                    "w": 24,
                    "x": 0,
                    "y": 56
                },
                "panelIndex": "eedf536b-4b23-4689-957b-482f4d7a3332",
                "title": "Sankey Source to Destination autonomous system (AS) org name",
                "type": "visualization",
                "version": "8.7.1"
            },
            {
                "embeddableConfig": {
                    "attributes": {
                        "references": [
                            {
                                "id": "logs-*",
                                "name": "indexpattern-datasource-layer-8929ffe2-4cf7-40b7-8e2c-1ee52bdd8d97",
                                "type": "index-pattern"
                            },
                            {
                                "id": "logs-*",
                                "name": "abef953e-0b21-4e7f-b488-92850705970c",
                                "type": "index-pattern"
                            }
                        ],
                        "state": {
                            "adHocDataViews": {},
                            "datasourceStates": {
                                "formBased": {
                                    "layers": {
                                        "8929ffe2-4cf7-40b7-8e2c-1ee52bdd8d97": {
                                            "columnOrder": [
                                                "06178db9-8ae7-4706-b479-29aea6be4d75",
                                                "313bb272-53cc-4d90-890e-d0952e9fd07f",
                                                "bbc2b648-d5e5-4ee1-baed-be4d1497e963"
                                            ],
                                            "columns": {
                                                "06178db9-8ae7-4706-b479-29aea6be4d75": {
                                                    "customLabel": true,
                                                    "dataType": "string",
                                                    "isBucketed": true,
                                                    "label": "Source AS Org",
                                                    "operationType": "terms",
                                                    "params": {
                                                        "missingBucket": true,
                                                        "orderBy": {
                                                            "columnId": "bbc2b648-d5e5-4ee1-baed-be4d1497e963",
                                                            "type": "column"
                                                        },
                                                        "orderDirection": "desc",
                                                        "otherBucket": true,
                                                        "size": 10
                                                    },
                                                    "scale": "ordinal",
                                                    "sourceField": "source.as.organization.name"
                                                },
                                                "313bb272-53cc-4d90-890e-d0952e9fd07f": {
                                                    "customLabel": true,
                                                    "dataType": "string",
                                                    "isBucketed": true,
                                                    "label": "Destination AS Org",
                                                    "operationType": "terms",
                                                    "params": {
                                                        "missingBucket": true,
                                                        "orderBy": {
                                                            "columnId": "bbc2b648-d5e5-4ee1-baed-be4d1497e963",
                                                            "type": "column"
                                                        },
                                                        "orderDirection": "desc",
                                                        "otherBucket": true,
                                                        "size": 10
                                                    },
                                                    "scale": "ordinal",
                                                    "sourceField": "destination.as.organization.name"
                                                },
                                                "bbc2b648-d5e5-4ee1-baed-be4d1497e963": {
                                                    "customLabel": true,
                                                    "dataType": "number",
                                                    "isBucketed": false,
                                                    "label": "Total bytes",
                                                    "operationType": "sum",
                                                    "params": {
                                                        "format": {
                                                            "id": "bytes",
                                                            "params": {
                                                                "decimals": 2
                                                            }
                                                        }
                                                    },
                                                    "scale": "ratio",
                                                    "sourceField": "network.bytes"
                                                }
                                            },
                                            "incompleteColumns": {}
                                        }
                                    }
                                }
                            },
                            "filters": [
                                {
                                    "$state": {
                                        "store": "appState"
                                    },
                                    "meta": {
                                        "alias": null,
                                        "disabled": false,
                                        "field": "data_stream.dataset",
                                        "index": "abef953e-0b21-4e7f-b488-92850705970c",
                                        "key": "data_stream.dataset",
                                        "negate": false,
                                        "params": {
                                            "query": "gcp.vpcflow"
                                        },
                                        "type": "phrase"
                                    },
                                    "query": {
                                        "match_phrase": {
                                            "data_stream.dataset": "gcp.vpcflow"
                                        }
                                    }
                                }
                            ],
                            "internalReferences": [],
                            "query": {
                                "language": "kuery",
                                "query": ""
                            },
                            "visualization": {
                                "gridConfig": {
                                    "isCellLabelVisible": false,
                                    "isXAxisLabelVisible": true,
                                    "isXAxisTitleVisible": true,
                                    "isYAxisLabelVisible": true,
                                    "isYAxisTitleVisible": true,
                                    "type": "lens_heatmap_grid"
                                },
                                "layerId": "8929ffe2-4cf7-40b7-8e2c-1ee52bdd8d97",
                                "layerType": "data",
                                "legend": {
                                    "isVisible": false,
                                    "legendSize": "auto",
                                    "maxLines": 2,
                                    "position": "right",
                                    "shouldTruncate": false,
                                    "type": "lens_heatmap_legendConfig"
                                },
                                "palette": {
                                    "accessor": "bbc2b648-d5e5-4ee1-baed-be4d1497e963",
                                    "name": "negative",
                                    "params": {
                                        "name": "negative",
                                        "rangeMax": 80,
                                        "rangeMin": 0,
                                        "reverse": false,
                                        "stops": [
                                            {
                                                "color": "#fbddd6",
                                                "stop": 0
                                            },
                                            {
                                                "color": "#f3bbaf",
                                                "stop": 20
                                            },
                                            {
                                                "color": "#e99a89",
                                                "stop": 40
                                            },
                                            {
                                                "color": "#db7965",
                                                "stop": 60
                                            },
                                            {
                                                "color": "#cc5642",
                                                "stop": 80
                                            }
                                        ]
                                    },
                                    "type": "palette"
                                },
                                "shape": "heatmap",
                                "valueAccessor": "bbc2b648-d5e5-4ee1-baed-be4d1497e963",
                                "xAccessor": "313bb272-53cc-4d90-890e-d0952e9fd07f",
                                "yAccessor": "06178db9-8ae7-4706-b479-29aea6be4d75"
                            }
                        },
                        "title": "",
                        "type": "lens",
                        "visualizationType": "lnsHeatmap"
                    },
                    "enhancements": {},
                    "hidePanelTitles": false
                },
                "gridData": {
                    "h": 15,
                    "i": "fcaf1c3c-64a6-47ce-90a2-8226e788c062",
                    "w": 24,
                    "x": 24,
                    "y": 56
                },
                "panelIndex": "fcaf1c3c-64a6-47ce-90a2-8226e788c062",
                "title": "Sum of bytes between source and destination",
                "type": "lens",
                "version": "8.7.1"
            }
        ],
        "timeRestore": false,
        "title": "[Logs GCP] VPC Flow",
        "version": 1
    },
    "coreMigrationVersion": "8.7.1",
    "created_at": "2023-07-19T15:43:54.052Z",
    "id": "gcp-9484a4cd-685f-450e-aeaa-728fbdbea20f",
    "migrationVersion": {
        "dashboard": "8.7.0"
    },
    "references": [
        {
            "id": "logs-*",
            "name": "fd65090b-d291-4771-865d-c5fa77a1b2a2:indexpattern-datasource-layer-9622b1fb-f543-4d05-b868-366fa865f9e7",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "fd65090b-d291-4771-865d-c5fa77a1b2a2:c601ab58-c4c4-45aa-b9ba-852226356372",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "4489b109-a7f8-4a9d-b85f-0fe613368eda:indexpattern-datasource-layer-9622b1fb-f543-4d05-b868-366fa865f9e7",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "4489b109-a7f8-4a9d-b85f-0fe613368eda:0aee1bff-9d1f-4651-b126-437df4cb99ba",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "061ff6b2-a70a-42dc-87fd-45d185b277ac:indexpattern-datasource-layer-9622b1fb-f543-4d05-b868-366fa865f9e7",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "061ff6b2-a70a-42dc-87fd-45d185b277ac:78c11486-badb-4c46-8f7f-9483b88fc07f",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "42eee1cd-e816-4f6e-a700-401e8ff1a2f5:indexpattern-datasource-layer-9622b1fb-f543-4d05-b868-366fa865f9e7",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "42eee1cd-e816-4f6e-a700-401e8ff1a2f5:a00f7a8d-d0aa-4fa6-8a94-1ba7c7a6262a",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "9714edf3-3894-4567-b8ec-99b863f4fa74:indexpattern-datasource-layer-9622b1fb-f543-4d05-b868-366fa865f9e7",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "9714edf3-3894-4567-b8ec-99b863f4fa74:5e9dfc1a-83f4-4bbd-a979-fb0c917938b5",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "efe8857e-d137-4c24-ad83-dd7ddbea8c9e:indexpattern-datasource-layer-9622b1fb-f543-4d05-b868-366fa865f9e7",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "efe8857e-d137-4c24-ad83-dd7ddbea8c9e:0708bf23-f9ba-4b7f-a706-40d436cd13af",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "8700819e-d34e-4ac8-8b65-e053db64f7b8:kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "6d32c209-a24d-4bf4-8651-83a187ed7946:kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "0f9ac1ed-f75b-4788-a9fe-9277d5e0551a:kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "4a23ce96-6f3b-4ae0-bec2-dc1594cedef6:kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "69f30a2e-79ff-4615-a83f-0aaf9b466ba7:kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "289e8233-5d54-49c7-9b3a-30bab73711bb:indexpattern-datasource-layer-102a3f02-3222-48bb-8c57-b29990ae1d97",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "289e8233-5d54-49c7-9b3a-30bab73711bb:775d2dae-4f98-4d6f-8928-58b9f84d2c98",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "9d413864-ae26-4e79-a93d-df49fbad4913:indexpattern-datasource-layer-102a3f02-3222-48bb-8c57-b29990ae1d97",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "9d413864-ae26-4e79-a93d-df49fbad4913:1a4ef3f1-b9e4-474b-bf32-2c86d1258905",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "eedf536b-4b23-4689-957b-482f4d7a3332:kibanaSavedObjectMeta.searchSourceJSON.filter[0].meta.index",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "fcaf1c3c-64a6-47ce-90a2-8226e788c062:indexpattern-datasource-layer-8929ffe2-4cf7-40b7-8e2c-1ee52bdd8d97",
            "type": "index-pattern"
        },
        {
            "id": "logs-*",
            "name": "fcaf1c3c-64a6-47ce-90a2-8226e788c062:abef953e-0b21-4e7f-b488-92850705970c",
            "type": "index-pattern"
        }
    ],
    "type": "dashboard"
}