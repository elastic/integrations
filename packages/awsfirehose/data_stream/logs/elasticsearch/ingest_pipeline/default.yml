description: Pipeline for rerouting logs streams from Amazon Data Firehose.
processors:
  - set:
      field: ecs.version
      value: 8.11.0
  - script:
      lang: painless
      source: |
        if (ctx.message == null) {
            return;
        }
        // AWS WAF Logs
        if ((ctx['aws.kinesis.name'] != null and ctx['aws.kinesis.name'].contains('aws-waf-logs-')) or
            (ctx['aws.cloudwatch.log_group'] != null and ctx['aws.cloudwatch.log_group'].contains('aws-waf-logs-')) or
            (ctx.message.contains('webaclld') and ctx.message.contains('terminatingRule') and
             ctx.message.contains('httpSource') and ctx.message.contains('ruleGroupList') and ctx.message.contains('rateBasedRuleList') and
             ctx.message.contains('nonTerminatingMatchingRules') and ctx.message.contains('httpRequest') and ctx.message.contains('labels'))) {
            ctx.event.dataset = 'aws.waf';
        }
        // AWS CloudTrail Logs
        else if (ctx['aws.cloudwatch.log_stream'] != null and ctx['aws.cloudwatch.log_stream'].contains('CloudTrail')) {
            ctx.event.dataset = 'aws.cloudtrail';
        }
        // AWS VPC Flow Logs
        else if (ctx.message.splitOnToken(" ").length == 14) {
            ctx.event.dataset = 'aws.vpcflow';
        }
        // AWS Firewall Logs
        else if (ctx.message.contains('firewall_name') and ctx.message.contains('availability_zone') and
                 ctx.message.contains('event_timestamp') and ctx.message.contains('event')) {
            ctx.event.dataset = 'aws.firewall_logs';
        }
        // AWS Route53 Resolver Logs
        else if (ctx.message.contains('version') and ctx.message.contains('account_id') and ctx.message.contains('region') and
                 ctx.message.contains('vpc_id') and ctx.message.contains('query_timestamp') and ctx.message.contains('query_name') and
                 ctx.message.contains('query_type') and ctx.message.contains('query_class') and ctx.message.contains('rcode') and
                 ctx.message.contains('answers') and ctx.message.contains('srcaddr') and ctx.message.contains('srcport') and
                 ctx.message.contains('transport') and ctx.message.contains('srcids')) {
            ctx.event.dataset = 'aws.route53_resolver_logs';
        }
        // AWS S3 Access Logs
        else if (ctx.message.length() > 0) {
            int tokenCount = 0;
            StringBuilder currentToken = new StringBuilder();
            String hostHeader = null;
            boolean insideQuotes = false;
            char[] chars = ctx.message.toCharArray();

            for (int i = 0; i < chars.length; i++) {
                char c = chars[i];
                if (c == ' ' and !insideQuotes) {
                    tokenCount++;
                    if (tokenCount == 23) {
                        hostHeader = currentToken.toString();
                    }
                    currentToken.setLength(0);
                } else if (c == '"') {
                    insideQuotes = !insideQuotes;
                } else {
                    currentToken.append(c);
                }
            }
            if (currentToken.length() > 0) {
                tokenCount++;
                if (tokenCount == 24) {
                    hostHeader = currentToken.toString();
                }
            }
            if ((hostHeader != null and hostHeader.contains('s3') and hostHeader.contains('amazonaws.com')) or tokenCount == 25) {
                ctx.event.dataset = 'aws.s3access';
            }
        }
        // AWS API Gateway Logs
        else if (ctx.message.contains('requestId') and ctx.message.contains('ip') and
                 ((ctx.message.contains('requestTime') and ctx.message.contains('httpMethod') and ctx.message.contains('routeKey') and
                   ctx.message.contains('status') and ctx.message.contains('protocol') and ctx.message.contains('responseLength')) or
                  (ctx.message.contains('caller') and ctx.message.contains('user') and ctx.message.contains('requestTime') and ctx.message.contains('httpMethod') and
                   ctx.message.contains('resourcePath') and ctx.message.contains('status') and ctx.message.contains('protocol') and
                   ctx.message.contains('responseLength')) or // Corrected from && to 'and', and || to 'or'
                  (ctx.message.contains('caller') and ctx.message.contains('user') and ctx.message.contains('requestTime') and ctx.message.contains('eventType') and // Corrected from && to 'and'
                   ctx.message.contains('routeKey') and ctx.message.contains('status') and ctx.message.contains('connectionId')))) { // Corrected from && to 'and'
            ctx.event.dataset = 'aws.apigateway_logs';
        }
        // AWS CloudFront Logs
        else if (ctx.message.length() > 0) {
            int tokenCount = 1;
            boolean insideQuotes = false;
            char[] chars = ctx.message.toCharArray();
            for (int i = 0; i < chars.length; i++) {
                char c = chars[i];
                if (c == ' ' and !insideQuotes) {
                    tokenCount++;
                } else if (c == '"') {
                    insideQuotes = !insideQuotes;
                }
            }
            if (tokenCount == 33 and ctx.message =~ /^\d{4}-\d{2}-\d{2}\s\d{2}:\d{2}:\d{2}\s[a-zA-Z0-9-]+\s\d+\s(\d+\.\d+\.\d+\.\d+|[a-fA-F0-9:]+)/) { // Corrected from && to 'and'
                ctx.event.dataset = 'aws.cloudfront_logs';
            }
        }
        // AWS ELB Logs
        else if (ctx.message.length() > 0) {
            int tokenCount = 1;
            boolean insideQuotes = false;
            char[] chars = ctx.message.toCharArray();
            for (int i = 0; i < chars.length; i++) {
                char c = chars[i];
                if (c == ' ' and !insideQuotes) { // Corrected from && to 'and'
                    tokenCount++;
                } else if (c == '"') {
                    insideQuotes = !insideQuotes;
                }
            }
            if ((tokenCount == 15 or tokenCount == 29 or tokenCount == 22) and (ctx.message =~ /.*\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d{1,5})|([0-9a-fA-F:.]+:\d{1,5})\s(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d{1,5})|([0-9a-fA-F:.]+:\d{1,5})\s-?\d+(\.\d+)?\s/)) { // Corrected from && to 'and', and || to 'or'
                ctx.event.dataset = 'aws.elb_logs';
            }
        }
        // AWS Route53 Public Logs
        else if (ctx['aws.cloudwatch.log_stream'] != null) {
            def split_log_stream_name = ctx['aws.cloudwatch.log_stream'].splitOnToken('/');
            if (split_log_stream_name.length == 2) {
                def hosted_zone_id = split_log_stream_name[0];
                def edge_location_id = split_log_stream_name[1];
                if (ctx.message != null and ctx.message.contains(hosted_zone_id) and ctx.message.contains(edge_location_id)) {
                    ctx.event.dataset = 'aws.route53_public_logs';
                }
            }
        }
      ignore_failure: true

on_failure:
  - set:
      field: error.message
      value: "{{ _ingest.on_failure_message }}"