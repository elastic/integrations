---
description: Pipeline for processing Trend Micro Vision One telemetry data.
processors:

  ##############################################################################
  # populate basic fields
  ##############################################################################

  - set:
      tag: set_ecs_version
      field: ecs.version
      value: '8.11.0'
  - set:
      tag: set_event_kind
      field: event.kind
      value: event


  ##############################################################################
  # drop events generated by the CEL program to facilitate immediate reruns
  ##############################################################################

  - drop:
      tag: drop
      if: ctx.event?.reason == "want_more"

  ##############################################################################
  # parse the event JSON
  ##############################################################################

  - rename:
      tag: rename_message
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  - remove:
      tag: remove_message
      field: message
      ignore_missing: true
  - json:
      tag: json_event_original
      field: event.original
      target_field: trend_micro_vision_one.telemetry
      ignore_failure: true

  ##############################################################################
  # rename to snake case
  ##############################################################################

  - script:
      tag: script_convert_camelcase_to_snake_case
      lang: painless
      description: Convert camelCase to snake_case
      source: |
        // Helper function to convert camelCase to snake_case
        String camelToSnake(String str) {
          def result = "";
          def lastCharWasUpperCase = false;
          for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (Character.isUpperCase(c)) {
              if (i > 0 && !lastCharWasUpperCase) {
                result += "_";
              }
              result += Character.toLowerCase(c);
              lastCharWasUpperCase = true;
            } else {
              result += c;
              lastCharWasUpperCase = false;
            }
          }
          return result;
        }

        // Recursive function to handle nested fields
        def convertToSnakeCase(def obj) {
          if (obj instanceof Map) {
            // Convert each key in the map
            def newObj = [:];
            for (entry in obj.entrySet()) {
              // Skip fields that contain '@' in their name
              if (!entry.getKey().contains("@")) {
                String newKey = camelToSnake(entry.getKey());
                newObj[newKey] = convertToSnakeCase(entry.getValue());
              }
            }
            return newObj;
          } else if (obj instanceof List) {
            // If it's a list, process each item recursively
            def newList = [];
            for (item in obj) {
              newList.add(convertToSnakeCase(item));
            }
            return newList;
          } else {
            return obj;
          }
        }

        // Apply the conversion
        if (ctx.trend_micro_vision_one?.telemetry != null) {
          ctx.trend_micro_vision_one.telemetry = convertToSnakeCase(ctx.trend_micro_vision_one.telemetry);
        }

  ##############################################################################
  # Add type, subtype fields
  ##############################################################################

  - script:
      tag: script_add_event_type_based_on_event_id
      lang: painless
      description: Add event_type based on event_id
      source: |
        def key = (ctx.trend_micro_vision_one?.telemetry?.event_id ?: "").toString();
        if (params.containsKey(key)) {
          ctx.trend_micro_vision_one.telemetry.event_type = params[key];
        } else {
          ctx.trend_micro_vision_one.telemetry.event_type = 'Other';
        }
      # Mappings: https://github.com/trendmicro/tm-v1-schema?tab=readme-ov-file#eventid
      params:
        '1': TELEMETRY_PROCESS
        '2': TELEMETRY_FILE
        '3': TELEMETRY_CONNECTION
        '4': TELEMETRY_DNS
        '5': TELEMETRY_REGISTRY
        '6': TELEMETRY_ACCOUNT
        '7': TELEMETRY_INTERNET
        '8': TELEMETRY_MODIFIED_PROCESS
        '9': TELEMETRY_WINDOWS_HOOK
        '10': TELEMETRY_WINDOWS_EVENT
        '11': TELEMETRY_AMSI
        '12': TELEMETRY_WMI
        '13': TELEMETRY_MEMORY
        '14': TELEMETRY_BM
        '15': TELEMETRY_APP
        '16': TELEMETRY_SYSTEM_EVENT
        '17': TELEMETRY_EVENT_PIPE
        '18': TELEMETRY_MAC_SYS_LOG
        '19': TELEMETRY_DDR
        '101': TELEMETRY_ASSOCIATION

  - script:
      tag: script_add_event_subtype_based_on_event_sub_id
      lang: painless
      description: Add event_subtype based on event_sub_id
      source: |
        def key = (ctx.trend_micro_vision_one?.telemetry?.event_sub_id ?: "").toString();
        if (params.containsKey(key)) {
          ctx.trend_micro_vision_one.telemetry.event_subtype = params[key];
        } else {
          ctx.trend_micro_vision_one.telemetry.event_subtype = 'Other';
        }
      # Mappings: https://github.com/trendmicro/tm-v1-schema?tab=readme-ov-file#eventsubid
      params:
        '0': TELEMETRY_NONE
        '1': TELEMETRY_PROCESS_OPEN
        '2': TELEMETRY_PROCESS_CREATE
        '3': TELEMETRY_PROCESS_TERMINATE
        '4': TELEMETRY_PROCESS_LOAD_IMAGE
        '5': TELEMETRY_PROCESS_EXECUTE
        '6': TELEMETRY_PROCESS_CONNECT
        '7': TELEMETRY_PROCESS_TRACME
        '8': TELEMETRY_PROCESS_LOAD_KERNEL_IMAGE
        '101': TELEMETRY_FILE_CREATE
        '102': TELEMETRY_FILE_OPEN
        '103': TELEMETRY_FILE_DELETE
        '104': TELEMETRY_FILE_SET_SECURITY
        '105': TELEMETRY_FILE_COPY
        '106': TELEMETRY_FILE_MOVE
        '107': TELEMETRY_FILE_CLOSE
        '108': TELEMETRY_FILE_MODIFY_TIMESTAMP
        '109': TELEMETRY_FILE_MODIFY
        '110': TELEMETRY_FILE_SET_ATTRIBUTES
        '111': TELEMETRY_FILE_ENUMERATE
        '112': TELEMETRY_FILE_SET_EXTENDED_ATTRIBUTE
        '113': TELEMETRY_FILE_DELETE_EXTENDED_ATTRIBUTE
        '201': TELEMETRY_CONNECTION_CONNECT
        '202': TELEMETRY_CONNECTION_LISTEN
        '203': TELEMETRY_CONNECTION_CONNECT_INBOUND
        '204': TELEMETRY_CONNECTION_CONNECT_OUTBOUND
        '301': TELEMETRY_DNS_QUERY
        '401': TELEMETRY_REGISTRY_CREATE
        '402': TELEMETRY_REGISTRY_SET
        '403': TELEMETRY_REGISTRY_DELETE
        '404': TELEMETRY_REGISTRY_RENAME
        '405': TELEMETRY_REGISTRY_ENUMERATE
        '406': TELEMETRY_REGISTRY_ENUMERATEVALUE
        '407': TELEMETRY_REGISTRY_QUERYVALUE
        '408': TELEMETRY_REGISTRY_SAVE
        '501': TELEMETRY_ACCOUNT_ADD
        '502': TELEMETRY_ACCOUNT_DELETE
        '503': TELEMETRY_ACCOUNT_IMPERSONATE
        '504': TELEMETRY_ACCOUNT_MODIFY
        '505': TELEMETRY_ACCOUNT_LOGIN
        '506': TELEMETRY_ACCOUNT_LOGOUT
        '601': TELEMETRY_INTERNET_OPEN
        '602': TELEMETRY_INTERNET_CONNECT
        '603': TELEMETRY_INTERNET_DOWNLOAD
        '701': TELEMETRY_MODIFIED_PROCESS_CREATE_REMOTETHREAD
        '702': TELEMETRY_MODIFIED_PROCESS_WRITE_MEMORY
        '703': TELEMETRY_MODIFIED_PROCESS_WRITE_PROCESS
        '704': TELEMETRY_MODIFIED_PROCESS_READ_PROCESS
        '705': TELEMETRY_MODIFIED_PROCESS_WRITE_PROCESS_NAME
        '801': TELEMETRY_WINDOWS_HOOK_SET
        '901': TELEMETRY_AMSI_EXECUTE
        '1001': TELEMETRY_MEMORY_MODIFY
        '1002': TELEMETRY_MEMORY_MODIFY_PERMISSION
        '1003': TELEMETRY_MEMORY_READ
        '1101': TELEMETRY_BM_INVOKE
        '1102': TELEMETRY_BM_INVOKE_API
        '1201': TELEMETRY_APP_START
        '1202': TELEMETRY_APP_STOP
        '1203': TELEMETRY_APP_INSTALL
        '1204': TELEMETRY_APP_UNINSTALL
        '1205': TELEMETRY_APP_BEHAVIOR
        '1301': TELEMETRY_SYSTEM_EVENT_ENABLE
        '1302': TELEMETRY_SYSTEM_EVENT_DISABLE
        '1303': TELEMETRY_SYSTEM_CERTIFICATION_INSTALL
        '1304': TELEMETRY_SYSTEM_DEVICE_ROOTED
        '1401': TELEMETRY_PIPE_CREATE
        '1402': TELEMETRY_PIPE_CONNECT
        '1601': TELEMETRY_MAC_SYS_LOG_COLLECT
        '1701': TELEMETRY_DDR_FILE_COPY
        '1702': TELEMETRY_DDR_FILE_MOVE
        '1703': TELEMETRY_DDR_FILE_RENAME
        '1704': TELEMETRY_DDR_FILE_MODIFY
        '1705': TELEMETRY_DDR_FILE_DELETE
        '1706': TELEMETRY_DDR_FILE_UNZIP
        '1707': TELEMETRY_DDR_FILE_ZIP
        '1708': TELEMETRY_DDR_FILE_UPLOAD
        '1709': TELEMETRY_DDR_FILE_DOWNLOAD
        '1710': TELEMETRY_DDR_FILE_PRINT
        '10101': TELEMETRY_ASSOCIATION_PROCESS_IMAGE_FILE
        '10102': TELEMETRY_ASSOCIATION_AUTO_RUN_KEY_FULL_PATH
        '10103': TELEMETRY_ASSOCIATION_HOST_PROC_CMD_FULL_PATH
        '10104': TELEMETRY_ASSOCIATION_SERVICE_DLL
        '10105': TELEMETRY_ASSOCIATION_ARCHIVE_FILE
        '10106': TELEMETRY_ASSOCIATION_BROWSER_PROCESS

  ##############################################################################
  # convert values
  ##############################################################################

  - script:
      tag: script_extract_offset_from_timezone_value_or_fall_back_to_utc
      description: Extract offset from timezone value or fall back to UTC.
      lang: painless
      source: |
        Matcher m = /([+-]\d\d:\d\d)$/.matcher(ctx.trend_micro_vision_one?.telemetry?.timezone ?: "");
        ctx._tmp_timezone = m.find() ? m.group(1) : "UTC";

  - date:
      tag: date_trend_micro_vision_one_telemetry_event_time
      field: trend_micro_vision_one.telemetry.event_time
      target_field: trend_micro_vision_one.telemetry.event_time
      if: ctx.trend_micro_vision_one?.telemetry?.event_time != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['ISO8601', 'UNIX_MS']
  - date:
      tag: date_trend_micro_vision_one_telemetry_first_seen
      field: trend_micro_vision_one.telemetry.first_seen
      target_field: trend_micro_vision_one.telemetry.first_seen
      if: ctx.trend_micro_vision_one?.telemetry?.first_seen != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_last_seen
      field: trend_micro_vision_one.telemetry.last_seen
      target_field: trend_micro_vision_one.telemetry.last_seen
      if: ctx.trend_micro_vision_one?.telemetry?.last_seen != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_log_received_time
      field: trend_micro_vision_one.telemetry.log_received_time
      target_field: trend_micro_vision_one.telemetry.log_received_time
      if: ctx.trend_micro_vision_one?.telemetry?.log_received_time != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_object_file_creation
      field: trend_micro_vision_one.telemetry.object_file_creation
      target_field: trend_micro_vision_one.telemetry.object_file_creation
      if: ctx.trend_micro_vision_one?.telemetry?.object_file_creation != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_object_file_modified_time
      field: trend_micro_vision_one.telemetry.object_file_modified_time
      target_field: trend_micro_vision_one.telemetry.object_file_modified_time
      if: ctx.trend_micro_vision_one?.telemetry?.object_file_modified_time != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_object_first_seen
      field: trend_micro_vision_one.telemetry.object_first_seen
      target_field: trend_micro_vision_one.telemetry.object_first_seen
      if: ctx.trend_micro_vision_one?.telemetry?.object_first_seen != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_object_last_seen
      field: trend_micro_vision_one.telemetry.object_last_seen
      target_field: trend_micro_vision_one.telemetry.object_last_seen
      if: ctx.trend_micro_vision_one?.telemetry?.object_last_seen != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_object_launch_time
      field: trend_micro_vision_one.telemetry.object_launch_time
      target_field: trend_micro_vision_one.telemetry.object_launch_time
      if: ctx.trend_micro_vision_one?.telemetry?.object_launch_time != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_parent_file_creation
      field: trend_micro_vision_one.telemetry.parent_file_creation
      target_field: trend_micro_vision_one.telemetry.parent_file_creation
      if: ctx.trend_micro_vision_one?.telemetry?.parent_file_creation != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_parent_file_modified_time
      field: trend_micro_vision_one.telemetry.parent_file_modified_time
      target_field: trend_micro_vision_one.telemetry.parent_file_modified_time
      if: ctx.trend_micro_vision_one?.telemetry?.parent_file_modified_time != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_parent_launch_time
      field: trend_micro_vision_one.telemetry.parent_launch_time
      target_field: trend_micro_vision_one.telemetry.parent_launch_time
      if: ctx.trend_micro_vision_one?.telemetry?.parent_launch_time != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_process_file_creation
      field: trend_micro_vision_one.telemetry.process_file_creation
      target_field: trend_micro_vision_one.telemetry.process_file_creation
      if: ctx.trend_micro_vision_one?.telemetry?.process_file_creation != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_process_file_modified_time
      field: trend_micro_vision_one.telemetry.process_file_modified_time
      target_field: trend_micro_vision_one.telemetry.process_file_modified_time
      if: ctx.trend_micro_vision_one?.telemetry?.process_file_modified_time != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_process_launch_time
      field: trend_micro_vision_one.telemetry.process_launch_time
      target_field: trend_micro_vision_one.telemetry.process_launch_time
      if: ctx.trend_micro_vision_one?.telemetry?.process_launch_time != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_src_file_creation
      field: trend_micro_vision_one.telemetry.src_file_creation
      target_field: trend_micro_vision_one.telemetry.src_file_creation
      if: ctx.trend_micro_vision_one?.telemetry?.src_file_creation != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_src_file_modified_time
      field: trend_micro_vision_one.telemetry.src_file_modified_time
      target_field: trend_micro_vision_one.telemetry.src_file_modified_time
      if: ctx.trend_micro_vision_one?.telemetry?.src_file_modified_time != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_src_first_seen
      field: trend_micro_vision_one.telemetry.src_first_seen
      target_field: trend_micro_vision_one.telemetry.src_first_seen
      if: ctx.trend_micro_vision_one?.telemetry?.src_first_seen != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']
  - date:
      tag: date_trend_micro_vision_one_telemetry_src_last_seen
      field: trend_micro_vision_one.telemetry.src_last_seen
      target_field: trend_micro_vision_one.telemetry.src_last_seen
      if: ctx.trend_micro_vision_one?.telemetry?.src_last_seen != null
      timezone: '{{{_tmp_timezone}}}'
      formats: ['UNIX_MS', 'ISO8601']

  - remove:
      tag: remove_tmp_timezone
      field:
        - _tmp_timezone
      ignore_missing: true

  - convert:
      tag: convert_trend_micro_vision_one_telemetry_object_current_file_size
      field: trend_micro_vision_one.telemetry.object_current_file_size
      type: long
      ignore_missing: true
  - convert:
      tag: convert_trend_micro_vision_one_telemetry_object_file_size
      field: trend_micro_vision_one.telemetry.object_file_size
      type: long
      ignore_missing: true
  - convert:
      tag: convert_trend_micro_vision_one_telemetry_parent_file_size
      field: trend_micro_vision_one.telemetry.parent_file_size
      type: long
      ignore_missing: true
  - convert:
      tag: convert_trend_micro_vision_one_telemetry_process_file_size
      field: trend_micro_vision_one.telemetry.process_file_size
      type: long
      ignore_missing: true
  - convert:
      tag: convert_trend_micro_vision_one_telemetry_raw_data_size
      field: trend_micro_vision_one.telemetry.raw_data_size
      type: long
      ignore_missing: true
  - convert:
      tag: convert_trend_micro_vision_one_telemetry_src_file_size
      field: trend_micro_vision_one.telemetry.src_file_size
      type: long
      ignore_missing: true

  ##############################################################################
  # populate ECS fields
  ##############################################################################

  - set:
      tag: set_timestamp
      field: "@timestamp"
      copy_from: trend_micro_vision_one.telemetry.event_time
      if: ctx.trend_micro_vision_one?.telemetry?.event_time != null

  - set:
      tag: set_event_id
      field: event.id
      copy_from: trend_micro_vision_one.telemetry.uuid
      if: ctx.trend_micro_vision_one?.telemetry?.uuid != null

  - set:
      tag: set_event_code
      field: event.code
      copy_from: trend_micro_vision_one.telemetry.event_id
      if: ctx.trend_micro_vision_one?.telemetry?.event_id != null
  - convert:
      tag: convert_event_code
      field: event.code
      type: string
      ignore_missing: true

  # file.*

  - script:
      tag: script_populate_file_created
      description: Populate file.created
      lang: painless
      source: |
        if (ctx.file == null) ctx.file = [:];
        ctx.file.created = [
          ctx.trend_micro_vision_one?.telemetry?.object_file_creation,
          ctx.trend_micro_vision_one?.telemetry?.parent_file_creation,
          ctx.trend_micro_vision_one?.telemetry?.process_file_creation,
          ctx.trend_micro_vision_one?.telemetry?.src_file_creation
        ];
        ctx.file.created.removeIf(v -> v == null);
        if (ctx.file.created.size() == 1) ctx.file.created = ctx.file.created[0];
  - set:
      tag: set_file_hash_md5
      field: file.hash.md5
      copy_from: trend_micro_vision_one.telemetry.object_file_hash_md5
      if: ctx.trend_micro_vision_one?.telemetry?.object_file_hash_md5 != null
  - set:
      tag: set_file_hash_sha1
      field: file.hash.sha1
      copy_from: trend_micro_vision_one.telemetry.object_file_hash_sha1
      if: ctx.trend_micro_vision_one?.telemetry?.object_file_hash_sha1 != null
  - set:
      tag: set_file_hash_sha256
      field: file.hash.sha256
      copy_from: trend_micro_vision_one.telemetry.object_file_hash_sha256
      if: ctx.trend_micro_vision_one?.telemetry?.object_file_hash_sha256 != null
  - script:
      tag: script_populate_file_mtime
      description: Populate file.mtime
      lang: painless
      source: |
        if (ctx.file == null) ctx.file = [:];
        ctx.file.mtime = [
          ctx.trend_micro_vision_one?.telemetry?.object_file_modified_time,
          ctx.trend_micro_vision_one?.telemetry?.src_file_modified_time,
          ctx.trend_micro_vision_one?.telemetry?.process_file_modified_time,
          ctx.trend_micro_vision_one?.telemetry?.parent_file_modified_time
        ];
        ctx.file.mtime.removeIf(v -> v == null);
        if (ctx.file.mtime.size() == 1) ctx.file.mtime = ctx.file.mtime[0];
  - script:
      tag: script_populate_file_path
      description: Populate file.path
      lang: painless
      source: |
        if (ctx.file == null) ctx.file = [:];
        ctx.file.path = [
          ctx.trend_micro_vision_one?.telemetry?.object_file_path,
          ctx.trend_micro_vision_one?.telemetry?.src_file_path
        ];
        ctx.file.path.removeIf(v -> v == null);
        if (ctx.file.path.size() == 1) ctx.file.path = ctx.file.path[0];
  - script:
      tag: script_populate_file_size
      description: Populate file.size
      lang: painless
      source: |
        if (ctx.file == null) ctx.file = [:];
        ctx.file.size = [
          ctx.trend_micro_vision_one?.telemetry?.object_current_file_size,
          ctx.trend_micro_vision_one?.telemetry?.object_file_size,
          ctx.trend_micro_vision_one?.telemetry?.src_file_size,
          ctx.trend_micro_vision_one?.telemetry?.process_file_size,
          ctx.trend_micro_vision_one?.telemetry?.parent_file_size
        ];
        ctx.file.size.removeIf(v -> v == null);
        if (ctx.file.size.size() == 1) ctx.file.size = ctx.file.size[0];
  - set:
      tag: set_file_user_domain
      field: file.user.domain
      copy_from: trend_micro_vision_one.telemetry.object_user_domain
      if: ctx.trend_micro_vision_one?.telemetry?.object_user_domain != null
  - set:
      tag: set_file_user_group_id
      field: file.user.group.id
      copy_from: trend_micro_vision_one.telemetry.object_user_group_sids
      if: ctx.trend_micro_vision_one?.telemetry?.object_user_group_sids != null
  - set:
      tag: set_file_user_name
      field: file.user.name
      copy_from: trend_micro_vision_one.telemetry.object_user
      if: ctx.trend_micro_vision_one?.telemetry.object_user != null

  # host.*

  - set:
      tag: set_host_id
      field: host.id
      copy_from: trend_micro_vision_one.telemetry.endpoint_guid
      if: ctx.trend_micro_vision_one?.telemetry?.endpoint_guid != null
  - set:
      tag: set_host_name
      field: host.name
      copy_from: trend_micro_vision_one.telemetry.endpoint_host_name
      if: ctx.trend_micro_vision_one?.telemetry?.endpoint_host_name != null
  - set:
      tag: set_host_ip
      field: host.ip
      copy_from: trend_micro_vision_one.telemetry.endpoint_ip
      if: ctx.trend_micro_vision_one?.telemetry?.endpoint_ip != null
  - set:
      tag: set_host_mac
      field: host.mac
      copy_from: trend_micro_vision_one.telemetry.endpoint_mac_address
      if: ctx.trend_micro_vision_one?.telemetry?.endpoint_mac_address != null
  - gsub:
      tag: gsub_host_mac
      field: host.mac
      pattern: ':'
      replacement: '-'
      ignore_missing: true
  - uppercase:
      tag: uppercase_host_mac
      field: host.mac
      ignore_missing: true
  - set:
      tag: set_group_id
      field: group.id
      copy_from: trend_micro_vision_one.telemetry.group_id
      if: ctx.trend_micro_vision_one?.telemetry?.group_id != null

  # os.*

  - set:
      tag: set_os_full
      field: os.full
      copy_from: trend_micro_vision_one.telemetry.os_description
      if: ctx.trend_micro_vision_one?.telemetry?.os_description != null
  - set:
      tag: set_os_name
      field: os.name
      copy_from: trend_micro_vision_one.telemetry.os_name
      if: ctx.trend_micro_vision_one?.telemetry?.os_name != null
  - set:
      tag: set_os_version
      field: os.version
      copy_from: trend_micro_vision_one.telemetry.os_ver
      if: ctx.trend_micro_vision_one?.telemetry?.os_ver != null


  # process.*

  - script:
      tag: script_populate_process_command_line
      description: Populate process.command_line
      lang: painless
      source: |
        if (ctx.process == null) ctx.process = [:];
        ctx.process.command_line = [
          ctx.trend_micro_vision_one?.telemetry?.process_cmd,
          ctx.trend_micro_vision_one?.telemetry?.object_cmd
        ];
        ctx.process.command_line.removeIf(v -> v == null);
        if (ctx.process.command_line.size() == 1) ctx.process.command_line = ctx.process.command_line[0];
  - set:
      tag: set_process_executable
      field: process.executable
      copy_from: trend_micro_vision_one.telemetry.process_file_path
      if: ctx.trend_micro_vision_one?.telemetry?.process_file_path != null
  - set:
      tag: set_process_hash_md5
      field: process.hash.md5
      copy_from: trend_micro_vision_one.telemetry.process_file_hash_md5
      if: ctx.trend_micro_vision_one?.telemetry?.process_file_hash_md5 != null
  - set:
      tag: set_process_hash_sha1
      field: process.hash.sha1
      copy_from: trend_micro_vision_one.telemetry.process_file_hash_sha1
      if: ctx.trend_micro_vision_one?.telemetry?.process_file_hash_sha1 != null
  - set:
      tag: set_process_hash_sha256
      field: process.hash.sha256
      copy_from: trend_micro_vision_one.telemetry.process_file_hash_sha256
      if: ctx.trend_micro_vision_one?.telemetry?.process_file_hash_sha256 != null
  - script:
      tag: script_populate_process_name
      description: Populate process.name
      lang: painless
      source: |
        if (ctx.process == null) ctx.process = [:];
        ctx.process.name = [
          ctx.trend_micro_vision_one?.telemetry?.process_name,
          ctx.trend_micro_vision_one?.telemetry?.object_name
        ];
        ctx.process.name.removeIf(v -> v == null);
        if (ctx.process.name.size() == 1) ctx.process.name = ctx.process.name[0];
  - script:
      tag: script_populate_process_pid
      description: Populate process.pid
      lang: painless
      source: |
        if (ctx.process == null) ctx.process = [:];
        ctx.process.pid = [
          ctx.trend_micro_vision_one?.telemetry?.process_pid,
          ctx.trend_micro_vision_one?.telemetry?.object_pid
        ];
        ctx.process.pid.removeIf(v -> v == null);
        if (ctx.process.pid.size() == 1) ctx.process.pid = ctx.process.pid[0];
  - script:
      tag: script_populate_process_start
      description: Populate process.start
      lang: painless
      source: |
        if (ctx.process == null) ctx.process = [:];
        ctx.process.start = [
          ctx.trend_micro_vision_one?.telemetry?.process_launch_time,
          ctx.trend_micro_vision_one?.telemetry?.object_launch_time
        ];
        ctx.process.start.removeIf(v -> v == null);
        if (ctx.process.start.size() == 1) ctx.process.start = ctx.process.start[0];
  - set:
      tag: set_process_user_domain
      field: process.user.domain
      copy_from: trend_micro_vision_one.telemetry.process_user_domain
      if: ctx.trend_micro_vision_one?.telemetry?.process_user_domain != null
  - set:
      tag: set_process_user_group_id
      field: process.user.group.id
      copy_from: trend_micro_vision_one.telemetry.process_user_group_sids
      if: ctx.trend_micro_vision_one?.telemetry?.process_user_group_sids != null
  - set:
      tag: set_process_user_name
      field: process.user.name
      copy_from: trend_micro_vision_one.telemetry.process_user
      if: ctx.trend_micro_vision_one?.telemetry?.process_user != null

  # process.parent.*

  - set:
      tag: set_process_parent_command_line
      field: process.parent.command_line
      copy_from: trend_micro_vision_one.telemetry.parent_cmd
      if: ctx.trend_micro_vision_one?.telemetry?.parent_cmd != null
  - set:
      tag: set_process_parent_executable
      field: process.parent.executable
      copy_from: trend_micro_vision_one.telemetry.parent_file_path
      if: ctx.trend_micro_vision_one?.telemetry?.parent_file_path != null
  - set:
      tag: set_process_parent_hash_md5
      field: process.parent.hash.md5
      copy_from: trend_micro_vision_one.telemetry.parent_file_hash_md5
      if: ctx.trend_micro_vision_one?.telemetry?.parent_file_hash_md5 != null
  - set:
      tag: set_process_parent_hash_sha1
      field: process.parent.hash.sha1
      copy_from: trend_micro_vision_one.telemetry.parent_file_hash_sha1
      if: ctx.trend_micro_vision_one?.telemetry?.parent_file_hash_sha1 != null
  - set:
      tag: set_process_parent_hash_sha256
      field: process.parent.hash.sha256
      copy_from: trend_micro_vision_one.telemetry.parent_file_hash_sha256
      if: ctx.trend_micro_vision_one?.telemetry?.parent_file_hash_sha256 != null
  - set:
      tag: set_process_parent_name
      field: process.parent.name
      copy_from: trend_micro_vision_one.telemetry.parent_name
      if: ctx.trend_micro_vision_one?.telemetry?.parent_name != null
  - set:
      tag: set_process_parent_pid
      field: process.parent.pid
      copy_from: trend_micro_vision_one.telemetry.parent_pid
      if: ctx.trend_micro_vision_one?.telemetry?.parent_pid != null
  - set:
      tag: set_process_parent_start
      field: process.parent.start
      copy_from: trend_micro_vision_one.telemetry.parent_launch_time
      if: ctx.trend_micro_vision_one?.telemetry?.parent_launch_time != null
  - set:
      tag: set_process_parent_user_domain
      field: process.parent.user.domain
      copy_from: trend_micro_vision_one.telemetry.parent_user_domain
      if: ctx.trend_micro_vision_one?.telemetry?.parent_user_domain != null
  - set:
      tag: set_process_parent_user_name
      field: process.parent.user.name
      copy_from: trend_micro_vision_one.telemetry.parent_user
      if: ctx.trend_micro_vision_one?.telemetry?.parent_user != null

  # source.* / destination.*

  - set:
      tag: set_source_ip
      field: source.ip
      copy_from: trend_micro_vision_one.telemetry.src
      if: ctx.trend_micro_vision_one?.telemetry?.src != null
  - set:
      tag: set_destination_ip
      field: destination.ip
      copy_from: trend_micro_vision_one.telemetry.dst
      if: ctx.trend_micro_vision_one?.telemetry?.dst != null

  # tags

  - foreach:
      tag: foreach_trend_micro_vision_one_telemetry_tags
      field: trend_micro_vision_one.telemetry.tags
      ignore_missing: true
      processor:
        append:
          tag: append_tags
          field: tags
          value: '{{{ _ingest._value }}}'

  # related.*

  - append:
      tag: append_related_hash
      field: related.hash
      value: '{{{ file.hash.md5 }}}'
      if: ctx.file?.hash?.md5 != null
      allow_duplicates: false
  - append:
      tag: append_related_hash_2
      field: related.hash
      value: '{{{ file.hash.sha1 }}}'
      if: ctx.file?.hash?.sha1 != null
      allow_duplicates: false
  - append:
      tag: append_related_hash_3
      field: related.hash
      value: '{{{ file.hash.sha256 }}}'
      if: ctx.file?.hash?.sha256 != null
      allow_duplicates: false
  - append:
      tag: append_related_hash_4
      field: related.hash
      value: '{{{ process.hash.md5 }}}'
      if: ctx.process?.hash?.md5 != null
      allow_duplicates: false
  - append:
      tag: append_related_hash_5
      field: related.hash
      value: '{{{ process.hash.sha1 }}}'
      if: ctx.process?.hash?.sha1 != null
      allow_duplicates: false
  - append:
      tag: append_related_hash_6
      field: related.hash
      value: '{{{ process.hash.sha256 }}}'
      if: ctx.process?.hash?.sha256 != null
      allow_duplicates: false
  - append:
      tag: append_related_hash_7
      field: related.hash
      value: '{{{ process.parent.hash.md5 }}}'
      if: ctx.process?.parent?.hash?.md5 != null
      allow_duplicates: false
  - append:
      tag: append_related_hash_8
      field: related.hash
      value: '{{{ process.parent.hash.sha1 }}}'
      if: ctx.process?.parent?.hash?.sha1 != null
      allow_duplicates: false
  - append:
      tag: append_related_hash_9
      field: related.hash
      value: '{{{ process.parent.hash.sha256 }}}'
      if: ctx.process?.parent?.hash?.sha256 != null
      allow_duplicates: false

  - append:
      tag: append_related_hosts
      field: related.hosts
      value: '{{{ host.id }}}'
      if: ctx.host?.id != null
      allow_duplicates: false
  - append:
      tag: append_related_hosts_2
      field: related.hosts
      value: '{{{ host.name }}}'
      if: ctx.host?.name != null
      allow_duplicates: false

  - set:
      # note: host.ip is already an array
      tag: set_related_ip
      field: related.ip
      copy_from: host.ip
      if: ctx.host?.ip != null
  - append:
      tag: append_related_ip
      field: related.ip
      value: '{{{ destination.ip }}}'
      if: ctx.destination?.ip != null
      allow_duplicates: false
  - append:
      tag: append_related_ip_2
      field: related.ip
      value: '{{{ source.ip }}}'
      if: ctx.source?.ip != null
      allow_duplicates: false

  - append:
      tag: append_related_user
      field: related.user
      value: '{{{ file.user.name }}}'
      if: ctx.file?.user?.name != null
      allow_duplicates: false
  - append:
      tag: append_related_user_2
      field: related.user
      value: '{{{ process.user.name }}}'
      if: ctx.process?.user?.name != null
      allow_duplicates: false

  ##############################################################################
  # tidy null/empty values
  ##############################################################################

  - script:
      tag: script_drops_null_empty_values_recursively
      description: Drops null/empty values recursively.
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == '') {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);

  ##############################################################################
  # set a unique ID
  ##############################################################################

  - fingerprint:
      tag: fingerprint
      fields:
        - trend_micro_vision_one.telemetry
      target_field: _id
      ignore_missing: true

  ##############################################################################
  # remove duplicate custom fields
  ##############################################################################

  - remove:
      tag: remove_duplicate_custom_fields
      field:
        - trend_micro_vision_one.telemetry.dst
        - trend_micro_vision_one.telemetry.endpoint_guid
        - trend_micro_vision_one.telemetry.endpoint_host_name
        - trend_micro_vision_one.telemetry.endpoint_ip
        - trend_micro_vision_one.telemetry.endpoint_mac_address
        - trend_micro_vision_one.telemetry.event_time
        - trend_micro_vision_one.telemetry.group_id
        - trend_micro_vision_one.telemetry.object_cmd
        - trend_micro_vision_one.telemetry.object_current_file_size
        - trend_micro_vision_one.telemetry.object_file_creation
        - trend_micro_vision_one.telemetry.object_file_hash_md5
        - trend_micro_vision_one.telemetry.object_file_hash_sha1
        - trend_micro_vision_one.telemetry.object_file_hash_sha256
        - trend_micro_vision_one.telemetry.object_file_modified_time
        - trend_micro_vision_one.telemetry.object_file_path
        - trend_micro_vision_one.telemetry.object_file_size
        - trend_micro_vision_one.telemetry.object_launch_time
        - trend_micro_vision_one.telemetry.object_name
        - trend_micro_vision_one.telemetry.object_pid
        - trend_micro_vision_one.telemetry.object_user
        - trend_micro_vision_one.telemetry.object_user_domain
        - trend_micro_vision_one.telemetry.object_user_group_sids
        - trend_micro_vision_one.telemetry.os_description
        - trend_micro_vision_one.telemetry.os_name
        - trend_micro_vision_one.telemetry.os_ver
        - trend_micro_vision_one.telemetry.parent_cmd
        - trend_micro_vision_one.telemetry.parent_file_creation
        - trend_micro_vision_one.telemetry.parent_file_hash_md5
        - trend_micro_vision_one.telemetry.parent_file_hash_sha1
        - trend_micro_vision_one.telemetry.parent_file_hash_sha256
        - trend_micro_vision_one.telemetry.parent_file_modified_time
        - trend_micro_vision_one.telemetry.parent_file_path
        - trend_micro_vision_one.telemetry.parent_file_size
        - trend_micro_vision_one.telemetry.parent_launch_time
        - trend_micro_vision_one.telemetry.parent_name
        - trend_micro_vision_one.telemetry.parent_pid
        - trend_micro_vision_one.telemetry.parent_user
        - trend_micro_vision_one.telemetry.parent_user_domain
        - trend_micro_vision_one.telemetry.process_cmd
        - trend_micro_vision_one.telemetry.process_file_creation
        - trend_micro_vision_one.telemetry.process_file_hash_md5
        - trend_micro_vision_one.telemetry.process_file_hash_sha1
        - trend_micro_vision_one.telemetry.process_file_hash_sha256
        - trend_micro_vision_one.telemetry.process_file_modified_time
        - trend_micro_vision_one.telemetry.process_file_path
        - trend_micro_vision_one.telemetry.process_file_size
        - trend_micro_vision_one.telemetry.process_launch_time
        - trend_micro_vision_one.telemetry.process_name
        - trend_micro_vision_one.telemetry.process_pid
        - trend_micro_vision_one.telemetry.process_user
        - trend_micro_vision_one.telemetry.process_user_domain
        - trend_micro_vision_one.telemetry.process_user_group_sids
        - trend_micro_vision_one.telemetry.src
        - trend_micro_vision_one.telemetry.src_file_creation
        - trend_micro_vision_one.telemetry.src_file_modified_time
        - trend_micro_vision_one.telemetry.src_file_path
        - trend_micro_vision_one.telemetry.src_file_size
        - trend_micro_vision_one.telemetry.tags
        - trend_micro_vision_one.telemetry.uuid
      if: ctx.tags?.contains('preserve_duplicate_custom_fields') != true
      ignore_missing: true

on_failure:

  ##############################################################################
  # handle failures
  ##############################################################################

  - set:
      tag: on_failure_set_event_kind
      field: event.kind
      value: pipeline_error
  - append:
      tag: on_failure_append_tags
      field: tags
      value: preserve_original_event
      allow_duplicates: false
  - append:
      tag: on_failure_append_error_message
      field: error.message
      value: >
        Processor "{{{ _ingest.on_failure_processor_type }}}"
        with tag "{{{ _ingest.on_failure_processor_tag }}}"
        in pipeline "{{{ _ingest.on_failure_pipeline }}}"
        failed with message "{{{ _ingest.on_failure_message }}}"
