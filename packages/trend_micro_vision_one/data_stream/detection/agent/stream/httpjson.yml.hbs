config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
request.tracer.filename: "../../logs/httpjson/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
request.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
request.ssl: {{ssl}}
{{/if}}
request.method: GET
request.url: {{hostname}}/v3.0/search/detections
{{#if http_client_timeout}}
request.timeout: {{http_client_timeout}}
{{/if}}
request.transforms:
  - set:
      target: header.Authorization
      value: 'Bearer {{api_token}}'
  - set:
      target: header.TMV1-Query
      value: "uuid:*"
  - set:
      target: url.params.top
      value: '{{page_size}}'
  - set:
      target: url.params.startDateTime
      # If the last pagination cycle was completed successfully
      # we move the startDate pointer forward
      # otherwise we reprocess the last interval from the beginning.
      # If none of the values are in the cursor it means it is a fresh start
      # and we pick the default value.
      value: >-
        [[- if eq .cursor.pagination_finished "true" -]]
        [[- /* look-back time should only be applied to the first request of a new pagination cycle */ -]]
          [[- formatDate ((parseDate .cursor.next_start_date).Add (parseDuration "-{{additional_look_back}}")) -]]
        [[- else -]]
          [[- formatDate (parseDate .cursor.last_response_date) -]]
        [[- end -]]
      default: '[[formatDate (now (parseDuration "-{{initial_interval}}"))]]'
  - set:
      target: url.params.endDateTime
      value: '[[formatDate (now)]]'
  - set:
      target: url.params.select
      value: 'empty'
response.split:
  target: body.items
  ignore_empty_value: true
  split:
    target: body.requests
    ignore_empty_value: true
    keep_parent: true
response.pagination:
  - set:
      target: url.value
      value: '[[if index .last_response.body "nextLink"]][[replaceAll " " "%20" .last_response.body.nextLink]][[end]]'
      fail_on_template_error: true
cursor:
  pagination_finished:
    # Use this flag to identify if an execution was interrupted in the middle
    # of a pagination cycle.
    value: '[[not (index .last_response.body "nextLink")]]'
  last_response_date:
    # Use this value to be able to resume from an interrupted pagination cycle.
    value: '[[.last_response.url.params.Get "startDateTime"]]'
  next_start_date:
    # The API returns records sorted from newest to oldest,
    # in order to pick the next startDate we keep the first event (newest) time.
    value: '[[.first_event.eventTimeDT]]'
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
