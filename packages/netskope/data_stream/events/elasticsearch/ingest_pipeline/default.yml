---
description: Pipeline for Netskope events.
processors:
  - set:
      field: ecs.version
      value: '8.5.0'
  - json:
      field: message
      add_to_root: true
      add_to_root_conflict_strategy: replace
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - convert:
      field: source.geo.location.lat
      type: double
      ignore_missing: true
      on_failure:
        - remove:
            field: source.geo.location.lat
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: source.geo.location.lon
      type: double
      ignore_missing: true
      on_failure:
        - remove:
            field: source.geo.location.lon
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - remove:
      field: source.geo.location
      if: ctx.source?.geo?.location?.lat == null || ctx.source?.geo?.location?.lon == null || ctx.source?.geo?.location?.lat < -90.0 || ctx.source?.geo?.location?.lat > 90.0 || ctx.source?.geo?.location?.lon < -180.0 || ctx.source?.geo?.location?.lon > 180.0
      ignore_failure: true
      ignore_missing: true
  - convert:
      field: destination.geo.location.lat
      type: double
      ignore_missing: true
      on_failure:
        - remove:
            field: destination.geo.location.lat
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: destination.geo.location.lon
      type: double
      ignore_missing: true
      on_failure:
        - remove:
            field: destination.geo.location.lon
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - remove:
      field: destination.geo.location
      if: ctx.destination?.geo?.location?.lat == null || ctx.destination?.geo?.location?.lon == null || ctx.destination?.geo?.location?.lat < -90.0 || ctx.destination?.geo?.location?.lat > 90.0 || ctx.destination?.geo?.location?.lon < -180.0 || ctx.destination?.geo?.location?.lon > 180.0
      ignore_failure: true
      ignore_missing: true
  - convert:
      field: netskope.events.slc.geo.location.lat
      type: double
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.slc.geo.location.lat
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.slc.geo.location.lon
      type: double
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.slc.geo.location.lon
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - remove:
      field: netskope.events.slc.geo.location
      if: ctx.netskope?.events?.slc?.geo?.location?.lat == null || ctx.netskope?.events?.slc?.geo?.location?.lon == null || ctx.netskope?.events?.slc?.geo?.location?.lat < -90.0 || ctx.netskope?.events?.slc?.geo?.location?.lat > 90.0 || ctx.netskope?.events?.slc?.geo?.location?.lon < -180.0 || ctx.netskope?.events?.slc?.geo?.location?.lon > 180.0
      ignore_failure: true
      ignore_missing: true
  - convert:
      field: netskope.events.user.geo.location.lat
      type: double
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.user.geo.location.lat
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.user.geo.location.lon
      type: double
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.user.geo.location.lon
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - remove:
      field: netskope.events.user.geo.location
      if: ctx.netskope?.events?.user?.geo?.location?.lat == null || ctx.netskope?.events?.user?.geo?.location?.lon == null || ctx.netskope?.events?.user?.geo?.location?.lat < -90.0 || ctx.netskope?.events?.user?.geo?.location?.lat > 90.0 || ctx.netskope?.events?.user?.geo?.location?.lon < -180.0 || ctx.netskope?.events?.user?.geo?.location?.lon > 180.0
      ignore_failure: true
      ignore_missing: true
  - date:
      field: '@timestamp'
      if: ctx['@timestamp'] != null && ctx['@timestamp'] != ''
      formats:
        - ISO8601
      on_failure:
        - set:
            field: '@timestamp'
            value: "{{_ingest.timestamp}}"
        - append:
            field: error.message
            value: Unable to parse the value of Timestamp field, therefore setting the value of Timestamp field to current time.
  - convert:
      field: destination.ip
      if: ctx.destination?.ip != null && ctx.destination.ip != ''
      type: ip
      ignore_missing: true
      on_failure:
        - remove:
            field: destination.ip
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.user.ip
      if: ctx.netskope?.events?.user?.ip != null && ctx.netskope.events.user.ip != ''
      type: ip
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.user.ip
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: source.ip
      if: ctx.source?.ip != null && ctx.source.ip != ''
      type: ip
      ignore_missing: true
      on_failure:
        - remove:
            field: source.ip
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - append:
      field: related.ip
      value: '{{{destination.ip}}}'
      if: ctx.destination?.ip != null
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: related.ip
      value: '{{{netskope.events.user.ip}}}'
      if: ctx.netskope?.events?.user?.ip != null
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: related.ip
      value: '{{{source.ip}}}'
      if: ctx.source?.ip != null
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: related.hosts
      value: '{{{destination.domain}}}'
      if: ctx.destination?.domain != null
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: related.hosts
      value: '{{{host.hostname}}}'
      if: ctx.host?.hostname != null
      allow_duplicates: false
      ignore_failure: true
  - user_agent:
      field: user_agent.original
      ignore_failure: true
  - geoip:
      field: source.ip
      if: ctx.source?.ip != null && ctx.source.ip != ''
      target_field: source.geo
      ignore_missing: true
  - geoip:
      field: destination.ip
      if: ctx.destination?.ip != null && ctx.destination.ip != ''
      target_field: destination.geo
      ignore_missing: true
  - geoip:
      field: netskope.events.user.ip
      if: ctx.netskope?.events?.user?.ip != null && ctx.netskope.events.user.ip != ''
      target_field: netskope.events.user.geo
      ignore_missing: true
  - uri_parts:
      field: netskope.events.url
      target_field: netskope.events.url
      keep_original: true
      remove_if_successful: false
      on_failure:
        - rename:
            field: netskope.events.url
            target_field: netskope.events.url.original
            ignore_missing: true
  - uri_parts:
      field: netskope.events.web.url
      target_field: netskope.events.web.url
      keep_original: true
      remove_if_successful: false
      on_failure:
        - rename:
            field: netskope.events.web.url
            target_field: netskope.events.web.url.original
            ignore_missing: true
  - uri_parts:
      field: netskope.events.login.url
      target_field: netskope.events.login.url
      keep_original: true
      remove_if_successful: false
      on_failure:
        - rename:
            field: netskope.events.login.url
            target_field: netskope.events.login.url.original
            ignore_missing: true
  - json:
      field: netskope.events.site
      ignore_failure: true
  - json:
      field: netskope.events.app.name
      ignore_failure: true
  - lowercase:
      ignore_failure: true
      field: network.protocol
  - uri_parts:
      field: netskope.events.referer
      target_field: netskope.events.referer
      keep_original: true
      remove_if_successful: false
      on_failure:
        - rename:
            field: netskope.events.referer
            target_field: netskope.events.referer.original
            ignore_missing: true
  - set:
      field: netskope.events.managed_app
      value: true
      if: "['yes', 'true'].contains(ctx.netskope?.events?.managed_app?.toString()?.toLowerCase())"
      ignore_failure: true
  - set:
      field: netskope.events.managed_app
      value: false
      if: "['no', 'false'].contains(ctx.netskope?.events?.managed_app?.toString()?.toLowerCase())"
      ignore_failure: true
  - convert:
      field: netskope.events.managed_app
      type: boolean
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.managed_app
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: netskope.events.is_bypass_traffic
      value: true
      if: "['yes', 'true'].contains(ctx.netskope?.events?.is_bypass_traffic?.toString()?.toLowerCase())"
      ignore_failure: true
  - set:
      field: netskope.events.is_bypass_traffic
      value: false
      if: "['no', 'false'].contains(ctx.netskope?.events?.is_bypass_traffic?.toString()?.toLowerCase())"
      ignore_failure: true
  - convert:
      field: netskope.events.is_bypass_traffic
      type: boolean
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.is_bypass_traffic
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: netskope.events.is_unique_count
      value: true
      if: "['yes', 'true'].contains(ctx.netskope?.events?.is_unique_count?.toString()?.toLowerCase())"
      ignore_failure: true
  - set:
      field: netskope.events.is_unique_count
      value: false
      if: "['no', 'false'].contains(ctx.netskope?.events?.is_unique_count?.toString()?.toLowerCase())"
      ignore_failure: true
  - convert:
      field: netskope.events.is_unique_count
      type: boolean
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.is_unique_count
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: netskope.events.user.is_aggregated
      value: true
      if: "['yes', 'true'].contains(ctx.netskope?.events?.user?.is_aggregated?.toString()?.toLowerCase())"
      ignore_failure: true
  - set:
      field: netskope.events.user.is_aggregated
      value: false
      if: "['no', 'false'].contains(ctx.netskope?.events?.user?.is_aggregated?.toString()?.toLowerCase())"
      ignore_failure: true
  - convert:
      field: netskope.events.user.is_aggregated
      type: boolean
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.user.is_aggregated
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: netskope.events.alert.is_present
      value: true
      if: "['yes', 'true'].contains(ctx.netskope?.events?.alert?.is_present?.toString()?.toLowerCase())"
      ignore_failure: true
  - set:
      field: netskope.events.alert.is_present
      value: false
      if: "['no', 'false'].contains(ctx.netskope?.events?.alert?.is_present?.toString()?.toLowerCase())"
      ignore_failure: true
  - convert:
      field: netskope.events.alert.is_present
      type: boolean
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.alert.is_present
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: netskope.events.user.generated
      value: true
      if: "['yes', 'true'].contains(ctx.netskope?.events?.user?.generated?.toString()?.toLowerCase())"
      ignore_failure: true
  - set:
      field: netskope.events.user.generated
      value: false
      if: "['no', 'false'].contains(ctx.netskope?.events?.user?.generated?.toString()?.toLowerCase())"
      ignore_failure: true
  - convert:
      field: netskope.events.user.generated
      type: boolean
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.user.generated
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: netskope.events.ack
      value: true
      if: "['yes', 'true'].contains(ctx.netskope?.events?.ack?.toString()?.toLowerCase())"
      ignore_failure: true
  - set:
      field: netskope.events.ack
      value: false
      if: "['no', 'false'].contains(ctx.netskope?.events?.ack?.toString()?.toLowerCase())"
      ignore_failure: true
  - convert:
      field: netskope.events.ack
      type: boolean
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.ack
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: netskope.events.is_malicious
      value: true
      if: "['yes', 'true'].contains(ctx.netskope?.events?.is_malicious?.toString()?.toLowerCase())"
      ignore_failure: true
  - set:
      field: netskope.events.is_malicious
      value: false
      if: "['no', 'false'].contains(ctx.netskope?.events?.is_malicious?.toString()?.toLowerCase())"
      ignore_failure: true
  - convert:
      field: netskope.events.is_malicious
      type: boolean
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.is_malicious
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: netskope.events.obfuscate
      value: true
      if: "['yes', 'true'].contains(ctx.netskope?.events?.obfuscate?.toString()?.toLowerCase())"
      ignore_failure: true
  - set:
      field: netskope.events.obfuscate
      value: false
      if: "['no', 'false'].contains(ctx.netskope?.events?.obfuscate?.toString()?.toLowerCase())"
      ignore_failure: true
  - convert:
      field: netskope.events.obfuscate
      type: boolean
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.obfuscate
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: netskope.events.shared.is_shared
      value: true
      if: "['yes', 'true'].contains(ctx.netskope?.events?.shared?.is_shared?.toString()?.toLowerCase())"
      ignore_failure: true
  - set:
      field: netskope.events.shared.is_shared
      value: false
      if: "['no', 'false'].contains(ctx.netskope?.events?.shared?.is_shared?.toString()?.toLowerCase())"
      ignore_failure: true
  - convert:
      field: netskope.events.shared.is_shared
      type: boolean
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.shared.is_shared
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - date:
      field: netskope.events.modified_at
      if: ctx.netskope?.events?.modified_at != null && ctx.netskope.events.modified_at != ''
      target_field: netskope.events.modified_at
      formats:
        - UNIX
      on_failure:
        - remove:
            field: netskope.events.modified_at
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.client.bytes
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.client.bytes
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.client.packets
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.client.packets
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.connection.duration
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.connection.duration
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.connection.end_time
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.connection.end_time
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.connection.start_time
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.connection.start_time
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.count
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.count
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.destination.geoip.source
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.destination.geoip.source
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.dlp.count
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.dlp.count
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.dlp.fingerprint.score
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.dlp.fingerprint.score
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.dlp.fv
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.dlp.fv
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.dlp.score
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.dlp.score
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.dlp.unique_count
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.dlp.unique_count
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.domain_shared_with
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.domain_shared_with
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.external_collaborator_count
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.external_collaborator_count
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.http_transaction_count
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.http_transaction_count
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.insertion.timestamp
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.insertion.timestamp
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.internal_collaborator_count
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.internal_collaborator_count
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.last.timestamp
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.last.timestamp
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.latency.max
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.latency.max
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.latency.min
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.latency.min
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.latency.total
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.latency.total
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.metric_value
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.metric_value
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.num_sessions
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.num_sessions
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.numbytes
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.numbytes
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.object.count
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.object.count
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.path_id
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.path_id
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.request.count
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.request.count
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.response.content.length
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.response.content.length
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.response.count
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.response.count
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.run_id
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.run_id
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.scan.time
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.scan.time
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.server.bytes
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.server.bytes
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.server.packets
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.server.packets
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.session.packets
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.session.packets
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.session.duration
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.session.duration
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.source.geoip_src
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.source.geoip_src
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.suppression.end_time
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.suppression.end_time
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.suppression.start_time
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.suppression.start_time
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.threshold
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.threshold
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.total_packets
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.total_packets
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.total.collaborator_count
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.total.collaborator_count
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: netskope.events.tunnel.up_time
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: netskope.events.tunnel.up_time
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: client.bytes
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: client.bytes
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: client.nat.ip
      if: ctx.client?.nat?.ip != null && ctx.client.nat.ip != ''
      type: ip
      ignore_missing: true
      on_failure:
        - remove:
            field: client.nat.ip
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: client.packets
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: client.packets
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: destination.port
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: destination.port
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: file.size
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: file.size
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: source.port
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: source.port
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: server.bytes
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: server.bytes
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: server.packets
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: server.packets
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - script:
      if: ctx.file?.mime_type != null
      lang: painless
      source: >-
        def parts = ctx.file.mime_type;
        if (parts != null && parts.size() > 0) {
          List l = new ArrayList();
          for (entry in parts.entrySet()) {
            l.add(entry.getValue());
          }
          List setList = new ArrayList(new HashSet(l));
          ctx.file.mime_type = setList;
        }
  - script:
      if: ctx.user?.email != null
      lang: painless
      source: >-
        def parts = ctx.user.email;
        if (parts != null && parts.size() > 0) {
          List l = new ArrayList();
          for (entry in parts.entrySet()) {
            l.add(entry.getValue());
          }
          List setList = new ArrayList(new HashSet(l));
          ctx.user.email = setList;
        }
  - script:
      description: Drops null/empty values recursively
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == '' || object == 'null') {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);
  - remove:
      field: event.original
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_failure: true
      ignore_missing: true
on_failure:
- append:
    field: error.message
    value: '{{{ _ingest.on_failure_message }}}'
