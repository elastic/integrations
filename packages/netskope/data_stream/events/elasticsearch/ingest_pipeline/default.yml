---
description: Pipeline for Netskope events
processors:
  - set:
      field: ecs.version
      value: '8.0.0'
  - json: 
      field: message
      add_to_root: true
      add_to_root_conflict_strategy: replace
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - append: 
      field: related.ip
      value: "{{{destination.ip}}}"
      if: ctx?.destination?.ip != null
      ignore_failure: true
  - append: 
      field: related.ip
      value: "{{{netskope.events.user.ip}}}"
      if: ctx?.netskope?.events?.user?.ip != null
      ignore_failure: true
  - append:
      field: related.ip
      value: "{{{source.ip}}}"
      if: ctx?.source?.ip != null
      ignore_failure: true
  - append:
      field: related.hosts
      value: "{{{destination.domain}}}" 
      if: ctx?.destination?.domain != null
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: related.hosts
      value: "{{{host.hostname}}}" 
      if: ctx?.host?.hostname != null
      allow_duplicates: false
      ignore_failure: true
  - user_agent:
      field: user_agent.original
      ignore_failure: true
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true
  - geoip:
      field: netskope.events.user.ip
      target_field: netskope.events.user.geo
      ignore_missing: true
  - uri_parts:
      field: netskope.events.url
      target_field: netskope.events.url
      keep_original: true
      remove_if_successful: false
      ignore_failure: true
  - uri_parts:
      field: netskope.events.web.url
      target_field: netskope.events.web.url
      keep_original: true
      remove_if_successful: false
      ignore_failure: true
  - uri_parts:
      field: netskope.events.login.url
      target_field: netskope.events.login.url
      keep_original: true
      remove_if_successful: false
      ignore_failure: true
  - uri_parts:
      field: netskope.events.url
      target_field: netskope.events.url
      keep_original: true
      remove_if_successful: false
      ignore_failure: true
  - json:
      field: netskope.events.site
      ignore_failure: true
  - json:
      field: netskope.events.app.name
      ignore_failure: true
  - lowercase:
      ignore_failure: true
      field: network.protocol
  - uri_parts:
      field: netskope.events.referer
      target_field: netskope.events.referer
      keep_original: true
      remove_if_successful: false
      ignore_failure: true
  - set: 
      field: netskope.events.managed_app
      value: true
      if: "['yes', 'true'].contains(ctx?.netskope?.events?.managed_app?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.managed_app
      value: false
      if: "['no', 'false'].contains(ctx?.netskope?.events?.managed_app?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.is_bypass_traffic
      value: true
      if: "['yes', 'true'].contains(ctx?.netskope?.events?.is_bypass_traffic?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.is_bypass_traffic
      value: false
      if: "['no', 'false'].contains(ctx?.netskope?.events?.is_bypass_traffic?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.is_unique_count
      value: true
      if: "['yes', 'true'].contains(ctx?.netskope?.events?.is_unique_count?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.is_unique_count
      value: false
      if: "['no', 'false'].contains(ctx?.netskope?.events?.is_unique_count?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.user.is_aggregated
      value: true
      if: "['yes', 'true'].contains(ctx?.netskope?.events?.user?.is_aggregated?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.user.is_aggregated
      value: false
      if: "['no', 'false'].contains(ctx?.netskope?.events?.user?.is_aggregated?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.alert.is_present
      value: true
      if: "['yes', 'true'].contains(ctx?.netskope?.events?.alert?.is_present?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.alert.is_present
      value: false
      if: "['no', 'false'].contains(ctx?.netskope?.events?.alert?.is_present?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.user.generated
      value: true
      if: "['yes', 'true'].contains(ctx?.netskope?.events?.user?.generated?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.user.generated
      value: false
      if: "['no', 'false'].contains(ctx?.netskope?.events?.user?.generated?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.ack
      value: true
      if: "['yes', 'true'].contains(ctx?.netskope?.events?.ack?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.ack
      value: false
      if: "['no', 'false'].contains(ctx?.netskope?.events?.ack?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.is_malicious
      value: true
      if: "['yes', 'true'].contains(ctx?.netskope?.events?.is_malicious?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.is_malicious
      value: false
      if: "['no', 'false'].contains(ctx?.netskope?.events?.is_malicious?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.obfuscate
      value: true
      if: "['yes', 'true'].contains(ctx?.netskope?.events?.obfuscate?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.obfuscate
      value: false
      if: "['no', 'false'].contains(ctx?.netskope?.events?.obfuscate?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.shared.is_shared
      value: true
      if: "['yes', 'true'].contains(ctx?.netskope?.events?.shared?.is_shared?.toString()?.toLowerCase())"
      ignore_failure: true
  - set: 
      field: netskope.events.shared.is_shared
      value: false
      if: "['no', 'false'].contains(ctx?.netskope?.events?.shared?.is_shared?.toString()?.toLowerCase())"
      ignore_failure: true
  - date:
      field: netskope.events.modified_at
      target_field: netskope.events.modified_at
      ignore_failure: true
      formats:
        - UNIX
  - script:
      if: ctx?.file?.mime_type != null
      lang: painless
      source: >-
        def parts = ctx.file.mime_type;
        if (parts != null && parts.size() > 0) {
          List l = new ArrayList();
          for (entry in parts.entrySet()) {
            l.add(entry.getValue());
          }
          List setList = new ArrayList(new HashSet(l));
          ctx.file.mime_type = setList;
        }
  - script:
      if: ctx?.user?.email != null
      lang: painless
      source: >-
        def parts = ctx.user.email;
        if (parts != null && parts.size() > 0) {
          List l = new ArrayList();
          for (entry in parts.entrySet()) {
            l.add(entry.getValue());
          }
          List setList = new ArrayList(new HashSet(l));
          ctx.user.email = setList;
        }
  - script:
      description: Drops null/empty values recursively
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "" || object == "null") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
- set:
    field: error.message
    value: "{{{ _ingest.on_failure_message }}}"
