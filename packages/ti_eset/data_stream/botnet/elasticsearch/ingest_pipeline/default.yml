---
description: Pipeline for processing botnet collection feed
processors:
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: event.kind
      value: enrichment
  - append:
      field: event.category
      value: threat
      allow_duplicates: false
  - append:
      field: event.type
      value: indicator
      allow_duplicates: false
  - set:
      field: threat.indicator.provider
      value: eset
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  - json:
      field: event.original
      target_field: eti
  - drop:
      if: ctx.eti?.type != 'indicator'
  - set:
      field: threat.feed.name
      value: "ESET Botnet stix 2.1"
  - date:
      field: eti.created
      target_field: "@timestamp"
      formats:
        - "ISO8601"
      if: "ctx.eti?.created != null"
  - date:
      field: eti.modified
      target_field: threat.indicator.last_seen
      formats:
        - "ISO8601"
      if: "ctx.eti?.modified != null"
  - set:
      field: threat.indicator.modified_at
      copy_from: threat.indicator.last_seen
      if: "ctx.threat?.indicator?.last_seen != null"
  - date:
      field: eti.valid_until
      target_field: eset.valid_until
      formats:
        - "ISO8601"
      if: "ctx.eti?.valid_until != null"
  - rename:
      field: eti.id
      target_field: eset.id
      ignore_missing: true
  - rename:
      field: eti.description
      target_field: threat.indicator.description
      ignore_missing: true
  - foreach:
      field: eti.labels
      processor:
        append:
          field: eset.labels
          value: "{{_ingest._value}}"
      ignore_missing: true
      ignore_failure: true
      if: ctx.eti?.labels != null
  - script:
      lang: painless
      params:
        "malicious-activity": 'High'
        "phishing-activity": 'High'
        "unwanted-activity": 'Medium'
        "benign": 'Low'
      if: ctx.eset?.labels != null
      source: >
        for (def label : ctx.eset.labels) {
          if (params.containsKey(label)) {
            ctx.threat.indicator.confidence = params.get(label);
            break;
          }
        }
  - split:
      field: eti.pattern
      target_field: eti._patterns
      separator: ' OR '
      ignore_missing: true
  - foreach:
      field: eti._patterns
      processor:
        grok:
          field: _ingest._value
          patterns:
            - "^\\[?file:hashes.'MD5'%{SPACE}=%{SPACE}'%{DATA:threat.indicator.file.hash.md5}'\\]?"
            - "^\\[?file:hashes.'SHA-1'%{SPACE}=%{SPACE}'%{DATA:threat.indicator.file.hash.sha1}'\\]?"
            - "^\\[?file:hashes.'SHA-256'%{SPACE}=%{SPACE}'%{DATA:threat.indicator.file.hash.sha256}'\\]?"
            - "^\\[url:value%{SPACE}=%{SPACE}'%{DATA:threat.indicator.url.original}'\\]?"
          ignore_failure: true

  - set:
      field: threat.indicator.type
      value: url
      if: "ctx.threat?.indicator?.url != null"
  - set:
      field: threat.indicator.type
      value: file
      if: ctx.threat?.indicator?.file != null
  - set:
      field: threat.indicator.name
      copy_from: eti.name
      if: "ctx.eti?.name != null"
  - remove:
      field:
        - eti
      ignore_missing: true
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: Drops null/empty values recursively.
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - set:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
