---
description: Pipeline for parsing MISP Threat Intel
processors:
  ####################
  # Event ECS fields #
  ####################
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: event.kind
      value: enrichment
  - set:
      field: event.category
      value: [threat]
  - set:
      field: event.type
      value: [indicator]

  ######################
  # General ECS fields #
  ######################
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: 'ctx.event?.original == null'
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: 'ctx.event?.original != null'
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - json:
      field: event.original
      target_field: misp.attribute
  - fingerprint:
      fields:
        - misp.attribute.uuid
        - misp.attribute.Event.uuid
      target_field: "_id"
      ignore_missing: true
  - set:
      field: threat.indicator.provider
      value: misp
  - date:
      if: ctx.misp?.attribute?.timestamp != null
      field: misp.attribute.timestamp
      formats:
        - UNIX
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: misp.attribute.Event
      target_field: misp.event
      ignore_missing: true
  - rename:
      field: misp.attribute.Tag
      target_field: misp.tag
      ignore_missing: true
  - rename:
      field: misp.attribute.Object
      target_field: misp.object
      ignore_missing: true
  - rename:
      field: misp.object.Attribute
      target_field: misp.object.attribute
      ignore_missing: true
  - rename:
      field: misp.object.meta-category
      target_field: misp.object.meta_category
      ignore_missing: true
  - foreach:
      if: ctx.misp?.attribute?.decay_score != null
      field: misp.attribute.decay_score
      processor:
        rename:
          ignore_missing: true
          field: _ingest._value.DecayingModel
          target_field: _ingest._value.decaying_model
  - date:
      if: ctx.misp?.event?.timestamp != null
      field: misp.event.timestamp
      target_field: misp.event.timestamp
      formats:
        - UNIX
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - date:
      if: ctx.misp?.event?.publish_timestamp != null
      field: misp.event.publish_timestamp
      target_field: misp.event.publish_timestamp
      formats:
        - UNIX
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - date:
      if: ctx.misp?.event?.sighting_timestamp != null
      field: misp.event.sighting_timestamp
      target_field: misp.event.sighting_timestamp
      formats:
        - UNIX
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - date:
      if: ctx.misp?.object?.timestamp != null
      field: misp.object.timestamp
      target_field: misp.object.timestamp
      formats:
        - UNIX
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'

  #####################
  # Threat ECS Fields #
  #####################
  - set:
      field: threat.feed.name
      value: "MISP"
  - rename:
      field: misp.attribute.first_seen
      target_field: threat.indicator.first_seen
      ignore_missing: true
  - rename:
      field: misp.attribute.last_seen
      target_field: threat.indicator.last_seen
      ignore_missing: true
  - convert:
      field: misp.event.analysis
      type: long
      target_field: threat.indicator.scanner_stats
      ignore_missing: true

  ## File/Hash indicator operations
  - set:
      field: threat.indicator.type
      value: file
      if: "ctx.misp?.attribute?.type != null && (['md5', 'impfuzzy', 'imphash', 'pehash', 'sha1', 'sha224', 'sha256', 'sha3-224', 'sha3-256', 'sha3-384', 'sha3-512', 'sha384', 'sha512', 'sha512/224', 'sha512/256', 'ssdeep', 'tlsh', 'vhash'].contains(ctx.misp.attribute.type) || ctx.misp.attribute.type.startsWith('filename'))"
  - rename:
      field: misp.attribute.value
      target_field: "threat.indicator.file.hash.{{misp.attribute.type}}"
      ignore_missing: true
      if: "ctx.threat?.indicator?.type == 'file' && ctx.misp?.attribute?.type != null && !ctx.misp.attribute.type.startsWith('filename')"
  - rename:
      field: misp.attribute.value
      target_field: threat.indicator.file.name
      ignore_missing: true
      if: "ctx.threat?.indicator?.type == 'file' && ctx.misp?.attribute?.type == 'filename'"
  - grok:
      field: misp.attribute.type
      patterns:
        - "%{WORD}\\|%{WORD:_tmp.hashtype}"
      ignore_missing: true
      if: ctx.misp?.attribute?.type != null && ctx.misp.attribute.type.startsWith('filename|')
  - grok:
      field: misp.attribute.value
      patterns:
        - "%{DATA:threat.indicator.file.name}\\|%{GREEDYDATA:_tmp.hashvalue}"
      ignore_missing: true
      if: ctx.misp?.attribute?.type != null && ctx.misp.attribute.type.startsWith('filename|')
  - set:
      field: threat.indicator.file.hash.{{_tmp.hashtype}}
      value: "{{_tmp.hashvalue}}"
      if: "ctx.misp?.attribute?.type != null && ctx.misp.attribute.type.startsWith('filename|') && ctx._tmp?.hashvalue != null && ctx._tmp.hashtype != null"

  ## URL/URI indicator operations
  - set:
      field: threat.indicator.type
      value: url
      if: "ctx.misp?.attribute?.type != null && ['url', 'link', 'uri'].contains(ctx.misp.attribute.type)"
  - uri_parts:
      field: misp.attribute.value
      target_field: threat.indicator.url
      keep_original: true
      remove_if_successful: true
      if: ctx.threat?.indicator?.type == 'url' && ctx.misp?.attribute?.type != 'uri'
  - set:
      field: threat.indicator.url.full
      value: "{{{threat.indicator.url.original}}}"
      ignore_empty_value: true
      if: "ctx.threat?.indicator?.type == 'url' && ctx.misp?.attribute?.type != 'uri'"

  ## Regkey indicator operations
  - set:
      field: threat.indicator.type
      value: windows-registry-key
      if: "ctx.misp?.attribute?.type != null && ctx.misp.attribute.type.startsWith('regkey')"
  - rename:
      field: misp.attribute.value
      target_field: threat.indicator.registry.key
      ignore_missing: true
      if: "ctx.threat?.indicator?.type == 'windows-registry-key' && ctx.misp?.attribute?.type == 'regkey'"
  - grok:
      field: misp.attribute.value
      patterns:
        - "%{DATA:threat.indicator.registry.key}\\|%{DATA:threat.indicator.registry.value}"
      ignore_missing: true
      if: "ctx.misp?.attribute?.type == 'regkey|value'"

  ## AS indicator operations
  - set:
      field: threat.indicator.type
      value: autonomous-system
      if: "ctx.misp?.attribute?.type != null && ctx.misp?.attribute?.type == 'AS'"
  - convert:
      field: misp.attribute.value
      type: long
      target_field: threat.indicator.as.number
      ignore_missing: true
      if: ctx.threat?.indicator?.type == 'autonomous-system'

  ## Domain/IP/Port indicator operations
  - set:
      field: threat.indicator.type
      value: domain-name
      if: "ctx.misp?.attribute?.type != null && (ctx.misp.attribute.type == 'hostname' || ctx.misp.attribute.type.startsWith('domain'))"
  - set:
      field: threat.indicator.type
      value: ipv4-addr
      if: "ctx.misp?.attribute?.type != null && ['ip-src', 'ip-src|port', 'ip-dst', 'ip-dst|port'].contains(ctx.misp.attribute.type)"
  - rename:
      field: misp.attribute.value
      target_field: threat.indicator.url.domain
      ignore_missing: true
      if: "ctx.misp?.attribute?.type != null && ctx.threat?.indicator?.type == 'domain-name' && ctx.misp.attribute.type != 'domain|ip' && ctx.threat?.indicator?.url?.domain == null"
  - rename:
      field: misp.attribute.value
      target_field: threat.indicator.ip
      ignore_missing: true
      if: "ctx.misp?.attribute?.type != null && ctx.threat?.indicator?.type == 'ipv4-addr' && !['domain|ip', 'ip-src|port', 'ip-dst|port'].contains(ctx.misp.attribute.type)"
  - grok:
      field: misp.attribute.value
      patterns:
        - "%{DATA:threat.indicator.url.domain}\\|%{IP:threat.indicator.ip}"
      ignore_missing: true
      if: ctx.misp?.attribute?.type == 'domain|ip' && ctx.threat?.indicator?.url?.domain == null
  - grok:
      field: misp.attribute.value
      patterns:
        - "%{IP:threat.indicator.ip}\\|%{NUMBER:threat.indicator.port}"
      ignore_missing: true
      if: "['ip-src|port', 'ip-dst|port'].contains(ctx.misp?.attribute?.type)"

  ## Email indicator operations
  # Currently this ignores email-message, except setting the type it will leave the rest of the fields under misp.
  - set:
      field: threat.indicator.type
      value: email-addr
      if: "ctx.misp?.attribute?.type != null && ['email-dst', 'email-src'].contains(ctx.misp.attribute.type)"
  - set:
      field: threat.indicator.type
      value: email-message
      if: "ctx.misp?.attribute?.type != null && ctx.misp?.attribute?.type.startsWith('email') && !['email-dst', 'email-src'].contains(ctx.misp.attribute.type)"
  - rename:
      field: misp.attribute.value
      target_field: threat.indicator.email.address
      ignore_missing: true
      if: ctx.threat?.indicator?.type == 'email-addr'
  - rename:
      field: misp.event.event_creator_email
      target_field: user.email
      ignore_missing: true
  - append:
      field: user.roles
      value: "reporting_user"
      if: ctx?.user?.email != null

  ## MAC Address indicator operations
  - set:
      field: threat.indicator.type
      value: mac-addr
      if: "ctx.misp?.attribute?.type != null && ['mac-address', 'mac-eui-64'].contains(ctx.misp.attribute.type)"
  - rename:
      field: misp.attribute.value
      target_field: threat.indicator.mac
      ignore_missing: true
      if: ctx.threat?.indicator?.type == 'mac-addr'

  ## Artifact indicator operations
  - set:
      field: threat.indicator.type
      value: artifact
      if: "ctx.misp?.attribute?.type == 'mime-type'"

  ## Mutex indicator operations
  - set:
      field: threat.indicator.type
      value: mutex
      if: "ctx.misp?.attribute?.type == 'mutex'"

  ## Software indicator operations
  - set:
      field: threat.indicator.type
      value: software
      if: "ctx.misp?.attribute?.type == 'cpe'"

  ###################
  # Tags ECS fields #
  ###################
  # Stripping special characters from tags
  - script:
      lang: painless
      if: ctx.misp?.tag != null
      source: |
        def tags = ctx.misp.tag.stream()
           .map(t -> t.name.replace('\\', '').replace('"', ''))
           .collect(Collectors.toList());
        def tlpTags = tags.stream()
           .filter(t -> t.startsWith('tlp:'))
           .map(t -> t.replace('tlp:', '').toUpperCase())
           .collect(Collectors.toList());

        ctx.temp_tags = tags;
        ctx.threat.indicator.marking = [ 'tlp': tlpTags ];
  - foreach:
      field: temp_tags
      processor:
        append:
          field: tags
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
      if: ctx.temp_tags != null

  #####################
  # Organization ECS Fields #
  #####################
  - rename:
      field: misp.event.org_id
      target_field: organization.id
      ignore_missing: true

  #################
  # Convert types #
  #################
  - convert:
      field: misp.attribute.distribution
      type: long
      ignore_missing: true
  - convert:
      field: misp.object.distribution
      type: long
      ignore_missing: true
  - convert:
      field: misp.event.distribution
      type: long
      ignore_missing: true
  - convert:
      field: threat.indicator.port
      type: long
      ignore_missing: true
  - convert:
      field: misp.event.attribute_count
      type: long
      ignore_missing: true
  - convert:
      field: misp.event.threat_level_id
      type: long
      ignore_missing: true

  - foreach:
      if: ctx.misp?.object?.attribute != null
      field: misp.object.attribute
      processor:
        append:
          field: debug_timestamp
          value: '{{{_ingest._value.timestamp}}}'
          if: ctx._ingest?._value != null

  - foreach:
      if: ctx.misp?.object?.attribute != null
      field: misp.object.attribute
      processor:
        date:
          field: _ingest._value.timestamp
          target_field: _ingest._value.timestamp
          tag: date_object_attribute_timestamp
          formats:
            - UNIX
          ignore_failure: true

  ######################
  # Cleanup processors #
  ######################
  - script:
      lang: painless
      if: ctx?.misp != null
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
        map.values().removeIf(v -> v == null);
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
        }
        handleMap(ctx);
  # Removing fields not needed anymore, either because its copied somewhere else, or is not relevant to this event
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
  - remove:
      field:
        - misp.attribute.value
      ignore_missing: true
      # Special-case email subject as it is potentially useful, but cannot yet be
      # put in threat.indicator.email.subject as it is not an ECS field.
      if: ctx.threat?.indicator?.type != null && ctx.misp?.attribute?.type != "email-subject"
  - remove:
      field:
        - temp_tags
        - misp.attribute.timestamp
        - misp.tag
        - misp.event.analysis
        - _tmp
        - json
      ignore_missing: true

on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
