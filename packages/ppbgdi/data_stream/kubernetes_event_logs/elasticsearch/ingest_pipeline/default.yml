---
description: Pipeline for processing sample logs
processors:
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: event.kind
      value: event
  - set:
      field: event.category
      value: ["api"]
  - append:
      field: event.type
      value: ["access"]
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: 'ctx.event?.original == null'
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: 'ctx.event?.original != null'
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  # Process root level (k8s attribute) fields
  - rename:
      field: k8s.cluster.name
      target_field: orchestrator.cluster.name
      ignore_missing: true
  - rename:
      field: k8s.resource.name
      target_field: orchestrator.resource.name
      ignore_missing: true

  # Process message (event)
  - json:
      field: event.original
      target_field: _tmp
  - set:
      description: Set kubernetes event object type on events collected by otel
      field: kubernetes.object.type
      copy_from: _tmp.type
      ignore_empty_value: true
      if: ctx._tmp?.object != null
  - lowercase:
      field: kubernetes.object.type
      ignore_missing: true
  - set:
      description: Remove object nesting on events collected by otel k8sobjects receiver
      field: _tmp
      copy_from: _tmp.object
      ignore_empty_value: true
  - rename:
      field: _tmp.apiVersion
      target_field: orchestrator.api_version
      ignore_missing: true
  - rename:
      field: _tmp.deprecatedCount
      target_field: kubernetes.event.deprecated.count
      ignore_missing: true
  - rename:
      field: _tmp.deprecatedFirstTimestamp
      target_field: kubernetes.event.deprecated.timestamp.first
      ignore_missing: true
  - rename:
      field: _tmp.deprecatedLastTimestamp
      target_field: kubernetes.event.deprecated.timestamp.last
      ignore_missing: true
  - rename:
      field: _tmp.deprecatedSource
      target_field: kubernetes.event.deprecated.source
      ignore_missing: true
  - date:
      field: _tmp.metadata.creationTimestamp
      formats:
        - ISO8601
      if: ctx._tmp?.metadata.creationTimestamp != null
  - remove:
      field: _tmp.metadata.creationTimestamp
      ignore_missing: true
  - rename:
      field: _tmp.metadata.managedFields
      target_field: kubernetes.event.metadata.managed_fields
      ignore_missing: true
  - rename:
      field: _tmp.metadata.name
      target_field: event.id
      ignore_missing: true
  - rename:
      field: _tmp.metadata.namespace
      target_field: kubernetes.event.metadata.namespace
      ignore_missing: true
  - rename:
      field: _tmp.metadata.resourceVersion
      target_field: kubernetes.event.metadata.resource.version
      ignore_missing: true
  - rename:
      field: _tmp.metadata.uid
      target_field: kubernetes.event.metadata.uid
      ignore_missing: true
  - lowercase:
      field: _tmp.kind
  - set:
      field: event.kind
      copy_from: _tmp.event.kind
      ignore_empty_value: true
  - remove:
      field: _tmp.kind
  - rename:
      field: _tmp.note
      target_field: message
      ignore_missing: true
  - rename:
      field: _tmp.reason
      target_field: event.reason
      ignore_missing: true
  - set:
      field: orchestrator.api_version
      copy_from: _tmp.regarding.apiVersion
      ignore_empty_value: true
  - remove:
      field: _tmp.regarding.apiVersion
      ignore_missing: true
  - set:
      field: orchestrator.resource.type
      copy_from: _tmp.regarding.kind
      ignore_empty_value: true
  - remove:
      field: _tmp.regarding.kind
      ignore_missing: true
  - set:
      field: orchestrator.resource.name
      copy_from: _tmp.regarding.name
      ignore_empty_value: true
  - remove:
      field: _tmp.regarding.name
      ignore_missing: true
  - set:
      field: orchestrator.namespace
      copy_from: _tmp.regarding.namespace
      ignore_empty_value: true
  - remove:
      field: _tmp.regarding.namespace
      ignore_missing: true
  - rename:
      field: _tmp.regarding.resourceVersion
      target_field: kubernetes.event.regarding.version
      ignore_missing: true
  - rename:
      field: _tmp.regarding.uid
      target_field: kubernetes.event.regarding.uid
      ignore_missing: true
  - rename:
      field: _tmp.reportingController
      target_field: kubernetes.event.reporting_controller
      ignore_missing: true
  - rename:
      field: _tmp.type
      target_field: kubernetes.event.type
      ignore_missing: true


  # Cleanup
  - script:
      lang: painless
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
      description: Drops null/empty values recursively.


on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
