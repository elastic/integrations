---
description: Pipeline for processing service STAC url query string
processors:
  - script:
      description: Script to parse query strings.
      source: |
        // Split the query-string into a list of parameters
        String[] paramList = ctx?.url?.query?.splitOnToken('&');
        Map queryParams = new HashMap(); // the new query param list to fill up
        for (def x : paramList) {
          String[] paramSplit = x.splitOnToken('=',2); // Split kv on first '=' char
          if (paramSplit.length == 2) { // KV parameter
            queryParams.put(paramSplit[0].toLowerCase(), paramSplit[1].toLowerCase());
          } else { // Flag parameter
            queryParams.put(x.toLowerCase(), 'true');
          }
        }
        // Create ppbgdi field if not existing
        if (ctx?.ppbgdi == null){
          ctx.ppbgdi = new HashMap();
        }
        // Create ppbgdi.app field if not existing
        if (ctx?.ppbgdi?.app == null){
          ctx.ppbgdi.app = new HashMap();
        }
        // Add the parsed query-parameters to the document source
        ctx.ppbgdi.app.query_params = queryParams;
  - split:
      field: ppbgdi.app.query_params.collections
      separator: ","
      if: 'ctx?.ppbgdi?.app?.query_params.collections != null && ctx?.ppbgdi?.app?.query_params.collections.contains(",")'
  - split:
      field: ppbgdi.app.query_params.ids
      separator: ","
      if: 'ctx?.ppbgdi?.app?.query_params.ids != null && ctx?.ppbgdi?.app?.query_params.ids.contains(",")'

on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'


