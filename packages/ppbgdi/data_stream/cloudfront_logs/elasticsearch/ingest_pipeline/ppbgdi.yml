---
description: Pipeline for processing ppbgdi specific fields of cloudfront logs
processors:
  - set:
      field: ecs.version
      value: '8.11.0'
  # - set:
  #     field: event.ingested
  #     value: '{{_ingest.timestamp}}'
  - pipeline:
      description: Pipeline used to create fields for elastic-package tests
      name: '{{ IngestPipeline "elastic-package-test" }}'
      if: ctx?.tags != null && ctx?.tags.contains('elastic-package-test')
  - script:
      source: |
        String environment = "";
        String domain = ctx?.aws?.s3?.object?.key.splitOnToken("/")[0];

        if      ( domain.endsWith('geo.admin.ch') ) { environment = 'prod'; }
        else if ( domain.endsWith('prod.bgdi.ch') ) { environment = 'prod'; }
        else if ( domain.endsWith('int.bgdi.ch')  ) { environment = 'int';  }
        else if ( domain.endsWith('dev.bgdi.ch')  ) { environment = 'dev';  }

        if (environment != "") {
          if (!ctx.containsKey('service')) {
            ctx['service'] = new HashMap();
          }
          ctx.service.environment = environment;
        }
      if: ctx?.aws?.s3?.object?.key != null
  - fail:
      description: Fail if service.environment not available.
      message: Missing 'service.environment'. Check domain parser config for missing domain.
      if: 'ctx?.service?.environment == null'
  - grok:
      description: Parse the system from the beginning of the domain (until first .)
      field: aws.s3.object.key
      patterns:
        - "^(sys-)?(?<ppbgdi.app.system>[A-Za-z0-9-]+)\\."
      ecs_compatibility: v1
      ignore_missing: true

on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: "{{ _ingest.on_failure_message }}"
