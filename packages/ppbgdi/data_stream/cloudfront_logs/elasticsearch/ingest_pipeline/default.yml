---
description: "Pipeline for CloudFront standard access logs"

processors:
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: event.kind
      value: event
  - set:
      field: event.category
      value: ["web"]
  - append:
      field: event.type
      value: ["access"]
  - set:
      field: cloud.provider
      value: aws
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: 'ctx.event?.original == null'
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: 'ctx.event?.original != null'
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - drop:
      if: "ctx?.event?.original?.startsWith('#')"
      description: "Drop if logline contains header(s), which startswith `#`"
  - csv:
      field: event.original
      separator: "\t"
      target_fields:
      - _tmp.date
      - _tmp.time
      - aws.cloudfront.edge_location
      - http.response.bytes
      - source.address
      - http.request.method
      - aws.cloudfront.domain
      - url.path
      - http.response.status_code
      - http.request.referrer
      - _tmp.user_agent
      - url.query
      - aws.cloudfront.cookies
      - aws.cloudfront.edge_result_type
      - http.request.id
      - destination.address
      - network.protocol
      - http.request.bytes
      - event.duration
      - _tmp.forwarded_ip
      - _tmp.ssl_protocol
      - tls.cipher
      - aws.cloudfront.edge_response_result_type
      - _tmp.protocol
      - aws.cloudfront.fle_status
      - aws.cloudfront.fle_encrypted_fields
      - source.port
      - aws.cloudfront.time_to_first_byte
      - aws.cloudfront.edge_detailed_result_type
      - aws.cloudfront.content_type
      - http.response.body.bytes
      - aws.cloudfront.range_start
      - aws.cloudfront.range_end

  - script:
      lang: painless
      description: Remove all fields which are null or empty.  '-' values are treated as empty
      source: |
        void handleMap(Map map, Map params) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x, params);
            } else if (x instanceof List) {
                handleList(x, params);
            }
          }
          map.values().removeIf(v ->
            (v == null) ||
            (v == '') ||
            (v == '-') ||
            (v instanceof Map && v.size() == 0) ||
            (v instanceof List && v.size() == 0));
        }
        void handleList(List list, Map params) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x, params);
              } else if (x instanceof List) {
                  handleList(x, params);
              }
          }
          list.removeIf(v ->
            (v == null) ||
            (v == '') ||
            (v == '-') ||
            (v instanceof Map && v.size() == 0) ||
            (v instanceof List && v.size() == 0));
        }
        handleMap(ctx, params);
  - set:
      field: _tmp.time
      value: "{{ _tmp.date }} {{ _tmp.time }}"
  - date:
      field: _tmp.time
      target_field: '@timestamp'
      ignore_failure: true
      formats:
        - yyyy-MM-dd HH:mm:ss
  - convert:
      field: http.response.bytes
      type: long
      ignore_missing: true
  - convert:
      field: http.response.status_code
      type: long
      ignore_missing: true
  - urldecode:
      field: _tmp.user_agent
      ignore_missing: true
  - user_agent:
      field: _tmp.user_agent
      target_field: user_agent
      ignore_missing: true
  - convert:
      field: http.request.bytes
      type: long
      ignore_missing: true
  - convert:
      field: event.duration
      type: float
      ignore_missing: true
  - script:
      lang: painless
      if: ctx.event?.duration != null
      params:
        S_TO_NS: 1000000000
      source: >-
        ctx.event.duration *= params.S_TO_NS;
  - lowercase:
      field: _tmp.forwarded_ip
      ignore_missing: true
  - gsub:
      description: In rare cases, the field contains hex encoded whitspaces (\20). We replace them by whitespaces again to not break parsing.
      field: _tmp.forwarded_ip
      pattern: "\\\\x20"
      replacement: " "
      ignore_missing: true
  - split:
      field: _tmp.forwarded_ip
      separator: ',\s*'
      ignore_missing: true
  - convert:
      description: Creates a target field containing valid ip's if ALL values are valid ip's.
      field: _tmp.forwarded_ip
      target_field: _tmp.forwarded_ip_converted
      type: ip
      ignore_missing: true
      on_failure:
        - append:
            description: Add convert failure to error message and continue.
            field: error.message
            value: '{{{ _ingest.on_failure_message }}}'
  - set:
      field: related.ip
      copy_from: _tmp.forwarded_ip_converted
      ignore_empty_value: true
  - set:
      field: network.forwarded_ip
      copy_from: _tmp.forwarded_ip_converted
      ignore_empty_value: true
  - script:
      lang: painless
      description: Set tls protocol and version
      if: 'ctx?._tmp?.ssl_protocol != null'
      source: |
        String ssl_protocol = ctx?._tmp?.ssl_protocol;
        String[] protocol_version = ssl_protocol.splitOnToken('v');

        if (!ctx.containsKey('tls')) {
          ctx['tls'] = new HashMap();
        }

        ctx.tls.version_protocol = protocol_version[0];
        ctx.tls.version          = protocol_version[1];
  - dissect:
      field: _tmp.protocol
      pattern: "%{}/%{http.version}"
      ignore_failure: true
  - set:
      field: destination.domain
      copy_from: destination.address
      ignore_empty_value: true
  - convert:
      field: source.port
      type: long
      ignore_missing: true
  - convert:
      field: aws.cloudfront.time_to_first_byte
      type: float
      ignore_missing: true
  - convert:
      field: http.response.body.bytes
      type: long
      ignore_missing: true
  - script:
      lang: painless
      description: This script builds the `url.full` field out of the available `url.*` parts.
      source: |
        def full = "";
        if(ctx.network?.protocol != null && ctx.network?.protocol != "") {
            full += ctx.network.protocol+"://";
        }
        if(ctx.destination?.domain != null && ctx.destination?.domain != "") {
            full += ctx.destination.domain;
        }
        if(ctx.url?.path != null && ctx.url?.path != "") {
            full += ctx.url.path;
        }
        if(ctx.url?.query != null && ctx.url?.query != "") {
            full += "?"+ctx.url.query;
        }
        if(full != "") {
            ctx._tmp.url_full = full
        }
  - uri_parts:
      field: _tmp.url_full
      target_field: url
      keep_original: false
      ignore_missing: true
  - rename:
      field: _tmp.url_full
      target_field: url.full
      ignore_missing: true
  - registered_domain:
      field: url.domain
      target_field: url
      ignore_missing: true
  - convert:
      field: source.address
      target_field: source.ip
      type: ip
      ignore_missing: true
      ignore_failure: true
  - set:
      field: network.type
      value: ipv4
      if: 'ctx.source?.ip != null && ctx.source?.ip.contains(".")'
  - set:
      field: network.type
      value: ipv6
      if: 'ctx.source?.ip != null && ctx.source?.ip.contains(":")'
  # IP Geolocation Lookup
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  # IP Autonomous System (AS) Lookup
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - append:
      field: related.ip
      value: "{{source.ip}}"
      if: ctx?.source?.ip != null
  - append:
      field: related.hosts
      value: "{{destination.domain}}"
      allow_duplicates: false
      if: ctx?.destination?.domain != null
  - append:
      field: related.hosts
      value: "{{aws.cloudfront.domain}}"
      allow_duplicates: false
      if: ctx?.aws?.cloudfront?.domain != null
  - set:
      field: event.id
      copy_from: http.request.id
      ignore_empty_value: true
  - set:
      field: event.outcome
      value: failure
      if: ctx?.http?.response?.status_code >= 400
  - set:
      field: event.outcome
      value: success
      if: ctx?.http?.response?.status_code < 400 && ctx.http?.response?.status_code > 000
  - set:
      field: event.outcome
      value: failure
      if: ctx?.http?.response?.status_code == 000
  - script:
      lang: painless
      if: ctx?.event?.duration != null
      params:
        S_TO_NS: 1000000000
      source: >-
        ctx.event.duration *= params.S_TO_NS;
  - lowercase:
      field: tls.version_protocol
      ignore_missing: true
  - remove:
      field: _tmp
      ignore_missing: true
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
  - pipeline:
      name: '{{ IngestPipeline "ppbgdi" }}'
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'
