---
description: Pipeline for processing Azure firewall logs.
processors:
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: event.kind
      value: event
  - set:
      field: event.category
      value: [network]
  - set:
      field: event.type
      value: [connection]
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: 'ctx.event?.original == null'
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: 'ctx.event?.original != null'
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - json:
      field: event.original
      target_field: json
      ignore_failure: true
  - date:
      field: json.time
      target_field: '@timestamp'
      ignore_failure: true
      formats:
        - ISO8601
  - remove:
      field: json.time
      ignore_missing: true
  - rename:
      field: json.resourceId
      target_field: azure.resource_id
      ignore_missing: true
  - rename:
      field: json.properties.DestinationIp
      target_field: destination.ip
      ignore_missing: true
  - rename:
      field: json.properties.DestinationPort
      target_field: destination.port
      ignore_missing: true
  - rename:
      field: json.properties.Policy
      target_field: azure.firewall.policy
      ignore_missing: true
  - rename:
      field: json.properties.Protocol
      target_field: azure.firewall.protocol
      ignore_missing: true
  - rename:
      field: json.properties.Rule
      target_field: rule.name
      ignore_missing: true
  - rename:
      field: json.properties.RuleCollection
      target_field: rule.ruleset
      ignore_missing: true
  - rename:
      field: json.properties.RuleCollectionGroup
      target_field: azure.firewall.rule_collection_group
      ignore_missing: true
  - rename:
      field: json.properties.SourceIp
      target_field: source.ip
      ignore_missing: true
  - rename:
      field: json.properties.SourcePort
      target_field: source.port
      ignore_missing: true
  - rename:
      field: json.properties.TranslatedIp
      target_field: destination.ip
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: json.properties.TranslatedPort
      target_field: destination.port
      ignore_missing: true
      ignore_failure: true
      if: ctx?.azure?.firewall?.properties?.DestinationPort == null
  - rename:
      field: json.properties.Action
      target_field: event.action
      ignore_missing: true
  - rename:
      field: json.properties.ActionReason
      target_field: event.reason
      ignore_missing: true
  - rename:
      field: json.properties.Fqdn
      target_field: destination.domain
      ignore_missing: true
  - rename:
      field: json.properties.IsExplicitProxyRequest
      target_field: azure.firewall.is_explicit_proxy_request
      ignore_missing: true
  - rename:
      field: json.properties.IsTlsInspected
      target_field: azure.firewall.is_tls_inspected
      ignore_missing: true
  - uri_parts:
      field: json.properties.TargetUrl
      if: ctx.json?.properties?.TargetUrl != null
      tag: uri_parts_targeturl
      keep_original: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
      target_field: url
  - remove:
      field: json.properties.TargetUrl
      ignore_missing: true
  - rename:
      field: json.properties.WebCategory
      target_field: azure.firewall.web_category
      ignore_missing: true
  - rename:
      field: json.properties.DnssecOkBit
      target_field: azure.firewall.dnssec_ok_bit
      ignore_missing: true  
  - rename:
      field: json.properties.EDNS0BufferSize
      target_field: azure.firewall.edns0_buffer_size
      ignore_missing: true
  - rename:
      field: json.properties.ErrorMessage
      target_field: error.message
      ignore_missing: true
  - convert:
      field: json.properties.ErrorNumber
      target_field: error.id
      type: string
      ignore_missing: true
      if: ctx.json?.properties?.ErrorNumber != ""
  - rename:
      field: json.properties.QueryClass
      target_field: dns.question.class
      ignore_missing: true
  - convert:
      field: json.properties.QueryId
      target_field: dns.id
      type: string
      ignore_missing: true
      if: ctx.json?.properties?.QueryId != ""  
  - rename:
      field: json.properties.QueryName
      target_field: dns.question.name
      ignore_missing: true    
  - rename:
      field: json.properties.QueryType
      target_field: dns.question.type
      ignore_missing: true  
  - rename:
      field: json.properties.RequestDurationSecs
      target_field: azure.firewall.request_duration_secs
      ignore_missing: true  
  - rename:
      field: json.properties.RequestSize
      target_field: azure.firewall.request_size
      ignore_missing: true  
  - rename:
      field: json.properties.ResponseCode
      target_field: dns.response_code
      ignore_missing: true  
  - rename:
      field: json.properties.ResponseFlags
      target_field: dns.header_flags
      ignore_missing: true  
  - rename:
      field: json.properties.ResponseSize
      target_field: azure.firewall.response_size
      ignore_missing: true  
  - grok:
      field: json.properties.msg
      patterns:
        - "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Action: %{DATA:azure.firewall.action}. $" 
        - "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Action: %{DATA:azure.firewall.action}. Policy: %{DATA:azure.firewall.policy}. Rule Collection Group: %{DATA:azure.firewall.rule_collection_group}. Rule Collection: %{DATA:rule.ruleset}. Rule: %{DATA:rule.name}$"
        - "^%{DATA:azure.firewall.proto} Type=%{DATA:azure.firewall.icmp.request.code} request from %{IPORHOST:source.address} to %{IPORHOST:destination.address}. Action: %{DATA:azure.firewall.action}. $"
        - "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long} was DNAT'ed to %{IP:destination.nat.ip}:%{NUMBER:destination.nat.port:long}$"
        - "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long} was DNAT'ed to %{IP:destination.nat.ip}:%{NUMBER:destination.nat.port:long}. Policy: %{DATA:azure.firewall.policy}. Rule Collection Group: %{DATA:azure.firewall.rule_collection_group}. Rule Collection: %{DATA:rule.ruleset}. Rule: %{DATA:rule.name}$"
        - "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:(%{NUMBER:source.port:long})? to %{IPORHOST:destination.address}:(%{NUMBER:destination.port:long})?. Action: %{DATA:azure.firewall.action}. Signature: %{DATA:rule.id}. IDS: %{DATA:rule.name}. Priority: %{NUMBER:event.risk_score:long}. Classification: %{DATA:rule.category}$" 
        - "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Url: %{HOSTNAME:url.original}. Action: %{DATA:azure.firewall.action}. ThreatIntel: %{DATA:rule.name}$" 
      if: ctx?.json?.operationName == 'AzureFirewallNetworkRuleLog' || ctx?.json?.operationName == 'AzureFirewallNatRuleLog'

  - grok:
      field: json.properties.msg
      patterns:
        - "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Action: %{DATA:azure.firewall.action}. Policy: %{DATA:azure.firewall.policy}. Rule Collection Group: %{DATA:azure.firewall.rule_collection_group}. Rule Collection: %{DATA:rule.ruleset}. Rule: %{DATA:rule.name}. Web Category: %{DATA:rule.category}$"
        - "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Url: %{DATA:url.original}. Action: %{DATA:azure.firewall.action}. Policy: %{DATA:azure.firewall.policy}. Rule Collection Group: %{DATA:azure.firewall.rule_collection_group}. Rule Collection: %{DATA:rule.ruleset}. Rule: %{DATA:rule.name}$"
        - "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Url: %{DATA:url.original}. Action: %{DATA:azure.firewall.action}. %{DATA:event.reason}$"
        - "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Action: %{DATA:azure.firewall.action}. Rule Collection: %{DATA:rule.ruleset}. Rule: %{DATA:rule.name}$"
        - "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long} to %{IPORHOST:destination.address}:%{NUMBER:destination.port:long}. Action: %{DATA:azure.firewall.action}. %{DATA:event.reason}$"
        - "^%{DATA:azure.firewall.proto} request from %{IPORHOST:source.address}:%{NUMBER:source.port:long}. Action: %{DATA:azure.firewall.action}. Reason: %{DATA:event.reason}$"
      if: ctx?.json?.operationName == 'AzureFirewallApplicationRuleLog'

  - grok:
      field: json.properties.msg
      patterns:
        - "^DNS Request: %{IPORHOST:source.address}:%{NUMBER:source.port:long} - %{DATA:azure.firewall.event_original_uid} %{DATA:dns.question.type} %{DATA:dns.question.class} %{DATA:dns.question.name}. %{DATA:network.transport} %{NUMBER:source.bytes:long} %{DATA:azure.firewall.dnssec_bool_flag:boolean} %{NUMBER:azure.firewall.dnssec_buffer_size:long} %{DATA:dns.response_code} %{DATA:dns.header_flags} %{NUMBER:destination.bytes:long} %{DATA:azure.firewall.duration}$"
      if: ctx?.json?.operationName == 'AzureFirewallDnsProxyLog'
      
  - set:
      field: json.event.alert.action
      value: denied
      if: ctx.azure?.firewall?.action == 'Deny'
  - set:
      field: json.event.alert.action
      value: allowed
      if: ctx.azure?.firewall?.action == 'Allow'
  - append:
      field: event.type
      value: "{{json.event.alert.action}}"
      if: ctx.json?.event?.alert?.action != null
  - grok:
      field: source.address
      patterns:
        - "%{IP:source.ip}"
        - "%{HOSTNAME:source.domain}"
      ignore_missing: true
      
  - grok:
      field: destination.address
      patterns:
        - "%{IP:destination.ip}"
        - "%{HOSTNAME:destination.domain}"
      ignore_missing: true

  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name 
      ignore_missing: true

  - append:
      if: ctx?.source?.ip != null
      field: related.ip
      value: "{{source.ip}}"
      allow_duplicates: false
      ignore_failure: true
  - append:
      if: ctx?.destination?.ip != null
      field: related.ip
      value: "{{destination.ip}}"
      allow_duplicates: false
      ignore_failure: true
  - append:
      if: ctx?.destination?.nat?.ip != null
      field: related.ip
      value: "{{destination.nat.ip}}"
      allow_duplicates: false
      ignore_failure: true
    
  - append:
      if: ctx?.source?.domain != null
      field: related.hosts
      value: "{{source.domain}}"
      allow_duplicates: false
      ignore_failure: true
  - append:
      if: ctx?.destination?.domain != null
      field: related.hosts
      value: "{{destination.domain}}"
      allow_duplicates: false
      ignore_failure: true
  - append:
      if: ctx?.dns?.question?.name != null
      field: related.hosts
      value: "{{dns.question.name}}"
      allow_duplicates: false
      ignore_failure: true
  - lowercase:
      field: azure.firewall.proto
      ignore_failure: true
  - set:
      field: network.transport
      value: "{{azure.firewall.proto}}"
      if: "ctx?.azure?.firewall?.proto != null && ['udp', 'tcp', 'icmp'].contains(ctx.azure.firewall.proto)"
  - set:
      field: network.protocol
      value: "{{azure.firewall.proto}}"
      if: "ctx?.network?.transport == null"
  - remove:
      field:
        - azure.firewall.proto
      ignore_missing: true
  - lowercase:
      field: azure.firewall.protocol
      if: ctx.azure?.firewall?.protocol != null
  - set:
      field: network.transport
      value: "{{azure.firewall.protocol}}"
      if: "ctx.azure?.firewall?.protocol != null && ['udp', 'tcp', 'icmp'].contains(ctx.azure.firewall.protocol) && ctx.json?.category != null && ['AZFWDnsQuery', 'AZFWApplicationRule', 'AZFWNetworkRule', 'AZFWNatRule'].contains(ctx.json.category)"
  - set:
      field: network.protocol
      value: "{{azure.firewall.protocol}}"
      if: "ctx.network?.transport == null && ctx.json?.category != null && ['AZFWDnsQuery', 'AZFWApplicationRule', 'AZFWNetworkRule', 'AZFWNatRule'].contains(ctx.json.category)"
  - remove:
      field:
        - azure.firewall.protocol
      ignore_missing: true
  - script:
      lang: painless
      ignore_failure: true
      if: ctx?.network?.transport != null
      source: |
        def transport = ctx.network.transport;
        if (transport == 'udp') {
            ctx.network.iana_number = '17';
        } else if (transport == 'tcp') {
            ctx.network.iana_number = '6';
        }
  - uppercase:
      field: dns.header_flags
      ignore_missing: true
  - split:
      field: dns.header_flags
      separator: ","
      ignore_missing: true
  - set:
      field: dns.type
      value: "query"
      if: ctx.json?.category == 'AZFWDnsQuery'
  - rename:
      field: json.category
      target_field: azure.firewall.category
      ignore_missing: true
  - rename:
      field: json.operationName
      target_field: azure.firewall.operation_name
      ignore_missing: true
  - set:
      field: observer.type
      value: firewall
  - set:
      field: observer.vendor
      value: Azure
  - set:
      field: observer.product
      value: "Network Firewall"


  - remove:
      field:
        - json
        - azure.firewall.proto
      ignore_missing: true
  - pipeline:
      name: '{{ IngestPipeline "azure-shared-pipeline" }}'
  - set:
      field: observer.name
      copy_from: azure.resource.name
      ignore_empty_value: true
  - script:
      description: Drops null/empty values recursively.
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);

on_failure:
  - append:
      field: "error.message"
      value: "{{ _ingest.on_failure_message }} {{ _ingest.on_failure_processor_type }}"
  - remove:
      field:
        - json
        - _conf
        - message
      ignore_missing: true
