---
description: Pipeline for processing Azure Firewall network rule logs.
processors:
  - grok:
      field: json.properties.msg
      patterns:
        - "^%{DATA:network.transport} request from %{IP:source.address}:%{NUMBER:source.port:long} to %{IP:destination.address}:%{NUMBER:destination.port:long}. Action: %{DATA:azure.firewall.action}. $" 
        - "^%{DATA:network.transport} Type=%{DATA:azure.firewall.icmp.request.code} request from %{IP:source.address} to %{IP:destination.address}. Action: %{DATA:azure.firewall.action}. $"
        - "^%{DATA:network.transport} request from %{IP:source.address}:%{NUMBER:source.port:long} to %{IP:destination.address}:%{NUMBER:destination.port:long} was DNAT'ed to %{IP:destination.nat.ip}:%{NUMBER:destination.nat.port:long}$"

  - set:
      field: json.event.alert.action
      value: denied
      if: ctx.azure?.firewall?.action == 'Deny'
  - set:
      field: json.event.alert.action
      value: allowed
      if: ctx.azure?.firewall?.action == 'Allow'
  - append:
      field: event.type
      value: "{{json.event.alert.action}}"
      if: ctx.json?.event?.alert?.action != null

  - set:
      field: source.ip
      copy_from: source.address
      ignore_empty_value: true
  - set:
      field: destination.ip
      copy_from: destination.address
      ignore_empty_value: true
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name 
      ignore_missing: true

  - append:
      if: ctx?.source?.ip != null
      field: related.ip
      value: "{{source.ip}}"
      allow_duplicates: false
      ignore_failure: true
  - append:
      if: ctx?.destination.ip != null
      field: related.ip
      value: "{{destination.ip}}"
      allow_duplicates: false
      ignore_failure: true

  - lowercase:
      field: network.transport
      ignore_failure: true

  - script:
      lang: painless
      ignore_failure: true
      if: ctx?.network?.transport != null
      source: |
        def transport = ctx.network.transport;
        if (transport == 'udp') {
            ctx.network.iana_number = '17';
        } else if (transport == 'tcp') {
            ctx.network.iana_number = '6';
        }
  - append:
      field: related.hosts
      value: '{{{host.name}}}' 
      if: ctx.host?.name != null
      allow_duplicates: false
      ignore_failure: true

on_failure:
  - append:
      field: error.message
      value: >-
        error in Network pipeline:
        error in [{{_ingest.on_failure_processor_type}}] processor{{#_ingest.on_failure_processor_tag}}
        with tag [{{_ingest.on_failure_processor_tag }}]{{/_ingest.on_failure_processor_tag}}
        {{ _ingest.on_failure_message }}
