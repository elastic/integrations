---
description: Pipeline for processing audit logs.
processors:
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: 8.11.0
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      ignore_missing: true
      description: Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.
      if: ctx.event?.original == null
  - remove:
      field: message
      tag: remove_message
      ignore_missing: true
      description: The `message` field is no longer required if the document has an `event.original` field.
      if: ctx.event?.original != null
  - json:
      field: event.original
      tag: json_event_original
      target_field: json
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - fingerprint:
      fields:
        - json.guid
        - json.ts
      tag: fingerprint_audit
      target_field: _id
      ignore_missing: true
  - set:
      field: event.kind
      tag: set_event_kind_to_event
      value: event
  - script:
      description: Set ECS categorization fields
      tag: set_ecs_categorization_fields
      lang: painless
      ignore_failure: true
      params:
        'login':
          category:
            - authentication
          type:
            - start
        'logout':
          category:
            - authentication
          type:
            - end
        'execute':
          category:
            - configuration
          type:
            - access
            - info
        'read':
          category:
            - configuration
          type:
            - access
            - info
        'create':
          category:
            - configuration
          type:
            - creation
        'edit':
          category:
            - configuration
          type:
            - change
        'delete':
          category:
            - configuration
          type:
            - deletion
        'download':
          category:
            - configuration
          type:
            - info
      source: |-
        if (ctx.json?.audit?.action == null || params.get(ctx.json.audit.action.toLowerCase()) == null) {
          return;
        }
        def hm = new HashMap(params.get(ctx.json.audit.action.toLowerCase()));
        hm.forEach((k, v) -> {
          ctx.event[k] = v
        });
  - set:
      field: observer.vendor
      tag: set_observer_vendor
      value: Proofpoint
  - set:
      field: observer.product
      tag: set_observer_product
      value: Proofpoint On Demand
  - rename:
      field: json.audit.action
      tag: rename_audit_action
      target_field: proofpoint_on_demand.audit.action
      ignore_missing: true
  - set:
      field: event.action
      tag: set_event_action_from_audit_action
      copy_from: proofpoint_on_demand.audit.action
      ignore_empty_value: true
  - lowercase:
      field: event.action
      tag: lowercase_event_action
      ignore_missing: true
  - rename:
      field: json.guid
      tag: rename_guid
      target_field: proofpoint_on_demand.audit.guid
      ignore_missing: true
  - set:
      field: event.id
      tag: set_event_id_from_audit_guid
      copy_from: proofpoint_on_demand.audit.guid
      ignore_empty_value: true
  - rename:
      field: json.audit.level
      tag: rename_audit_level
      target_field: proofpoint_on_demand.audit.level
      ignore_missing: true
  - set:
      field: log.level
      tag: set_log_level_from_audit_level
      copy_from: proofpoint_on_demand.audit.level
      ignore_empty_value: true
  - rename:
      field: json.metadata.customerId
      tag: rename_metadata_customerId
      target_field: proofpoint_on_demand.audit.metadata.customer_id
      ignore_missing: true
  - convert:
      field: json.metadata.origin.data.agent
      tag: convert_metadata_origin_data_agent_to_ip
      target_field: proofpoint_on_demand.audit.metadata.origin.data.agent_ip
      type: ip
      ignore_missing: true
      if: ctx.json?.metadata?.origin?.data?.agent != ''
      on_failure:
        - rename:
            field: json.metadata.origin.data.agent
            tag: rename_metadata_origin_data_agent
            target_field: proofpoint_on_demand.audit.metadata.origin.data.agent
            ignore_missing: true
  - set:
      field: observer.hostname
      tag: set_observer_hostname_from_audit_metadata_origin_data_agent
      copy_from: proofpoint_on_demand.audit.metadata.origin.data.agent
      ignore_empty_value: true
  - append:
      field: related.hosts
      tag: append_metadata_origin_data_agent_into_related_hosts
      value: '{{{proofpoint_on_demand.audit.metadata.origin.data.agent}}}'
      allow_duplicates: false
      if: ctx.proofpoint_on_demand?.audit?.metadata?.origin?.data?.agent != null
  - append:
      field: observer.ip
      tag: append_audit_metadata_origin_data_agent_ip_into_observer_ip
      value: '{{{proofpoint_on_demand.audit.metadata.origin.data.agent_ip}}}'
      allow_duplicates: false
      if: ctx.proofpoint_on_demand?.audit?.metadata?.origin?.data?.agent_ip != null
  - append:
      field: related.ip
      tag: append_metadata_origin_data_agent_ip_into_related_ip
      value: '{{{proofpoint_on_demand.audit.metadata.origin.data.agent_ip}}}'
      allow_duplicates: false
      if: ctx.proofpoint_on_demand?.audit?.metadata?.origin?.data?.agent_ip != null
  - rename:
      field: json.metadata.origin.data.cid
      tag: rename_metadata_origin_data_cid
      target_field: proofpoint_on_demand.audit.metadata.origin.data.cid
      ignore_missing: true
  - set:
      field: observer.name
      tag: set_observer_name_from_audit_metadata_origin_data_cid
      copy_from: proofpoint_on_demand.audit.metadata.origin.data.cid
      ignore_empty_value: true
  - convert:
      field: json.metadata.origin.data.version
      tag: convert_metadata_origin_data_version_to_string
      target_field: proofpoint_on_demand.audit.metadata.origin.data.version
      type: string
      ignore_missing: true
  - set:
      field: observer.version
      tag: set_observer_version_from_audit_metadata_origin_data_version
      copy_from: proofpoint_on_demand.audit.metadata.origin.data.version
      ignore_empty_value: true
  - convert:
      field: json.metadata.origin.schemaVersion
      tag: convert_metadata_origin_schemaVersion_to_string
      target_field: proofpoint_on_demand.audit.metadata.origin.schema_version
      type: string
      ignore_missing: true
  - rename:
      field: json.metadata.origin.type
      tag: rename_metadata_origin_type
      target_field: proofpoint_on_demand.audit.metadata.origin.type
      ignore_missing: true
  - foreach:
      field: json.metadata.trace
      if: ctx.json?.metadata?.trace instanceof List
      processor:
        date:
          field: _ingest._value.ts
          tag: date_metadata_trace_ts
          target_field: _ingest._value.ts
          formats:
            - ISO8601
          on_failure:
            - remove:
                field: _ingest._value.ts
                ignore_missing: true
  - rename:
      field: json.metadata.trace
      tag: rename_metadata_trace
      target_field: proofpoint_on_demand.audit.metadata.trace
      ignore_missing: true
  - rename:
      field: json.audit.resourceName
      tag: rename_audit_resourceName
      target_field: proofpoint_on_demand.audit.resource_name
      ignore_missing: true
  - rename:
      field: json.audit.resourceType
      tag: rename_audit_resourceType
      target_field: proofpoint_on_demand.audit.resource_type
      ignore_missing: true
  - rename:
      field: json.audit.service.cid
      tag: rename_audit_service_cid
      target_field: proofpoint_on_demand.audit.service.cid
      ignore_missing: true
  - rename:
      field: json.audit.service.customerId
      tag: rename_audit_service_customerId
      target_field: proofpoint_on_demand.audit.service.customer_id
      ignore_missing: true
  - rename:
      field: json.audit.service.id
      tag: rename_audit_service_id
      target_field: proofpoint_on_demand.audit.service.id
      ignore_missing: true
  - set:
      field: service.id
      tag: set_service_id_from_audit_service_id
      copy_from: proofpoint_on_demand.audit.service.id
      ignore_empty_value: true
  - convert:
      field: json.audit.service.ipAddress
      tag: convert_audit_service_ipAddress_to_ip
      target_field: proofpoint_on_demand.audit.service.ip_address
      type: ip
      ignore_missing: true
      if: ctx.json?.audit?.service?.ipAddress != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - append:
      field: related.ip
      tag: append_service_ip_address_into_related_ip
      value: '{{{proofpoint_on_demand.audit.service.ip_address}}}'
      allow_duplicates: false
      if: ctx.proofpoint_on_demand?.audit?.service?.ip_address != null
  - foreach:
      field: json.audit.tags
      if: ctx.json?.audit?.tags instanceof List
      processor:
        convert:
          field: _ingest._value.value
          tag: convert_audit_tags_value_to_string
          type: string
          ignore_missing: true
  - rename:
      field: json.audit.tags
      tag: rename_audit_tags
      target_field: proofpoint_on_demand.audit.tags
      ignore_missing: true
  - set:
      field: labels
      tag: set_labels_from_audit_tags
      copy_from: proofpoint_on_demand.audit.tags
      ignore_empty_value: true
  - script:
      description: Define labels object.
      tag: script_define_labels_object
      ignore_failure: true
      if: ctx.proofpoint_on_demand?.audit?.tags instanceof List
      lang: painless
      source: >-
        ctx.put("labels", new HashMap());
        for (tag in ctx.proofpoint_on_demand.audit.tags) {
          ctx.labels.put(tag.name, tag.value);
        }
  - script:
      description: Dynamically map event.outcome from tags.
      tag: script_dynamically_map_event_outcome
      ignore_failure: true
      if: ctx.proofpoint_on_demand?.audit?.tags instanceof List
      lang: painless
      source: >-
        if (ctx.proofpoint_on_demand.audit.action == null) {
          return;
        }
        String action = ctx.proofpoint_on_demand.audit.action + '.';
        String outcome;
        for (tag in ctx.proofpoint_on_demand.audit.tags) {
          if (tag.name.startsWith(action)) {
            if (tag.value.toLowerCase() == "true") {
              outcome = "success";
            } else if (tag.value.toLowerCase() == "false") {
              outcome = "failure";
            }
          }
        }
        ctx.action.put("outcome", outcome);
  - date:
      field: json.ts
      tag: date_ts
      target_field: proofpoint_on_demand.audit.ts
      formats:
        - ISO8601
      if: ctx.json?.ts != null && ctx.json.ts != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: '@timestamp'
      tag: set_@timestamp_from_audit_ts
      copy_from: proofpoint_on_demand.audit.ts
      ignore_empty_value: true
  - rename:
      field: json.audit.user.email
      tag: rename_audit_user_email
      target_field: proofpoint_on_demand.audit.user.email
      ignore_missing: true
  - set:
      field: source.user.email
      tag: set_source_user_email_from_audit_user_email
      copy_from: proofpoint_on_demand.audit.user.email
      ignore_empty_value: true
  - append:
      field: related.user
      tag: append_user_email_into_related_user
      value: '{{{proofpoint_on_demand.audit.user.email}}}'
      allow_duplicates: false
      if: ctx.proofpoint_on_demand?.audit?.user?.email != null
  - rename:
      field: json.audit.user.id
      tag: rename_audit_user_id
      target_field: proofpoint_on_demand.audit.user.id
      ignore_missing: true
  - set:
      field: source.user.id
      tag: set_source_user_id_from_audit_user_id
      copy_from: proofpoint_on_demand.audit.user.id
      ignore_empty_value: true
  - append:
      field: related.user
      tag: append_user_id_into_related_user
      value: '{{{proofpoint_on_demand.audit.user.id}}}'
      allow_duplicates: false
      if: ctx.proofpoint_on_demand?.audit?.user?.id != null
  - convert:
      field: json.audit.user.ipAddress
      tag: convert_audit_user_ipAddress_to_ip
      target_field: proofpoint_on_demand.audit.user.ip_address
      type: ip
      ignore_missing: true
      if: ctx.json?.audit?.user?.ipAddress != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: source.ip
      tag: set_source_ip_from_audit_user_ip_address
      copy_from: proofpoint_on_demand.audit.user.ip_address
      ignore_empty_value: true
  - append:
      field: related.ip
      tag: append_user_ip_address_into_related_ip
      value: '{{{proofpoint_on_demand.audit.user.ip_address}}}'
      allow_duplicates: false
      if: ctx.proofpoint_on_demand?.audit?.user?.ip_address != null
  - geoip:
      field: source.ip
      tag: geoip_source_ip
      target_field: source.geo
      ignore_missing: true
  - rename:
      field: audit.user.roleAssigned
      tag: rename_audit_user_roleAssigned
      target_field: proofpoint_on_demand.audit.user.roles_assigned
      ignore_missing: true
  - rename:
      field: json.audit.user.rolesAssigned
      tag: rename_audit_user_rolesAssigned
      target_field: proofpoint_on_demand.audit.user.roles_assigned
      ignore_missing: true
  - append:
      field: source.user.roles
      tag: append_proofpoint_on_demand_audit_user_roles_assigned_into_source_user_roles
      value: '{{{proofpoint_on_demand.audit.user.roles_assigned}}}'
      allow_duplicates: false
      if: ctx.proofpoint_on_demand?.audit?.user?.roles_assigned != null
  - remove:
      field:
        - proofpoint_on_demand.audit.action
        - proofpoint_on_demand.audit.guid
        - proofpoint_on_demand.audit.metadata.origin.data.agent
        - proofpoint_on_demand.audit.metadata.origin.data.agent_ip
        - proofpoint_on_demand.audit.metadata.origin.data.cid
        - proofpoint_on_demand.audit.metadata.origin.data.version
        - proofpoint_on_demand.audit.service.id
        - proofpoint_on_demand.audit.ts
        - proofpoint_on_demand.audit.user.email
        - proofpoint_on_demand.audit.user.id
        - proofpoint_on_demand.audit.user.ip_address
        - proofpoint_on_demand.audit.user.roles_assigned
        - proofpoint_on_demand.audit.level
      tag: remove_custom_duplicate_fields
      ignore_missing: true
      if: ctx.tags == null || !ctx.tags.contains('preserve_duplicate_custom_fields')
  - remove:
      field: json
      tag: remove_json
      ignore_missing: true
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: Drops null/empty values recursively.
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
