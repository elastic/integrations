config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/httpjson/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  user: {{username}}
  password: {{password}}
  batch_size: {{batch_size}}
  total_rows: 0
  time_amount: {{time_amount}}
  time_unit: {{time_unit}}
  want_more: false
redact:
  fields:
    - password
program: |
  (
    state.with(has(state.want_more) && !(state.want_more) ?
      post_request(
        state.url + "/login",
        "application/json",
        {"username":state.user,"password":state.password}.encode_json()
      ).do_request().as(resp, bytes(resp.Body).decode_json().as(body, {
          "access_token": body.token,
      }))
    :
      {}
    ).as(state, state.with(
      request("GET", state.url + "/v2/alert?timeType=relative&detailed=true&limit=" + string(state.batch_size) + "&timeAmount=" +
        (
          has(state.want_more) && !(state.want_more) ?
          (
            has(state.cursor) && has(state.cursor.last_time_amount) &&
            state.cursor.last_time_amount != null ?
             string((now - timestamp(int(timestamp(0)+duration(string(int(state.cursor.last_time_amount))+"ms")))).getMinutes() + 1) + "&timeUnit=minute"
          :
             string(state.time_amount) + "&timeUnit=" + state.time_unit
          )
        :
          (
            has(state.cursor) && has(state.cursor.first_time_amount) && state.cursor.first_time_amount != null ?
              string((now - timestamp(int(timestamp(0)+duration(string(int(state.cursor.first_time_amount))+"ms")))).getMinutes() + 1) + "&timeUnit=minute"
            :
              "null"
          ) + (has(state.page_token) ? "&pageToken=" + state.page_token : "")
        )
      ).with({
         "Header":{
           "x-redlock-auth": [state.access_token],
         }
      }).do_request().as(resp,
        bytes(resp.Body).decode_json().as(inner_body, {
          "events": inner_body.items.map(e, {
            "message": e.encode_json(),
          }),
          "url": state.url,
          "page_token": has(inner_body.nextPageToken) ? inner_body.nextPageToken : "",
          "cursor": {
            "last_time_amount": (
              has(inner_body.items) && inner_body.items.size() > 0 ?
                (
                  has(state.cursor) && has(state.cursor.last_time_amount) &&
                  inner_body.items.map(e, e.lastUpdated).max() < state.cursor.last_time_amount ?
                    state.cursor.last_time_amount
                  :
                    inner_body.items.map(e, e.lastUpdated).max()
                )
              :
                (
                  has(state.cursor) && has(state.cursor.last_time_amount) ?
                    state.cursor.last_time_amount
                  :
                    null
                )
              ),
              "first_time_amount": (
                 has(state.cursor) && has(state.cursor.first_time_amount) &&
                 state.cursor.first_time_amount != null && has(inner_body.items) ?
                   (
                     ((int(state.total_rows) + size(inner_body.items)) < inner_body.totalRows) && state.want_more ?
                       state.cursor.first_time_amount
                     :
                       state.cursor.last_time_amount
                   )
                 :
                   int(timestamp(now)-duration(string(
                     state.time_unit == "year" ?
                       int(state.time_amount)*365*24*60
                     : state.time_unit == "month" ?
                       int(state.time_amount)*30*24*60
                     : state.time_unit == "week" ?
                       int(state.time_amount)*7*24*60
                     : state.time_unit == "day" ?
                       int(state.time_amount)*24*60
                     : state.time_unit == "hour" ?
                       int(state.time_amount)*60
                     : int(state.time_amount)
                   )+"m"))*1000
              ),
            },
            "want_more": (int(state.total_rows) + size(inner_body.items)) < inner_body.totalRows,
            "user": state.user,
            "password": state.password,
            "batch_size": string(state.batch_size),
            "time_amount": string(state.time_amount),
            "time_unit": state.time_unit,
            "total_rows": (int(state.total_rows) + size(inner_body.items)) < inner_body.totalRows ?
              int(state.total_rows) + size(inner_body.items)
            :
              0,
          }))
      )
    )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
