config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
max_executions: {{max_executions}}
resource.url: {{api_host}}
auth:
  oauth2:
    client:
      id: {{client_id}}
      secret: {{client_secret}}
    token_url: "{{api_host}}/oauth/token"
    scopes:
      {{#each token_scopes as |token_scope|}}
         - {{token_scope}}
      {{/each}}  
    endpoint_params:
      grant_type: client_credentials
state:
  want_more: false
  limit: {{limit}}
  initial_interval: {{initial_interval}}
program: |-
  {"startTime": state.?cursor.searchAfter.orValue(timestamp(now() - duration(state.initial_interval)).format(time_layout.RFC3339))}.as(timeframe,
  	request(
  		"POST",
  		state.url.trim_right("/") + "/v2024/search/events?" + {
  			"limit": [string(state.limit)],
  		}.format_query()
  	).with(
  		{
  			"Header": {
  				"Content-Type": ["application/json"],
  			},
  			"Body": {
  				"searchAfter": [string(timeframe.startTime)],
  				"queryType": "SAILPOINT",
  				"sort": ["created"],
  				"query": {"query": "*"},
  				"queryResultFilter": {},
  			}.encode_json(),
  		}
  	).do_request().as(resp,
  		bytes(resp.Body).decode_json().as(body,
  			state.with(
  				{
  					"events": body.map(e,
  						{
  							"message": e,
  							?"event.original": state.?preserve_original_event.orValue(false) ? optional.of(e.encode_json()) : optional.none(),
  						}
  					),
  					"want_more": size(body) == state.limit,
  					"cursor": {"searchAfter": (size(body) > 0) ? string(body[int(size(body) - 1)].created) : state.?cursor.searchAfter.orValue(timeframe.startTime)},
  				}
  			)
  		)
  	)
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
