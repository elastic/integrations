==========================================================================================================================================
FROM metrics-ess_billing* 
| where ess.billing.type == "capacity"
| keep @timestamp, ess.billing.kind, ess.billing.rate.ecu_value, ess.billing.deployment*, ess.billing.sku
| GROK ess.billing.sku "%{WORD}.%{WORD}.%{WORD:node_type}"
| eval node_type = CASE(
    ess.billing.kind != "elasticsearch",
    ess.billing.kind,
    node_type 
)
| LIMIT 100

==========================================================================================================================================

FROM metrics-ess_billing*
| where ess.billing.total_ecu > 0
| STATS total_ecu = SUM(ess.billing.total_ecu) by ess.billing.deployment_id, ess.billing.deployment_name, BUCKET(@timestamp, 1 day), ess.billing.kind, ess.billing.sku
| GROK ess.billing.sku "%{WORD}.%{WORD}.%{WORD:node_type}"
| eval node_type = CASE(
    ess.billing.kind != "elasticsearch",
    ess.billing.kind,
    node_type 
)
| DROP ess.billing.kind, ess.billing.sku

==========================================================================================================================================

PUT _transform/cluster_cost_all_nodes
{
  "source": {
    "index": [
      "metrics-ess_billing.billing-*"
    ],
    "query": {
      "range": {
        "ess.billing.total_ecu": {
          "gt": 0
        }
      }
    }
  },
  "dest": {
    "index": "billing_cluster_cost_nodes_lookup",
    "aliases": [],
    "pipeline": "metrics-chargeback.billing-0.1.6"
  },
  "frequency": "60m",
  "sync": {
    "time": {
      "field": "event.ingested",
      "delay": "1h"
    }
  },
  "pivot": {
    "group_by": {
      "@timestamp": {
        "date_histogram": {
          "field": "@timestamp",
          "calendar_interval": "1d"
        }
      },
      "deployment_id": {
        "terms": {
          "field": "ess.billing.deployment_id"
        }
      },
      "deployment_name": {
        "terms": {
          "field": "ess.billing.deployment_name"
        }
      },
      "sku": {
        "terms": {
          "field": "ess.billing.sku"
        }
      },
      "kind": {
        "terms": {
          "field": "ess.billing.kind"
        }
      }
    },
    "aggregations": {
      "total_ecu": {
        "sum": {
          "field": "ess.billing.total_ecu"
        }
      }
    }
  },
  "description": "Aggregates daily total ECU usage per deployment from billing metrics, using ingested timestamps with a 1-hour sync delay and running every 60 minutes.",
  "settings": {
    "deduce_mappings": false
  }
}

POST _transform/cluster_cost_all_nodes/_start

GET billing_cluster_cost_lookup/_search
{
  "size": 0,
  "query": {
    "bool": {
      "filter": [
        {
          "range": {
            "@timestamp": {
              "gte": 1741046400000,
              "lte": 1741046400000
            }
          }
        },
        {
          "match_phrase": {
            "deployment_name": "data_clstr_ 01835923"
          }
        }
      ]
    }
  },
  "aggs": {
    "total_cost": {
      "sum": {
        "field": "total_ecu"
      }
    }
  }
}

GET billing_cluster_cost_nodes_lookup/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "range": {
            "@timestamp": {
              "gte": 1741046400000,
              "lte": 1741046400000
            }
          }
        },
        {
          "match_phrase": {
            "deployment_name": "data_clstr_ 01835923"
          }
        }
      ]
    }
  },
  "size": 0,
  "aggs": {
    "total_cost": {
      "sum": {
        "field": "total_ecu"
      }
    }
  }
}

// Issue is that we are missing out on "non node type costs" with this transform

31.135100105777383

1,0379999876022339 + 4,044000148773193 + 12,119999885559082 + 9,09000015258789 + 3,0299999713897705 = 29,3220001459

==========================================================================================================================================

PUT _transform/cluster_cost_all_nodes
{
  "source": {
    "index": [
      "metrics-ess_billing.billing-*"
    ],
    "query": {
      "range": {
        "ess.billing.total_ecu": {
          "gt": 0
        }
      }
    }
  },
  "dest": {
    "index": "billing_cluster_cost_nodes_lookup",
    "aliases": [],
    "pipeline": "metrics-chargeback.billing-0.1.6"
  },
  "frequency": "60m",
  "sync": {
    "time": {
      "field": "event.ingested",
      "delay": "1h"
    }
  },
  "pivot": {
    "group_by": {
      "@timestamp": {
        "date_histogram": {
          "field": "@timestamp",
          "calendar_interval": "1d"
        }
      },
      "deployment_id": {
        "terms": {
          "field": "ess.billing.deployment_id"
        }
      },
      "deployment_name": {
        "terms": {
          "field": "ess.billing.deployment_name"
        }
      },
      "sku": {
        "terms": {
          "field": "ess.billing.sku"
        }
      }
    },
    "aggregations": {
      "total_ecu": {
        "sum": {
          "field": "ess.billing.total_ecu"
        }
      }
    }
  },
  "description": "Aggregates daily total ECU usage per deployment from billing metrics, using ingested timestamps with a 1-hour sync delay and running every 60 minutes.",
  "settings": {
    "deduce_mappings": false
  }
}

POST _transform/cluster_cost_all_nodes/_start

GET billing_cluster_cost_lookup/_search
{
  "size": 0,
  "query": {
    "bool": {
      "filter": [
        {
          "range": {
            "@timestamp": {
              "gte": 1741046400000,
              "lte": 1741046400000
            }
          }
        },
        {
          "match_phrase": {
            "deployment_name": "data_clstr_ 01835923"
          }
        }
      ]
    }
  },
  "aggs": {
    "total_cost": {
      "sum": {
        "field": "total_ecu"
      }
    }
  }
}

GET billing_cluster_cost_nodes_lookup/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "range": {
            "@timestamp": {
              "gte": 1741046400000,
              "lte": 1741046400000
            }
          }
        },
        {
          "match_phrase": {
            "deployment_name": "data_clstr_ 01835923"
          }
        }
      ]
    }
  },
  "size": 0,
  "aggs": {
    "total_cost": {
      "sum": {
        "field": "total_ecu"
      }
    }
  }
}

// Now the total_ecu is the same atleas




FROM billing_cluster_cost_lookup
| grok sku "%{WORD}.es.%{WORD:es_node_type}"
| GROK sku "%{WORD}.%{WORD:non_es_node_type}"
| eval cost_type = CASE(
    es_node_type is not null, es_node_type,
    non_es_node_type  
)
| eval cost_type = CASE(
    cost_type == "data", "data-transfer",
    cost_type == "datahot", "datahot/datacontent",
    cost_type
)
| DROP es_node_type, non_es_node_type
| EVAL config_join_key = "chargeback_config"
| LOOKUP JOIN chargeback_conf_lookup ON config_join_key
| LOOKUP JOIN cluster_deployment_contribution_lookup ON composite_key
| LOOKUP JOIN cluster_tier_contribution_lookup ON composite_key
| EVAL 
    indexing = CASE (deployment_sum_indexing_time > 0, tier_sum_indexing_time / deployment_sum_indexing_time * total_ecu),
    querying = CASE (deployment_sum_query_time > 0, tier_sum_query_time / deployment_sum_query_time * total_ecu),
    data_set = CASE (deployment_sum_data_set_store_size > 0, tier_sum_data_set_store_size / deployment_sum_data_set_store_size * total_ecu),
    store = CASE (deployment_sum_store_size > 0, tier_sum_store_size / deployment_sum_store_size * total_ecu),
    storage = CASE (store == 0, data_set, store),
    total_weight_hot = conf_storage_weight + conf_query_weight + conf_indexing_weight,
    total_weight_cold = conf_storage_weight + conf_query_weight,
    blended = CASE (
        tier == "hot/content",
        ((storage * conf_storage_weight) + (querying * conf_query_weight) + (indexing * conf_indexing_weight)) / total_weight_hot,
        ((storage * conf_storage_weight) + (querying * conf_query_weight)) / total_weight_cold
    ) * conf_ecu_rate
| STATS  
    agg_blended = sum(blended)
    BY 
        @timestamp,
        cost_type,
        deployment_id
| WHERE agg_blended > 0 


FROM billing_cluster_cost_lookup
| grok sku "%{WORD}.es.%{WORD:es_node_type}"
| GROK sku "%{WORD}.%{WORD:non_es_node_type}"
| eval cost_type = CASE(
    es_node_type is not null, es_node_type,
    non_es_node_type  
)
| eval cost_type = CASE(
    cost_type == "data", "data-transfer",
    cost_type == "datahot", "datahot/datacontent",
    cost_type
)
| DROP es_node_type, non_es_node_type
| where cost_type IN ("datahot/datacontent", "datawarm", "datacold", "datafrozen")
| EVAL config_join_key = "chargeback_config"
| LOOKUP JOIN chargeback_conf_lookup ON config_join_key
| LOOKUP JOIN cluster_deployment_contribution_lookup ON composite_key
| LOOKUP JOIN cluster_tier_contribution_lookup ON composite_key
| EVAL
    indexing = CASE (deployment_sum_indexing_time > 0, tier_sum_indexing_time / deployment_sum_indexing_time * total_ecu) * conf_ecu_rate,
    querying = CASE (deployment_sum_query_time > 0, tier_sum_query_time / deployment_sum_query_time * total_ecu) * conf_ecu_rate,
    data_set = CASE (deployment_sum_data_set_store_size > 0, tier_sum_data_set_store_size / deployment_sum_data_set_store_size * total_ecu),
    store = CASE (deployment_sum_store_size > 0, tier_sum_store_size / deployment_sum_store_size * total_ecu),
    storage = CASE (store == 0, data_set, store) * conf_ecu_rate,
    total_weight_hot = conf_storage_weight + conf_query_weight + conf_indexing_weight,
    total_weight_cold = conf_storage_weight + conf_query_weight,
    blended = CASE (
        tier == "hot/content",
        ((storage / conf_ecu_rate * conf_storage_weight) + (querying / conf_ecu_rate * conf_query_weight) + (indexing / conf_ecu_rate * conf_indexing_weight)) / total_weight_hot,
        ((storage / conf_ecu_rate * conf_storage_weight) + (querying / conf_ecu_rate * conf_query_weight)) / total_weight_cold
    ) * conf_ecu_rate
| STATS
    agg_indexing = sum(indexing),
    agg_querying = sum(querying),
    agg_storage = sum(storage),
    agg_blended = sum(blended)
    BY
        tier
| WHERE agg_blended > 0