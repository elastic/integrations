---
description: "Pipeline for Palo Alto Networks PAN-OS Logs"
processors:
  - set:
      field: ecs.version
      value: '8.3.0'
  - set:
      field: observer.vendor
      value: Palo Alto Networks
  - set:
      field: observer.product
      value: PAN-OS
  - set:
      field: observer.type
      value: firewall

  - set:
      field: event.timezone
      value: "{{{_conf.tz_offset}}}"
      if: ctx?._conf?.tz_offset != null && ctx?._conf?.tz_offset != 'local'

# Collects the first few parts of the message to be used for conditional parsing later
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - grok:
      field: event.original
      patterns:
        - "^%{DATA},%{TIMESTAMP:event.created},%{FIELD:observer.serial_number},%{FIELD:panw.panos.type},(?:%{FIELD:panw.panos.sub_type})?,%{FIELD},%{TIMESTAMP:_temp_.generated_time},%{GREEDYDATA:message}$"
      pattern_definitions:
        TIMESTAMP: "%{PANW_DATE}|%{TIMESTAMP_ISO8601}"
        PANW_DATE: "%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{TIME}"
        FIELD: "[^,]*"

## TRAFFIC
  - pipeline:
      if: ctx?.panw?.panos?.type == "TRAFFIC"
      name: '{{ IngestPipeline "traffic" }}'
## THREAT
  - pipeline:
      if: ctx?.panw?.panos?.type == "THREAT"
      name: '{{ IngestPipeline "threat" }}'
## HIPMATCH
  - pipeline:
      if: 'ctx?.panw?.panos?.type == "HIPMATCH" || ctx?.panw?.panos?.type == "HIP-MATCH"'
      name: '{{ IngestPipeline "hipmatch" }}'
## USER ID
  - pipeline:
      if: ctx?.panw?.panos?.type == "USERID"
      name: '{{ IngestPipeline "userid" }}'
## GLOBAL PROTECT
  - pipeline:
      if: ctx?.panw?.panos?.type == "GLOBALPROTECT"
      name: '{{ IngestPipeline "globalprotect" }}'

# Set @timestamp to the time when the entry was generated at the data plane.
  - date:
      if: "ctx?.event?.timezone == null"
      field: "_temp_.generated_time"
      formats:
        - "yyyy/MM/dd HH:mm:ss"
        - "strict_date_optional_time_nanos"
      on_failure: [{"append": {"field": "error.message", "value": "{{ _ingest.on_failure_message }}"}}]
  - date:
      if: "ctx?.event?.timezone != null"
      field: "_temp_.generated_time"
      formats:
        - "yyyy/MM/dd HH:mm:ss"
        - "strict_date_optional_time_nanos"
      timezone: "{{{ event.timezone }}}"
      on_failure: [{"append": {"field": "error.message", "value": "{{ _ingest.on_failure_message }}"}}]

# event.created is the time the event was received at the management plane.
  - date:
      if: "ctx?.event?.timezone == null && ctx?.event?.created != null"
      field: "event.created"
      target_field: "event.created"
      formats:
        - "yyyy/MM/dd HH:mm:ss"
        - "strict_date_optional_time_nanos"
      on_failure: [{"append": {"field": "error.message", "value": "{{ _ingest.on_failure_message }}"}}]
  - date:
      if: "ctx?.event?.timezone != null && ctx?.event?.created != null"
      field: "event.created"
      target_field: "event.created"
      formats:
        - "yyyy/MM/dd HH:mm:ss"
        - "strict_date_optional_time_nanos"
      timezone: "{{{ event.timezone }}}"
      on_failure: [{"append": {"field": "error.message", "value": "{{ _ingest.on_failure_message }}"}}]

# convert integer fields as the output of the CSV processor is always a string.
  - convert:
      type: long
      ignore_missing: true
      field: source.bytes
  - convert:
      type: long
      ignore_missing: true
      field: source.packets
  - convert:
      type: long
      ignore_missing: true
      field: source.port
  - convert:
      type: long
      ignore_missing: true
      field: destination.bytes
  - convert:
      type: long
      ignore_missing: true
      field: destination.packets
  - convert:
      type: long
      ignore_missing: true
      field: destination.port
  - convert:
      type: long
      ignore_missing: true
      field: network.bytes
  - convert:
      type: long
      ignore_missing: true
      field: network.packets
  - convert:
      type: long
      ignore_missing: true
      field: event.duration
  - convert:
      type: long
      ignore_missing: true
      field: _temp_.labels
  - convert:
      type: long
      ignore_missing: true
      field: panw.panos.sequence_number
  - convert:
      type: long
      ignore_missing: true
      field: source.nat.port
  - convert:
      type: long
      ignore_missing: true
      field: destination.nat.port
  - convert:
      type: long
      ignore_missing: true
      field: panw.panos.repeat_count
  - convert:
      type: long
      ignore_missing: true
      field: panw.panos.scp.chunks
  - convert:
      type: long
      ignore_missing: true
      field: panw.panos.scp.chunks_sent
  - convert:
      type: long
      ignore_missing: true
      field: panw.panos.scp.chunks_received

# Remove PCAP ID when zero (no packet capture).
  - remove:
      if: 'ctx?.panw?.panos?.network?.pcap_id == "0"'
      field:
        - panw.panos.network.pcap_id

# Extract 'flags' bitfield into labels.
  - script:
      lang: painless
      if: 'ctx?._temp_?.labels != null && ctx._temp_.labels != 0'
      params:
        pcap_included: 0x80000000
        ipv6_session: 0x02000000
        ssl_decrypted: 0x01000000
        url_filter_denied: 0x00800000
        nat_translated: 0x00400000
        captive_portal: 0x00200000
        x_forwarded_for: 0x00080000
        http_proxy: 0x00040000
        container_page: 0x00008000
        temporary_match: 0x00002000
        symmetric_return: 0x00000800
      # TODO: Remove the workaround for https://github.com/elastic/kibana/issues/85486
      # that converts the param values from string to Long.
      source: >
        def labels = ctx?.labels;
        if (labels == null) {
          labels = new HashMap();
          ctx['labels'] = labels;
        }
        long value = ctx._temp_.labels;
        for (entry in params.entrySet()) {
          def flag = entry.getValue();
          if (flag instanceof String) {
              flag = Long.decode(flag);
          }
          if ((value & flag) != 0) {
              labels[entry.getKey()] = true;
          }
        }

# normalize event.duration and determine event.end.
  - script:
      lang: painless
      if: 'ctx?.event?.duration != null'
      params:
        NANOS_IN_A_SECOND: 1000000000
      source: >
        long nanos = ctx['event']['duration'] * params.NANOS_IN_A_SECOND;
        ctx['event']['duration'] = nanos;
        def start = ctx.event?.start;
        if (start != null) {
          ctx.event['end'] = ZonedDateTime.parse(start).plusNanos(nanos);
        }

# Set event.category.
  - append:
      field: event.type
      value: allowed
      if: "ctx?.panw?.panos?.action != null && ['alert', 'allow', 'continue'].contains(ctx.panw.panos.action)"
  - append:
      field: event.type
      value: denied
      if: "ctx?.panw?.panos?.action != null && ['deny', 'drop', 'reset-client', 'reset-server', 'reset-both', 'block-url', 'block-ip', 'random-drop', 'sinkhole', 'block'].contains(ctx.panw.panos.action)"
  - set:
      field: event.outcome
      value: success

# event.action for traffic logs.
  - set:
      field: event.action
      value: flow_started
      if: 'ctx?.panw?.panos?.sub_type == "start"'
  - append:
      field: event.type
      value:
        - start
        - connection
      if: 'ctx?.panw?.panos?.sub_type == "start"'
  - set:
      field: event.action
      value: flow_terminated
      if: 'ctx?.panw?.panos?.sub_type == "end"'
  - append:
      field: event.type
      value:
        - end
        - connection
      if: 'ctx?.panw?.panos?.sub_type == "end"'
  - set:
      field: event.action
      value: flow_dropped
      if: 'ctx?.panw?.panos?.sub_type == "drop"'
  - append:
      field: event.type
      value:
        - denied
        - connection
      if: 'ctx?.panw?.panos?.sub_type == "drop"'
  - set:
      field: event.action
      value: flow_denied
      if: 'ctx?.panw?.panos?.sub_type == "deny"'
  - append:
      field: event.type
      value:
        - denied
        - connection
      if: 'ctx?.panw?.panos?.sub_type == "deny"'

# event.action for threat logs.
  - set:
      field: event.action
      value: data_match
      if: 'ctx?.panw?.panos?.sub_type == "data"'
  - set:
      field: event.action
      value: file_match
      if: 'ctx?.panw?.panos?.sub_type == "file"'
  - set:
      field: event.action
      value: flood_detected
      if: 'ctx?.panw?.panos?.sub_type == "flood"'
  - set:
      field: event.action
      value: packet_attack
      if: 'ctx?.panw?.panos?.sub_type == "packet"'
  - set:
      field: event.action
      value: scan_detected
      if: 'ctx?.panw?.panos?.sub_type == "scan"'
  - set:
      field: event.action
      value: spyware_detected
      if: 'ctx?.panw?.panos?.sub_type == "spyware"'
  - set:
      field: event.action
      value: url_filtering
      if: 'ctx?.panw?.panos?.sub_type == "url"'
  - set:
      field: event.action
      value: virus_detected
      if: 'ctx?.panw?.panos?.sub_type == "virus"'
  - set:
      field: event.action
      value: exploit_detected
      if: 'ctx?.panw?.panos?.sub_type == "vulnerability"'
  - set:
      field: event.action
      value: wildfire_verdict
      if: 'ctx?.panw?.panos?.sub_type == "wildfire"'
  - set:
      field: event.action
      value: wildfire_virus_detected
      if: 'ctx?.panw?.panos?.sub_type == "wildfire-virus"'

# Set numeric log.level from event.severity.
  - set:
      field: "event.severity"
      if: 'ctx?.log?.level == "critical"'
      value: 1
  - set:
      field: "event.severity"
      if: 'ctx?.log?.level == "high"'
      value: 2
  - set:
      field: "event.severity"
      if: 'ctx?.log?.level == "medium"'
      value: 3
  - set:
      field: "event.severity"
      if: 'ctx?.log?.level == "low"'
      value: 4
  - set:
      field: "event.severity"
      if: 'ctx?.log?.level == "informational"'
      value: 5

# Normalize event.outcome.
# These values appear in the TRAFFIC docs but look like a mistake.
  - set:
      field: panw.panos.action
      value: 'drop-icmp'
      if: 'ctx?.panw?.panos?.action == "drop icmp" || ctx?.panw?.panos?.action == "drop ICMP"'
  - set:
      field: panw.panos.action
      value: 'reset-both'
      if: 'ctx?.panw?.panos?.action == "reset both"'
  - set:
      field: panw.panos.action
      value: 'reset-client'
      if: 'ctx?.panw?.panos?.action == "reset client"'
  - set:
      field: panw.panos.action
      value: 'reset-server'
      if: 'ctx?.panw?.panos?.action == "reset server"'

# Set original PANW NAT fields for backwards compatibility, should be removed in 8.0
  - set:
      field: panw.panos.destination.nat.ip
      copy_from: destination.nat.ip
      if: ctx?.destination?.nat?.ip != null
  - set:
      field: panw.panos.source.nat.ip
      copy_from: source.nat.ip
      if: ctx?.source?.nat?.ip != null
  - convert: 
      type: long
      ignore_missing: true
      field: destination.nat.port
      target_field: panw.panos.destination.nat.port
  - convert: 
      type: long
      ignore_missing: true
      field: source.nat.port
      target_field: panw.panos.source.nat.port

# Build related.ip array from src/dest/NAT IPs.
  - append:
      if: 'ctx?.source?.ip != null'
      field: related.ip
      allow_duplicates: false
      value:
        - '{{source.ip}}'
  - append:
      if: 'ctx?.destination?.ip != null'
      field: related.ip
      allow_duplicates: false
      value:
        - '{{destination.ip}}'
  - append:
      if: 'ctx?.source?.nat?.ip != null'
      field: related.ip
      allow_duplicates: false
      value:
        - '{{source.nat.ip}}'
  - append:
      if: 'ctx?.destination?.nat?.ip != null'
      field: related.ip
      allow_duplicates: false
      value:
        - '{{destination.nat.ip}}'

# Geolocation for source.
  - geoip:
      if: 'ctx?.source?.ip != null'
      field: source.ip
      target_field: source.geo
  - geoip:
      if: 'ctx?.source?.nat?.ip != null && ctx.source?.geo == null'
      field: source.nat.ip
      target_field: source.geo


# Geolocation for destination.
  - geoip:
      if: 'ctx?.destination?.ip != null'
      field: destination.ip
      target_field: destination.geo
  - geoip:
      if: 'ctx?.destination?.nat?.ip != null && ctx.destination?.geo == null'
      field: destination.nat.ip
      target_field: destination.geo


# IP Autonomous System (AS) Lookup
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.nat.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
      if: 'ctx?.source?.nat?.ip != null && ctx.source?.as == null'
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.nat.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
      if: 'ctx?.destination?.nat?.ip != null && ctx.destination?.as == null'
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true
# Set source|destination.geo.name from panw's srcloc|dstloc
  - rename:
      if: 'ctx.source?.geo?.name == null'
      field: _temp_.srcloc
      target_field: source.geo.name
      ignore_missing: true
  - rename:
      if: 'ctx.destination?.geo?.name == null'
      field: _temp_.dstloc
      target_field: destination.geo.name
      ignore_missing: true
  - convert:
      field: source.port
      type: integer
      if: ctx?.source?.port != null
  - convert:
      field: destination.port
      type: integer
      if: ctx?.destination?.port != null
  - convert:
      field: source.nat.port
      type: integer
      if: ctx?.source?.nat?.port != null
  - convert:
      field: destination.nat.port
      type: integer
      if: ctx?.destination?.nat?.port != null

# Set community network ID's
  - community_id:
      target_field: network.community_id
      if: ctx?.source?.port != null && ctx?.source?.port != 0 && ctx?.destination?.port != null && ctx?.destination?.port != 0
  - community_id:
      target_field: panw.panos.network.nat.community_id
      source_ip: source.nat.ip
      source_port: source.nat.port
      destination_ip: destination.nat.ip
      destination_port: destination.nat.port
      if: ctx?.source?.nat?.port != null && ctx?.source?.nat?.port != 0 && ctx?.destination?.nat?.port != null && ctx?.destination?.nat?.port != 0

# Append NAT community_id to network.community_id
  - append:
      if: 'ctx?.panw?.panos?.network?.nat?.community_id != null && ctx.panw.panos.network.nat.community_id != ctx?.network?.community_id'
      field: network.community_id
      value:
      - '{{panw.panos.network.nat.community_id}}'
  - grok:
      if: 'ctx?.panw?.panos?.threat?.name != null'
      field: panw.panos.threat.name
      ignore_failure: true
      patterns:
        - '%{GREEDYDATA:panw.panos.threat.name}\(\s*%{GREEDYDATA:panw.panos.threat.id}\s*\)'
  - set:
      field: panw.panos.threat.name
      value: 'URL-filtering'
      if: 'ctx?.panw?.panos?.threat?.id == "9999"'
  - set:
      field: rule.name
      value: "{{panw.panos.ruleset}}"
      ignore_empty_value: true
  - append:
      field: related.user
      allow_duplicates: false
      value: "{{client.user.name}}"
      if: "ctx?.client?.user?.name != null"
  - append:
      field: related.user
      allow_duplicates: false
      value: "{{source.user.name}}"
      if: "ctx?.source?.user?.name != null"
  - append:
      field: related.user
      allow_duplicates: false
      value: "{{server.user.name}}"
      if: "ctx?.server?.user?.name != null"
  - append:
      field: related.user
      allow_duplicates: false
      value: "{{destination.user.name}}"
      if: "ctx?.destination?.user?.name != null"
  - append:
      field: related.hash
      allow_duplicates: false
      value: "{{panw.panos.file.hash}}"
      if: "ctx?.panw?.panos?.file?.hash != null"
  - append:
      field: related.hosts
      value: "{{observer.hostname}}"
      if: "ctx?.observer?.hostname != null && ctx.observer?.hostname != ''"
      allow_duplicates: false
  - append:
      field: related.hosts
      value: "{{host.name}}"
      if: "ctx?.host?.name != null && ctx.host?.name != ''"
      allow_duplicates: false
# Remove temporary fields.
  - remove:
      field:
        - _temp_
        - _conf
      ignore_missing: true
# Remove NAT fields when translation was not done.
  - remove:
      field:
        - source.nat.ip
        - source.nat.port
      if: 'ctx?.source?.nat?.ip == "0.0.0.0" && ctx?.source?.nat?.port == 0'
  - remove:
      field:
        - destination.nat.ip
        - destination.nat.port
      if: 'ctx?.destination?.nat?.ip == "0.0.0.0" && ctx?.destination?.nat?.port == 0'
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true

on_failure:
  - append:
      field: "error.message"
      value: "{{ _ingest.on_failure_message }} {{ _ingest.on_failure_processor_type }}"
  - remove:
      field:
        - _temp_
        - _conf
        - message
      ignore_missing: true
