---
description: Pipeline for processing Cisco Aironet Logs
processors:
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      ignore_failure: true
  - set:
      field: ecs.version
      value: '8.3.1'
  - grok:
      field: event.original
      patterns:
        - "%{SYSLOG_HEADER}:\\s%%{GREEDYDATA:_temp_.full_message}"
        - "%{SYSLOGFACILITY}%{INT}: AP:%{MAC:host.mac}: \\*%{AIRONET_DATE:_temp_.raw_date}: %%{GREEDYDATA:_temp_.full_message}"
      pattern_definitions:
        SYSLOG_HEADER: "%{SYSLOGFACILITY}%{DATA:host.name}:\\s\\*%{DATA:process.name}:\\s%{AIRONET_DATE:_temp_.raw_date}"
        SYSLOGFACILITY: "<%{NONNEGINT:log.syslog.priority:int}>"
        AIRONET_DATE: "%{MONTH} %{MONTHDAY} %{TIME}"
  - script:
      lang: painless
      source: |
        if (ctx.log?.syslog?.priority != null) {
          def severity = new HashMap();
          severity['code'] = ctx.log.syslog.priority&0x7;
          ctx.log.syslog['severity'] = severity;
          def facility = new HashMap();
          facility['code'] = ctx.log.syslog.priority>>3;
          ctx.log.syslog['facility'] = facility;
        }
  - grok:
      field: _temp_.full_message
      patterns:
        - "%{DATA:event.provider}-%{INT:event.severity}-%{DATA:event.reason}: %{DATA}:%{INT} %{GREEDYDATA:message}"

  #
  # Set log.level
  #
  - set:
      field: "log.level"
      value: unknown
  - set:
      field: "log.level"
      if: "ctx.log.syslog.severity.code == 1"
      value: alert
  - set:
      field: "log.level"
      if: "ctx.log.syslog.severity.code == 2"
      value: critical
  - set:
      field: "log.level"
      if: "ctx.log.syslog.severity.code == 3"
      value: error
  - set:
      field: "log.level"
      if: "ctx.log.syslog.severity.code == 4"
      value: warning
  - set:
      field: "log.level"
      if: "ctx.log.syslog.severity.code == 5"
      value: notification
  - set:
      field: "log.level"
      if: "ctx.log.syslog.severity.code == 6"
      value: informational
  - set:
      field: "log.level"
      if: "ctx.log.syslog.severity.code == 7"
      value: debug
  #
  # Parse the date included in logs
  #
  - set:
      field: _conf.tz_offset
      value: UTC
      override: false
  - date:
      if: "ctx.event?.timezone == null && ctx._temp_?.raw_date != null"
      field: "_temp_.raw_date"
      target_field: "@timestamp"
      formats:
        - "MMM d HH:mm:ss.SSS"
      timezone: '{{{_conf.tz_offset}}}'

  # Parse out IP addresses from Logs
  - grok:
      field: message
      if: "ctx.event?.reason == 'ENTRY_CREATED' || ctx.event?.reason == 'ENTRY_DELETED'"
      patterns:
        - "((Entry created)|(Entry deleted)) A=%{IP:client.ip}"
  # Parse out User addresses from Logs
  - grok:
      field: message
      if: "ctx.event?.reason == 'AAA_AUTH_ADMIN_USER'"
      patterns:
        - "Authentication succeeded for admin user '%{DATA:user.name}' on %{IP:client.ip}"

  # Client MAC
  - grok:
      field: message
      ignore_missing: true
      ignore_failure: true
      patterns:
        - "client %{MAC:client.mac}"

  # IP Geolocation Lookup
  - geoip:
      field: client.ip
      target_field: client.geo
      ignore_missing: true

  # IP Autonomous System (AS) Lookup
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: client.ip
      target_field: client.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: client.as.asn
      target_field: client.as.number
      ignore_missing: true
  - rename:
      field: client.as.organization_name
      target_field: client.as.organization.name
      ignore_missing: true


  - remove:
      field: _temp_
      ignore_failure: true
      ignore_missing: true




on_failure:
  - set:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'