interval: {{resource_interval}}

{{#if oauth_id}}
auth.oauth2.client.id: {{oauth_id}}
{{/if}}
{{#if oauth_secret}}
auth.oauth2.client.secret: {{oauth_secret}}
{{/if}}
auth.oauth2.provider: azure
{{#if oauth_scopes}}
auth.oauth2.scopes:
{{#each oauth_scopes as |scope|}}
  - {{scope}}
{{/each}}
{{/if}}
{{#if oauth_azure_tenant_id}}
auth.oauth2.azure.tenant_id: {{oauth_azure_tenant_id}}
{{/if}}
resource.url: {{resource_url}}
{{#if resource_ssl}}
resource.ssl: 
  {{resource_ssl}}
{{/if}}
{{#if resource_proxy_url}}
resource.proxy_url: {{resource_proxy_url}}
{{/if}}
{{#if resource_retry_max_attempts}}
resource.retry.max_attempts: {{resource_retry_max_attempts}}
{{/if}}
{{#if resource_retry_wait_min}}
resource.retry.wait_min: {{resource_retry_wait_min}}
{{/if}}
{{#if resource_retry_wait_max}}
resource.retry.wait_max: {{resource_retry_wait_max}}
{{/if}}
{{#if resource_redirect_forward_headers}}
resource.redirect.forward_headers: {{resource_redirect_forward_headers}}
{{/if}}
{{#if resource_redirect_headers_ban_list}}
resource.redirect.headers_ban_list:
{{#each resource_redirect_headers_ban_list as |item|}}
  - {{item}}
{{/each}}
{{/if}}
{{#if resource_redirect_max_redirects}}
resource.redirect.max_redirects: {{resource_redirect_max_redirects}}
{{/if}}
{{#if resource_rate_limit_limit}}
resource.rate_limit.limit: {{resource_rate_limit_limit}}
{{/if}}
{{#if resource_rate_limit_burst}}
resource.rate_limit.burst: {{resource_rate_limit_burst}}
{{/if}}

{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/httpjson/http-request-trace-*.ndjson"
{{/if}}

state:
  want_more: false
  base:
    list_contents_url: "https://manage.office.com/api/v1.0/{{oauth_azure_tenant_id}}/activity/feed/subscriptions/content?contentType="
    list_contents_start_time: "{{initial_interval}}"

program: |
  "{{content_types}}".split(",").map(content_type_raw, content_type_raw.trim_space()).as(content_types, 
    content_types.map(content_type,
        (request("POST", "https://manage.office.com/api/v1.0/{{oauth_azure_tenant_id}}/activity/feed/subscriptions/start?contentType=" + content_type + "&PublisherIdentifier={{oauth_azure_tenant_id}}"))
        .do_request().as(start_subs_resp,
            bytes(start_subs_resp.Body).decode_json().as(start_subs_resp_body, 
                (has(start_subs_resp_body.status) && start_subs_resp_body.status == 'enabled') || (has(start_subs_resp_body.error) && has(start_subs_resp_body.error.code) && start_subs_resp_body.error.code == "AF20024") ?
                    (request("GET", 
                        ( has(state.cursor) && has(state.cursor.content_types_state) && has(state.cursor.content_types_state.content_type) && has(state.cursor.content_types_state.content_type.next_page_url) && (state.cursor.content_types_state.content_type.next_page_url != "") ) ?
                            state.cursor.content_types_state.content_type.next_page_url
                        :
                            ( has(state.cursor) && has(state.cursor.content_types_state) && has(state.cursor.content_types_state.content_type) && has(state.cursor.content_types_state.content_type.created_time) && (state.cursor.content_types_state.content_type.created_time != "") ) ?
                                state.base.list_contents_url + content_type + "&PublisherIdentifier={{oauth_azure_tenant_id}}"  + "&startTime=" + state.cursor.content_types_state.content_type.created_time + "&endTime=" + (state.cursor.content_types_state.content_type.created_time.parse_time(time_layout.RFC3339) + duration("24h")).format(time_layout.RFC3339)
                            :
                                state.base.list_contents_url + content_type + "&PublisherIdentifier={{oauth_azure_tenant_id}}"  + "&startTime=" + (now() - duration(state.base.list_contents_start_time)).format(time_layout.RFC3339) + "&endTime=" + (now() - duration(state.base.list_contents_start_time) + duration("24h")).format(time_layout.RFC3339)
                    ))
                    .do_request().as(list_contents_resp,
                        bytes(list_contents_resp.Body).decode_json().as(list_contents_resp_body, 
                            ( type(list_contents_resp_body) != map && size(list_contents_resp_body) > 0 && has(list_contents_resp_body[0].contentUri) && list_contents_resp_body[0].contentUri != "" && has(list_contents_resp_body[0].contentCreated) && list_contents_resp_body[0].contentCreated != "" ) ?
                                list_contents_resp_body.map(l1, 
                                    (request("GET", l1.contentUri))
                                    .do_request().as(content_resp, 
                                            bytes(content_resp.Body).decode_json()).map(content_resp_body, 
                                                content_resp_body.with({ "copy": {"o365audit" : content_resp_body}})
                                            ).map(content_resp_body_with_copy, content_resp_body_with_copy.copy)).flatten().drop_empty().as(contents,
                                                ({
                                                    "events_per_content_type": contents,
                                                    "content_type": content_type,
                                                    "content_created_at": { "temp" : list_contents_resp_body}.collate("temp.contentCreated"),
                                                    "next_page": (has(list_contents_resp.Header) && has(list_contents_resp.Header.NextPageUri)) ? list_contents_resp.Header.NextPageUri : ""
                                                })
                                        )
                                :
                                (
                                    {
                                        "events_per_content_type": size(list_contents_resp_body) == 0 ? [] : [list_contents_resp_body],
                                        "content_type": content_type,
                                        "content_created_at": [
                                            (has(state.cursor) && has(state.cursor.content_types_state) && has(state.cursor.content_types_state.content_type) && has(state.cursor.content_types_state.content_type.created_time) && state.cursor.content_types_state.content_type.created_time != "") ?
                                                state.cursor.content_types_state.content_type.created_time
                                            :
                                                (
                                                    (now() - duration("168h")).format(time_layout.RFC3339)
                                                )
                                        ],
                                        "next_page": ""
                                    } 
                                )
                        )
                    )
                :
                (
                    {
                        "events_per_content_type": [start_subs_resp_body],
                        "content_type": content_type,
                        "content_created_at": [
                            (has(state.cursor) && has(state.cursor.content_types_state) && has(state.cursor.content_types_state.content_type) && has(state.cursor.content_types_state.content_type.created_time) && state.cursor.content_types_state.content_type.created_time != "") ?
                                state.cursor.content_types_state.content_type.created_time
                            :
                                (
                                    (now() - duration("168h")).format(time_layout.RFC3339)
                                )
                        ],
                        "next_page": ""
                    }
                )
            )
        )
    ).as(events_list_raw, events_list_raw.flatten().drop_empty()).as(events_list, 
        {
            "events": events_list.collate("events_per_content_type"),
            "base": {
                "list_contents_url": "https://manage.office.com/api/v1.0/{{oauth_azure_tenant_id}}/activity/feed/subscriptions/content?contentType=",
                "list_contents_start_time": "{{initial_interval}}"
            },
            "cursor": {
                "content_types_state": {
                    "Audit.Exchange": events_list.filter(e, e.content_type == "Audit.Exchange")
                        .as(events_list_exchange, 
                        { 
                            "created_time": 
                                    size(events_list_exchange) > 0 ?
                                    (
                                        events_list_exchange.flatten()
                                        .collate("content_created_at")
                                        .max()
                                    )
                                    :
                                    "",
                            "next_page_url": 
                                    size(events_list_exchange) > 0 ?
                                    (
                                        events_list_exchange.flatten()
                                        .collate("next_page")
                                        .max()
                                    )
                                    :
                                    "",
                        }),
                    "Audit.SharePoint": events_list.filter(e, e.content_type == "Audit.SharePoint")
                        .as(events_list_sharepoint, 
                        { 
                            "created_time": 
                                    size(events_list_sharepoint) > 0 ?
                                    (
                                        events_list_sharepoint.flatten()
                                        .collate("content_created_at")
                                        .max()
                                    )
                                    :
                                    "",
                            "next_page_url": 
                                    size(events_list_sharepoint) > 0 ?
                                    (
                                        events_list_sharepoint.flatten()
                                        .collate("next_page")
                                        .max()
                                    )
                                    :
                                    "",
                        }),
                    "Audit.AzureActiveDirectory": events_list.filter(e, e.content_type == "Audit.AzureActiveDirectory")
                        .as(events_list_azuread, 
                        { 
                            "created_time": 
                                    size(events_list_azuread) > 0 ?
                                    (
                                        events_list_azuread.flatten()
                                        .collate("content_created_at")
                                        .max()
                                    )
                                    :
                                    "",
                            "next_page_url": 
                                    size(events_list_azuread) > 0 ?
                                    (
                                        events_list_azuread.flatten()
                                        .collate("next_page")
                                        .max()
                                    )
                                    :
                                    "",
                        }),
                    "Audit.General": events_list.filter(e, e.content_type == "Audit.General")
                        .as(events_list_general, 
                        { 
                            "created_time": 
                                    size(events_list_general) > 0 ?
                                    (
                                        events_list_general.flatten()
                                        .collate("content_created_at")
                                        .max()
                                    )
                                    :
                                    "",
                            "next_page_url": 
                                    size(events_list_general) > 0 ?
                                    (
                                        events_list_general.flatten()
                                        .collate("next_page")
                                        .max()
                                    )
                                    :
                                    "",
                        }),
                    "DLP.All": events_list.filter(e, e.content_type == "DLP.All")
                        .as(events_list_dlpall, 
                        { 
                            "created_time": 
                                    size(events_list_dlpall) > 0 ?
                                    (
                                        events_list_dlpall.flatten()
                                        .collate("content_created_at")
                                        .max()
                                    )
                                    :
                                    "",
                            "next_page_url": 
                                    size(events_list_dlpall) > 0 ?
                                    (
                                        events_list_dlpall.flatten()
                                        .collate("next_page")
                                        .max()
                                    )
                                    :
                                    "",
                        }),
                }
            }
        }
    )
  )

{{#if tags}}
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{/if}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
