config_version: 2
interval: {{interval}}
resource.tracer:
  enabled: {{enable_request_tracer}}
  filename: "../../logs/cel/http-request-trace-*.ndjson"
  maxbackups: 5
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
{{#if max_executions}}
max_executions: {{max_executions}}
{{/if}}
resource.url: {{url}}
state:
  initial_interval: {{initial_interval}}
  batch_size: {{batch_size}}
  api_token: {{api_token}}
redact:
  fields:
    - api_token
program: |
  (
    state.?want_more.orValue(false) ?
      {}
    :
      {
        "start_time": state.?cursor.last_timestamp.orValue(timestamp((now - duration(state.initial_interval))).as(ts, int(ts)*1000000000 + int(ts - timestamp(int(ts))))),
        "end_time": now.as(ts, int(ts)*1000000000 + int(ts - timestamp(int(ts)))),
      }
  ).as(filter, state.with(
    request("GET",
      state.url.trim_right("/") + "/secure/events/v1/events?" + {
        ?"from": filter.?start_time.optMap(v, [string(v)]),
        ?"to": filter.?end_time.optMap(v, [string(v)]),
        ?"cursor": state.?next.page.optMap(v, [v]),
        "limit": [string(state.batch_size)],
      }.format_query()
    ).with({
      "Header":{
        "Authorization": ["Bearer " + state.api_token],
      },
    }).do_request().as(resp, resp.StatusCode == 200 ?
      bytes(resp.Body).decode_json().as(body, {
        "events": body.data.map(e, {
          "message": e.encode_json(),
        }),
        "cursor": {
          ?"last_timestamp": (
            has(body.page.next) ?
              state.?cursor.last_timestamp
            :
              state.?end_time.or(filter.?end_time)
          )
        },
        ?"end_time": filter.?end_time,
        "next": {
          ?"page": body.?page.next,
        },
        "want_more": has(body.page.next),
      })
    :
      {
        "events": {
          "error": {
            "code": string(resp.StatusCode),
            "id": string(resp.Status),
            "message": "GET " + state.url.trim_right("/") + "/secure/events/v1/events: " + (
              size(resp.Body) != 0 ?
                string(resp.Body)
              :
                string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
            ),
          },
        },
        "want_more": false,
        "next": {},
      }
    )
  ))
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
