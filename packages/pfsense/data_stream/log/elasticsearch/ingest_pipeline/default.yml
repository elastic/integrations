---
description: Pipeline for PFsense
processors:
  - set:
      field: ecs.version
      value: '8.2.0'
  - rename:
      field: message
      target_field: event.original
  - set:
      field: event.timezone
      value: "{{_tmp.tz_offset}}"
      if: ctx?._tmp?.tz_offset != null && ctx?._tmp?.tz_offset != 'local'
  - grok:
      description: Parse syslog header
      field: event.original
      patterns:
        - '^(%{ECS_SYSLOG_PRI})?%{TIMESTAMP} %{GREEDYDATA:message}'
      pattern_definitions:
        ECS_SYSLOG_PRI: '<%{NONNEGINT:log.syslog.priority:long}>'
        BSD_TIMESTAMP_FORMAT: '%{SYSLOGTIMESTAMP:_tmp.timestamp}(%{SPACE}%{OBSERVER})?%{SPACE}%{PROVIDER}(\[%{POSINT:event.id}\])?:'
        SYSLOG_TIMESTAMP_FORMAT: '(\d )?%{TIMESTAMP_ISO8601:_tmp.timestamp8601}%{SPACE}%{OBSERVER}%{SPACE}%{PROVIDER}%{SPACE}(%{POSINT:event.id}|-) - -'
        TIMESTAMP_ISO8601: '%{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE:event.timezone}?'
        TIMESTAMP: '(?:%{BSD_TIMESTAMP_FORMAT}|%{SYSLOG_TIMESTAMP_FORMAT})'
        OBSERVER: '(?:%{IP:observer.ip}|%{HOSTNAME:observer.name})'
        PROVIDER: '(%{UNIXPATH}/)?%{WORD:event.provider}'
  - date:
      if: ctx?._tmp.timestamp8601 != null
      field: _tmp.timestamp8601
      formats:
        - ISO8601
  - date:
      if: ctx?.event?.timezone != null && ctx?._tmp?.timestamp != null
      field: _tmp.timestamp
      formats:
      - MMM  d HH:mm:ss
      - MMM dd HH:mm:ss
      timezone: '{{ event.timezone }}'
  - pipeline:
      name: '{{ IngestPipeline "firewall" }}'
      if: ctx.event.provider == 'filterlog'
  - pipeline:
      name: '{{ IngestPipeline "openvpn" }}'
      if: ctx.event.provider == 'openvpn'
  - pipeline:
      name: '{{ IngestPipeline "ipsec" }}'
      if: ctx.event.provider == 'charon'
  - pipeline:
      name: '{{ IngestPipeline "dhcp" }}'
      if: ctx.event.provider == 'dhcpd'
  - pipeline:
      name: '{{ IngestPipeline "unbound" }}'
      if: ctx.event.provider == 'unbound'
  - pipeline:
      name: '{{ IngestPipeline "haproxy" }}'
      if: ctx.event.provider == 'haproxy'
  - drop:
      if: '!["filterlog", "openvpn", "charon", "dhcpd", "unbound", "haproxy"].contains(ctx?.event?.provider)'
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true
  - geoip:
      ignore_missing: true
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
      - asn
      - organization_name
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
      - asn
      - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true
  - append:
      field: related.ip
      value: "{{destination.ip}}"
      allow_duplicates: false
      if: ctx?.destination?.ip != null
  - append:
      field: related.ip
      value: "{{source.ip}}"
      allow_duplicates: false
      if: ctx?.source?.ip != null
  - append:
      field: related.ip
      value: "{{source.nat.ip}}"
      allow_duplicates: false
      if: ctx?.source?.nat?.ip != null
  - append:
      field: related.hosts
      value: "{{destination.domain}}"
      if: "ctx?.destination?.domain != null"
  - remove:
      field:
        - _tmp
      ignore_failure: true
  - script:
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
          map.values().removeIf(v -> v == null);
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
        }
        handleMap(ctx);
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - remove:
      field:
        - _tmp
      ignore_failure: true
  - append:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'
