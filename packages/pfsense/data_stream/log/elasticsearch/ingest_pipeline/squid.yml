---
description: Pipeline for parsing PFsense Squid logs.
processors:
  - grok:
      field: message
      patterns:
      - '%{IPORHOST:source.address} %{NOTSPACE:squid.request_status}/%{NUMBER:http.response.status_code:long} %{NUMBER:http.response.bytes:long} %{NOTSPACE:http.request.method} (%{URI:url.original})?%{SPACE}%{NOTSPACE:http.request.referrer}%{SPACE}%{NOTSPACE:squid.hierarchy_status}/%{IPORHOST:destination.address}%{SPACE}%{NOTSPACE:http.response.mime_type}'
      ignore_missing: false
  - uri_parts:
      field: url.original
      ignore_failure: true
      if: ctx?.url?.original != null
  - convert:
      field: source.address
      target_field: source.ip
      type: ip
      ignore_failure: true
      ignore_missing: true
  - convert:
      field: destination.address
      target_field: destination.ip
      type: ip
      ignore_failure: true
      ignore_missing: true
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
      - asn
      - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
#   - split:
#       field: haproxy.http.request.captured_headers
#       separator: \|
#       ignore_failure: true
#       ignore_missing: true
#   - split:
#       field: haproxy.http.response.captured_headers
#       separator: \|
#       ignore_failure: true
#       ignore_missing: true
#   - script:
#       lang: painless
#       source: ctx.event.duration = Math.round(ctx.temp.duration * params.scale)
#       params:
#         scale: 1000000
#       if: ctx.temp?.duration != null
#   - remove:
#       field: temp.duration
#       ignore_missing: true
#   - convert:
#       field: haproxy.bytes_read
#       target_field: http.response.bytes
#       type: long
#       ignore_missing: true
#       if: ctx.containsKey('http')
  - set:
      field: event.kind
      value: event
  - append:
      field: event.category
      value: web
  - append:
      field: event.category
      value: network
  - set:
      field: event.outcome
      value: success
      if: "ctx?.http?.response?.status_code != null && ctx.http.response.status_code < 400"
  - set:
      field: event.outcome
      value: failure
      if: "ctx?.http?.response?.status_code != null && ctx.http.response.status_code >= 400"
on_failure:
  - set:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'
