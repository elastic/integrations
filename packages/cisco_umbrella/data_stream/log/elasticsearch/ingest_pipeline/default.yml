---
description: Pipeline for Cisco Umbrella

processors:
  - set:
      field: ecs.version
      value: '8.6.0'
  - set:
      field: observer.vendor
      value: Cisco
  - set:
      field: observer.product
      value: Umbrella
  - rename:
      field: message
      target_field: event.original
  ############
  # DNS Logs #
  ############
  - csv:
      field: event.original
      target_fields:
        - cisco.umbrella._tmp.time
        - user.name
        - cisco.umbrella.identities
        - source.address
        - source.nat.ip
        - cisco.umbrella.action
        - dns.question.type
        - dns.response_code
        - dns.question.name
        - cisco.umbrella.categories
        - cisco.umbrella.policy_identity_type
        - cisco.umbrella.identity_types
        - cisco.umbrella.blocked_categories
      if: ctx.log?.file?.path.contains('dnslogs')
  - gsub:
      description: Strip tailing dot from DNS names.
      field: dns.question.name
      pattern: '\.$'
      replacement: ''
      ignore_missing: true
  - set:
      field: observer.type
      value: dns
      if: ctx.log?.file?.path.contains('dnslogs')
  ###########
  # IP Logs #
  ###########
  - csv:
      field: event.original
      target_fields:
        - cisco.umbrella._tmp.time
        - user.name
        - source.address
        - source.port
        - destination.address
        - destination.port
        - cisco.umbrella.categories
      if: ctx.log?.file?.path.contains('iplogs')

  - set:
      field: observer.type
      value: firewall
      if: ctx.log?.file?.path.contains('iplogs')

  ##############
  # Proxy Logs #
  ##############
  - csv:
      field: event.original
      target_fields:
        - cisco.umbrella._tmp.time
        - cisco.umbrella.identity
        - source.address
        - source.nat.ip
        - destination.address
        - cisco.umbrella.content_type
        - cisco.umbrella.verdict
        - url.full
        - http.request.referrer
        - user_agent.original
        - http.response.status_code
        - http.request.bytes
        - http.response.bytes
        - http.response.body.bytes
        - cisco.umbrella.sha_sha256
        - cisco.umbrella.categories
        - cisco.umbrella.av_detections
        - cisco.umbrella.puas
        - cisco.umbrella.amp_disposition
        - cisco.umbrella.amp_malware_name
        - cisco.umbrella.amp_score
        - cisco.umbrella.identity_types
        - cisco.umbrella.blocked_categories
        - cisco.umbrella.identities
        - cisco.umbrella.identity_types
        - cisco.umbrella.request_method
        - cisco.umbrella.dlp_status
        - cisco.umbrella.certificate_errors
        - cisco.umbrella.file_name
        - cisco.umbrella.ruleset_id
        - cisco.umbrella.rule_id
        - cisco.umbrella.destination_lists_id
        - cisco.umbrella.isolate_action
        - cisco.umbrella.file_action
        - cisco.umbrella.warn_status
      if: ctx.log?.file?.path.contains('proxylogs')

  - set:
      field: observer.type
      value: proxy
      if: ctx.log?.file?.path.contains('proxylogs')

  #######################
  # Cloud Firewall Logs #
  #######################
  - csv:
      field: event.original
      target_fields:
        - cisco.umbrella._tmp.time
        - cisco.umbrella.origin_id
        - user.name
        - cisco.umbrella.identity_types
        - cisco.umbrella.direction
        - network.transport
        - source.bytes
        - source.address
        - source.port
        - destination.address
        - destination.port
        - cisco.umbrella.datacenter
        - cisco.umbrella.ruleid
        - cisco.umbrella.verdict
      if: ctx.log?.file?.path.contains('cloudfirewalllogs')

  - set:
      field: observer.type
      value: firewall
      if: ctx.log?.file?.path.contains('cloudfirewalllogs')

  #######################
  # Audit Logs #
  #######################
  - csv:
      field: event.original
      target_fields:
        - event.id
        - cisco.umbrella._tmp.time
        - user.email
        - user.name
        - cisco.umbrella.audit.type
        - event.action
        - source.address
        - cisco.umbrella.audit.before
        - cisco.umbrella.audit.after
      if: ctx.log?.file?.path.contains('auditlogs')

  - uri_parts:
      field: url.full
      ignore_failure: true
      if: ctx.url?.full != null

  # Identities is a field that includes any sort of username, device or other asset that is included in the request.
  # Converting this to an array to make it easier to use in searches and visualizations
  - split:
      field: cisco.umbrella.identities
      separator: ",\\s*"
      preserve_trailing: false
      if: "ctx.cisco?.umbrella?.identities != null && (ctx.log?.file?.path.contains('dnslogs') || ctx.log?.file?.path.contains('proxylogs'))"
  - split:
      field: cisco.umbrella.categories
      separator: ",\\s*"
      preserve_trailing: false
      if: "ctx.log?.file?.path.contains('dnslogs') && ctx.cisco?.umbrella?.categories != null"
  - split:
      field: cisco.umbrella.blocked_categories
      separator: ",\\s*"
      preserve_trailing: false
      if: "ctx.log?.file?.path.contains('dnslogs') && ctx.cisco?.umbrella?.blocked_categories != null"
  - split:
      field: cisco.umbrella.identity_types
      separator: ",\\s*"
      preserve_trailing: false
      if: "ctx.cisco?.umbrella?.identity_types != null"
  - script:
      if: ctx.cisco?.umbrella?.identities != null && ctx.cisco?.umbrella?.identity_types != null
      lang: painless
      description: "Extract identity values from ctx.cisco.umbrella.identities and append it to ECS fields"
      source: |-
        void setHost(def ctx, def x) {
          if (ctx.host == null) {
            ctx.host = new HashMap();
          }
          if (ctx.host.name == null) {
            ctx.host.name = x;
          }
        }
        void setUser(def ctx, def x) {
          if (ctx.user == null) {
            ctx.user = new HashMap();
          }
          if (ctx.user.name == null) {
            ctx.user.name = x;
          }
        }
        void addNetwork(def ctx, def x) {
          if (ctx.network == null) {
            ctx.network = new HashMap();
          }
          if (ctx.network?.name == null) {
            ArrayList al = new ArrayList();
            ctx.network.put("name", al);
          }
          if (!ctx.network.name.contains(x)) {
            ctx.network.name.add(x);
          }
        }
        def i = 0;
        for (cisco_identity_type in ctx.cisco.umbrella.identity_types) {
          if (["AD Users"].contains(cisco_identity_type)) {
            setUser(ctx, ctx.cisco.umbrella.identities[i]);
          }
          if (["AD Computers", "Roaming Computers", "Anyconnect Roaming Client"].contains(cisco_identity_type)) {
            setHost(ctx, ctx.cisco.umbrella.identities[i]);
          }
          if (["Sites", "Internal Networks", "Networks", "Network Devices"].contains(cisco_identity_type)) {
            addNetwork(ctx, ctx.cisco.umbrella.identities[i]);
          }
          i++;
        }
  - grok:
      field: host.name
      ignore_failure: true
      patterns:
        - ^%{DATA:host.hostname}\.%{GREEDYDATA:host.domain}$
      if: ctx.host?.name != null && ctx.host.name.contains('.')
  - grok:
      field: user.name
      ignore_failure: true
      patterns:
        - ^%{GREEDYDATA:user.full_name} (\((?<user.email>%{DATA:user.name}@%{DATA:user.domain})\))?$
      if: ctx.user?.name != null && ctx.user?.name.contains('@') == true
  - set:
      field: user.id
      value: "{{user.email}}"
      if: ctx.user?.email != null
    
  ######################
  # General ECS Fields #
  ######################
  # This field is always in UTC, so no timezone should need to be set
  - date:
      field: cisco.umbrella._tmp.time
      target_field: "@timestamp"
      formats:
        - "yyyy-MM-dd HH:mm:ss"
        - ISO8601
      if: ctx.cisco?.umbrella?._tmp?.time != null
  ##################
  # DNS ECS Fields #
  ##################
  - set:
      field: dns.type
      value: query
      if: ctx.cisco?.umbrella?.action != null
  - registered_domain:
      field: dns.question.name
      target_field: dns.question
      ignore_missing: true
      ignore_failure: true
  - remove:
      field: dns.question.domain
      ignore_missing: true
  ######################
  # Network ECS Fields #
  ######################
  - lowercase:
      field: cisco.umbrella.direction
      target_field: network.direction
      if: ctx.cisco?.umbrella?.direction != null
  - convert:
      field: source.bytes
      type: long
      if: ctx.source?.bytes != null
  - convert:
      field: source.port
      type: long
      if: ctx.source?.port != null
  - convert:
      field: destination.port
      type: long
      if: ctx.destination?.port != null
  ###################
  # HTTP ECS Fields #
  ###################
  - convert:
      field: http.request.bytes
      type: long
      if: ctx.http?.request?.bytes != null
  - convert:
      field: http.response.bytes
      type: long
      if: ctx.http?.response?.bytes != null
  - convert:
      field: http.response.body.bytes
      type: long
      if: ctx.http?.response?.body?.bytes != null
  - convert:
      field: http.response.status_code
      type: long
      if: ctx.http?.response?.status_code != null
  ###################
  # Rule ECS Fields #
  ###################
  - rename:
      field: cisco.umbrella.ruleid
      target_field: rule.id
      if: ctx.cisco?.umbrella?.ruleid != null

  ####################
  # Event ECS Fields #
  ####################
  - set:
      field: event.action
      value: "dns-request-{{cisco.umbrella.action}}"
      if: ctx.cisco?.umbrella?.action != null
  - set:
      field: event.action
      value: "proxy-request-{{cisco.umbrella.request_method}}"
      if: ctx.cisco?.umbrella?.request_method != null && ctx.event?.action != null
  - set:
      field: event.category
      value: network
      if: "!ctx.log?.file?.path.contains('auditlogs')"
  - append:
      field: event.type
      value: allowed
      if: "ctx.cisco?.umbrella?.action == 'Allowed' || ['ALLOWED','ALLOW'].contains(ctx.cisco?.umbrella?.verdict)"
  - append:
      field: event.type
      value: denied
      if: "ctx.cisco?.umbrella?.action == 'Blocked' || ['BLOCKED','BLOCK'].contains(ctx.cisco?.umbrella?.verdict)"
  - append:
      field: event.type
      value: connection
      if: ctx.cisco?.umbrella?.action != null
  - set:
      field: event.category
      value: configuration
      if: "ctx.log?.file?.path.contains('auditlogs')"
  - append:
      field: event.type
      value: creation
      if: "ctx.log?.file?.path.contains('auditlogs') && ctx.event?.action.toLowerCase() == 'create'"
  - append:
      field: event.type
      value: change
      if: "ctx.log?.file?.path.contains('auditlogs') && ctx.event?.action.toLowerCase() == 'update'"
  - append:
      field: event.type
      value: deletion
      if: "ctx.log?.file?.path.contains('auditlogs') && ctx.event?.action.toLowerCase() == 'delete'"
  # Converting address fields to either ip or domain
  - convert:
      field: source.address
      target_field: source.ip
      type: ip
      ignore_missing: true
      on_failure:
        - set:
            copy_from: source.address
            field: source.domain
            override: true

  - convert:
      field: destination.address
      target_field: destination.ip
      type: ip
      ignore_missing: true
      on_failure:
        - set:
            field: destination.domain
            copy_from: destination.address
            override: true

  # For nat, there's no address or domain subfield.
  # If the value is not a valid IP, it must be removed
  # or ingestion will fail. Probably just an empty value.
  - convert:
      field: source.nat.ip
      type: ip
      ignore_missing: true
      on_failure:
        - remove:
            field: source.nat.ip

  - community_id:
      ignore_missing: true
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true
  ######################
  # Related ECS Fields #
  ######################
  - append:
      field: related.user
      value: "{{user.name}}"
      if: ctx.user?.name != null
  - append:
      field: related.ip
      value: "{{source.ip}}"
      if: ctx.source?.ip != null
  - append:
      field: related.ip
      value: "{{source.nat.ip}}"
      if: ctx.source?.nat?.ip != null
  - append:
      field: related.ip
      value: "{{destination.ip}}"
      if: ctx.destination?.ip != null
  - append:
      field: related.hosts
      value: "{{host.name}}"
      if: ctx.host?.name != null
  - append:
      field: related.hosts
      value: "{{source.domain}}"
      if: ctx.source?.domain != null
  - append:
      field: related.hosts
      value: "{{dns.question.name}}"
      if: ctx.dns?.question?.name != null
  - append:
      field: related.hash
      value: "{{cisco.umbrella.sha_sha256}}"
      if: ctx.cisco?.umbrella?.sha_sha256 != null

  ###########
  # Cleanup #
  ###########
  - remove:
      field:
        - cisco.umbrella._tmp
        - cisco.umbrella.direction
        - cisco.umbrella.action
        - cisco.umbrella.verdict
      ignore_missing: true

  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - set:
      field: error.message
      value: "{{ _ingest.on_failure_message }}"
