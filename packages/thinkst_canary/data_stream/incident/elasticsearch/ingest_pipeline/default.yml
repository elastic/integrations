---
description: Pipeline for Thinkst Canary incident logs
processors:
  - set:
      field: ecs.version
      value: 8.11.0

  - rename:
      field: message
      target_field: event.original
      if: ctx.event?.original == null
      ignore_missing: true
  - json:
      tag: parse_json
      field: event.original
      target_field: thinkst_canary.incident
  - date:
      field: thinkst_canary.incident.updated_time
      if: ctx.thinkst_canary?.incident?.updated_time != null && ctx.thinkst_canary?.incident.updated_time != ''
      formats:
        - UNIX
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - fingerprint:
      fields:
        - thinkst_canary.incident.updated_time
        - thinkst_canary.incident.hash_id
        - thinkst_canary.incident.id
      target_field: '_id'
      ignore_missing: true
  - convert:
      field: thinkst_canary.incident.max_updated_id
      type: string
  - convert:
      field: thinkst_canary.incident.updated_id
      type: string

  - set:
      field: event.action
      copy_from: thinkst_canary.incident.description.description
      ignore_empty_value: true
  - set:
      field: event.category
      value: [intrusion_detection]
  - set:
      field: event.type
      value: [info]
  - set:
      field: event.kind
      value: [alert, event]

  - set:
      field: source.address
      copy_from: thinkst_canary.incident.description.src_host
      ignore_empty_value: true
  - convert:
      field: source.address
      target_field: source.ip
      type: ip
      if: ctx.source?.address != null && ctx.source.address != ''
      ignore_failure: true
  - append:
      field: related.ip
      value: '{{{source.ip}}}'
      if: ctx.source?.ip != null
  - convert:
      field: thinkst_canary.incident.description.src_port
      target_field: source.port
      type: long
      if: ctx.thinkst_canary?.incident?.description?.src_port != null && ctx.thinkst_canary.incident.description.src_port != ''
      ignore_failure: true
  - set:
      field: destination.address
      copy_from: thinkst_canary.incident.description.dst_host
      ignore_empty_value: true
  - convert:
      field: destination.address
      target_field: destination.ip
      type: ip
      if: ctx.destination?.address != null && ctx.destination.address != ''
      ignore_failure: true
  - append:
      field: related.ip
      value: '{{{destination.ip}}}'
      if: ctx.destination?.ip != null
  - convert:
      field: thinkst_canary.incident.description.dst_port
      target_field: destination.port
      type: long
      if: ctx.thinkst_canary?.incident?.description?.dst_port != null && ctx.thinkst_canary.incident.description.dst_port != ''
      ignore_failure: true

  - geoip:
      field: source.ip
      target_field: source.geo
      if: ctx.source?.ip != null
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      if: ctx.destination?.ip != null
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true

  - remove:
      field: event.original
      if: ctx.tags == null || !ctx.tags.contains('preserve_original_event')
      ignore_failure: true
      ignore_missing: true
  - script:
      description: Drops null/empty values recursively
      lang: painless
      ignore_failure: true
      source: |
        boolean drop(Object o) {
          if (o == null || o == "") {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);

on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
