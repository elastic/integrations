---
description: Pipeline for processing CIFv3 threat indicators
processors:
  ####################
  # Event ECS fields #
  ####################
  - set:
      field: ecs.version
      value: "8.5.0"
  - set:
      field: event.kind
      value: enrichment
  - set:
      field: event.category
      value: threat
  - set:
      field: event.type
      value: indicator

  ######################
  # General ECS fields #
  ######################
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - json:
      field: event.original
      target_field: cif3

  #####################
  # Threat ECS Fields #
  #####################
  - rename:
      field: cif3.firsttime
      target_field: threat.indicator.first_seen
      ignore_missing: true
  - rename:
      field: cif3.lasttime
      target_field: threat.indicator.last_seen
      ignore_missing: true
  - rename:
      field: cif3.reporttime
      target_field: threat.indicator.modified_at
      ignore_missing: true
  - rename:
      field: cif3.provider
      target_field: threat.indicator.provider
      ignore_missing: true
  - rename:
      field: cif3.reference
      target_field: threat.indicator.reference
      ignore_missing: true
  - rename:
      field: cif3.count
      target_field: threat.indicator.sightings
      ignore_missing: true
  - rename:
      field: cif3.description
      target_field: threat.indicator.description
      ignore_missing: true
      if: "ctx.cif3?.description != ''"
  - uppercase:
      field: cif3.tlp
      target_field: threat.indicator.marking.tlp
      ignore_missing: true
      if: ctx.cif3?.tlp != null
  ## File indicator operations
  - set:
      field: threat.indicator.type
      value: file
      if: "['md5', 'sha1', 'sha256', 'sha512', 'ssdeep'].contains(ctx.cif3?.itype) && !ctx.cif3?.tags.contains('ja3')"
  - rename:
      field: cif3.indicator
      target_field: threat.indicator.tls.client.ja3
      ignore_missing: true
      if: "ctx.cif3?.itype == 'md5' && ctx.cif3?.tags.contains('ja3')"
  - rename:
      field: cif3.indicator
      target_field: threat.indicator.file.pe.imphash
      ignore_missing: true
      if: "ctx.cif3?.itype == 'md5' && ctx.cif3?.tags.contains('imphash')"
  - append:
      field: related.hash
      value: "{{{ threat.indicator.file.hash.pe.imphash }}}"
      if: ctx?.threat?.indicator?.file?.pe?.imphash != null
  - rename:
      field: cif3.indicator
      target_field: _tmp.hashvalue
      ignore_missing: true
      if: "ctx.threat?.indicator?.type == 'file'"
  - set:
      field: threat.indicator.file.hash.{{cif3.itype}}
      value: "{{{ _tmp.hashvalue }}}"
      if: "ctx.threat?.indicator?.type == 'file'"
  - append:
      field: related.hash
      value: "{{{ _tmp.hashvalue }}}"
      ignore_failure: true
      if: "ctx.threat?.indicator?.type == 'file' && ctx?.threat?.indicator?.file?.pe?.imphash == null"

   ## ASN indicator operations
  - set:
      field: threat.indicator.type
      value: autonomous-system
      if: "ctx.cif3?.itype == 'asn'"
  - grok:
      field: cif3.indicator
      patterns:
        - "as(?:%{INT:threat.indicator.as.number})"
      ignore_failure: true
      if: "ctx.cif3?.itype == 'asn'"

  ## IP indicator operations
  - set:
      field: threat.indicator.type
      value: ipv4-addr
      if: "ctx.cif3?.itype == 'ipv4'"
  - set:
      field: threat.indicator.type
      value: ipv6-addr
      if: "ctx.cif3?.itype == 'ipv6'"
  - rename:
      field: cif3.indicator
      target_field: threat.indicator.network.cidr
      ignore_missing: true
      if: "ctx.threat?.indicator?.type != null && ['ipv4-addr', 'ipv6-addr'].contains(ctx.threat.indicator.type) && (ctx.cif3?.indicator_ipv4_mask != null || ctx.cif3?.indicator_ipv6_mask != null)"
  - convert:
      field: cif3.indicator
      type: ip
      target_field: threat.indicator.ip
      ignore_missing: true
      if: "ctx.threat?.indicator?.type != null && ['ipv4-addr', 'ipv6-addr'].contains(ctx.threat.indicator.type) && ctx.cif3?.indicator_ipv4_mask == null && ctx.cif3?.indicator_ipv6_mask == null"
  - append:
      field: related.ip
      value: "{{{ threat.indicator.ip }}}"
      if: ctx?.threat?.indicator?.ip != null
  - rename:
      field: cif3.cc
      target_field: threat.indicator.geo.country_iso_code
      ignore_missing: true
      if: "ctx.threat?.indicator?.type != null && ['ipv4-addr', 'ipv6-addr'].contains(ctx.threat.indicator.type) && ctx.cif3?.cc != null"
  - rename:
      field: cif3.asn
      target_field: threat.indicator.as.number
      ignore_missing: true
      if: "ctx.threat?.indicator?.type != null && ['ipv4-addr', 'ipv6-addr'].contains(ctx.threat.indicator.type) && ctx.cif3?.asn != null"
  - rename:
      field: cif3.asn_desc
      target_field: threat.indicator.as.organization.name
      ignore_missing: true
      if: "ctx.threat?.indicator?.type != null && ['ipv4-addr', 'ipv6-addr'].contains(ctx.threat.indicator.type) && ctx.cif3?.asn_desc != null"
  - rename:
      field: cif3.latitude
      target_field: threat.indicator.geo.location.lat
      ignore_missing: true
      if: "ctx.threat?.indicator?.type != null && ['ipv4-addr', 'ipv6-addr'].contains(ctx.threat.indicator.type) && ctx.cif3?.latitude != null"
  - rename:
      field: cif3.longitude
      target_field: threat.indicator.geo.location.lon
      ignore_missing: true
      if: "ctx.threat?.indicator?.type != null && ['ipv4-addr', 'ipv6-addr'].contains(ctx.threat.indicator.type) && ctx.cif3?.longitude != null"
  - rename:
      field: cif3.region
      target_field: threat.indicator.geo.region_name
      ignore_missing: true
      if: "ctx.threat?.indicator?.type != null && ['ipv4-addr', 'ipv6-addr'].contains(ctx.threat.indicator.type) && ctx.cif3?.region != null"
  - rename:
      field: cif3.timezone
      target_field: threat.indicator.geo.timezone
      ignore_missing: true
      if: "ctx.threat?.indicator?.type != null && ['ipv4-addr', 'ipv6-addr'].contains(ctx.threat.indicator.type) && ctx.cif3?.timezone != null"

  ## URL indicator operations
  - set:
      field: threat.indicator.type
      value: url
      if: "ctx.cif3?.itype == 'url'"
  - uri_parts:
      field: cif3.indicator
      target_field: threat.indicator.url
      keep_original: true
      remove_if_successful: true
      if: "ctx.threat?.indicator?.type == 'url'"
  - set:
      field: threat.indicator.url.full
      value: "{{{threat.indicator.url.original}}}"
      ignore_empty_value: true
      if: "ctx.cif3?.itype == 'url'"
  # Host could be either IP address or hostname
  - grok:
      field: cif3.indicator
      patterns:
        - "%{URIPROTO:threat.indicator.url.scheme}://(?:%{IPV4:threat.indicator.ip}|\\[?%{IPV6:threat.indicator.ip}\\]?|%{HOSTNAME:threat.indicator.url.domain})(?::%{POSINT:threat.indicator.url.port})?(?:%{URIPATH:threat.indicator.url.path})?.*"
      ignore_failure: true
      if: "ctx.cif3?.itype == 'url'"

  ## Email indicator operations
  - set:
      field: threat.indicator.type
      value: email-addr
      if: "ctx.cif3?.itype == 'email'"
  - rename:
      field: cif3.indicator
      target_field: threat.indicator.email.address
      ignore_missing: true
      if: "ctx.threat?.indicator?.type == 'email-addr'"
  - grok:
      field: threat.indicator.email.address
      patterns:
        - "%{USERNAME}@%{GREEDYDATA:threat.indicator.url.domain}"
      ignore_failure: true
      if: "ctx.threat?.indicator?.type == 'email-addr'"

  ## Domain indicator operations
  - set:
      field: threat.indicator.type
      value: domain-name
      if:  "ctx.cif3?.itype == 'fqdn'"
  - rename:
      field: cif3.indicator
      target_field: threat.indicator.url.domain
      ignore_missing: true
      if: "ctx.threat?.indicator?.type == 'domain-name' && ctx.threat?.indicator?.url?.domain == null"
  - append:
      field: related.hosts
      value: "{{{ threat.indicator.url.domain }}}"
      if: ctx?.threat?.indicator?.url?.domain != null

  ######################
  #     Confidence     #
  ######################
  - script:
      lang: painless
      if: ctx.cif3?.confidence != null
      description: Normalize confidence level.
      source: >
        def value = ctx.cif3.confidence;
        if (value < 0.0 || value > 10.0) {
          ctx.threat.indicator.confidence = "None";
          return;
        }
        if (value >= 0.0 && value < 3.0) {
          ctx.threat.indicator.confidence = "Low";
          return;
        }
        if (value >= 3.0 && value < 7.0) {
          ctx.threat.indicator.confidence = "Med";
          return;
        }
        if (value >= 7.0 && value <= 10.0) {
          ctx.threat.indicator.confidence = "High";
          return;
        }

  ###################
  # Tags ECS fields #
  ###################
  - foreach:
      field: cif3.tags
      ignore_missing: true
      processor:
        append:
          field: tags
          value: "{{_ingest._value}}"
          allow_duplicates: false
      if: ctx.cif3?.tags != null

  ## Misc
  - rename:
      field: cif3.protocol
      target_field: network.transport
      if:  ctx.cif3?.protocol != null
  - rename:
      field: cif3.application
      target_field: network.protocol
      if:  ctx.cif3?.application != null
  - rename:
      field: cif3.port
      target_field: threat.indicator.port
      # sometimes contains a range like 1000-1002 or CSVs like 10,22,52
      ignore_failure: true
      if:  ctx.cif3?.port != null

  ######################
  # Cleanup processors #
  ######################
  - set:
      field: threat.indicator.type
      value: unknown
      if: ctx.threat?.indicator?.type == null
  - script:
      lang: painless
      if: ctx.cif3 != null
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
        map.values().removeIf(v -> v == null);
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
        }
        handleMap(ctx);
  - remove:
      field: cif3.rdata
      ignore_missing: true
      if: "ctx.cif3?.rdata == ''"
  - remove:
      field:
        - cif3.indicator
        - cif3.confidence
        - cif3.indicator_ipv4
        - cif3.indicator_ipv6
        - cif3.group
        - cif3.latitude
        - cif3.longitude
        - cif3.location
        - cif3.city
        - cif3.region
        - cif3.tags
        - cif3.tlp
        - message
        - _tmp
      ignore_missing: true
      if: ctx.threat?.indicator?.type != null
on_failure:
  - set:
      field: error.message
      value: "{{ _ingest.on_failure_message }}"
