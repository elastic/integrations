- description: |-
    Date/time when the event originated.
    This is the date/time extracted from the event, typically representing when the event was generated by the source.
    If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.
    Required field for all events.
  name: '@timestamp'
  type: date
- description: |-
    Ephemeral identifier of this agent (if one exists).
    This id normally changes across restarts, but `agent.id` does not.
  name: agent.ephemeral_id
  type: keyword
- description: |-
    Unique identifier of this agent (if one exists).
    Example: For Beats this would be beat.id.
  name: agent.id
  type: keyword
- description: |-
    Custom name of the agent.
    This is a name that can be given to an agent. This can be helpful if for example two Filebeat instances are running on the same host but a human readable separation is needed on which Filebeat instance data is coming from.
  name: agent.name
  type: keyword
- description: |-
    Type of the agent.
    The agent type always stays the same and should be given by the agent used. In case of Filebeat the agent would always be Filebeat also if two Filebeat instances are run on the same machine.
  name: agent.type
  type: keyword
- description: Version of the agent.
  name: agent.version
  type: keyword
- description: |-
    The field can contain anything that makes sense to signify the source of the data.
    Examples include `nginx.access`, `prometheus`, `endpoint` etc. For data streams that otherwise fit, but that do not have dataset set we use the value "generic" for the dataset value. `event.dataset` should have the same value as `data_stream.dataset`.
    Beyond the Elasticsearch data stream naming criteria noted above, the `dataset` value has additional restrictions:
      * Must not contain `-`
      * No longer than 100 characters
  name: data_stream.dataset
  type: constant_keyword
- description: |-
    A user defined namespace. Namespaces are useful to allow grouping of data.
    Many users already organize their indices this way, and the data stream naming scheme now provides this best practice as a default. Many users will populate this field with `default`. If no value is used, it falls back to `default`.
    Beyond the Elasticsearch index naming criteria noted above, `namespace` value has the additional restrictions:
      * Must not contain `-`
      * No longer than 100 characters
  name: data_stream.namespace
  type: constant_keyword
- description: |-
    An overarching type for the data stream.
    Currently allowed values are "logs" and "metrics". We expect to also add "traces" and "synthetics" in the near future.
  name: data_stream.type
  type: constant_keyword
- description: "The unique identifier of a device. The identifier must not change across application sessions but stay fixed for an instance of a (mobile) device. \nOn iOS, this value must be equal to the vendor identifier (https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android, this value must be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application.\nFor GDPR and data protection law reasons this identifier should not carry information that would allow to identify a user."
  name: device.id
  type: keyword
- description: The vendor name of the device manufacturer.
  name: device.manufacturer
  type: keyword
- description: The human readable marketing name of the device model.
  name: device.model.name
  type: keyword
- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: Error message.
  name: error.message
  type: match_only_text
- description: |-
    Agents are normally responsible for populating the `agent.id` field value. If the system receiving events is capable of validating the value based on authentication information for the client then this field can be used to reflect the outcome of that validation.
    For example if the agent's connection is authenticated with mTLS and the client cert contains the ID of the agent to which the cert was issued then the `agent.id` value in events can be checked against the certificate. If the values match then `event.agent_id_status: verified` is added to the event, otherwise one of the other allowed values should be used.
    If no validation is performed then the field should be omitted.
    The allowed values are:
    `verified` - The `agent.id` field value matches expected value obtained from auth metadata.
    `mismatch` - The `agent.id` field value does not match the expected value obtained from auth metadata.
    `missing` - There was no `agent.id` field in the event to validate.
    `auth_metadata_missing` - There was no auth metadata or it was missing information about the agent ID.
  name: event.agent_id_status
  type: keyword
- description: |-
    This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.
    `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.
    This field is an array. This will allow proper categorization of some events that fall in multiple categories.
  name: event.category
  type: keyword
- description: |-
    Name of the dataset.
    If an event source publishes more than one type of log or events (e.g. access log, error log), the dataset is used to specify which one the event comes from.
    It's recommended but not required to start the dataset name with the module name, followed by a dot, then the dataset name.
  name: event.dataset
  type: keyword
- description: |-
    Timestamp when an event arrived in the central data store.
    This is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.
    In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.
  name: event.ingested
  type: date
- description: |-
    This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.
    `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.
    The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.
  name: event.kind
  type: keyword
- description: |-
    Name of the module this data is coming from.
    If your monitoring agent supports the concept of modules or plugins to process events of a given source (e.g. Apache logs), `event.module` should contain the name of this module.
  name: event.module
  type: keyword
- description: |-
    This field should be populated when the event's timestamp does not include timezone information already (e.g. default Syslog timestamps). It's optional otherwise.
    Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").
  name: event.timezone
  type: keyword
- description: Operating system architecture.
  name: host.architecture
  type: keyword
- description: |-
    Name of the domain of which the host is a member.
    For example, on Windows this could be the host's Active Directory domain or NetBIOS domain name. For Linux this could be the domain of the host's LDAP provider.
  name: host.domain
  type: keyword
- description: |-
    Hostname of the host.
    It normally contains what the `hostname` command returns on the host machine.
  name: host.hostname
  type: keyword
- description: |-
    Unique host id.
    As hostname is not always unique, use values that are meaningful in your environment.
    Example: The current usage of `beat.name`.
  name: host.id
  type: keyword
- description: Host ip addresses.
  name: host.ip
  type: ip
- description: |-
    Host MAC addresses.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: host.mac
  pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
  type: keyword
- description: |-
    Name of the host.
    It can contain what hostname returns on Unix systems, the fully qualified domain name (FQDN), or a name specified by the user. The recommended value is the lowercase FQDN of the host.
  name: host.name
  type: keyword
- description: OS family (such as redhat, debian, freebsd, windows).
  name: host.os.family
  type: keyword
- description: Operating system kernel version as a raw string.
  name: host.os.kernel
  type: keyword
- description: Operating system name, without the version.
  multi_fields:
    - name: text
      type: match_only_text
  name: host.os.name
  type: keyword
- description: Operating system platform (such centos, ubuntu, windows).
  name: host.os.platform
  type: keyword
- description: |-
    Use the `os.type` field to categorize the operating system into one of the broad commercial families.
    If the OS you're dealing with is not listed as an expected value, the field should not be populated. Please let us know by opening an issue with ECS, to propose its addition.
  name: host.os.type
  type: keyword
- description: Operating system version as a raw string.
  name: host.os.version
  type: keyword
- description: |-
    Type of host.
    For Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.
  name: host.type
  type: keyword
- description: Seconds the host has been up.
  name: host.uptime
  type: long
- description: |-
    Full path to the log file this event came from, including the file name. It should include the drive letter, when appropriate.
    If the event wasn't read from a log file, do not populate this field.
  name: log.file.path
  type: keyword
- description: List of keywords used to tag each event.
  name: tags
  type: keyword
