- description: |-
    Date/time when the event originated.
    This is the date/time extracted from the event, typically representing when the event was generated by the source.
    If the event source has no original timestamp, this value is typically populated by the first time the event was received by the pipeline.
    Required field for all events.
  name: '@timestamp'
  type: date
- description: |-
    The field can contain anything that makes sense to signify the source of the data.
    Examples include `nginx.access`, `prometheus`, `endpoint` etc. For data streams that otherwise fit, but that do not have dataset set we use the value "generic" for the dataset value. `event.dataset` should have the same value as `data_stream.dataset`.
    Beyond the Elasticsearch data stream naming criteria noted above, the `dataset` value has additional restrictions:
      * Must not contain `-`
      * No longer than 100 characters
  name: data_stream.dataset
  type: constant_keyword
- description: |-
    A user defined namespace. Namespaces are useful to allow grouping of data.
    Many users already organize their indices this way, and the data stream naming scheme now provides this best practice as a default. Many users will populate this field with `default`. If no value is used, it falls back to `default`.
    Beyond the Elasticsearch index naming criteria noted above, `namespace` value has the additional restrictions:
      * Must not contain `-`
      * No longer than 100 characters
  name: data_stream.namespace
  type: constant_keyword
- description: |-
    An overarching type for the data stream.
    Currently allowed values are "logs" and "metrics". We expect to also add "traces" and "synthetics" in the near future.
  name: data_stream.type
  type: constant_keyword
- description: |-
    ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.
    When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.
  name: ecs.version
  type: keyword
- description: Operating system architecture.
  name: host.architecture
  type: keyword
- description: |-
    Name of the domain of which the host is a member.
    For example, on Windows this could be the host's Active Directory domain or NetBIOS domain name. For Linux this could be the domain of the host's LDAP provider.
  name: host.domain
  type: keyword
- description: |-
    Hostname of the host.
    It normally contains what the `hostname` command returns on the host machine.
  name: host.hostname
  type: keyword
- description: |-
    Unique host id.
    As hostname is not always unique, use values that are meaningful in your environment.
    Example: The current usage of `beat.name`.
  name: host.id
  type: keyword
- description: Host ip addresses.
  name: host.ip
  type: ip
- description: |-
    Host MAC addresses.
    The notation format from RFC 7042 is suggested: Each octet (that is, 8-bit byte) is represented by two [uppercase] hexadecimal digits giving the value of the octet as an unsigned integer. Successive octets are separated by a hyphen.
  name: host.mac
  pattern: ^[A-F0-9]{2}(-[A-F0-9]{2}){5,}$
  type: keyword
- description: OS family (such as redhat, debian, freebsd, windows).
  name: host.os.family
  type: keyword
- description: Operating system name, without the version.
  multi_fields:
    - name: text
      type: match_only_text
  name: host.os.name
  type: keyword
- description: Operating system version as a raw string.
  name: host.os.version
  type: keyword
- description: |-
    Type of host.
    For Cloud providers this can be the machine type like `t2.medium`. If vm, this could be the container, for example, or other information meaningful in your environment.
  name: host.type
  type: keyword
- description: Seconds the host has been up.
  name: host.uptime
  type: long
- description: Error message.
  name: error.message
  type: match_only_text
- description: |-
    Timestamp when an event arrived in the central data store.
    This is different from `@timestamp`, which is when the event originally occurred.  It's also different from `event.created`, which is meant to capture the first time an agent saw the event.
    In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.
  name: event.ingested
  type: date
