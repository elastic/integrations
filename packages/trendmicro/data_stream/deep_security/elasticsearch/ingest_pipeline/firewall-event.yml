---
description: Pipeline for processing Firewall event logs
processors:
  - set:
      field: event.category
      value: 'firewall'
  - script:
      lang: painless
      params:
        extensions:
          # Rename field
          - name: deviceCustomNumber1
            to: host.id
          - name: baseEventCount
            to: trendmicro.event.count
          - name: deviceCustomString2
            to: trendmicro.event.tcp_flag
          - name: deviceCustomString3
            to: trendmicro.event.packet_fragmentation
          - name: TrendMicroDsTags
            to: trendmicro.event.tags
          - name: TrendMicroDsTenantId
            to: trendmicro.event.tenant_id
          - name: TrendMicroDsTenant
            to: trendmicro.event.tenant_name
          - name: deviceAddress
            to: host.ip
          - name: deviceHostName
            to: host.hostname
          - name: TrendMicroDsFrameType
            to: trendmicro.event.ethernet_frame_type
          - name: TrendMicroDsPacketData
            to: trendmicro.event.packet_data
<<<<<<< HEAD
          #- name: event.severity
=======
          #- name: log.syslog.severity.code
>>>>>>> c9d1c986886b1bc84d8f0cdbaccfdfff9bccecd4
          #  to: log.syslog.severity.name
          #  convert:
          #     '0': emergency
          #     '1': alert
          #     '2': critical
          #     '3': error
          #     '4': warning
          #     '5': notice
          #     '6': informational
          #     '7': debug

      source: |
        def actions = new ArrayList();
        def exts = ctx.cef?.extensions;
        if (exts == null) return;
        for (entry in params.extensions) {
          def value = exts[entry.name];
          if (value == null ||
            (entry.convert != null &&
              (value=entry.convert[value.toLowerCase()]) == null))
            continue;
          if (entry.to != null) {
            actions.add([
              "value": value,
              "to": entry.to
            ]);
            continue;
          }
          def label = exts[entry.name + "Label"];
          if (label == null) continue;
          def dest = entry.labels[label.toLowerCase()];
          if (dest == null) continue;
          actions.add([
            "value": value,
            "to": dest
          ]);
        }
        ctx["_tmp_copy"] = actions;
  - foreach:
      field: _tmp_copy
      processor:
        set:
          field: "{{_ingest._value.to}}"
          value: "{{_ingest._value.value}}"

  - remove:
      field:
        - _tmp_copy

on_failure:
  - set:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'