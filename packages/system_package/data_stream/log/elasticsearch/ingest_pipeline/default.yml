---
description: Pipeline for parsing System Package audit logs
processors:
- set:
    field: ecs.version
    value: "8.5.1"
- set:
    field: event.dataset
    value: system_package.log
- set:
    field: system.audit.package.type
    copy_from: package.type
    on_failure:
        - set:
            field: error.message
            value: "{{ _ingest.on_failure_message }}"
- rename:
    field: message
    target_field: event.original
    ignore_missing: true
- remove: 
    field: package
    ignore_missing: true
- rename: 
    field: system.audit.package
    target_field: package
    ignore_missing: true

  ###########
  # Cleanup #
  ###########

- remove:
    field: event.original
    if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
    ignore_missing: true
- remove: 
    field: '@metadata'
    ignore_missing: true
- remove: 
    field: service
    ignore_missing: true
- script:
    lang: painless
    description: This script processor iterates over the whole document to remove fields with null values.
    source: |
      void handleMap(Map map) {
        for (def x : map.values()) {
          if (x instanceof Map) {
              handleMap(x);
          } else if (x instanceof List) {
              handleList(x);
          }
        }
        map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      void handleList(List list) {
        for (def x : list) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
        }
        list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      handleMap(ctx);
on_failure:
- set:
    field: error.message
    value: "{{ _ingest.on_failure_message }}"