---
description: Pipeline for processing SecureSphere logs.
processors:
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: 8.10.0
  - set:
      field: event.kind
      tag: set_event_kind_to_alert
      value: alert
      if: ctx.cef?.extensions?.deviceEventCategory instanceof String && ctx.cef.extensions.deviceEventCategory.toLowerCase().contains("alert")
  - set:
      field: event.kind
      tag: set_event_kind_to_event
      value: event
      if: ctx.cef?.extensions?.deviceEventCategory instanceof String && ctx.cef.extensions.deviceEventCategory.toLowerCase().contains("event")
  - rename:
      field: _conf.tz_offset
      target_field: event.timezone
      if: ctx._conf?.tz_offset != null
      tag: 'rename_tz_offset'
      ignore_missing: true
  - date:
      field: cef.extensions.deviceReceiptTime
      tag: 'date_timestamp'
      formats:
        - ISO8601
      if: ctx.cef?.extensions?.deviceReceiptTime != null && ctx.cef.extensions.deviceReceiptTime != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: cef.extensions.deviceReceiptTime
      tag: 'date_set_timestamp_timezone'
      timezone: '{{{event.timezone}}}'
      formats:
        - ISO8601
      if: ctx.cef?.extensions?.deviceReceiptTime != null && ctx.cef.extensions.deviceReceiptTime != '' && ctx.event?.timezone != null
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: cef.extensions.deviceReceiptTime
      tag: 'date_deviceReceiptTime'
      target_field: imperva.securesphere.device.receipt_time
      formats:
        - ISO8601
      if: ctx.cef?.extensions?.deviceReceiptTime != null && ctx.cef.extensions.deviceReceiptTime != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: cef.extensions.deviceReceiptTime
      tag: 'date_timezone_deviceReceiptTime'
      timezone: '{{{event.timezone}}}'
      target_field: imperva.securesphere.device.receipt_time
      formats:
        - ISO8601
      if: ctx.cef?.extensions?.deviceReceiptTime != null && ctx.cef.extensions.deviceReceiptTime != '' && ctx.event?.timezone != null
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: cef.extensions.destinationAddress
      tag: 'convert_destinationAddress_to_ip'
      target_field: imperva.securesphere.destination.address
      type: ip
      ignore_missing: true
      if: ctx.cef?.extensions?.destinationAddress != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - append:
      field: related.ip
      tag: append_destination_address_into_related_ip
      value: '{{{imperva.securesphere.destination.address}}}'
      allow_duplicates: false
  - convert:
      field: cef.extensions.destinationPort
      tag: 'convert_destinationPort_to_long'
      target_field: imperva.securesphere.destination.port
      type: long
      ignore_missing: true
      if: ctx.cef?.extensions?.destinationPort != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: cef.extensions.destinationUserName
      tag: 'rename_cef_extensions_destinationUserName'
      target_field: imperva.securesphere.destination.user_name
      ignore_missing: true
  - append:
      field: related.user
      tag: append_destination_user_name_into_related_user
      value: '{{{imperva.securesphere.destination.user_name}}}'
      allow_duplicates: false
  - rename:
      field: cef.extensions.deviceAction
      tag: 'rename_cef_extensions_deviceAction'
      target_field: imperva.securesphere.device.action
      ignore_missing: true
  - rename:
      field: cef.device.event_class_id
      tag: 'rename_cef_device_event_class_id'
      target_field: imperva.securesphere.device.event.class_id
      ignore_missing: true
  - rename:
      field: cef.name
      tag: 'rename_cef_name'
      target_field: imperva.securesphere.name
      ignore_missing: true
  - rename:
      field: cef.extensions.transportProtocol
      tag: 'rename_cef_extensions_transportProtocol'
      target_field: imperva.securesphere.transport_protocol
      ignore_missing: true
  - rename:
      field: cef.device.product
      tag: 'rename_cef_device_product'
      target_field: imperva.securesphere.device.product
      ignore_missing: true
  - rename:
      field: cef.device.vendor
      tag: 'rename_cef_device_vendor'
      target_field: imperva.securesphere.device.vendor
      ignore_missing: true
  - rename:
      field: cef.device.version
      tag: 'rename_cef_device_version'
      target_field: imperva.securesphere.device.version
      ignore_missing: true
  - rename:
      field: cef.extensions.deviceCustomString3
      tag: 'rename_cef_extensions_deviceCustomString3'
      target_field: imperva.securesphere.device.custom_string3.value
      ignore_missing: true
  - set:
      field: service.name
      tag: 'set_service_name'
      copy_from: imperva.securesphere.device.custom_string3.value
      ignore_empty_value: true
  - convert:
      field: cef.extensions.sourceAddress
      tag: 'convert_source_ipAddress_to_string'
      target_field: imperva.securesphere.source.address
      type: ip
      ignore_missing: true
      if: ctx.cef?.extensions?.sourceAddress != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - append:
      field: related.ip
      tag: append_source_address_into_related_ip
      value: '{{{imperva.securesphere.source.address}}}'
      allow_duplicates: false
  - convert:
      field: cef.extensions.sourcePort
      tag: 'convert_source_port_to_long'
      target_field: imperva.securesphere.source.port
      type: long
      ignore_missing: true
      if: ctx.cef?.extensions?.sourcePort != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: cef.extensions.sourceUserName
      tag: 'rename_cef_extensions_sourceUserName'
      target_field: imperva.securesphere.source.user_name
      ignore_missing: true
  - append:
      field: related.user
      tag: append_source_user_name_into_related_user
      value: '{{{imperva.securesphere.source.user_name}}}'
      allow_duplicates: false
  - rename:
      field: cef.extensions.deviceCustomString1Label
      tag: 'rename_cef_extensions_deviceCustomString1Label'
      target_field: imperva.securesphere.device.custom_string1.label
      ignore_missing: true
  - rename:
      field: cef.extensions.deviceCustomString1
      tag: 'rename_cef_extensions_deviceCustomString1'
      target_field: imperva.securesphere.device.custom_string1.value
      ignore_missing: true
  - rename:
      field: cef.extensions.deviceCustomString2Label
      tag: 'rename_cef_extensions_deviceCustomString2Label'
      target_field: imperva.securesphere.device.custom_string2.label
      ignore_missing: true
  - rename:
      field: cef.extensions.deviceCustomString2
      tag: 'rename_cef_extensions_deviceCustomString2'
      target_field: imperva.securesphere.device.custom_string2.value
      ignore_missing: true
  - rename:
      field: cef.extensions.deviceCustomString3Label
      tag: 'rename_cef_extensions_deviceCustomString3Label'
      target_field: imperva.securesphere.device.custom_string3.label
      ignore_missing: true
  - rename:
      field: cef.extensions.deviceCustomString4Label
      tag: 'rename_cef_extensions_deviceCustomString4Label'
      target_field: imperva.securesphere.device.custom_string4.label
      ignore_missing: true
  - rename:
      field: cef.extensions.deviceCustomString4
      tag: 'rename_cef_extensions_deviceCustomString4'
      target_field: imperva.securesphere.device.custom_string4.value
      ignore_missing: true
  - rename:
      field: cef.extensions.deviceCustomString5Label
      tag: 'rename_cef_extensions_deviceCustomString5Label'
      target_field: imperva.securesphere.device.custom_string5.label
      ignore_missing: true
  - rename:
      field: cef.extensions.deviceCustomString5
      tag: 'rename_cef_extensions_deviceCustomString5'
      target_field: imperva.securesphere.device.custom_string5.value
      ignore_missing: true
  - rename:
      field: cef.extensions.deviceEventCategory
      tag: 'rename_cef_extensions_deviceEventCategory'
      target_field: imperva.securesphere.device.event.category
      ignore_missing: true
  - rename:
      field: cef.severity
      tag: 'rename_cef_severity'
      target_field: imperva.securesphere.severity
      ignore_missing: true
  - rename:
      field: cef.version
      tag: 'rename_cef_version'
      target_field: imperva.securesphere.version
      ignore_missing: true
  - remove:
      field: cef
      tag: remove_cef
      ignore_missing: true
  - remove:
      field:
        - imperva.securesphere.destination.address
        - imperva.securesphere.device.receipt_time
        - imperva.securesphere.destination.port
        - imperva.securesphere.destination.user_name
        - imperva.securesphere.device.action
        - imperva.securesphere.device.event.class_id
        - imperva.securesphere.name
        - imperva.securesphere.transport_protocol
        - imperva.securesphere.device.product
        - imperva.securesphere.device.vendor
        - imperva.securesphere.device.version
        - imperva.securesphere.device.custom_string3.value
        - imperva.securesphere.source.address
        - imperva.securesphere.source.port
        - imperva.securesphere.source.user_name
      tag: remove_custom_duplicate_fields
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))
  - remove:
      field: event.original
      tag: remove_event_original
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
  - script:
      description: Drops null/empty values recursively.
      tag: script_to_drop_null_values
      lang: painless
      source: |-
        boolean drop(Object object) {
          if (object == null || object == '') {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(v -> drop(v));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(v -> drop(v));
            return (((List) object).length == 0);
          }
          return false;
        }
        drop(ctx);
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      value: pipeline_error
