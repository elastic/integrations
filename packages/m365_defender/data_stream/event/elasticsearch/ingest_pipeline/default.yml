---
description: Pipeline for processing Event logs.
processors:
  - set:
      field: ecs.version
      value: '8.9.0'
      tag: set_ecs_version
  - rename:
      field: message
      target_field: event.original
      tag: rename_message_to_event_original
      ignore_missing: true
  - json:
      field: event.original
      tag: json_event_original
      target_field: json
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  
  # Rename processors
  - rename:
      field: json.category
      target_field: m365_defender.event.category
      tag: rename_json_category
      ignore_missing: true
  - rename:
      field: json.operationName
      target_field: m365_defender.event.operation_name
      tag: rename_json_operationName
      ignore_missing: true
  - rename:
      field: json.Tenant
      target_field: m365_defender.event.tenant.name
      tag: rename_json_Tenant
      ignore_missing: true
  - rename:
      field: json.tenantId
      target_field: m365_defender.event.tenant.id
      tag: rename_json_tenantId
      ignore_missing: true
  
  # Date processors
  - date:
      field: json.time
      target_field: m365_defender.event.time
      formats:
        - ISO8601
      tag: date_json_time
      if: ctx.json?.time != null
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - date:
      field: json.properties.Timestamp
      target_field: m365_defender.event.timestamp
      formats:
        - ISO8601
      tag: date_json_properties_Timestamp
      if: ctx.json?.properties?.Timestamp != null
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: '@timestamp'
      copy_from: m365_defender.event.timestamp
      tag: set_timestamp
      ignore_empty_value: true
  
  # Pipeline Processors
  # ctx.m365_defender.event.category is created by Eventhub when retrieving data from M365 Defender.
  # It represents the data table that it accessed, and is a required field for the pipeline to work.
  # Two processors are added to catch if the field is missing, or if it is not a valid value rather than dropping the event.
  - append:
      field: error.message
      value: 'Missing required field: m365_defender.event.category.'
      tag: append_missing_required_field_m365_defender_event_category
      if: ctx.m365_defender?.event?.category == null || ctx.m365_defender?.event?.category == ""
  - append:
      field: error.message
      value: 'The event category {{{m365_defender.event.category}}} is not supported.'
      tag: append_invalid_m365_defender_event_category
      if: ctx.m365_defender?.event?.category != null && !['AdvancedHunting-AlertEvidence','AdvancedHunting-AlertInfo','AdvancedHunting-DeviceEvents','AdvancedHunting-DeviceFileCertificateInfo','AdvancedHunting-DeviceFileEvents','AdvancedHunting-DeviceImageLoadEvents','AdvancedHunting-DeviceInfo','AdvancedHunting-DeviceLogonEvents','AdvancedHunting-DeviceNetworkEvents','AdvancedHunting-DeviceNetworkInfo','AdvancedHunting-DeviceProcessEvents','AdvancedHunting-DeviceRegistryEvents','AdvancedHunting-EmailAttachmentInfo','AdvancedHunting-EmailEvents','AdvancedHunting-EmailPostDeliveryEvents','AdvancedHunting-EmailUrlInfo','AdvancedHunting-IdentityLogonEvents','AdvancedHunting-IdentityQueryEvents','AdvancedHunting-IdentityDirectoryEvents','AdvancedHunting-CloudAppEvents','AdvancedHunting-UrlClickEvents'].contains(ctx.m365_defender.event.category)
  - pipeline:
      name: '{{ IngestPipeline "pipeline_alert" }}'
      tag: pipeline_alert
      if: ctx.m365_defender?.event?.category != null && ctx.m365_defender.event.category.toLowerCase().contains('alert')
  - pipeline:
      name: '{{ IngestPipeline "pipeline_device" }}'
      tag: pipeline_device
      if: ctx.m365_defender?.event?.category != null && ctx.m365_defender.event.category.toLowerCase().contains('device')
  - pipeline:
      name: '{{ IngestPipeline "pipeline_email" }}'
      tag: pipeline_email
      if: ctx.m365_defender?.event?.category != null && (ctx.m365_defender.event.category.toLowerCase().contains('email') || ctx.m365_defender.event.category.toLowerCase().contains('urlclickevents'))
  - pipeline:
      name: '{{ IngestPipeline "pipeline_app_and_identity" }}'
      tag: pipeline_app_and_identity
      if: ctx.m365_defender?.event?.category != null && (ctx.m365_defender.event.category.toLowerCase().contains('identity') || ctx.m365_defender.event.category.toLowerCase().contains('cloudappevents'))

  # Cleanup
  - remove:
      field: json
      tag: remove_json
      ignore_missing: true
  - remove:
      field: event.original
      tag: remove_event_original
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_missing: true
  - script:
      description: Drops null/empty values recursively.
      tag: script_drop_empty_fields
      lang: painless
      source:
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);
on_failure:
  - append:
      field: error.message
      value: |-
        Processor "{{{ _ingest.on_failure_processor_type }}}" with tag "{{{ _ingest.on_failure_processor_tag }}}" in pipeline "{{{ _ingest.on_failure_pipeline }}}" failed with message "{{{ _ingest.on_failure_message }}}"
  - set:
      field: event.kind
      value: pipeline_error
