---
description: Pipeline for processing Device Event logs.
processors:
  # ctx.m365_defender.event.category is required for the event to be processed correctly as documented in the initial pipeline.
  # Rather than checking it in every processor we check it once here.
  - fail:
      message: 'Event does not contain a valid category.'
      tag: fail_event_category
      if: ctx.m365_defender.event.category == null || ctx.m365_defender.event.category == ''
  # Event categorizations
  - set:
      field: event.kind
      value: event
      tag: set_event_kind
  - append:
      field: event.category
      value: authentication
      tag: append_event_category_authentication
      if: ctx.m365_defender.event.category.toLowerCase().contains('devicelogonevents')
  - append:
      field: event.category
      value: host
      tag: append_event_category_host
      if: ctx.m365_defender.event.category.toLowerCase().contains('deviceinfo') || (ctx.m365_defender.event.category.toLowerCase().contains('deviceevents') && ctx.json?.properties?.ActionType != null && !ctx.json.properties.ActionType.toLowerCase().endsWith('apicall') && !ctx.json.properties.ActionType.toLowerCase().contains('driverload'))
  - append:
      field: event.category
      value: api
      tag: append_event_category_api
      if: ctx.m365_defender.event.category.toLowerCase().contains('deviceevents') && ctx.json?.properties?.ActionType != null && ctx.json.properties.ActionType.toLowerCase().endsWith('apicall')
  - append:
      field: event.category
      value: driver
      tag: append_event_category_driver
      if: ctx.json?.properties?.ActionType != null && ctx.json.properties.ActionType.toLowerCase().contains('driverload')
  - append:
      field: event.category
      value: file
      tag: append_event_category_file
      if: ctx.m365_defender.event.category.toLowerCase().contains('devicefileevents') || ctx.m365_defender.event.category.toLowerCase().contains('devicefilecertificateinfo')
  - append:
      field: event.category
      value: process
      tag: append_event_category_process
      if: ctx.m365_defender.event.category.toLowerCase().contains('deviceprocessevents')
  - append:
      field: event.category
      value: library
      tag: append_event_category_library
      if: ctx.m365_defender.event.category.toLowerCase().contains('deviceimageloadevents')
  - append:
      field: event.category
      value: network
      tag: append_event_category_network
      if: ctx.m365_defender.event.category.toLowerCase().contains('devicenetworkevents') || ctx.m365_defender.event.category.toLowerCase().contains('devicenetworkinfo')
  - append:
      field: event.category
      value: registry
      tag: append_event_category_registry
      if: ctx.m365_defender.event.category.toLowerCase().contains('deviceregistryevents')
  - append:
      field: event.type
      value: info
      tag: append_event_type_info
      if: >-
        (ctx.event?.category != null &&
        (ctx.event.category.contains('authentication') ||
        ctx.event.category.contains('host'))) || (ctx.json?.properties?.ActionType
        != null &&
        (ctx.json.properties.ActionType.toLowerCase().contains('connectionfound')
        ||
        ctx.json.properties.ActionType.toLowerCase().contains('networksignatureinspected')
        ||
        ctx.json.properties.ActionType.toLowerCase().contains('devicenetworkinfo')))
  - append:
      field: event.type
      value: deletion
      tag: append_event_type_deletion
      if: ctx.event?.category != null && ctx.event.category.contains('file') && ctx.json?.properties?.ActionType != null && ctx.json.properties.ActionType.toLowerCase() == 'filedeleted'
  - append:
      field: event.type
      value: change
      tag: append_event_type_change
      if: ctx.event?.category != null && ctx.event.category.contains('file') && ctx.json?.properties?.ActionType != null && (ctx.json.properties.ActionType.toLowerCase() == 'filemodified' || ctx.json.properties.ActionType.toLowerCase() == 'filerenamed')
  - append:
      field: event.type
      value: creation
      tag: append_event_type_creation
      if: ctx.event?.category != null && ctx.event.category.contains('file') && ctx.json?.properties?.ActionType != null && ctx.json.properties.ActionType.toLowerCase() == 'filecreated'
  - append:
      field: event.type
      value: info
      tag: append_event_type_info
      if: ctx.event?.category != null && ctx.event.type == null && ctx.event.category.contains('file')
  - append:
      field: event.type
      value: start
      tag: append_event_type_start
      if: ctx.json?.properties?.ActionType != null && (ctx.json.properties.ActionType.toLowerCase().contains('connectionsuccess') || ctx.json.properties.ActionType.toLowerCase().contains('driverload'))
  - append:
      field: event.type
      value: denied
      tag: append_event_type_denied
      if: ctx.json?.properties?.ActionType != null && ctx.json.properties.ActionType.toLowerCase().contains('connectionfailed')
  - append:
      field: event.type
      value: start
      tag: append_event_type_start
      if: ctx.json?.properties?.ActionType != null && (ctx.json.properties.ActionType.toLowerCase().contains('connectionrequest') || ctx.json.properties.ActionType.toLowerCase().contains('listeningconnectioncreated') || ctx.json.properties.ActionType.toLowerCase().contains('processcreated') || ctx.m365_defender.event.category.toLowerCase().contains('deviceimageloadevents'))
  - append:
      field: event.type
      value: start
      tag: append_event_type_start
      if: ctx.json?.properties?.ActionType != null && ctx.json.properties.ActionType.toLowerCase().contains('inboundconnectionaccepted')
  - append:
      field: event.type
      value: creation
      tag: append_event_type_creation
      if: ctx.json?.properties?.ActionType != null && ctx.json.properties.ActionType.toLowerCase().contains('registrykeycreated')
  - append:
      field: event.type
      value: deletion
      tag: append_event_type_deletion
      if: ctx.json?.properties?.ActionType != null && (ctx.json.properties.ActionType.toLowerCase().contains('registrykeydeleted') || ctx.json.properties.ActionType.toLowerCase().contains('registryvaluedeleted'))
  - append:
      field: event.type
      value: change
      tag: append_event_type_change
      if: ctx.json?.properties?.ActionType != null && (ctx.json.properties.ActionType.toLowerCase().contains('registrykeyrenamed') || ctx.json.properties.ActionType.toLowerCase().contains('registryvalueset'))
  - set:
      field: json.properties.ActionType
      value: load
      tag: set_json_properties_ActionType_load
      override: true
      if: ctx.json?.properties?.ActionType != null && ctx.json.properties.ActionType.toLowerCase().contains('imageloaded')
  # Special handling for event.type when event.category is network or api
  - append:
      field: event.type
      value: protocol
      tag: append_event_type_protocol
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.json?.properties?.ActionType != null && ctx.json.properties.ActionType.toLowerCase().contains('dnsconnectioninspected')
  - append:
      field: event.type
      value: access
      tag: append_event_type_access_api
      if: ctx.event?.category != null && ctx.event.category.contains('api') && ctx.event?.type == null && ctx.json?.properties?.ActionType != null && ctx.json.properties.ActionType.toLowerCase().startsWith('open')
  - append:
      field: event.type
      value: change
      tag: append_event_type_change_api
      if: ctx.event?.category != null && ctx.event.category.contains('api') && ctx.event?.type == null && ctx.json?.properties?.ActionType != null && ctx.json.properties.ActionType.toLowerCase().startsWith('write')
  - append:
      field: event.type
      value: info
      tag: append_event_type_info
      if: ctx.event?.category != null && ctx.event.type == null && (ctx.event.category.contains('network') || ctx.event.category.contains('api'))

  # AdditionalFields are flattened, as they can vary depending on the source, users can use custom pipelines to move fields away from AdditionalFields if required.
  # We move the AdditionalFields.direction when it exists, as its required for source/destination mapping
  # Also move DNS fields when ActionType is 'DnsConnectionInspected'
  - json:
      field: json.properties.AdditionalFields
      tag: json_json_properties_AdditionalFields
      if: ctx.json?.properties?.AdditionalFields instanceof String && ctx.json.properties.AdditionalFields != ''
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.properties.AdditionalFields
      target_field: m365_defender.event.additional_fields
      tag: rename_json_properties_AdditionalFields
      ignore_missing: true
  - rename:
      field: m365_defender.event.additional_fields.direction
      target_field: m365_defender.event.network_direction
      tag: rename_additional_fields_direction
      ignore_missing: true
      if: ctx.m365_defender?.event?.additional_fields instanceof Map
  - rename:
      field: m365_defender.event.additional_fields.qclass_name
      target_field: m365_defender.event.dns.qclass_name
      tag: rename_additional_fields_dns_qclass_name
      ignore_missing: true
      if: ctx.m365_defender?.event?.additional_fields instanceof Map && ctx.json?.properties?.ActionType != null && ctx.event?.category != null && ctx.event.category.contains('network') && ctx.json.properties.ActionType.toLowerCase().contains('dnsconnectioninspected')
  - rename:
      field: m365_defender.event.additional_fields.query
      target_field: m365_defender.event.dns.query
      tag: rename_additional_fields_dns_query
      ignore_missing: true
      if: ctx.m365_defender?.event?.additional_fields instanceof Map && ctx.json?.properties?.ActionType != null && ctx.event?.category != null && ctx.event.category.contains('network') && ctx.json.properties.ActionType.toLowerCase().contains('dnsconnectioninspected')
  - rename:
      field: m365_defender.event.additional_fields.qtype_name
      target_field: m365_defender.event.dns.qtype_name
      tag: rename_additional_fields_dns_qtype_name
      ignore_missing: true
      if: ctx.m365_defender?.event?.additional_fields instanceof Map && ctx.json?.properties?.ActionType != null && ctx.event?.category != null && ctx.event.category.contains('network') && ctx.json.properties.ActionType.toLowerCase().contains('dnsconnectioninspected')
  - rename:
      field: m365_defender.event.additional_fields.rcode_name
      target_field: m365_defender.event.dns.rcode_name
      tag: rename_additional_fields_dns_rcode_name
      ignore_missing: true
      if: ctx.m365_defender?.event?.additional_fields instanceof Map && ctx.json?.properties?.ActionType != null && ctx.event?.category != null && ctx.event.category.contains('network') && ctx.json.properties.ActionType.toLowerCase().contains('dnsconnectioninspected')
  - json:
      field: m365_defender.event.additional_fields.answers
      tag: json_m365_defender_event_additional_fields_answers
      if: ctx.m365_defender?.event?.additional_fields instanceof Map && ctx.json?.properties?.ActionType != null && ctx.event?.category != null && ctx.event.category.contains('network') && ctx.json.properties.ActionType.toLowerCase().contains('dnsconnectioninspected')
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: m365_defender.event.additional_fields.answers
      target_field: m365_defender.event.dns.answers
      tag: rename_additional_fields_dns_answers
      ignore_missing: true
      if: ctx.m365_defender?.event?.additional_fields instanceof Map && ctx.json?.properties?.ActionType != null && ctx.event?.category != null && ctx.event.category.contains('network') && ctx.json.properties.ActionType.toLowerCase().contains('dnsconnectioninspected')
  - script:
      description: Add m365_defender.event.dns.header_flags from flags inside AdditionalFields
      lang: painless
      if: ctx.m365_defender?.event?.additional_fields instanceof Map && ctx.json?.properties?.ActionType != null && ctx.event?.category != null && ctx.event.category.contains('network') && ctx.json.properties.ActionType.toLowerCase().contains('dnsconnectioninspected')
      source: |
        def af = ctx.m365_defender.event.additional_fields;
        List ecs_flags = ["AA", "TC", "RD", "RA", "AD", "CD", "DO"];
        List flags = [];
        if (af instanceof Map) {
            for (def flag: ecs_flags) {
                if (af[flag] != null && af[flag] == "true") {
                    flags.add(flag);
                }
            }
        }
        ctx.m365_defender.event.dns.header_flags = flags;

  # JSON processors to unpack JSON string fields before renaming them
  - json:
      field: json.properties.CrlDistributionPointUrls
      tag: json_json_properties_CrlDistributionPointUrls
      if: ctx.json?.properties?.CrlDistributionPointUrls instanceof String && ctx.json.properties.CrlDistributionPointUrls != ''
      on_failure:
      - append:
          field: error.message
          value: '{{{_ingest.on_failure_message}}}'
  - json:
      field: json.properties.LoggedOnUsers
      tag: json_json_properties_LoggedOnUsers
      if: ctx.json?.properties?.LoggedOnUsers instanceof String && ctx.json.properties.LoggedOnUsers != ''
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - json:
      field: json.properties.ConnectedNetworks
      tag: json_json_properties_ConnectedNetworks
      if: ctx.json?.properties?.ConnectedNetworks instanceof String && ctx.json.properties.ConnectedNetworks != ''
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - json:
      field: json.properties.DefaultGateways
      tag: json_json_properties_DefaultGateways
      if: ctx.json?.properties?.DefaultGateways instanceof String && ctx.json.properties.DefaultGateways != ''
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - json:
      field: json.properties.DnsAddresses
      tag: json_json_properties_DnsAddresses
      if: ctx.json?.properties?.DnsAddresses instanceof String && ctx.json.properties.DnsAddresses != ''
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - json:
      field: json.properties.IPAddresses
      tag: json_json_properties_IPAddresses
      if: ctx.json?.properties?.IPAddresses instanceof String && ctx.json.properties.IPAddresses != ''
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'

  # Date Processors
  - date:
      field: json.properties.CertificateExpirationTime
      target_field: m365_defender.event.certificate.expiration_time
      tag: date_json_properties_CertificateExpirationTime
      formats:
        - ISO8601
      if: ctx.json?.properties?.CertificateExpirationTime instanceof String && ctx.json.properties.CertificateExpirationTime != ""
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - date:
      field: json.properties.InitiatingProcessCreationTime
      target_field: m365_defender.event.initiating_process.creation_time
      tag: date_json_properties_InitiatingProcessCreationTime
      formats:
        - ISO8601
      if: ctx.json?.properties?.InitiatingProcessCreationTime instanceof String && ctx.json.properties.InitiatingProcessCreationTime != ""
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - date:
      field: json.properties.InitiatingProcessParentCreationTime
      target_field: m365_defender.event.initiating_process.parent_creation_time
      tag: date_json_properties_InitiatingProcessParentCreationTime
      formats:
        - ISO8601
      if: ctx.json?.properties?.InitiatingProcessParentCreationTime instanceof String && ctx.json.properties.InitiatingProcessParentCreationTime != ""
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - date:
      field: json.properties.ProcessCreationTime
      target_field: m365_defender.event.process.creation_time
      tag: date_json_properties_ProcessCreationTime
      formats:
        - ISO8601
      if: ctx.json?.properties?.ProcessCreationTime instanceof String && ctx.json.properties.ProcessCreationTime != ""
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - date:
      field: json.properties.CertificateCountersignatureTime
      target_field: m365_defender.event.certificate.countersignature_time
      tag: date_json_properties_CertificateCountersignatureTime
      formats:
        - ISO8601
      if: ctx.json?.properties?.CertificateCountersignatureTime instanceof String && ctx.json.properties.CertificateCountersignatureTime != ""
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - date:
      field: json.properties.CertificateCreationTime
      target_field: m365_defender.event.certificate.creation_time
      tag: date_json_properties_CertificateCreationTime
      formats:
        - ISO8601
      if: ctx.json?.properties?.CertificateCreationTime instanceof String && ctx.json.properties.CertificateCreationTime != ""
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  # Convert processors
  - convert:
      field: json.properties.InitiatingProcessFileSize
      target_field: m365_defender.event.initiating_process.file_size
      tag: convert_json_properties_InitiatingProcessFileSize
      if: ctx.json?.properties?.InitiatingProcessFileSize != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.properties.InitiatingProcessLogonId
      target_field: m365_defender.event.initiating_process.logon_id
      tag: convert_json_properties_InitiatingProcessLogonId
      if: ctx.json?.properties?.InitiatingProcessLogonId != ''
      type: string
      ignore_missing: true
  - convert:
      field: json.properties.LogonId
      target_field: m365_defender.event.logon.id
      tag: convert_json_properties_LogonId
      if: ctx.json?.properties?.LogonId != ''
      type: string
      ignore_missing: true
  - convert:
      field: json.properties.ProcessId
      target_field: m365_defender.event.process.id
      tag: convert_json_properties_ProcessId
      if: ctx.json?.properties?.ProcessId != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.properties.ReportId
      target_field: m365_defender.event.report_id
      tag: convert_json_properties_ReportId
      if: ctx.json?.properties?.ReportId != ''
      type: string
      ignore_missing: true
  - convert:
      field: json.properties.IPv4Dhcp
      target_field: m365_defender.event.ipv4_dhcp
      tag: convert_json_properties_IPv4Dhcp
      if: ctx.json?.properties?.IPv4Dhcp != ''
      type: ip
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.properties.IPv6Dhcp
      target_field: m365_defender.event.ipv6_dhcp
      tag: convert_json_properties_IPv6Dhcp
      if: ctx.json?.properties?.IPv6Dhcp != ''
      type: ip
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'

# Numbers to boolean (Undocumented field types like string, numeric etc is possible, have to check all of them)
  - script:
      lang: painless
      source: |
       def isTruthy(def val) {
          if (val == null) {
            // Fast return if field is absent.
            return null;
          }
          if (val instanceof Boolean) {
            return val;
          }
          if (val instanceof Integer) {
            if (val == 1) {
              return true;
            }
            if (val == 0) {
              return false;
            }
            return null;
          }
          if (val instanceof String) {
            if (val == "1" || val == "true") {
              return true;
            }
            if (val == "0" || val == "false") {
              return false;
            }
            return null;
          }
          return null;
        }
        ctx.m365_defender.event.is_root_signer_microsoft = isTruthy(ctx.json?.properties?.IsRootSignerMicrosoft);
        ctx.m365_defender.event.is_signed = isTruthy(ctx.json?.properties?.IsSigned);
        ctx.m365_defender.event.is_trusted = isTruthy(ctx.json?.properties?.IsTrusted);
        ctx.m365_defender.event.is_azure_info_protection_applied = isTruthy(ctx.json?.properties?.IsAzureInfoProtectionApplied);
        ctx.m365_defender.event.is_azure_ad_joined = isTruthy(ctx.json?.properties?.IsAzureADJoined);
        ctx.m365_defender.event.is_local_admin = isTruthy(ctx.json?.properties?.IsLocalAdmin);

  # Rename processors to map JSON fields to M365 Fields
  - rename:
      field: json.properties.FolderPath
      target_field: m365_defender.event.folder_path
      tag: rename_json_properties_FolderPath
      ignore_missing: true
  - rename:
      field: json.properties.MD5
      target_field: m365_defender.event.md5
      tag: rename_json_properties_MD5
      ignore_missing: true
  - rename:
      field: json.properties.SHA1
      target_field: m365_defender.event.sha1
      tag: rename_json_properties_SHA1
      ignore_missing: true
  - rename:
      field: json.properties.SHA256
      target_field: m365_defender.event.sha256
      tag: rename_json_properties_SHA256
      ignore_missing: true
  - rename:
      field: json.properties.FileName
      target_field: m365_defender.event.file.name
      tag: rename_json_properties_FileName
      ignore_missing: true
  - rename:
      field: json.properties.FileSize
      target_field: m365_defender.event.file.size
      tag: rename_json_properties_FileSize
      ignore_missing: true
  - rename:
      field: json.properties.DeviceName
      target_field: m365_defender.event.device.name
      tag: rename_json_properties_DeviceName
      ignore_missing: true
  - rename:
      field: json.properties.DeviceId
      target_field: m365_defender.event.device.id
      tag : rename_json_properties_DeviceId
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessCommandLine
      target_field: m365_defender.event.initiating_process.command_line
      tag: rename_json_properties_InitiatingProcessCommandLine
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessMD5
      target_field: m365_defender.event.initiating_process.md5
      tag: rename_json_properties_InitiatingProcessMD5
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessSHA1
      target_field: m365_defender.event.initiating_process.sha1
      tag: rename_json_properties_InitiatingProcessSHA1
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessSHA256
      target_field: m365_defender.event.initiating_process.sha256
      tag: rename_json_properties_InitiatingProcessSHA256
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessParentId
      target_field: m365_defender.event.initiating_process.parent_id
      tag: rename_json_properties_InitiatingProcessParentId
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessId
      target_field: m365_defender.event.initiating_process.id
      tag: rename_json_properties_InitiatingProcessId
      ignore_missing: true
  - rename:
      field: json.properties.RegistryKey
      target_field: m365_defender.event.registry.key
      tag: rename_json_properties_RegistryKey
      ignore_missing: true
  - rename:
      field: json.properties.RegistryValueName
      target_field: m365_defender.event.registry.value_name
      tag: rename_json_properties_RegistryValueName
      ignore_missing: true
  - rename:
      field: json.properties.CertificateSerialNumber
      target_field: m365_defender.event.certificate.serial_number
      tag: rename_json_properties_CertificateSerialNumber
      ignore_missing: true
  - rename:
      field: json.properties.AccountName
      target_field: m365_defender.event.account.name
      tag: rename_json_properties_AccountName
      ignore_missing: true
  - rename:
      field: json.properties.RequestProtocol
      target_field: m365_defender.event.request.protocol
      tag: rename_json_properties_RequestProtocol
      ignore_missing: true
  - rename:
      field: json.properties.ActionType
      target_field: m365_defender.event.action.type
      tag: rename_json_properties_ActionType
      ignore_missing: true
  - rename:
      field: json.properties.RequestAccountDomain
      target_field: m365_defender.event.request.account_domain
      tag: rename_json_properties_RequestAccountDomain
      ignore_missing: true
  - rename:
      field: json.properties.RequestAccountName
      target_field: m365_defender.event.request.account_name
      tag: rename_json_properties_RequestAccountName
      ignore_missing: true
  - rename:
      field: json.properties.OSArchitecture
      target_field: m365_defender.event.os.architecture
      tag: rename_json_properties_OSArchitecture
      ignore_missing: true
  - rename:
      field: json.properties.OSPlatform
      target_field: m365_defender.event.os.platform
      tag: rename_json_properties_OSPlatform
      ignore_missing: true
  - rename:
      field: json.properties.OSDistribution
      target_field: m365_defender.event.os.distribution
      tag: rename_json_properties_OSDistribution
      ignore_missing: true
  - rename:
      field: json.properties.OSVersion
      target_field: m365_defender.event.os.version
      tag: rename_json_properties_OSVersion
      ignore_missing: true
  - rename:
      field: json.properties.DeviceType
      target_field: m365_defender.event.device.type
      tag: rename_json_properties_DeviceType
      ignore_missing: true
  - rename:
      field: json.properties.AccountDomain
      target_field: m365_defender.event.account.domain
      tag: rename_json_properties_AccountDomain
      ignore_missing: true
  - rename:
      field: json.properties.ClientVersion
      target_field: m365_defender.event.client_version
      tag: rename_json_properties_ClientVersion
      ignore_missing: true
  - rename:
      field: json.properties.DeviceCategory
      target_field: m365_defender.event.device.category
      tag: rename_json_properties_DeviceCategory
      ignore_missing: true
  - rename:
      field: json.properties.MacAddress
      target_field: m365_defender.event.mac_address
      tag: rename_json_properties_MacAddress
      ignore_missing: true
  - rename:
      field: json.properties.AccountSid
      target_field: m365_defender.event.account.sid
      tag: rename_json_properties_AccountSid
      ignore_missing: true
  - rename:
      field: json.properties.RequestAccountSid
      target_field: m365_defender.event.request.account_sid
      tag: rename_json_properties_RequestAccountSid
      ignore_missing: true
  - rename:
      field: json.properties.AppGuardContainerId
      target_field: m365_defender.event.app_guard_container_id
      tag: rename_json_properties_AppGuardContainerId
      ignore_missing: true
  - rename:
      field: json.properties.FileOriginUrl
      target_field: m365_defender.event.file.origin_url
      tag: rename_json_properties_FileOriginUrl
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessAccountDomain
      target_field: m365_defender.event.initiating_process.account_domain
      tag: rename_json_properties_InitiatingProcessAccountDomain
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessAccountName
      target_field: m365_defender.event.initiating_process.account_name
      tag: rename_json_properties_InitiatingProcessAccountName
      ignore_missing: true
  - rename:
      field: json.properties.AccountObjectId
      target_field: m365_defender.event.account.object_id
      tag: rename_json_properties_AccountObjectId
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessAccountObjectId
      target_field: m365_defender.event.initiating_process.account_object_id
      tag: rename_json_properties_InitiatingProcessAccountObjectId
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessAccountSid
      target_field: m365_defender.event.initiating_process.account_sid
      tag: rename_json_properties_InitiatingProcessAccountSid
      ignore_missing: true
  - rename:
      field: json.properties.AccountUpn
      target_field: m365_defender.event.account.upn
      tag: rename_json_properties_AccountUpn
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessAccountUpn
      target_field: m365_defender.event.initiating_process.account_upn
      tag: rename_json_properties_InitiatingProcessAccountUpn
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessFileName
      target_field: m365_defender.event.initiating_process.file_name
      tag: rename_json_properties_InitiatingProcessFileName
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessFolderPath
      target_field: m365_defender.event.initiating_process.folder_path
      tag: rename_json_properties_InitiatingProcessFolderPath
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessParentFileName
      target_field: m365_defender.event.initiating_process.parent_file_name
      tag: rename_json_properties_InitiatingProcessParentFileName
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessVersionInfoCompanyName
      target_field: m365_defender.event.initiating_process.version_info_company_name
      tag: rename_json_properties_InitiatingProcessVersionInfoCompanyName
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessVersionInfoFileDescription
      target_field: m365_defender.event.initiating_process.version_info_file_description
      tag: rename_json_properties_InitiatingProcessVersionInfoFileDescription
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessVersionInfoInternalFileName
      target_field: m365_defender.event.initiating_process.version_info_internal_file_name
      tag: rename_json_properties_InitiatingProcessVersionInfoInternalFileName
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessVersionInfoOriginalFileName
      target_field: m365_defender.event.initiating_process.version_info_original_file_name
      tag: rename_json_properties_InitiatingProcessVersionInfoOriginalFileName
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessVersionInfoProductName
      target_field: m365_defender.event.initiating_process.version_info_product_name
      tag: rename_json_properties_InitiatingProcessVersionInfoProductName
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessVersionInfoProductVersion
      target_field: m365_defender.event.initiating_process.version_info_product_version
      tag: rename_json_properties_InitiatingProcessVersionInfoProductVersion
      ignore_missing: true
  - rename:
      field: json.properties.ProcessCommandLine
      target_field: m365_defender.event.process.command_line
      tag: rename_json_properties_ProcessCommandLine
      ignore_missing: true
  - rename:
      field: json.properties.ProcessTokenElevation
      target_field: m365_defender.event.process.token_elevation
      tag: rename_json_properties_ProcessTokenElevation
      ignore_missing: true
  - rename:
      field: json.properties.ProcessVersionInfoCompanyName
      target_field: m365_defender.event.process.version_info_company_name
      tag: rename_json_properties_ProcessVersionInfoCompanyName
      ignore_missing: true
  - rename:
      field: json.properties.ProcessVersionInfoFileDescription
      target_field: m365_defender.event.process.version_info_file_description
      tag: rename_json_properties_ProcessVersionInfoFileDescription
      ignore_missing: true
  - rename:
      field: json.properties.ProcessVersionInfoInternalFileName
      target_field: m365_defender.event.process.version_info_internal_file_name
      tag: rename_json_properties_ProcessVersionInfoInternalFileName
      ignore_missing: true
  - rename:
      field: json.properties.ProcessVersionInfoOriginalFileName
      target_field: m365_defender.event.process.version_info_original_file_name
      tag: rename_json_properties_ProcessVersionInfoOriginalFileName
      ignore_missing: true
  - rename:
      field: json.properties.ProcessVersionInfoProductName
      target_field: m365_defender.event.process.version_info_product_name
      tag: rename_json_properties_ProcessVersionInfoProductName
      ignore_missing: true
  - rename:
      field: json.properties.ProcessVersionInfoProductVersion
      target_field: m365_defender.event.process.version_info_product_version
      tag: rename_json_properties_ProcessVersionInfoProductVersion
      ignore_missing: true
  - rename:
      field: json.properties.RegistryValueData
      target_field: m365_defender.event.registry.value_data
      tag: rename_json_properties_RegistryValueData
      ignore_missing: true
  - rename:
      field: json.properties.RemoteDeviceName
      target_field: m365_defender.event.remote.device_name
      tag: rename_json_properties_RemoteDeviceName
      ignore_missing: true
  - rename:
      field: json.properties.RemoteUrl
      target_field: m365_defender.event.remote.url
      tag: rename_json_properties_RemoteUrl
      ignore_missing: true
  - rename:
      field: json.properties.CrlDistributionPointUrls
      target_field: m365_defender.event.crl_distribution_point_urls
      tag: rename_json_properties_CrlDistributionPointUrls
      ignore_missing: true
  - rename:
      field: json.properties.Issuer
      target_field: m365_defender.event.issuer
      tag: rename_json_properties_Issuer
      ignore_missing: true
  - rename:
      field: json.properties.IssuerHash
      target_field: m365_defender.event.issuer_hash
      tag: rename_json_properties_IssuerHash
      ignore_missing: true
  - rename:
      field: json.properties.SignatureType
      target_field: m365_defender.event.signature_type
      tag: rename_json_properties_SignatureType
      ignore_missing: true
  - rename:
      field: json.properties.Signer
      target_field: m365_defender.event.signer
      tag: rename_json_properties_Signer
      ignore_missing: true
  - rename:
      field: json.properties.SignerHash
      target_field: m365_defender.event.signer_hash
      tag: rename_json_properties_SignerHash
      ignore_missing: true
  - rename:
      field: json.properties.FileOriginReferrerUrl
      target_field: m365_defender.event.file.origin_referrer_url
      tag: rename_json_properties_FileOriginReferrerUrl
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessIntegrityLevel
      target_field: m365_defender.event.initiating_process.integrity_level
      tag: rename_json_properties_InitiatingProcessIntegrityLevel
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessTokenElevation
      target_field: m365_defender.event.initiating_process.token_elevation
      tag: rename_json_properties_InitiatingProcessTokenElevation
      ignore_missing: true
  - rename:
      field: json.properties.PreviousFileName
      target_field: m365_defender.event.previous.file_name
      tag: rename_json_properties_PreviousFileName
      ignore_missing: true
  - rename:
      field: json.properties.PreviousFolderPath
      target_field: m365_defender.event.previous.folder_path
      tag: rename_json_properties_PreviousFolderPath
      ignore_missing: true
  - rename:
      field: json.properties.SensitivityLabel
      target_field: m365_defender.event.sensitivity.label
      tag: rename_json_properties_SensitivityLabel
      ignore_missing: true
  - rename:
      field: json.properties.SensitivitySubLabel
      target_field: m365_defender.event.sensitivity.sub_label
      tag: rename_json_properties_SensitivitySubLabel
      ignore_missing: true
  - rename:
      field: json.properties.ShareName
      target_field: m365_defender.event.share_name
      tag: rename_json_properties_ShareName
      ignore_missing: true
  - rename:
      field: json.properties.FailureReason
      target_field: m365_defender.event.failure_reason
      tag: rename_json_properties_FailureReason
      ignore_missing: true
  - rename:
      field: json.properties.AadDeviceId
      target_field: m365_defender.event.aad_device_id
      tag: rename_json_properties_AadDeviceId
      ignore_missing: true
  - rename:
      field: json.properties.DeviceSubType
      target_field: m365_defender.event.device.sub_type
      tag: rename_json_properties_DeviceSubType
      ignore_missing: true
  - rename:
      field: json.properties.JoinType
      target_field: m365_defender.event.join_type
      tag: rename_json_properties_JoinType
      ignore_missing: true
  - rename:
      field: json.properties.MachineGroup
      tag: rename_json_properties_MachineGroup
      target_field: m365_defender.event.machine_group
      ignore_missing: true
  - rename:
      field: json.properties.MergedDeviceIds
      tag: rename_json_properties_MergedDeviceIds
      target_field: m365_defender.event.merged_device_ids
      ignore_missing: true
  - rename:
      field: json.properties.MergedToDeviceId
      tag: rename_json_properties_MergedToDeviceId
      target_field: m365_defender.event.merged_to_device_id
      ignore_missing: true
  - rename:
      field: json.properties.SensorHealthState
      tag: rename_json_properties_SensorHealthState
      target_field: m365_defender.event.sensor_health_state
      ignore_missing: true
  - rename:
      field: json.properties.IsExcluded
      tag: rename_json_properties_IsExcluded
      target_field: m365_defender.event.is_excluded
      ignore_missing: true
  - rename:
      field: json.properties.ExclusionReason
      tag: rename_json_properties_ExclusionReason
      target_field: m365_defender.event.exclusion_reason
      ignore_missing: true
  - rename:
      field: json.properties.AssetValue
      tag: rename_json_properties_AssetValue
      target_field: m365_defender.event.asset_value
      ignore_missing: true
  - rename:
      field: json.properties.ExposureLevel
      tag: rename_json_properties_ExposureLevel
      target_field: m365_defender.event.exposure_level
      ignore_missing: true
  - rename:
      field: json.properties.IsInternetFacing
      tag: rename_json_properties_IsInternetFacing
      target_field: m365_defender.event.is_internet_facing
      ignore_missing: true
  - rename:
      field: json.properties.DeviceManualTags
      tag: rename_json_properties_DeviceManualTags
      target_field: m365_defender.event.device_manual_tags
      ignore_missing: true
  - rename:
      field: json.properties.DeviceDynamicTags
      tag: rename_json_properties_DeviceDynamicTags
      target_field: m365_defender.event.device_dynamic_tags
      ignore_missing: true
  - rename:
      field: json.properties.Model
      target_field: m365_defender.event.model
      tag: rename_json_properties_Model
      ignore_missing: true
  - rename:
      field: json.properties.OnboardingStatus
      target_field: m365_defender.event.onboarding_status
      tag: rename_json_properties_OnboardingStatus
      ignore_missing: true
  - rename:
      field: json.properties.OSBuild
      target_field: m365_defender.event.os.build
      tag: rename_json_properties_OSBuild
      ignore_missing: true
  - rename:
      field: json.properties.OSVersionInfo
      target_field: m365_defender.event.os.version_info
      tag: rename_json_properties_OSVersionInfo
      ignore_missing: true
  - rename:
      field: json.properties.RegistryDeviceTag
      target_field: m365_defender.event.registry.device_tag
      tag: rename_json_properties_RegistryDeviceTag
      ignore_missing: true
  - rename:
      field: json.properties.Vendor
      target_field: m365_defender.event.vendor
      tag: rename_json_properties_Vendor
      ignore_missing: true
  - rename:
      field: json.properties.LogonType
      target_field: m365_defender.event.logon.type
      tag: rename_json_properties_LogonType
      ignore_missing: true
  - rename:
      field: json.properties.Protocol
      target_field: m365_defender.event.protocol
      tag: rename_json_properties_Protocol
      ignore_missing: true
  - rename:
      field: json.properties.RemoteIPType
      target_field: m365_defender.event.remote.ip_type
      tag: rename_json_properties_RemoteIPType
      ignore_missing: true
  - rename:
      field: json.properties.RegistryValueType
      target_field: m365_defender.event.registry.value_type
      tag: rename_json_properties_RegistryValueType
      ignore_missing: true
  - rename:
      field: json.properties.LocalIPType
      target_field: m365_defender.event.local.ip_type
      tag: rename_json_properties_LocalIPType
      ignore_missing: true
  - rename:
      field: json.properties.ConnectedNetworks
      target_field: m365_defender.event.connected_networks
      tag: rename_json_properties_ConnectedNetworks
      ignore_missing: true
  - rename:
      field: json.properties.DefaultGateways
      target_field: m365_defender.event.default_gateways
      tag: rename_json_properties_DefaultGateways
      ignore_missing: true
  - rename:
      field: json.properties.DnsAddresses
      target_field: m365_defender.event.dns_addresses
      tag: rename_json_properties_DnsAddresses
      ignore_missing: true
  - rename:
      field: json.properties.IPAddresses
      target_field: m365_defender.event.ip_addresses
      tag: rename_json_properties_IPAddresses
      ignore_missing: true
  - rename:
      field: json.properties.NetworkAdapterStatus
      target_field: m365_defender.event.network.adapter_status
      tag: rename_json_properties_NetworkAdapterStatus
      ignore_missing: true
  - rename:
      field: json.properties.NetworkAdapterType
      target_field: m365_defender.event.network.adapter_type
      tag: rename_json_properties_NetworkAdapterType
      ignore_missing: true
  - rename:
      field: json.properties.NetworkAdapterVendor
      target_field: m365_defender.event.network.adapter_vendor
      tag: rename_json_properties_NetworkAdapterVendor
      ignore_missing: true
  - rename:
      field: json.properties.TunnelType
      target_field: m365_defender.event.tunnel_type
      tag: rename_json_properties_TunnelType
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessSignatureStatus
      target_field: m365_defender.event.initiating_process.signature_status
      tag: rename_json_properties_InitiatingProcessSignatureStatus
      ignore_missing: true
  - rename:
      field: json.properties.InitiatingProcessSignerType
      target_field: m365_defender.event.initiating_process.signer_type
      tag: rename_json_properties_InitiatingProcessSignerType
      ignore_missing: true
  - rename:
      field: json.properties.ProcessIntegrityLevel
      target_field: m365_defender.event.process.integrity_level
      tag: rename_json_properties_ProcessIntegrityLevel
      ignore_missing: true
  - rename:
      field: json.properties.PreviousRegistryKey
      target_field: m365_defender.event.previous.registry_key
      tag: rename_json_properties_PreviousRegistryKey
      ignore_missing: true
  - rename:
      field: json.properties.PreviousRegistryValueData
      target_field: m365_defender.event.previous.registry_value_data
      tag: rename_json_properties_PreviousRegistryValueData
      ignore_missing: true
  - rename:
      field: json.properties.PreviousRegistryValueName
      target_field: m365_defender.event.previous.registry_value_name
      tag: rename_json_properties_PreviousRegistryValueName
      ignore_missing: true
  - convert:
      field: json.properties.FileOriginIP
      type: ip
      tag: convert_file_origin_ip
      if: ctx.json?.properties?.FileOriginIP != null
      on_failure:
        - remove:
            field: json.properties.FileOriginIP
  - rename:
      field: json.properties.FileOriginIP
      target_field: m365_defender.event.file.origin_ip
      tag: rename_json_properties_FileOriginIp
      ignore_missing: true
  - convert:
      field: json.properties.RemoteIP
      type: ip
      tag: convert_remote_ip
      if: ctx.json?.properties?.RemoteIP != null
      on_failure:
        - remove:
            field: json.properties.RemoteIP
  - rename:
      field: json.properties.RemoteIP
      target_field: m365_defender.event.remote.ip
      tag: rename_json_properties_RemoteIP
      ignore_missing: true
  - convert:
      field: json.properties.LocalIP
      type: ip
      tag: convert_local_ip
      if: ctx.json?.properties?.LocalIP != null
      on_failure:
        - remove:
            field: json.properties.LocalIP
  - rename:
      field: json.properties.LocalIP
      target_field: m365_defender.event.local.ip
      tag: rename_json_properties_LocalIP
      ignore_missing: true
  - convert:
      field: json.properties.RequestSourceIP
      type: ip
      tag: convert_request_source_ip
      if: ctx.json?.properties?.RequestSourceIP != null
      on_failure:
        - remove:
            field: json.properties.RequestSourceIP
  - rename:
      field: json.properties.RequestSourceIP
      target_field: m365_defender.event.request.source_ip
      tag: rename_json_properties_RequestSourceIP
      ignore_missing: true
  - rename:
      field: json.properties.RequestSourcePort
      target_field: m365_defender.event.request.source_port
      tag: rename_json_properties_RequestSourcePort
      ignore_missing: true
  - rename:
      field: json.properties.RemotePort
      target_field: m365_defender.event.remote.port
      tag: rename_json_properties_RemotePort
      ignore_missing: true
  - rename:
      field: json.properties.LocalPort
      target_field: m365_defender.event.local.port
      tag: rename_json_properties_LocalPort
      ignore_missing: true
  - convert:
      field: json.properties.PublicIP
      type: ip
      tag: convert_public_ip
      if: ctx.json?.properties?.PublicIP != null
      on_failure:
        - remove:
            field: json.properties.PublicIP
  - rename:
      field: json.properties.PublicIP
      target_field: m365_defender.event.public_ip.value
      tag: rename_json_properties_PublicIP
      ignore_missing: true

  # File mappings (Only when its not DeviceProcessEvent or DeviceEvent, else it means something else)    
  - set:
      field: file.path
      copy_from: m365_defender.event.folder_path
      ignore_empty_value: true
      tag: set_file_path
      if: ctx.event?.category != null && 
        !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents')
  - script:
      description: Adds file information.
      lang: painless
      if: ctx.file?.path != null && ctx.file.path.length() > 1
      source: |-
        String path = ctx.file.path;
        String sep = "/";
        String windows_sep = "\\";
        def idx = -1;
        if (path.contains(windows_sep)) {
            idx = path.lastIndexOf(windows_sep);
        }
        else {
            idx = path.lastIndexOf(sep);
        } 
        if (idx > -1) {
            if (ctx.file.name == null) {
                ctx.file.name = path.substring(idx+1);
            }
            ctx.file.directory = path.substring(0, idx);
            def extIdx = path.lastIndexOf(".");
            if (extIdx > -1 && ctx.file.extension == null) {
                ctx.file.extension = path.substring(extIdx+1);
            }
        }
  - set:
      field: file.hash.md5
      copy_from: m365_defender.event.md5
      ignore_empty_value: true
      tag: set_file_hash_md5
      if: ctx.event?.category != null && 
        !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents')
  - set:
      field: file.hash.sha1
      copy_from: m365_defender.event.sha1
      ignore_empty_value: true
      tag: set_file_hash_sha1
      if: ctx.event?.category != null && 
        !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents')
  - set:
      field: file.hash.sha256
      copy_from: m365_defender.event.sha256
      ignore_empty_value: true
      tag: set_file_hash_sha256
      if: ctx.event?.category != null && 
        !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents')
  - set:
      field: file.name
      copy_from: m365_defender.event.file.name
      ignore_empty_value: true
      tag: set_file_name
      if: ctx.event?.category != null && 
        !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents')
  - set:
      field: file.size
      copy_from: m365_defender.event.file.size
      ignore_empty_value: true
      tag: set_file_size
      if: ctx.event?.category != null && 
        !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents')
  - set:
      field: file.x509.not_after
      copy_from: m365_defender.event.certificate.expiration_time
      tag: set_file_x509_not_after
      ignore_empty_value: true
  - set:
      field: file.x509.serial_number
      copy_from: m365_defender.event.certificate.serial_number
      tag: set_file_x509_serial_number
      ignore_empty_value: true
  - append:
      field: file.x509.issuer.common_name
      value: '{{{m365_defender.event.issuer}}}'
      tag: append_file_x509_issuer_common_name
      if: ctx.m365_defender?.event?.issuer != null
  - set:
      field: file.code_signature.subject_name
      copy_from: m365_defender.event.signer
      tag: set_file_code_signature_subject_name
      ignore_empty_value: true
  - set:
      field: file.code_signature.exists
      copy_from: m365_defender.event.is_signed
      tag: set_file_code_signature_exists
      ignore_empty_value: true
  - set:
      field: file.code_signature.trusted
      copy_from: m365_defender.event.is_trusted
      tag: set_file_code_signature_trusted
      ignore_empty_value: true

  # DLL Mappings (Only when its DeviceImageLoadEvents or (ActionType == 'driverload'), else it means something else)    
  - set:
      field: dll.path
      copy_from: m365_defender.event.folder_path
      ignore_empty_value: true
      tag: set_dll_path
      if: ctx.event?.category != null && ctx.m365_defender.event.category.toLowerCase().contains('deviceimageloadevents')
  - set:
      field: dll.path
      value: >-
        {{{m365_defender.event.folder_path}}}\{{{m365_defender.event.file.name}}}
      ignore_empty_value: true
      tag: set_dll_path_driver
      if: ctx.event?.category != null && ctx.event.category.contains('driver')
  - set:
      field: dll.hash.md5
      copy_from: m365_defender.event.md5
      ignore_empty_value: true
      tag: set_dll_md5
      if: ctx.event?.category != null && ctx.m365_defender.event.category.toLowerCase().contains('deviceimageloadevents')
  - set:
      field: dll.hash.md5
      copy_from: m365_defender.event.md5
      ignore_empty_value: true
      tag: set_dll_md5_driver
      if: ctx.event?.category != null && ctx.event.category.contains('driver')
  - set:
      field: dll.hash.sha1
      copy_from: m365_defender.event.sha1
      ignore_empty_value: true
      tag: set_dll_sha1
      if: ctx.event?.category != null && ctx.m365_defender.event.category.toLowerCase().contains('deviceimageloadevents')
  - set:
      field: dll.hash.sha1
      copy_from: m365_defender.event.sha1
      ignore_empty_value: true
      tag: set_dll_sha1_driver
      if: ctx.event?.category != null && ctx.event.category.contains('driver')
  - set:
      field: dll.hash.sha256
      copy_from: m365_defender.event.sha256
      ignore_empty_value: true
      tag: set_dll_sha256
      if: ctx.event?.category != null && ctx.m365_defender.event.category.toLowerCase().contains('deviceimageloadevents')
  - set:
      field: dll.hash.sha256
      copy_from: m365_defender.event.sha256
      ignore_empty_value: true
      tag: set_dll_sha256_driver
      if: ctx.event?.category != null && ctx.event.category.contains('driver')
  - set:
      field: dll.name
      copy_from: m365_defender.event.file.name
      ignore_empty_value: true
      tag: set_dll_name
      if: ctx.event?.category != null && ctx.m365_defender.event.category.toLowerCase().contains('deviceimageloadevents')
  - set:
      field: dll.name
      copy_from: m365_defender.event.file.name
      ignore_empty_value: true
      tag: set_dll_name_driver
      if: ctx.event?.category != null && ctx.event.category.contains('driver')
  - set:
      field: dll.Ext.size
      copy_from: m365_defender.event.file.size
      ignore_empty_value: true
      tag: set_dll_pe_size
      if: ctx.event?.category != null && ctx.m365_defender.event.category.toLowerCase().contains('deviceimageloadevents')

  # Process mappings (Only when event.category is in ['process', 'deviceevents', 'api', 'driver'], else it means something else)
  # Fields like InitatingProcess* are mapped to process.* unless the Type is in ['DeviceProcessEvent', 'DeviceEvent'], then it maps to process.parent.*
  ## Even when Type is DeviceEvent, certain event.action values still map to process.*, rest of them maps to process.parent.* (https://github.com/elastic/integrations/issues/9993)
  ## Firstly, mapping process.parent.* below.
  - set:
      field: _temp_deviceevents_that_map_process
      tag: set_temp_deviceevents_that_map_process_true
      description: Temporary variable for some DeviceEvent's event.action values that should map to process.* instead of process.parent.*
      value: true
      if: >-
        ctx.m365_defender?.event?.category != null 
        && ctx.m365_defender.event.category.toLowerCase().contains('deviceevents') 
        && ctx.m365_defender?.event?.action?.type != null && ['namedpipeevent', 'dpapiaccessed', 'ntallocatevirtualmemoryapicall', 'getclipboarddata', 'ntprotectvirtualmemoryapicall', 'browserlaunchedtoopenurl', 'processprimarytokenmodified', 'powershellcommand', 'clrunbackedmoduleloaded', 'ldapsearch', 'dnsqueryresponse', 'ntallocatevirtualmemoryremoteapicall', 'memoryremoteprotect', 'screenshottaken', 'antivirusscancompleted', 'exploitguardwin32systemcallblocked', 'getasynckeystateapicall', 'appguardcreatecontainer', 'exploitguardacgenforced', 'writetolsassprocessmemory', 'antivirusscancancelled', 'controlflowguardviolation', 'appcontrolpolicyapplied', 'createremotethreadapicall', 'auditpolicymodification', 'ntmapviewofsectionremoteapicall', 'appguardlaunchedwithurl', 'appguardresumecontainer', 'smartscreenurlwarning', 'appguardbrowsetourl', 'otheralertrelatedactivity', 'antivirusscanfailed'].contains(ctx.m365_defender.event.action.type.toLowerCase())
  - set:
      field: _temp_deviceevents_that_map_process
      tag: set_temp_deviceevents_that_map_process_false
      description: Temporary variable for some DeviceEvent's event.action values that should map to process.* instead of process.parent.*
      value: false
      if: >-
        ctx._temp_deviceevents_that_map_process == null 
        && ctx.m365_defender?.event?.category != null 
        && ctx.m365_defender.event.category.toLowerCase().contains('deviceevents') 
  - set:
      field: process.executable
      copy_from: m365_defender.event.folder_path
      ignore_empty_value: true
      tag: set_process_executable
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceimageloadevents') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.hash.md5
      copy_from: m365_defender.event.md5
      ignore_empty_value: true
      tag: set_process_hash_md5
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceimageloadevents') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.hash.sha1
      copy_from: m365_defender.event.sha1
      ignore_empty_value: true
      tag: set_process_hash_sha1
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceimageloadevents') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.hash.sha256
      copy_from: m365_defender.event.sha256
      ignore_empty_value: true
      tag: set_process_hash_sha256
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceimageloadevents') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.name
      copy_from: m365_defender.event.file.name
      ignore_empty_value: true
      tag: set_process_name
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceimageloadevents') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.command_line
      copy_from: m365_defender.event.initiating_process.command_line
      ignore_empty_value: true
      tag: set_process_parent_command_line
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.hash.md5
      copy_from: m365_defender.event.initiating_process.md5
      ignore_empty_value: true
      tag: set_process_parent_hash_md5
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.hash.sha1
      copy_from: m365_defender.event.initiating_process.sha1
      ignore_empty_value: true
      tag: set_process_parent_hash_sha1
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.hash.sha256
      copy_from: m365_defender.event.initiating_process.sha256
      ignore_empty_value: true
      tag: set_process_parent_hash_sha256
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.group_leader.pid
      copy_from: m365_defender.event.initiating_process.parent_id
      ignore_empty_value: true
      tag: set_process_parent_group_leader_pid
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.pid
      copy_from: m365_defender.event.initiating_process.id
      ignore_empty_value: true
      tag: set_process_parent_pid
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.start
      copy_from: m365_defender.event.initiating_process.creation_time
      ignore_empty_value: true
      tag: set_process_parent_start
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.name
      copy_from: m365_defender.event.initiating_process.file_name
      ignore_empty_value: true
      tag: set_process_parent_name
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.executable
      copy_from: m365_defender.event.initiating_process.folder_path
      ignore_empty_value: true
      tag: set_process_parent_executable
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.group_leader.start
      copy_from: m365_defender.event.initiating_process.parent_creation_time
      ignore_empty_value: true
      tag: set_process_parent_group_leader_start
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.group_leader.name
      copy_from: m365_defender.event.initiating_process.parent_file_name
      ignore_empty_value: true
      tag: set_process_parent_group_leader_name
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.pe.company
      copy_from: m365_defender.event.initiating_process.version_info_company_name
      ignore_empty_value: true
      tag: set_process_parent_pe_company
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.pe.description
      copy_from: m365_defender.event.initiating_process.version_info_file_description
      ignore_empty_value: true
      tag: set_process_parent_pe_description
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.pe.original_file_name
      copy_from: m365_defender.event.initiating_process.version_info_original_file_name
      ignore_empty_value: true
      tag: set_process_parent_pe_original_file_name
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.pe.product
      copy_from: m365_defender.event.initiating_process.version_info_product_name
      ignore_empty_value: true
      tag: set_process_parent_pe_product
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.pe.file_version
      copy_from: m365_defender.event.initiating_process.version_info_product_version
      ignore_empty_value: true
      tag: set_process_parent_pe_file_version
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.code_signature.status
      copy_from: m365_defender.event.initiating_process.signature_status
      tag: set_process_code_signature_status
      ignore_empty_value: true
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
  - set:
      field: process.parent.code_signature.exists
      value: true
      tag: set_process_code_signature_exists_true
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
        && ctx.m365_defender?.event?.initiating_process?.signature_status == "Valid"
  - set:
      field: process.parent.code_signature.exists
      value: false
      tag: set_process_code_signature_exists_false
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
        && ctx.m365_defender?.event?.initiating_process?.signature_status == "Unsigned"
  - set:
      field: process.parent.code_signature.status
      value: trusted
      tag: set_process_code_signature_status_trusted
      override: true
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
        && ctx.m365_defender?.event?.initiating_process?.signature_status == "Valid"
  - set:
      field: process.parent.code_signature.trusted
      value: true
      tag: set_process_code_signature_trusted_true
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
        && ctx.m365_defender?.event?.initiating_process?.signature_status == "Valid"
  - set:
      field: process.parent.code_signature.trusted
      value: false
      tag: set_process_code_signature_trusted_false
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') 
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == false))
        && ctx.m365_defender?.event?.initiating_process?.signature_status == "Unsigned"
  - set:
      field: process.Ext.token.integrity_level_name
      copy_from: m365_defender.event.initiating_process.integrity_level
      tag: set_process_Ext_token_integrity_level_name
      if: >-
        ctx.event?.category != null && !ctx.event.category.contains('api') && !ctx.event.category.contains('driver') 
        && (ctx.event.category.contains('process') || ctx.m365_defender.event.category.toLowerCase().contains('deviceevents') || ctx.event.category.contains('library'))
      ignore_empty_value: true
  - script:
      description: Make temp variable for adding process.Ext.api.name when event.category is 'api'.
      lang: painless
      if: >-
        ctx.event?.category != null && ctx.event.category.contains('api')
      source: |
        String actiontype = ctx.m365_defender.event.action.type;
        def idx = actiontype.toLowerCase().lastIndexOf('apicall');
        ctx._temp_process_Ext_api_name = actiontype.substring(0, idx);
  - rename:
      field: _temp_process_Ext_api_name
      target_field: process.Ext.api.name
      tag: rename_process_Ext_api_name
      ignore_missing: true
  - rename:
      field: m365_defender.event.additional_fields.RegionSize
      target_field: process.Ext.api.parameters.size
      tag: rename_process_Ext_api_parameters_size
      if: >-
        ctx.event?.category != null && ctx.event.category.contains('api')
      ignore_missing: true
  - rename:
      field: m365_defender.event.additional_fields.ProtectionMask
      target_field: process.Ext.api.parameters.protection
      tag: rename_process_Ext_api_parameters_protection
      if: >-
        ctx.event?.category != null && ctx.event.category.contains('api')
      ignore_missing: true
  - convert:
      field: process.Ext.api.parameters.protection
      tag: convert_process_Ext_api_parameters_protection
      if: ctx.process?.Ext?.api?.parameters?.protection != ''
      type: string
      ignore_missing: true
  - rename:
      field: m365_defender.event.additional_fields.BaseAddress
      target_field: process.Ext.api.parameters.address
      tag: rename_process_Ext_api_parameters_address
      if: >-
        ctx.event?.category != null && ctx.event.category.contains('api')
      ignore_missing: true
  - rename:
      field: m365_defender.event.additional_fields.DesiredAccess
      target_field: process.Ext.api.parameters.desired_access_numeric
      tag: rename_process_Ext_api_parameters_desired_access_numeric
      if: >-
        ctx.event?.category != null && ctx.event.category.contains('api')
      ignore_missing: true
  # Add Target.process.* when remote API call i.e., ActionType: (CreateRemoteThreadApiCall or ReadProcessMemoryApiCall or ntallocatevirtualmemoryremoteapicall or OpenProcessApiCall)
  - set:
      field: Target.process.name 
      copy_from: m365_defender.event.file.name
      tag: set_Target_process_name 
      if: ctx.event?.category != null && ctx.event.category.contains('api') && (ctx.m365_defender?.event?.action?.type != null && ['createremotethreadapicall', 'readprocessmemoryapicall', 'ntallocatevirtualmemoryremoteapicall', 'openprocessapicall'].contains(ctx.m365_defender.event.action.type.toLowerCase()))
      ignore_empty_value: true
  - set:
      field: Target.process.command_line
      copy_from: m365_defender.event.process.command_line
      tag: set_Target_process_command_line
      if: ctx.event?.category != null && ctx.event.category.contains('api') && (ctx.m365_defender?.event?.action?.type != null && ['createremotethreadapicall', 'readprocessmemoryapicall', 'ntallocatevirtualmemoryremoteapicall', 'openprocessapicall'].contains(ctx.m365_defender.event.action.type.toLowerCase()))
      ignore_empty_value: true
  - set:
      field: Target.process.executable
      copy_from: m365_defender.event.folder_path
      description: Sometimes folder_path already includes the file.name
      ignore_empty_value: true
      tag: set_target_process_executable_folder_path
      if: >-
        ctx.event?.category != null 
        && ctx.event.category.contains('api') 
        && (ctx.m365_defender?.event?.action?.type != null && ['createremotethreadapicall', 'readprocessmemoryapicall', 'ntallocatevirtualmemoryremoteapicall', 'openprocessapicall'].contains(ctx.m365_defender.event.action.type.toLowerCase()))
        && ctx.m365_defender?.event?.folder_path != null 
        && ctx.m365_defender?.event?.file?.name != null
        && ctx.m365_defender.event.folder_path.endsWith(ctx.m365_defender.event.file.name)
  - set:
      field: Target.process.executable
      value: >-
        {{{m365_defender.event.folder_path}}}\{{{m365_defender.event.file.name}}}
      tag: set_Target_process_executable
      if: >- 
        ctx.event?.category != null 
        && ctx.event.category.contains('api') 
        && (ctx.m365_defender?.event?.action?.type != null && ['createremotethreadapicall', 'readprocessmemoryapicall', 'ntallocatevirtualmemoryremoteapicall', 'openprocessapicall'].contains(ctx.m365_defender.event.action.type.toLowerCase()))
        && ctx.Target?.process?.executable == null
      ignore_empty_value: true
  ## Then, mapping process.* below.
  ## All other DeviceEvent types that is not DeviceProcessEvent or DeviceEvent map InitiatingProcess* to process.* rather than process.parent.*
  ## Even when Type is DeviceEvent, certain event.action values still map to process.* (https://github.com/elastic/integrations/issues/9993)
  ## Also, if event.category in ["api", "driver"] (a subset of DeviceEvent), then use process.* instead of process.parent.*
  - set:
      field: process.command_line
      copy_from: m365_defender.event.initiating_process.command_line
      ignore_empty_value: true
      tag: set_process_command_line
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))

  - set:
      field: process.hash.md5
      copy_from: m365_defender.event.initiating_process.md5
      ignore_empty_value: true
      tag: set_process_hash_md5
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver')
            || (!ctx.event.category.contains('library') && !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.hash.sha1
      copy_from: m365_defender.event.initiating_process.sha1
      ignore_empty_value: true
      tag: set_process_hash_sha1
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('library') && !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.hash.sha256
      copy_from: m365_defender.event.initiating_process.sha256
      ignore_empty_value: true
      tag: set_process_hash_sha256
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('library') && !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.parent.pid
      copy_from: m365_defender.event.initiating_process.parent_id
      ignore_empty_value: true
      tag: set_process_parent_pid
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.pid
      copy_from: m365_defender.event.initiating_process.id
      ignore_empty_value: true
      tag: set_process_pid
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.start
      copy_from: m365_defender.event.initiating_process.creation_time
      ignore_empty_value: true
      tag: set_process_start
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.name
      copy_from: m365_defender.event.initiating_process.file_name
      ignore_empty_value: true
      tag: set_process_name
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.executable
      copy_from: m365_defender.event.initiating_process.folder_path
      ignore_empty_value: true
      tag: set_process_executable
      if: >-
        ctx.event?.category != null 
        && (!ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents')
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.executable
      copy_from: m365_defender.event.initiating_process.folder_path
      description: Sometimes folder_path already includes the file_name
      ignore_empty_value: true
      tag: set_process_executable_folder_path
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') || ctx.event.category.contains('driver'))
        && ctx.m365_defender?.event?.initiating_process?.folder_path != null 
        && ctx.m365_defender?.event?.initiating_process?.file_name != null
        && ctx.m365_defender.event.initiating_process.folder_path.endsWith(ctx.m365_defender.event.initiating_process.file_name)
  - set:
      field: process.executable
      value: >-
        {{{m365_defender.event.initiating_process.folder_path}}}\{{{m365_defender.event.initiating_process.file_name}}}
      description: If folder_path doesn't include the file_name, then append it.
      ignore_empty_value: true
      tag: set_process_executable_folder_path_file
      if: >-
        ctx.event?.category != null && (ctx.event.category.contains('api') || ctx.event.category.contains('driver'))
        && ctx.process?.executable == null
  - set:
      field: process.parent.name
      copy_from: m365_defender.event.initiating_process.parent_file_name
      ignore_empty_value: true
      tag: set_process_parent_parent_name
      if: >-
        ctx.event?.category != null && (ctx.event.category.contains('api') || ctx.event.category.contains('driver'))
  - set:
      field: process.parent.pid
      copy_from: m365_defender.event.initiating_process.parent_id
      ignore_empty_value: true
      tag: set_process_parent_parent_id
      if: >-
        ctx.event?.category != null && (ctx.event.category.contains('api')|| ctx.event.category.contains('driver'))
  - set:
      field: process.parent.start
      copy_from: m365_defender.event.initiating_process.parent_creation_time
      ignore_empty_value: true
      tag: set_process_parent_start
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.parent.name
      copy_from: m365_defender.event.initiating_process.parent_file_name
      ignore_empty_value: true
      tag: set_process_parent_name
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.group_leader.pid
      copy_from: m365_defender.event.initiating_process.parent_id
      ignore_empty_value: true
      tag: set_process_group_leader_pid
      if: >-
        ctx.event?.category != null && (ctx.event.category.contains('api') || ctx.event.category.contains('driver'))
  - set:
      field: process.group_leader.name
      copy_from: m365_defender.event.initiating_process.parent_file_name
      ignore_empty_value: true
      tag: set_process_group_leader_name
      if: >-
        ctx.event?.category != null && (ctx.event.category.contains('api') || ctx.event.category.contains('driver'))
  - set:
      field: process.group_leader.start
      copy_from: m365_defender.event.initiating_process.parent_creation_time
      ignore_empty_value: true
      tag: set_process_group_leader_start
      if: >-
        ctx.event?.category != null && (ctx.event.category.contains('api') || ctx.event.category.contains('driver'))
  - set:
      field: process.pe.company
      copy_from: m365_defender.event.initiating_process.version_info_company_name
      ignore_empty_value: true
      tag: set_process_pe_company
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('library') && !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.pe.description
      copy_from: m365_defender.event.initiating_process.version_info_file_description
      ignore_empty_value: true
      tag: set_process_pe_description
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('library') && !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.pe.original_file_name
      copy_from: m365_defender.event.initiating_process.version_info_original_file_name
      ignore_empty_value: true
      tag: set_process_pe_original_file_name
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('library') && !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.pe.product
      copy_from: m365_defender.event.initiating_process.version_info_product_name
      ignore_empty_value: true
      tag: set_process_pe_product
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('library') && !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.pe.file_version
      copy_from: m365_defender.event.initiating_process.version_info_product_version
      ignore_empty_value: true
      tag: set_process_pe_file_version
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || ctx.event.category.contains('driver') 
            || (!ctx.event.category.contains('library') && !ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  - set:
      field: process.code_signature.status
      copy_from: m365_defender.event.initiating_process.signature_status
      tag: set_process_code_signature_status
      ignore_empty_value: true
      if: >-
        ctx.event?.category != null 
        && (ctx.event.category.contains('api') 
            || (!ctx.event.category.contains('process') && !ctx.m365_defender.event.category.toLowerCase().contains('deviceevents'))
            || (ctx._temp_deviceevents_that_map_process != null && ctx._temp_deviceevents_that_map_process == true))
  ### Remove the temporary variable 
  - remove:
      field: _temp_deviceevents_that_map_process
      description: Remove temporary variable created in tag set_temp_deviceevents_that_map_process*
      ignore_missing: true
  ## m365_defender.event.process* fields will always map to process.*, so these do not require any logic.
  - set:
      field: process.command_line
      copy_from: m365_defender.event.process.command_line
      ignore_empty_value: true
      tag: set_process_command_line
  - set:
      field: process.start
      copy_from: m365_defender.event.process.creation_time
      ignore_empty_value: true
      tag: set_process_start
  - set:
      field: process.pid
      copy_from: m365_defender.event.process.id
      ignore_empty_value: true
      tag: set_process_pid
  - set:
      field: process.pe.company
      copy_from: m365_defender.event.process.version_info_company_name
      tag: set_process_pe_company
      ignore_empty_value: true
  - set:
      field: process.pe.description
      copy_from: m365_defender.event.process.version_info_file_description
      tag: set_process_pe_description
      ignore_empty_value: true
  - set:
      field: process.pe.original_file_name
      copy_from: m365_defender.event.process.version_info_original_file_name
      tag: set_process_pe_original_file_name
      ignore_empty_value: true
  - set:
      field: process.pe.product
      copy_from: m365_defender.event.process.version_info_product_name
      tag: set_process_pe_product
      ignore_empty_value: true
  - set:
      field: process.pe.file_version
      copy_from: m365_defender.event.process.version_info_product_version
      tag: set_process_pe_file_version
      ignore_empty_value: true

  # Host mappings
  - set:
      field: host.name
      copy_from: m365_defender.event.device.name
      tag: set_host_name
      ignore_empty_value: true
  - lowercase:
      field: host.name
      tag: lowercase_host_name
      if: ctx.host?.name != null
  - set:
      field: host.id
      copy_from: m365_defender.event.device.id
      tag: set_host_id
      ignore_empty_value: true
  - append:
      field: host.ip
      value: '{{{m365_defender.event.public_ip.value}}}'
      tag: append_host_ip
      if: ctx.m365_defender?.event?.public_ip?.value != null && ctx.m365_defender.event.public_ip.value != ''
  - set:
      field: host.architecture
      copy_from: m365_defender.event.os.architecture
      tag: set_host_architecture
      ignore_empty_value: true
  - set:
      field: host.os.type
      value: windows
      if: ctx.m365_defender?.event?.os?.platform != null && ctx.m365_defender.event.os.platform.toLowerCase().contains('windows')
  - set:
      field: host.os.type
      value: linux
      if: ctx.m365_defender?.event?.os?.platform != null && ctx.m365_defender.event.os.platform.toLowerCase().contains('linux')
  - set:
      field: host.os.type
      value: macos
      if: ctx.m365_defender?.event?.os?.platform != null && ctx.m365_defender.event.os.platform.toLowerCase().contains('macos')
  # host.os.type can also be derived for Windows based on event.category
  - set:
      field: host.os.type
      value: windows
      if: >- 
        ctx.event?.category != null && (
            ctx.event.category.contains('api') || 
            ctx.event.category.contains('registry') || 
            ctx.event.category.contains('library') || 
            ctx.event.category.contains('driver')
        )
  - set:
      field: host.os.type
      value: windows
      if: >- 
        ctx.event?.category != null && ctx.event.category.contains('file') && (
            ctx.m365_defender?.event?.initiating_process?.account_sid != null || 
            ctx.m365_defender?.event?.request?.account_sid != null
        )
  - set:
      field: host.os.type
      value: windows
      if: >- 
        ctx.event?.category != null && ctx.event.category.contains('process') && (
            ctx.m365_defender?.event?.initiating_process?.account_sid != null
        )
  - set:
      field: host.os.type
      value: windows
      if: >- 
        ctx.event?.category != null && ctx.event.category.contains('authentication') && (
            ctx.m365_defender?.event?.initiating_process?.account_sid != null ||
            ctx.m365_defender?.event?.account?.sid != null
        )
  - set:
      field: host.os.type
      value: windows
      if: >- 
        ctx.event?.category != null && ctx.event.category.contains('network') && (
            ctx.m365_defender?.event?.initiating_process?.account_sid != null
        )

  - set:
      field: host.os.full
      copy_from: m365_defender.event.os.platform
      tag: set_host_os_full
      ignore_empty_value: true
  - set:
      field: host.os.platform
      copy_from: m365_defender.event.os.distribution
      tag: set_host_os_platform
      ignore_empty_value: true
  - set:
      field: host.os.version
      copy_from: m365_defender.event.os.version
      tag: set_host_os_version
      ignore_empty_value: true
  - set:
      field: host.type
      copy_from: m365_defender.event.device.type
      tag: set_host_type
      ignore_empty_value: true
  - gsub:
      field: m365_defender.event.mac_address
      pattern: '[:.]'
      replacement: '-'
      tag: gsub_m365_defender_event_mac_address
      ignore_missing: true
  - uppercase:
      field: m365_defender.event.mac_address
      tag: uppercase_m365_defender_event_mac_address
      ignore_missing: true
  - set:
      field: _tmp.mac
      copy_from: m365_defender.event.mac_address
      tag: set_host_mac
      ignore_empty_value: true
  - gsub:
      field: _tmp.mac
      pattern: '(..)(?!$)'
      replacement: '$1-'
      tag: gsub_host_mac
      ignore_missing: true
  - append:
      field: host.mac
      value: '{{{_tmp.mac}}}'
      if: ctx._tmp?.mac != null
      allow_duplicates: false

  # Registry Mapping
  # registry hive abbreviation taken from current or previous registry key
  - grok:
      field: m365_defender.event.registry.key
      description: Extract and remove HIVE_NAMES from registry key
      tag: grok_registry_key
      if: ctx.m365_defender?.event?.registry?.key != null && ctx.m365_defender.event.registry.key != ''
      patterns:
        - '^(%{HIVE_NAMES:_tmp.registry.hive}\\)?%{GREEDYDATA:registry.key}$'
      pattern_definitions:
        HIVE_NAMES: "(?i:HKEY_CLASSES_ROOT|HKCR|HKEY_CURRENT_USER|HKCU|HKEY_LOCAL_MACHINE|HKLM|HKEY_USERS|HKU|HKEY_CURRENT_CONFIG|HKCC)"
  - grok:
      field: m365_defender.event.previous.registry_key
      description: Extract and remove HIVE_NAMES from previous registry key
      tag: grok_registry_previous_key
      if: ctx.registry?.key == null && ctx.m365_defender?.event?.previous?.registry_key != null && ctx.m365_defender.event.previous.registry_key != ''
      patterns:
        - '^(%{HIVE_NAMES:_tmp.registry.hive}\\)?%{GREEDYDATA:registry.key}$'
      pattern_definitions:
        HIVE_NAMES: "(?i:HKEY_CLASSES_ROOT|HKCR|HKEY_CURRENT_USER|HKCU|HKEY_LOCAL_MACHINE|HKLM|HKEY_USERS|HKU|HKEY_CURRENT_CONFIG|HKCC)"
  - script:
      description: Normalize hive names (ECS uses abbreviated names) derived from https://learn.microsoft.com/en-us/troubleshoot/windows-server/performance/windows-registry-advanced-users
      tag: set_registry_hive
      lang: painless
      if: ctx._tmp?.registry?.hive != null
      params:
        HKEY_CLASSES_ROOT: HKCR
        HKEY_CURRENT_USER: HKCU
        HKEY_LOCAL_MACHINE: HKLM
        HKEY_USERS: HKU
        HKEY_CURRENT_CONFIG: HKCC
      source: |
        def name = ctx._tmp.registry.hive.toUpperCase();
        if (ctx.registry == null) {
          ctx.registry = new HashMap();
        }
        ctx.registry.hive = params.getOrDefault(name, name);
  - set:
      field: registry.value
      copy_from: m365_defender.event.registry.value_name
      tag: set_registry_value
      ignore_empty_value: true
  - set:
      field: registry.value
      description: Derived from previous value during registry changes.
      copy_from: m365_defender.event.previous.registry_value_name
      if: ctx.registry?.value == null
      tag: set_registry_value_prev
      ignore_empty_value: true
  - set:
      field: registry.path
      description: registry.hive + registry.key + registry.value
      value: >-
        {{{#registry.hive}}}{{{registry.hive}}}{{{/registry.hive}}}\{{{registry.key}}}\{{{registry.value}}}
      tag: set_registry_path
      if: ctx.registry?.key != null && ctx.registry.key != '' && ctx.registry.value != null
      ignore_empty_value: true
  - append:
      field: registry.data.strings
      value: '{{{m365_defender.event.registry.value_data}}}'
      tag: append_registry_data_strings
      allow_duplicates: false
      if: ctx.m365_defender?.event?.registry?.value_data != null
  - append:
      field: registry.data.strings
      description: Derived from previous value during registry changes.
      value: '{{{m365_defender.event.previous.registry_value_data}}}'
      tag: append_registry_data_strings_prev
      allow_duplicates: false
      if: ctx.m365_defender?.event?.previous?.registry_value_data != null
  - set:
      field: registry.data.type
      copy_from: m365_defender.event.registry.value_type
      tag: set_registry_type
      ignore_empty_value: true
      if: ctx.m365_defender?.event?.registry?.value_type != null

  # Source Mapping (DeviceLoginEvent has different mappings than the rest. DeviceNetworkEvent might include a direction, which controls which field goes to source/destination)
  - set:
      field: source.ip
      copy_from: m365_defender.event.remote.ip
      ignore_empty_value: true
      tag: set_source_ip
      if: ctx.event?.category != null && ctx.event.category.contains('authentication')
  - set:
      field: source.ip
      copy_from: m365_defender.event.remote.ip
      ignore_empty_value: true
      tag: set_source_ip
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.network_direction == 'In'
  - set:
      field: source.ip
      copy_from: m365_defender.event.local.ip
      ignore_empty_value: true
      tag: set_source_ip
      if: ctx.event?.category != null && !ctx.event.category.contains('authentication') && ctx.m365_defender?.event?.network_direction == null
  - set:
      field: source.ip
      copy_from: m365_defender.event.local.ip
      ignore_empty_value: true
      tag: set_source_ip
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.network_direction == 'Out'
  - set:
      field: source.ip
      copy_from: m365_defender.event.request.source_ip
      ignore_empty_value: true
      tag: set_source_ip
      if: ctx.event?.category != null && ctx.event.category.contains('file')
  - set:
      field: source.port
      copy_from: m365_defender.event.remote.port
      ignore_empty_value: true
      tag: set_source_port
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.network_direction == 'In'
  - set:
      field: source.port
      copy_from: m365_defender.event.remote.port
      ignore_empty_value: true
      tag: set_source_port
      if: ctx.event?.category != null && ctx.event.category.contains('authentication')
  - set:
      field: source.port
      copy_from: m365_defender.event.local.port
      ignore_empty_value: true
      tag: set_source_port
      if: ctx.event?.category != null && !ctx.event.category.contains('authentication')
  - set:
      field: source.port
      copy_from: m365_defender.event.local.port
      ignore_empty_value: true
      tag: set_source_port
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.network_direction == 'Out'
  - set:
      field: source.port
      copy_from: m365_defender.event.request.source_port
      tag: set_source_port
      ignore_empty_value: true
  - set:
      field: source.domain
      copy_from: m365_defender.event.remote.device_name
      tag: set_source_domain
      ignore_empty_value: true

  # Destination Mapping (DeviceLoginEvent has different mappings than the rest. DeviceNetworkEvent might include a direction, which controls which field goes to source/destination)
  - set:
      field: destination.ip
      copy_from: m365_defender.event.remote.ip
      ignore_empty_value: true
      tag: set_destination_ip
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.network_direction == 'Out'
  - set:
      field: destination.ip
      copy_from: m365_defender.event.remote.ip
      ignore_empty_value: true
      tag: set_destination_ip
      if: ctx.event?.category != null && !ctx.event.category.contains('authentication') && ctx.m365_defender?.event?.network_direction == null
  - set:
      field: destination.ip
      copy_from: m365_defender.event.local.ip
      ignore_empty_value: true
      tag: set_destination_ip
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.network_direction == 'In'
  - set:
      field: destination.address
      copy_from: destination.ip
      ignore_empty_value: true
      tag: set_destination_address
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.destination?.ip != null
  - set:
      field: destination.port
      copy_from: m365_defender.event.remote.port
      ignore_empty_value: true
      tag: set_destination_port
      if: ctx.event?.category != null && !ctx.event.category.contains('authentication') && ctx.m365_defender?.event?.network_direction == null
  - set:
      field: destination.port
      copy_from: m365_defender.event.remote.port
      ignore_empty_value: true
      tag: set_destination_port
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.network_direction == 'Out'
  - set:
      field: destination.port
      copy_from: m365_defender.event.local.port
      ignore_empty_value: true
      tag: set_destination_port
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.network_direction == 'In'

  # User fields (Duplicate fields like user.name never exists at the same time in different event types)
  - set:
      field: user.name
      copy_from: m365_defender.event.account.name
      tag: set_user_name
      ignore_empty_value: true
  - set:
      field: user.domain
      copy_from: m365_defender.event.request.account_domain
      tag: set_user_domain
      ignore_empty_value: true
  - set:
      field: user.name
      copy_from: m365_defender.event.request.account_name
      tag: set_user_name
      ignore_empty_value: true
  - set:
      field: user.name
      copy_from: m365_defender.event.initiating_process.account_name
      tag: set_user_name_initiating_process_account_name
      ignore_empty_value: true
      if: ctx.event?.category != null && (ctx.event.category.contains('library') || ctx.event.category.contains('registry') || ctx.event.category.contains('network') || ctx.event.category.contains('driver') || ctx.event.category.contains('api')) && ctx.user?.name == null
  - set:
      field: user.domain
      copy_from: m365_defender.event.account.domain
      tag: set_user_domain
      ignore_empty_value: true
  - set:
      field: user.domain
      copy_from: m365_defender.event.initiating_process.account_domain
      tag: set_user_domain_initiating_process_account_domain
      ignore_empty_value: true
      if: ctx.event?.category != null && (ctx.event.category.contains('library') || ctx.event.category.contains('registry') || ctx.event.category.contains('network') || ctx.event.category.contains('driver') || ctx.event.category.contains('api')) && ctx.user?.domain == null
  - set:
      field: user.id
      copy_from: m365_defender.event.account.sid
      tag: set_user_id
      ignore_empty_value: true
  - set:
      field: user.id
      copy_from: m365_defender.event.initiating_process.account_sid
      tag: set_user_id_initiating_process_account_sid
      ignore_empty_value: true
      if: ctx.event?.category != null && (ctx.event.category.contains('library') || ctx.event.category.contains('file') || ctx.event.category.contains('registry') || ctx.event.category.contains('network') || ctx.event.category.contains('driver') || ctx.event.category.contains('api')) && ctx.user?.id == null
  - set:
      field: user.id
      copy_from: m365_defender.event.request.account_sid
      tag: set_user_id_request_account_sid
      ignore_empty_value: true
      if: ctx.event?.category != null && ctx.event.category.contains('file') && ctx.user?.id == null
  # DNS fields
  - set:
      field: dns.question.name
      copy_from: m365_defender.event.dns.query
      tag: set_dns_question_name
      ignore_empty_value: true
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase().contains('dnsconnectioninspected')
  - set:
      field: dns.question.class
      copy_from: m365_defender.event.dns.qclass_name
      tag: set_dns_question_class
      ignore_empty_value: true
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase().contains('dnsconnectioninspected')
  - set:
      field: dns.question.type
      copy_from: m365_defender.event.dns.qtype_name
      tag: set_dns_question_type
      ignore_empty_value: true
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase().contains('dnsconnectioninspected')
  - set:
      field: dns.response_code
      copy_from: m365_defender.event.dns.rcode_name
      tag: set_dns_response_code
      ignore_empty_value: true
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase().contains('dnsconnectioninspected')
  - set:
      field: dns.answers
      copy_from: m365_defender.event.dns.answers
      tag: set_dns_answers
      ignore_empty_value: true
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase().contains('dnsconnectioninspected')
  - set:
      field: dns.header_flags
      copy_from: m365_defender.event.dns.header_flags
      tag: set_dns_header_flags
      ignore_empty_value: true
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase().contains('dnsconnectioninspected')

  # Network fields (Only one of them exists in an event)
  - set:
      field: network.protocol
      copy_from: m365_defender.event.protocol
      tag: set_network_protocol
      ignore_empty_value: true
  - set:
      field: network.protocol
      copy_from: m365_defender.event.request.protocol
      tag: set_network_protocol
      ignore_empty_value: true
  - lowercase:
      field: network.protocol
      tag: lowercase_network_protocol
      ignore_missing: true
  - set:
      field: network.protocol
      value: dns
      tag: set_network_protocol_dns
      if: ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase().contains('dns')
      override: true
  - set:
      field: network.direction
      value: inbound
      tag: set_network_direction_inbound
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.network_direction == 'In'
  - set:
      field: network.direction
      value: outbound
      tag: set_network_direction_outbound
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.network_direction == 'Out'
  - set:
      field: network.direction
      value: unknown
      tag: set_network_direction_unknown
      if: ctx.event?.category != null && ctx.event.category.contains('network') && ctx.m365_defender?.event?.network_direction == null

  # Event Outcome/Actions mapping
  # Special handling when event.category is 'file' or 'registry' or 'driver' or 'process' for better compatibility and detection rules.
  - set:
      field: event.action
      value: deletion
      tag: set_event_action_deletion
      if: (ctx.event?.category != null && ctx.event.category.contains('file')) && ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase() == 'filedeleted'
  - set:
      field: event.action
      value: modification
      tag: set_event_action_modification_file
      if: (ctx.event?.category != null && ctx.event.category.contains('file')) && ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase() == 'filemodified'
  - set:
      field: event.action
      value: rename
      tag: set_event_action_rename
      if: (ctx.event?.category != null && ctx.event.category.contains('file')) && ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase() == 'filerenamed'
  - set:
      field: event.action
      value: creation
      tag: set_event_action_creation_file
      if: (ctx.event?.category != null && ctx.event.category.contains('file')) && ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase() == 'filecreated'
  - set:
      field: event.action
      value: creation
      tag: set_event_action_creation_registry
      if: (ctx.event?.category != null && ctx.event.category.contains('registry')) && ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase() == 'registrykeycreated'
  - set:
      field: event.action
      value: modification
      tag: set_event_action_modification_registry
      if: (ctx.event?.category != null && ctx.event.category.contains('registry')) && ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase() == 'registryvalueset'
  - set:
      field: event.action
      value: load
      tag: set_event_action_load
      if: ctx.event?.category != null && ctx.event.category.contains('driver')
  - set:
      field: event.action
      value: start
      tag: set_event_action_start
      if: ctx.event?.category != null && ctx.event.category.contains('process') && ctx.m365_defender?.event?.action?.type != null && ctx.m365_defender.event.action.type.toLowerCase() == 'processcreated'
  # For all other categories, copy the value from m365_defender.event.action.type
  - set:
      field: event.action
      copy_from: m365_defender.event.action.type
      tag: set_event_action
      if: ctx.event?.category != null && !ctx.event.category.contains('file')
      ignore_empty_value: true
      override: false
  - lowercase:
      field: event.action
      tag: lowercase_event_action
      ignore_missing: true
  - gsub:
      field: event.action
      pattern: ' '
      replacement: '-'
      tag: gsub_event_action
      ignore_missing: true
  - set:
      field: event.outcome
      value: 'success'
      tag: set_event_outcome_success
      if: (ctx.m365_defender?.event?.failure_reason == null || ctx.m365_defender.event.failure_reason == '') && ctx.m365_defender.event.category.toLowerCase().contains('devicelogonevents')
  - set:
      field: event.outcome
      value: 'failure'
      tag: set_event_outcome_failure
      if: (ctx.m365_defender?.event?.failure_reason != null && ctx.m365_defender.event.failure_reason != '') && ctx.m365_defender.event.category.toLowerCase().contains('devicelogonevents')

  # Observer mapping
  - set:
      field: observer.version
      copy_from: m365_defender.event.client_version
      tag: set_observer_version
      ignore_empty_value: true
  - set:
      field: observer.type
      copy_from: m365_defender.event.device.category
      tag: set_observer_type
      ignore_empty_value: true

  # URL/HTTP Fields
  - uri_parts:
      field: m365_defender.event.remote.url
      target_field: url
      ignore_failure: true
      tag: uri_parts_m365_defender_event_remote_url
      if: ctx.m365_defender?.event?.remote?.url != null && ctx.m365_defender.event.remote.url != ''
  - set:
      field: http.request.referrer
      copy_from: m365_defender.event.file.origin_referrer_url
      tag: set_http_request_referrer
      ignore_empty_value: true

  # Custom Fields mapping
  ## Network adapter name depends on platform, this existed from before to get interface names for windows
  - grok:
      if: ctx.json?.properties?.NetworkAdapterName != null && ctx.json?.properties?.NetworkAdapterName.startsWith('{')
      field: json.properties.NetworkAdapterName
      tag: grok_json_properties_NetworkAdapterName
      patterns:
        - "^{%{DATA:m365_defender.event.network.adapter_name}}$"
  - set:
      field: m365_defender.event.network.adapter_name
      copy_from: json.properties.NetworkAdapterName
      tag: set_m365_defender_event_network_adapter_name
      if: ctx.json?.properties?.NetworkAdapterName != null && !ctx.json?.properties?.NetworkAdapterName.startsWith('{')
      ignore_empty_value: true
  ## LoggedOnUsers is an array of JSON objects, with a Username Key and a username value.
  ## This makes the data hard to use for visualizations etc, so instead we convert it to an array of simply the usernames, and then append them to related users
  - foreach:
      field: json.properties.LoggedOnUsers
      tag: foreach_json_properties_LoggedOnUsers
      if: ctx.json?.properties?.LoggedOnUsers instanceof List
      processor:
        append:
          field: m365_defender.event.active_users
          value: '{{{_ingest._value.UserName}}}'
  - foreach:
      field: m365_defender.event.active_users
      tag: foreach_m365_defender_event_active_users
      if: ctx.m365_defender?.event?.active_users instanceof List
      processor:
        append:
          field: related.user
          value: '{{{_ingest._value}}}'

  - script:
      tag: split-command-line-device
      description: Implements Windows-like SplitCommandLine
      lang: painless
      if: (ctx.process?.command_line != null && ctx.process.command_line != '') || (ctx.process?.parent?.command_line != null && ctx.process.parent.command_line != '')
      source: |-
        // appendBSBytes appends n '\\' bytes to b and returns the resulting slice.
        def appendBSBytes(StringBuilder b, int n) {
            for (; n > 0; n--) {
                b.append('\\');
            }
            return b;
        }

        // readNextArg splits command line string cmd into next
        // argument and command line remainder.
        def readNextArg(String cmd) {
            def b = new StringBuilder();
            boolean inquote;
            int nslash;
            for (; cmd.length() > 0; cmd = cmd.substring(1)) {
                def c = cmd.charAt(0);
                if (c == (char)' ' || c == (char)0x09) {
                    if (!inquote) {
                        return [
                            "arg":  appendBSBytes(b, nslash).toString(),
                            "rest": cmd.substring(1)
                        ];
                    }
                } else if (c == (char)'"') {
                    b = appendBSBytes(b, nslash/2);
                    if (nslash%2 == 0) {
                        // use "Prior to 2008" rule from
                        // http://daviddeley.com/autohotkey/parameters/parameters.htm
                        // section 5.2 to deal with double double quotes
                        if (inquote && cmd.length() > 1 && cmd.charAt(1) == (char)'"') {
                            b.append(c);
                            cmd = cmd.substring(1);
                        }
                        inquote = !inquote;
                    } else {
                        b.append(c);
                    }
                    nslash = 0;
                    continue;
                } else if (c == (char)'\\') {
                    nslash++;
                    continue;
                }
                b = appendBSBytes(b, nslash);
                nslash = 0;
                b.append(c);
            }
            return [
                "arg":  appendBSBytes(b, nslash).toString(),
                "rest": ''
            ];
        }

        // commandLineToArgv splits a command line into individual argument
        // strings, following the Windows conventions documented
        // at http://daviddeley.com/autohotkey/parameters/parameters.htm#WINARGV
        // Original implementation found at: https://github.com/golang/go/commit/39c8d2b7faed06b0e91a1ad7906231f53aab45d1
        def commandLineToArgv(String cmd) {
            def args = new ArrayList();
            while (cmd.length() > 0) {
                if (cmd.charAt(0) == (char)' ' || cmd.charAt(0) == (char)0x09) {
                    cmd = cmd.substring(1);
                    continue;
                }
                def next = readNextArg(cmd);
                cmd = next.rest;
                args.add(next.arg);
            }
            return args;
        }

        if (ctx.process?.command_line != null && ctx.process.command_line != '') {
          ctx.process.args = commandLineToArgv(ctx.process.command_line);
          ctx.process.args_count = ctx.process.args.length;
        }
        if (ctx.process?.parent?.command_line != null && ctx.process.parent.command_line != '') {
          ctx.process.parent.args = commandLineToArgv(ctx.process.parent.command_line);
          ctx.process.parent.args_count = ctx.process.parent.args.length;
        }

  # Geo mapping
  - geoip:
      if: ctx.host?.ip != null
      field: host.ip
      tag: geoip_host_ip
      target_field: host.geo
  - geoip:
      if: ctx.source?.ip != null
      field: source.ip
      tag: geoip_source_ip
      target_field: source.geo
  - geoip:
      if: ctx.destination?.ip != null
      field: destination.ip
      tag: geoip_destination_ip
      target_field: destination.geo

  # Related fields
  ## Hosts
  - append:
      field: related.hosts
      value: '{{{host.id}}}'
      tag: append_related_hosts
      if: ctx.host?.id != null
      allow_duplicates: false
  - append:
      field: related.hosts
      value: '{{{host.name}}}'
      if: ctx.host?.name != null
      allow_duplicates: false
  - append:
      field: related.hosts
      value: '{{{user.domain}}}'
      if: ctx.user?.domain != null
      allow_duplicates: false
  - append:
      field: related.hosts
      value: '{{{m365_defender.event.initiating_process.account_domain}}}'
      if: ctx.m365_defender?.event?.initiating_process?.account_domain != null
      allow_duplicates: false
  ## Users
  - append:
      field: related.user
      value: '{{{user.name}}}'
      if: ctx.user?.name != null
      allow_duplicates: false
  - append:
      field: related.user
      value: '{{{m365_defender.event.initiating_process.account_name}}}'
      if: ctx.m365_defender?.event?.initiating_process?.account_name != null
      allow_duplicates: false
  ## IP
  - append:
      field: related.ip
      value: '{{{m365_defender.event.file.origin_ip}}}'
      if: ctx.m365_defender?.event?.file?.origin_ip != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: '{{{source.ip}}}'
      if: ctx.source?.ip != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: '{{{destination.ip}}}'
      if: ctx.destination?.ip != null
      allow_duplicates: false
  - foreach:
      field: host.ip
      if: ctx.host?.ip instanceof List
      ignore_failure: true
      processor:
        append:
          field: related.ip
          tag: append_host_ip_to_related_ip
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - append:
      field: related.ip
      value: '{{{m365_defender.event.ipv4_dhcp}}}'
      if: ctx.m365_defender?.event?.ipv4_dhcp != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: '{{{m365_defender.event.ipv6_dhcp}}}'
      if: ctx.m365_defender?.event?.ipv6_dhcp != null
      allow_duplicates: false
  ## Hash
  - append:
      field: related.hash
      value: '{{{file.hash.md5}}}'
      if: ctx.file?.hash?.md5 != null
      allow_duplicates: false
  - append:
      field: related.hash
      value: '{{{file.hash.sha1}}}'
      if: ctx.file?.hash?.sha1 != null
      allow_duplicates: false
  - append:
      field: related.hash
      value: '{{{file.hash.sha256}}}'
      if: ctx.file?.hash?.sha256 != null
      allow_duplicates: false
  - append:
      field: related.hash
      value: '{{{process.hash.md5}}}'
      if: ctx.process?.hash?.md5 != null
      allow_duplicates: false
  - append:
      field: related.hash
      value: '{{{process.hash.sha1}}}'
      if: ctx.process?.hash?.sha1 != null
      allow_duplicates: false
  - append:
      field: related.hash
      value: '{{{process.hash.sha256}}}'
      if: ctx.process?.hash?.sha256 != null
      allow_duplicates: false
  - append:
      field: related.hash
      value: '{{{process.parent.hash.md5}}}'
      if: ctx.process?.hash?.md5 != null
      allow_duplicates: false
  - append:
      field: related.hash
      value: '{{{process.parent.hash.sha1}}}'
      if: ctx.process?.hash?.sha1 != null
      allow_duplicates: false
  - append:
      field: related.hash
      value: '{{{process.parent.hash.sha256}}}'
      if: ctx.process?.hash?.sha256 != null
      allow_duplicates: false
  - append:
      field: related.hash
      value: '{{{m365_defender.event.issuer_hash}}}'
      if: ctx.m365_defender?.event?.issuer_hash != null
      allow_duplicates: false
  - append:
      field: related.hash
      value: '{{{m365_defender.event.signer_hash}}}'
      if: ctx.m365_defender?.event?.signer_hash != null
      allow_duplicates: false

  # Duplicate Custom fields are disabled by default and will therefore remove these fields.
  # Can be enabled in the UI when configuring the integration.
  - remove:
      if: ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))
      tag: remove_duplicate_custom_fields
      field:
        - m365_defender.event.folder_path
        - m365_defender.event.md5
        - m365_defender.event.sha1
        - m365_defender.event.sha256
        - m365_defender.event.file.name
        - m365_defender.event.file.size
        - m365_defender.event.file.origin_referrer_url
        - m365_defender.event.device.name
        - m365_defender.event.device.id
        - m365_defender.event.process.version_info_company_name
        - m365_defender.event.process.version_info_product_name
        - m365_defender.event.process.version_info_product_version
        - m365_defender.event.process.version_info_file_description
        - m365_defender.event.initiating_process.file_name
        - m365_defender.event.initiating_process.version_info_product_version
        - m365_defender.event.initiating_process.version_info_file_description
        - m365_defender.event.initiating_process.version_info_original_file_name
        - m365_defender.event.initiating_process.file_size
        - m365_defender.event.initiating_process.version_info_company_name
        - m365_defender.event.initiating_process.version_info_product_name
        - m365_defender.event.initiating_process.folder_path
        - m365_defender.event.initiating_process.command_line
        - m365_defender.event.initiating_process.md5
        - m365_defender.event.initiating_process.sha1
        - m365_defender.event.initiating_process.sha256
        - m365_defender.event.initiating_process.parent_id
        - m365_defender.event.initiating_process.id
        - m365_defender.event.initiating_process.parent_file_name
        - m365_defender.event.initiating_process.parent_creation_time
        - m365_defender.event.initiating_process.signature_status
        - m365_defender.event.registry.key
        - m365_defender.event.registry.value_name
        - m365_defender.event.registry.value_data
        - m365_defender.event.public_ip.value
        - m365_defender.event.local.ip
        - m365_defender.event.remote.ip
        - m365_defender.event.request.source_ip
        - m365_defender.event.local.port
        - m365_defender.event.remote.port
        - m365_defender.event.request.source_port
        - m365_defender.event.account.name
        - m365_defender.event.account.sid
        - m365_defender.event.certificate.expiration_time
        - m365_defender.event.certificate.serial_number
        - m365_defender.event.protocol
        - m365_defender.event.request.protocol
        - m365_defender.event.request.account_domain
        - m365_defender.event.request.account_name
        - m365_defender.event.os.architecture
        - m365_defender.event.os.platform
        - m365_defender.event.os.distribution
        - m365_defender.event.os.version
        - m365_defender.event.device.type
        - m365_defender.event.account.domain
        - m365_defender.event.mac_address
        - m365_defender.event.client_version
        - m365_defender.event.device.category
        - m365_defender.event.action.type
        - m365_defender.event.is_signed
        - m365_defender.event.signer
        - m365_defender.event.issuer
        - m365_defender.event.is_trusted
        - m365_defender.event.dns.qclass_name
        - m365_defender.event.dns.query
        - m365_defender.event.dns.qtype_name
        - m365_defender.event.dns.rcode_name
        - m365_defender.event.dns.answers
        - m365_defender.event.dns.header_flags
      ignore_missing: true
  - remove:
      field:
        - _tmp
      ignore_missing: true
on_failure:
  - append:
      field: error.message
      value: |-
        Processor "{{{ _ingest.on_failure_processor_type }}}" with tag "{{{ _ingest.on_failure_processor_tag }}}" in pipeline "{{{ _ingest.on_failure_pipeline }}}" failed with message "{{{ _ingest.on_failure_message }}}"
  - set:
      field: event.kind
      value: pipeline_error
