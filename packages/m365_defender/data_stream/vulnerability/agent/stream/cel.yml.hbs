config_version: 2
interval: {{interval}}
resource.tracer:
  enabled: {{enable_request_tracer}}
  filename: "../../logs/cel/http-request-trace-*.ndjson"
  maxbackups: 5
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
auth.oauth2:
  provider: azure
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  scopes:
{{#each token_scopes as |token_scope|}}
    - {{token_scope}}
{{/each}}
{{#if token_url}}
  token_url: {{token_url}}/{{azure_tenant_id}}/oauth2/v2.0/token
{{else if azure_tenant_id}}
  azure.tenant_id: {{azure_tenant_id}}
{{/if}}
{{#if max_executions}}
max_executions: {{max_executions}}
{{/if}}

state:
  batch_size: {{batch_size}}  
  skip: 0
  machine_batch_size: 10000
  machine_skip: 0
redact:
  fields: ~
program: |
  (
    state.?is_all_machines_fetched.orValue(false) ?
      { 
        "machines": state.machines,
        "is_all_machines_fetched": state.is_all_machines_fetched,
      }
    :
      request("GET", state.url.trim_right("/") + "/api/vulnerabilities/machinesVulnerabilities?" + {
        "$top": [string(state.machine_batch_size)],
        "$skip": [string(state.machine_skip)],
      }.format_query()).do_request().as(machineResp, machineResp.StatusCode == 200 ?
        (
          machineResp.Body.decode_json().as(machineBody, {
            "events": [{"message":"retry"}],
            "machines": (state.?machines.orValue([]) + machineBody.value).flatten(),
            "machine_skip": size(machineBody.value) > 0 ? int(state.machine_skip) + int(state.machine_batch_size) : 0,
            "is_all_machines_fetched": size(machineBody.value) < int(state.machine_batch_size),
            "want_more": true,
          })
        )
      :
        {
          "events": {
            "error": {
              "code": string(machineResp.StatusCode),
              "id": string(machineResp.Status),
              "message": "GET " + state.url.trim_right("/") + "/api/vulnerabilities/machinesVulnerabilities" + 
              (
                size(machineResp.Body) != 0 ?
                  string(machineResp.Body)
                :
                  string(machineResp.Status) + ' (' + string(machineResp.StatusCode) + ')'
              ),
            },
          },
          "want_more": false,
        }
      )
  ).as(machines, !machines.?is_all_machines_fetched.orValue(false) ? machines : (
    has(state.worklist) && size(state.worklist) > 0 ? 
      {
        "worklist": state.worklist,
        "next": state.next,
        "machines": machines.machines,
        "is_all_machines_fetched": machines.is_all_machines_fetched,
      } 
    : 
      request("GET", state.url.trim_right("/") + "/api/vulnerabilities?" + {
        "$top": [string(state.batch_size)],
        "$skip": [string(state.skip)],
      }.format_query()).do_request().as(vulnResp, vulnResp.StatusCode == 200 ?
        vulnResp.Body.decode_json().as(vulnBody, {
          "worklist": vulnBody.value,
          "next": 0,
          "machines": machines.machines,
          "is_all_machines_fetched": machines.is_all_machines_fetched,
        })
      :
        {
          "events": {
            "error": {
              "code": string(vulnResp.StatusCode),
              "id": string(vulnResp.Status),
              "message": "GET " + state.url.trim_right("/") + "/api/vulnerabilities" + 
              (
                size(vulnResp.Body) != 0 ?
                  string(vulnResp.Body)
                :
                  string(vulnResp.Status) + ' (' + string(vulnResp.StatusCode) + ')'
              ),
            },
          },
          "want_more": false,
        }
      )
  )).as(work, !work.?is_all_machines_fetched.orValue(false) ? work : (
    int(work.next) < size(work.worklist) ? (
      int(work.worklist[int(work.next)].exposedMachines) > 0 ? (
        request("GET",
          state.url.trim_right("/") + "/api/vulnerabilities/" + work.worklist[int(work.next)].id + "/machineReferences"
        ).do_request().as(machineRefResp, machineRefResp.StatusCode == 200 ?
        machineRefResp.Body.decode_json().as(machineRefBody, {
          "events": machineRefBody.value.map(machineRef, 
            work.machines.filter(m, m.machineId == machineRef.id && m.cveId == work.worklist[int(work.next)].id).map(affectedMachine, {
              "message": work.worklist[int(work.next)].with({
                "affectedMachine": machineRef.with(affectedMachine),
              }).encode_json(),
            })
          ).flatten(),
          "next": int(work.next) + 1 < size(work.worklist) ? int(work.next) + 1 : 0,
          "worklist": int(work.next) + 1 < size(work.worklist) ? work.worklist : [],
          "skip": int(work.next) + 1 < size(work.worklist) ? state.skip : int(state.skip) + size(work.worklist),
          "want_more": true,
          "machines": work.machines,
          "is_all_machines_fetched": work.is_all_machines_fetched,
          "batch_size": state.batch_size,
          "machine_batch_size": state.machine_batch_size,
          "machine_skip": 0,
        })
        :
          {
            "events": {
              "error": {
                "code": string(machineRefResp.StatusCode),
                "id": string(machineRefResp.Status),
                "message": "GET " + state.url.trim_right("/") + "/api/vulnerabilities/" + work.worklist[int(work.next)].id + "/machineReferences" +
                (
                  size(machineRefResp.Body) != 0 ?
                    string(machineRefResp.Body)
                  :
                    string(machineRefResp.Status) + ' (' + string(machineRefResp.StatusCode) + ')'
                ),
              },
            },
            "want_more": false,
          }
        )
      )
      : 
        { 
          "events": [{
            "message": work.worklist[int(work.next)].with({
              "affectedMachine": null, 
            }).encode_json(),     
          }],
          "next": int(work.next) + 1 < size(work.worklist) ? int(work.next) + 1 : 0,
          "worklist": int(work.next) + 1 < size(work.worklist) ? work.worklist : [],
          "skip": int(work.next) + 1 < size(work.worklist) ? state.skip : int(state.skip) + size(work.worklist),
          "want_more": true,
          "machines": work.machines,
          "is_all_machines_fetched": work.is_all_machines_fetched,
          "batch_size": state.batch_size,
          "machine_batch_size": state.machine_batch_size,
          "machine_skip": 0,
        }
    )
    :
      {
        "events": [],
        "want_more": false,
        "batch_size": state.batch_size,
        "machine_batch_size": state.machine_batch_size,
        "skip": 0,
        "machine_skip": 0
      }
  ))
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
