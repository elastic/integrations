config_version: 2
interval: {{interval}}
resource.tracer:
  enabled: {{enable_request_tracer}}
  filename: "../../logs/cel/http-request-trace-*.ndjson"
  maxbackups: 5
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
auth.oauth2:
  provider: azure
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  scopes:
{{#each token_scopes as |token_scope|}}
    - {{token_scope}}
{{/each}}
{{#if token_url}}
  token_url: {{token_url}}/{{azure_tenant_id}}/oauth2/v2.0/token
{{else if azure_tenant_id}}
  azure.tenant_id: {{azure_tenant_id}}
{{/if}}

state:
  config:
    product_batch_size: 10000
    machine_batch_size: 10000
    vulnerabilities_batch_size: {{batch_size}}  
    affected_machines_only: {{affected_machines_only}}
  product_skip: 0
  machine_skip: 0
  vulnerability_skip: 0
redact:
  fields: ~
program: |-
  state.with(
    (
      // Get products.
      state.?is_all_products_fetched.orValue(false) ?
        {
          "products": state.products,
          "product_skip": 0,
          "is_all_products_fetched": state.is_all_products_fetched,
          ?"machines": state.?machines,
          "machine_skip": state.machine_skip,
          ?"is_all_machines_fetched": state.?is_all_machines_fetched,
          ?"vulnerabilities": state.?vulnerabilities,
          "vulnerability_skip": state.vulnerability_skip,
          ?"is_all_vulnerabilities_fetched": state.?is_all_vulnerabilities_fetched,
        }
      :
        request(
          "GET",
          state.url.trim_right("/") + "/api/vulnerabilities/machinesVulnerabilities?" + {
            "$top": [string(state.config.product_batch_size)],
            "$skip": [string(state.product_skip)],
          }.format_query()
        ).do_request().as(productResp, (productResp.StatusCode == 200) ?
          productResp.Body.decode_json().as(productBody,
            {
              "events": [{"message": "retry"}],
              "want_more": true,
              "products": (state.?products.orValue([]) + productBody.value).flatten(),
              "product_skip": (size(productBody.value) > 0) ? (int(state.product_skip) + int(state.config.product_batch_size)) : 0,
              "is_all_products_fetched": size(productBody.value) < int(state.config.product_batch_size),
              "machine_skip": state.machine_skip,
              "vulnerability_skip": state.vulnerability_skip,
            }
          )
        :
          {
            "events": {
              "error": {
                "code": string(productResp.StatusCode),
                "id": string(productResp.Status),
                "message": "GET " + state.url.trim_right("/") + "/api/vulnerabilities/machinesVulnerabilities" + (
                  (size(productResp.Body) != 0) ?
                    string(productResp.Body)
                  :
                    string(productResp.Status) + " (" + string(productResp.StatusCode) + ")"
                ),
              },
            },
            "want_more": false,
            "products": [],
            "product_skip": 0,
            "is_all_products_fetched": false,
            "machines": [],
            "machine_skip": 0,
            "is_all_machines_fetched": false,
            "vulnerabilities": [],
            "vulnerability_skip": 0,
            "is_all_vulnerabilities_fetched": false,
          }
        )
    ).as(res, !res.?is_all_products_fetched.orValue(false) ?
      res
    : res.?is_all_machines_fetched.orValue(false) ?
      {
        "products": res.products,
        "product_skip": 0,
        "is_all_products_fetched": res.is_all_products_fetched,
        "machines": res.machines,
        "machine_skip": 0,
        "is_all_machines_fetched": res.is_all_machines_fetched,
        ?"vulnerabilities": res.?vulnerabilities,
        "vulnerability_skip": res.vulnerability_skip,
        ?"is_all_vulnerabilities_fetched": res.?is_all_vulnerabilities_fetched,
      }
    :
      request(
        "GET",
        state.url.trim_right("/") + "/api/machines?" + {
          "$top": [string(state.config.machine_batch_size)],
          "$skip": [string(res.machine_skip)],
        }.format_query()
      ).do_request().as(machineResp, (machineResp.StatusCode == 200) ?
        machineResp.Body.decode_json().as(machineBody,
          {
            "events": [{"message": "retry"}],
            "want_more": true,
            "machines": (res.?machines.orValue([]) + machineBody.value).flatten(),
            "machine_skip": (size(machineBody.value) > 0) ? (int(res.machine_skip) + int(state.config.machine_batch_size)) : 0,
            "is_all_machines_fetched": size(machineBody.value) < int(state.config.machine_batch_size),
            "products": res.products,
            "product_skip": 0,
            "is_all_products_fetched": res.is_all_products_fetched,
            "vulnerability_skip": res.vulnerability_skip,
          }
        )
      :
        {
          "events": {
            "error": {
              "code": string(machineResp.StatusCode),
              "id": string(machineResp.Status),
              "message": "GET " + state.url.trim_right("/") + "/api/machines" + (
                (size(machineResp.Body) != 0) ?
                  string(machineResp.Body)
                :
                  string(machineResp.Status) + " (" + string(machineResp.StatusCode) + ")"
              ),
            },
          },
          "want_more": false,
          "products": [],
          "product_skip": 0,
          "is_all_products_fetched": false,
          "machines": [],
          "machine_skip": 0,
          "is_all_machines_fetched": false,
          "vulnerabilities": [],
          "vulnerability_skip": 0,
          "is_all_vulnerabilities_fetched": false,
        }
      )
    ).as(res,
      // Get products with machines.
      !res.?is_all_machines_fetched.orValue(false) ?
        res
      : res.?is_all_vulnerability_fetched.orValue(false) ?
        {
          "products": res.products,
          "product_skip": 0,
          "is_all_products_fetched": res.is_all_products_fetched,
          "machines": res.machines,
          "machine_skip": 0,
          "is_all_machines_fetched": res.is_all_machines_fetched,
          "vulnerabilities": res.vulnerabilities,
          "vulnerability_skip": 0,
          "is_all_vulnerability_fetched": res.is_all_vulnerability_fetched,
        }
      :
        request(
          "GET",
          state.url.trim_right("/") + "/api/vulnerabilities?" + {
            "$top": [string(state.config.vulnerabilities_batch_size)],
            "$skip": [string(res.vulnerability_skip)],
          }.format_query()
        ).do_request().as(vulnerabilityResp, (vulnerabilityResp.StatusCode == 200) ?
          vulnerabilityResp.Body.decode_json().as(vulnerabilityBody,
            {
              "events": [{"message": "retry"}],
              "want_more": true,
              "vulnerabilities": (res.?vulnerabilities.orValue([]) + vulnerabilityBody.value).flatten(),
              "vulnerability_skip": (size(vulnerabilityBody.value) > 0) ? (int(res.vulnerability_skip) + int(state.config.vulnerabilities_batch_size)) : 0,
              "is_all_vulnerabilities_fetched": size(vulnerabilityBody.value) < int(state.config.vulnerabilities_batch_size),
              "products": res.products,
              "product_skip": 0,
              "is_all_products_fetched": res.is_all_products_fetched,
              "machines": res.machines,
              "machine_skip": 0,
              "is_all_machines_fetched": res.is_all_machines_fetched,
            }
          )
        :
          {
            "events": {
              "error": {
                "code": string(vulnerabilityResp.StatusCode),
                "id": string(vulnerabilityResp.Status),
                "message": "GET " + state.url.trim_right("/") + "/api/vulnerabilities" + (
                  (size(vulnerabilityResp.Body) != 0) ?
                    string(vulnerabilityResp.Body)
                  :
                    string(vulnerabilityResp.Status) + " (" + string(vulnerabilityResp.StatusCode) + ")"
                ),
              },
            },
            "want_more": false,
            "products": [],
            "product_skip": 0,
            "is_all_products_fetched": false,
            "machines": [],
            "machine_skip": 0,
            "is_all_machines_fetched": false,
            "vulnerabilities": [],
            "vulnerability_skip": 0,
            "is_all_vulnerabilities_fetched": false,
          }
        )
    ).as(res,
      // Collate data.
      (!res.?is_all_vulnerabilities_fetched.orValue(false) || size(res.products) == 0) ?
        res
      :
        res.products.map(p,
          res.machines.filter(m, m.id == p.machineId)[?0].as(m, m.hasValue() ?
            m.value().with(p)
          :
            {}
          )
        ).as(mapped_products,
          {
            "vulnerability_with_machines": res.vulnerabilities.filter(v, v.exposedMachines > 0),
            "vulnerability_without_machines": state.config.affected_machines_only ?
              []
            :
              res.vulnerabilities.filter(v, v.exposedMachines == 0),
            "mapped_products": mapped_products,
          }
        ).as(final_data,
          {
            "events": (
              final_data.vulnerability_with_machines.map(v,
                final_data.mapped_products.map(related_mapped_products,
                  has(related_mapped_products.cveId) && related_mapped_products.cveId == v.id,
                  {
                    "message": v.with({"affectedMachine": related_mapped_products}).encode_json(),
                  }
                )
              ).flatten() + final_data.vulnerability_without_machines.map(v,
                {
                  "message": v.drop("affectedMachine").encode_json(),
                }
              )
            ).flatten(),
            "want_more": false,
            "product_skip": 0,
            "machine_skip": 0,
            "vulnerability_skip": 0,
          }
        )
    )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
