---
description: Pipeline for processing Mimecast siem_logs.
processors:
  # Generic event/ecs fields we always want to populate.
  - set:
      field: ecs.version
      value: '8.5.0'
  - rename:
      field: message
      target_field: event.original
  - json:
      description: Parse 'message' JSON contents into a 'mimecast' object.
      field: event.original
      target_field: mimecast
  - drop:
      if: ctx?.mimecast?.datetime == null
  - date:
      description: Use 'mimecast.datetime' as the '@timestamp'
      field: mimecast.datetime
      timezone: UTC
      formats:
        - yyyy-MM-dd'T'HH:mm:ssZ

  ### RECEIPT LOGS
  - rename:
      field: mimecast.aCode
      target_field: email.local_id
      ignore_missing: true
  - rename:
      field: mimecast.Act
      target_field: event.action
      ignore_missing: true
  - rename:
      field: mimecast.Cphr
      target_field: tls.cipher
      ignore_missing: true
  - rename:
      field: mimecast.Dir
      target_field: email.direction
      ignore_missing: true
  - rename:
      field: mimecast.Error
      target_field: error.message
      ignore_missing: true
  - rename:
      field: mimecast.IP
      target_field: source.ip
      ignore_missing: true
  - rename:
      field: mimecast.MsgId
      target_field: email.message_id
      ignore_missing: true
  - rename:
      field: mimecast.Rcpt
      target_field: email.to.address
      ignore_missing: true
  - append:
      field: email.to.address
      value: "{{{mimecast.Rcpt}}}"
      allow_duplicates: false
      if: "ctx?.mimecast?.Rcpt != null"
  - append:
      field: email.from.address
      value: '{{{mimecast.headerFrom}}}'
      allow_duplicates: false
      if: ctx.mimecast?.headerFrom != null
  - rename:
      field: mimecast.RejCode
      target_field: error.code
      ignore_missing: true
  - rename:
      field: mimecast.RejInfo
      target_field: event.reason
      ignore_missing: true
  - rename:
      field: mimecast.RejType
      target_field: error.type
      ignore_missing: true
  - append:
      field: email.from.address
      value: "{{{mimecast.Sender}}}"
      allow_duplicates: false
      if: "ctx?.mimecast?.Sender != null"
  - rename:
      field: mimecast.Subject
      target_field: email.subject
      ignore_missing: true
  - rename:
      field: mimecast.TlsVer
      target_field: tls.version
      ignore_missing: true
  ### PROCESS LOGS
  - rename:
      field: mimecast.AttSize
      target_field: email.attachments.file.size
      ignore_missing: true
  - rename:
      field: mimecast.AttNames
      target_field: email.attachments.file.name
      ignore_missing: true
  - rename:
      field: mimecast.Hld
      target_field: event.reason
      ignore_missing: true
    ### DELIVERY LOGS
  - rename:
      field: mimecast.Err
      target_field: error.message
      ignore_missing: true
  - rename:
      field: mimecast.UseTls
      target_field: tls.established
      ignore_missing: true
  - set:
      field: tls.established
      value: true
      if: 'ctx.tls?.established instanceof String && ctx.tls.established.toLowerCase() == "yes"'
  - set:
      field: tls.established
      value: false
      if: 'ctx.tls?.established instanceof String && ctx.tls.established.toLowerCase() == "no"'
      ### AV LOGS
  - rename:
      field: mimecast.fileExt
      target_field: email.attachments.file.extension
      ignore_missing: true
  - rename:
      field: mimecast.fileMime
      target_field: email.attachments.file.mime_type
      ignore_missing: true
  - rename:
      field: mimecast.md5
      target_field: email.attachments.file.hash.md5
      ignore_missing: true
  - rename:
      field: mimecast.Recipient
      target_field: email.to.address
      ignore_missing: true  
  - append:
      field: email.to.address
      value: "{{{mimecast.Recipient}}}"
      if: "ctx?.mimecast?.Recipient != null"
  - rename:
      field: mimecast.SenderDomain
      target_field: source.domain
      ignore_missing: true
  - rename:
      field: mimecast.sha1
      target_field: email.attachments.file.hash.sha1
      ignore_missing: true
  - rename:
      field: mimecast.sha256
      target_field: email.attachments.file.hash.sha256
      ignore_missing: true
  - rename:
      field: mimecast.Size
      target_field: email.attachments.file.size
      ignore_missing: true
  - rename:
      field: mimecast.fileName
      target_field: email.attachments.file.name
      ignore_missing: true
      ### SPAM EVENT THREAD LOGS
  - rename:
      field: mimecast.SourceIP
      target_field: source.ip
      ignore_missing: true
      ### SIEM Email Protect Logs
  - rename:
      field: mimecast.URL
      target_field: url.full
      ignore_missing: true
      ### SIEM Impersonation logs                       
  - rename:
      field: mimecast.Action
      target_field: event.action
      ignore_missing: true
  - rename:
      field: mimecast.Definition
      target_field: rule.name
      ignore_missing: true
  - rename:
      field: mimecast.NewDomain
      target_field: source.domain
      ignore_missing: true
      ### SIEM TTP Url Logs
  - rename:
      field: mimecast.reason
      target_field: event.reason
      ignore_missing: true
  - rename:
      field: mimecast.recipient
      target_field: email.to.address
      ignore_missing: true
  - append:
      field: email.to.address
      value: "{{{mimecast.recipient}}}"
      if: "ctx?.mimecast?.recipient != null"
  - rename:
      field: mimecast.route
      target_field: email.direction
      ignore_missing: true
  - append:
      field: email.from.address
      value: "{{{mimecast.sender}}}"
      allow_duplicates: false
      if: "ctx?.mimecast?.sender != null"
  - rename:
      field: mimecast.senderDomain
      target_field: source.domain
      ignore_missing: true
  - rename:
      field: mimecast.sourceIp
      target_field: source.ip
      ignore_missing: true
  - rename:
      field: mimecast.subject
      target_field: email.subject
      ignore_missing: true
  - rename:
      field: mimecast.url
      target_field: url.full
      ignore_missing: true
  - rename:
      field: mimecast.action
      target_field: event.action
      ignore_missing: true
  - dissect:
      field: mimecast.Content-Disposition
      pattern: "%{?drop->}=\"%{mimecast.log_type}.%{?drop->}"
      ignore_missing: true
  - split:
      field: mimecast.log_type
      separator: "_"
      target_field: mimecast.log_type_parts
      if: 'ctx?.mimecast?.log_type != null'
  - set:
      field: mimecast.log_type_part1
      copy_from: mimecast.log_type_parts.0
      if: 'ctx?.mimecast?.log_type_parts instanceof List && ctx.mimecast.log_type_parts.size() > 0'
  - set:
      field: mimecast.log_type_part2
      copy_from: mimecast.log_type_parts.1
      if: 'ctx?.mimecast?.log_type_parts instanceof List && ctx.mimecast.log_type_parts.size() > 1'
  - set:
      field: mimecast.log_type
      value: "{{mimecast.log_type_part1}}"
      if: 'ctx?.mimecast?.log_type_part1 != "ttp"'
      ignore_failure: true
  - set:
      field: mimecast.log_type
      value: "{{mimecast.log_type_part1}}_{{mimecast.log_type_part2}}"
      if: 'ctx?.mimecast?.log_type_part1 =="ttp" && ctx?.mimecast?.log_type_part2 != null'
      ignore_failure: true 
  - set:
      field: event.created
      value: "{{mimecast.datetime}}"
      if: 'ctx?.mimecast?.datetime != null'
  - set:
      field: tls.established
      value: false
      if: 'ctx?.tls?.established == "No"'
  - set:
      field: tls.established
      value: true
      if: 'ctx?.tls?.established == "Yes"'
  - rename:
      field: mimecast.Delivered
      target_field: event.outcome
      ignore_missing: true
  - set:
      field: event.outcome
      value: "success"
      if: 'ctx?.event?.outcome ==true'
  - set:
      field: event.outcome
      value: "failure"
      if: 'ctx?.event?.outcome ==false'
  - set:
      field: event.outcome
      value: "unknown"
      if: 'ctx?.event?.outcome ==null'
  - lowercase:
      field: email.direction
      ignore_missing: true
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - dissect:
       field: email.from.address
       pattern: "<%{email.from.address}>"
       ignore_missing: true
       ignore_failure: true
  - dissect:
       field: email.to.address
       pattern: "<%{email.to.address}>"
       ignore_missing: true
       ignore_failure: true

  # Cleanup
  - remove:
      description: Cleanup of repeated/unwanted/temporary fields.
      field: 
        - mimecast.eventTime
        - mimecast.Content-Disposition
        - mimecast.datetime
        - mimecast.headerFrom
        - mimecast.log_type_part1
        - mimecast.log_type_part2
        - mimecast.log_type_parts
        - mimecast.sender
        - mimecast.Sender
      ignore_missing: true
  - script:
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
          map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
          list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
        }
        handleMap(ctx);
  - remove:
      description: Remove 'event.original' if 'preserve_original_event' is not set.
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true  
  ###

# Error handling
on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}'