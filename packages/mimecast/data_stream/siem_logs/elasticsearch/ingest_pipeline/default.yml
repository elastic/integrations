---
description: Pipeline for processing Mimecast siem_logs.
processors:
  # Generic event/ecs fields we always want to populate.
  - set:
      field: ecs.version
      value: '8.11.0'
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  - json:
      description: Parse 'message' JSON contents into a 'mimecast' object.
      field: event.original
      target_field: mimecast
  - drop:
      if: ctx?.mimecast?.datetime == null

  - date:
      description: Use 'mimecast.datetime' as the '@timestamp'
      field: mimecast.datetime
      timezone: UTC
      formats:
        - yyyy-MM-dd'T'HH:mm:ssZ

  ### NOTE LOG TYPE
  - script:
      lang: painless
      params:
        definite_positive:
          action: receipt
          attempt: delivery
          attnames: process
          customerip: avlog
          customname: impersonation-protect
          customthreatdictionary: impersonation-protect
          definition: impersonation-protect
          delivered: delivery
          err: delivery
          error: receipt
          filename: attachment-protect
          hits: impersonation-protect
          hld: process
          internalname: impersonation-protect
          ipinternalname: process
          ipnewdomain: process
          ipreplymismatch: process
          ipsimilardomain: process
          ipthreaddict: process
          latency: delivery
          mimecastip: avlog
          msgsize: process
          newdomain: impersonation-protect
          reason: url-protect
          receiptack: delivery
          replymismatch: impersonation-protect
          rcptacttype: jrnl
          scanresultinfo: internal-email-protect
          senderdomaininternal: avlog
          similarcustomexternaldomain: impersonation-protect
          similarinternaldomain: impersonation-protect
          similarmimecastexternaldomain: impersonation-protect
          snt: delivery
          spaminfo: receipt
          spamlimit: receipt
          spamprocessingdetail: receipt
          spamscore: receipt
          taggedexternal: impersonation-protect
          taggedmalicious: impersonation-protect
          threatdictionary: impersonation-protect
          usetls: delivery
        negative:
          acode: [avlog, url-protect, attachment-protect]
          act: [delivery, avlog, spam, internal-email-protect, impersonation-protect, url-protect, attachment-protect, jrnl]
          attcnt: [receipt, avlog, spam, internal-email-protect, impersonation-protect, url-protect, attachment-protect, jrnl]
          attsize: [receipt, avlog, spam, internal-email-protect, impersonation-protect, url-protect, attachment-protect, jrnl]
          cphr: [process,avlog, spam, internal-email-protect, impersonation-protect, url-protect, attachment-protect, jrnl]
          dir: [process, avlog, spam, internal-email-protect, impersonation-protect, url-protect, attachment-protect]
          fileext: [receipt, process, delivery, spam, internal-email-protect, impersonation-protect, url-protect, jrnl]
          filemime: [receipt, process, delivery, spam, internal-email-protect, impersonation-protect, url-protect, jrnl]
          headerfrom: [process, delivery, avlog, internal-email-protect, impersonation-protect, url-protect, attachment-protect, jrnl]
          ip: [process, spam, internal-email-protect, url-protect, jrnl]
          md5: [receipt, process, delivery, spam, internal-email-protect, impersonation-protect, url-protect, jrnl]
          rcpt: [process, avlog, spam, internal-email-protect, impersonation-protect, url-protect, attachment-protect]
          recipient: [receipt, process, delivery, jrnl]
          rejcode: [process, avlog, spam, internal-email-protect, impersonation-protect, url-protect, attachment-protect, jrnl]
          rejinfo: [process, avlog, spam, internal-email-protect, impersonation-protect, url-protect, attachment-protect, jrnl]
          rejtype: [process, avlog, spam, internal-email-protect, impersonation-protect, url-protect, attachment-protect, jrnl]
          route: [receipt, process, jrnl]
          senderdomain: [receipt, process, delivery, internal-email-protect, impersonation-protect, jrnl]
          sha1: [receipt, process, delivery, spam, internal-email-protect, impersonation-protect, url-protect, jrnl]
          sha256: [receipt, process, delivery, spam, internal-email-protect, impersonation-protect, url-protect, jrnl]
          size: [receipt, process, delivery, spam, internal-email-protect, impersonation-protect, url-protect, jrnl]
          sourceip: [receipt, process, delivery, avlog, internal-email-protect, impersonation-protect, attachment-protect, jrnl]
          tlsver: [process, avlog, spam, internal-email-protect, impersonation-protect, url-protect, attachment-protect, jrnl]
          url: [receipt, process, delivery, avlog, spam, impersonation-protect, attachment-protect, jrnl]
          urlcategory: [receipt, process, delivery, avlog, spam, impersonation-protect, attachment-protect, jrnl]
          virus: [process, delivery, spam, internal-email-protect, impersonation-protect, url-protect, attachment-protect, jrnl]
        positive:
          acode: [receipt, process, delivery, spam, internal-email-protect, impersonation-protect, jrnl]
          act: [receipt, process]
          attcnt: [process, delivery]
          attsize: [process, delivery]
          cphr: [receipt, delivery]
          dir: [receipt, delivery, jrnl]
          fileext: [avlog, attachment-protect]
          filemime: [avlog, attachment-protect]
          headerfrom: [receipt, spam]
          ip: [receipt, delivery, avlog, impersonation-protect, attachment-protect]
          md5: [avlog, attachment-protect]
          rcpt: [receipt, delivery, jrnl]
          recipient: [avlog, spam, internal-email-protect, impersonation-protect, url-protect, attachment-protect]
          rejcode: [receipt, delivery]
          rejinfo: [receipt, delivery]
          rejtype: [receipt, delivery]
          route: [delivery, avlog, spam, internal-email-protect, impersonation-protect, url-protect, attachment-protect]
          senderdomain: [avlog, spam, url-protect, attachment-protect]
          sha1: [avlog, attachment-protect]
          sha256: [avlog, attachment-protect]
          size: [avlog, attachment-protect]
          sourceip: [spam, url-protect]
          tlsver: [receipt, delivery]
          url: [internal-email-protect, url-protect]
          urlcategory: [internal-email-protect, url-protect]
          virus: [receipt, avlog]
        candidates:
          receipt: 0
          process: 0
          delivery: 0
          jrnl: 0
          avlog: 0
          spam: 0
          internal-email-protect: 0
          impersonation-protect: 0
          url-protect: 0
          attachment-protect: 0
      if: ctx.mimecast instanceof Map
      source: |
        // Canonicalise keys to lowercase. If this causes issues in future
        // because case becomes significant, this table space optimisation
        // will need to be reverted.
        def keys = new HashSet();
        for (def k: ctx.mimecast.keySet()) {
          keys.add(k.toLowerCase());
        }        
        for (def k: keys) {
          def typ = params.definite_positive.get(k);
          if (typ != null) {
            // We have a definitive known log_type.
            ctx.mimecast.log_type = typ;
            return;
          }
        }
        def score = params.candidates.clone();
        for (def k: keys) {
          def typ = params.negative.get(k);
          if (typ == null) {
            continue;
          }
          for (String e: typ) {
            score.remove(e);
          }
        }
        if (score.size() == 1) {
          // We have removed all but one of the candidates.
          ctx.mimecast.log_type = score.keySet().toArray()[0];
          return;
        }
        // Find best remaining and list all co-equal winners.
        int max = 0;
        for (def k: keys) {
          def typ = params.positive.get(k);
          if (typ == null) {
            continue;
          }
          for (String e: typ) {
            def s = score.get(e);
            if (s == null) {
              continue;
            }
            s++;
            if (s > max) {
              max = s;
            }
            score.put(e, s);
          }
        }
        for (def e: score.entrySet()) {
          if (e.getValue() < max) {
            score.remove(e.getKey());
          }
        }
        ctx.mimecast.log_type = score.keySet();

  - fingerprint:
      fields:
        - mimecast.MsgId
        - mimecast.aCode
        - mimecast.datetime
        - mimecast.Sender
        - mimecast.Rcpt
        - mimecast.Attempt
        - mimecast.log_type
        - mimecast.sha256
        - mimecast.url
      target_field: "_id"
      ignore_missing: true

  ### RECEIPT LOGS
  - rename:
      field: mimecast.aCode
      target_field: email.local_id
      ignore_missing: true
  - rename:
      field: mimecast.Act
      target_field: event.action
      ignore_missing: true
  - rename:
      field: mimecast.Cphr
      target_field: tls.cipher
      ignore_missing: true
  - rename:
      field: mimecast.Dir
      target_field: email.direction
      ignore_missing: true
  - rename:
      field: mimecast.Error
      target_field: error.message
      ignore_missing: true
  - rename:
      field: mimecast.IP
      target_field: source.ip
      ignore_missing: true
  - rename:
      field: mimecast.MsgId
      target_field: email.message_id
      ignore_missing: true
  - append:
      field: email.to.address
      value: '{{{mimecast.Rcpt}}}'
      allow_duplicates: false
      if: ctx.mimecast?.Rcpt != null
  - append:
      field: email.from.address
      value: '{{{mimecast.headerFrom}}}'
      allow_duplicates: false
      if: ctx.mimecast?.headerFrom != null
  - rename:
      field: mimecast.RejCode
      target_field: error.code
      ignore_missing: true
  - rename:
      field: mimecast.RejInfo
      target_field: event.reason
      ignore_missing: true
  - rename:
      field: mimecast.RejType
      target_field: error.type
      ignore_missing: true
  - append:
      field: email.from.address
      value: "{{{mimecast.Sender}}}"
      allow_duplicates: false
      if: "ctx?.mimecast?.Sender != null"
  - rename:
      field: mimecast.Subject
      target_field: email.subject
      ignore_missing: true
  - rename:
      field: mimecast.TlsVer
      target_field: tls.version
      ignore_missing: true

  ### PROCESS LOGS
  - rename:
      field: mimecast.AttSize
      target_field: email.attachments.file.size
      ignore_missing: true
  - rename:
      field: mimecast.AttNames
      target_field: email.attachments.file.name
      ignore_missing: true
  - rename:
      field: mimecast.Hld
      target_field: event.reason
      ignore_missing: true

  ### DELIVERY LOGS
  - rename:
      field: mimecast.Err
      target_field: error.message
      ignore_missing: true
  - rename:
      field: mimecast.UseTls
      target_field: tls.established
      ignore_missing: true
  - set:
      field: tls.established
      value: true
      if: 'ctx.tls?.established instanceof String && ctx.tls.established.toLowerCase() == "yes"'
  - set:
      field: tls.established
      value: false
      if: 'ctx.tls?.established instanceof String && ctx.tls.established.toLowerCase() == "no"'

  ### AV LOGS
  - rename:
      field: mimecast.fileExt
      target_field: email.attachments.file.extension
      ignore_missing: true
  - rename:
      field: mimecast.fileMime
      target_field: email.attachments.file.mime_type
      ignore_missing: true
  - rename:
      field: mimecast.md5
      target_field: email.attachments.file.hash.md5
      ignore_missing: true
  - append:
      field: email.to.address
      value: '{{{mimecast.Recipient}}}'
      allow_duplicates: false
      if: ctx.mimecast?.Recipient != null
  - rename:
      field: mimecast.SenderDomain
      target_field: source.domain
      ignore_missing: true
  - rename:
      field: mimecast.sha1
      target_field: email.attachments.file.hash.sha1
      ignore_missing: true
  - rename:
      field: mimecast.sha256
      target_field: email.attachments.file.hash.sha256
      ignore_missing: true
  - rename:
      field: mimecast.Size
      target_field: email.attachments.file.size
      ignore_missing: true
  - rename:
      field: mimecast.fileName
      target_field: email.attachments.file.name
      ignore_missing: true

  ### SPAM EVENT THREAD LOGS
  - rename:
      field: mimecast.SourceIP
      target_field: source.ip
      ignore_missing: true

  ### SIEM Email Protect Logs
  - rename:
      field: mimecast.URL
      target_field: url.full
      ignore_missing: true

  ### SIEM Impersonation logs                       
  - rename:
      field: mimecast.Action
      target_field: event.action
      ignore_missing: true
  - rename:
      field: mimecast.Definition
      target_field: rule.name
      ignore_missing: true
  - rename:
      field: mimecast.NewDomain
      target_field: source.domain
      ignore_missing: true

  ### SIEM TTP Url Logs
  - rename:
      field: mimecast.reason
      target_field: event.reason
      ignore_missing: true
  - append:
      field: email.to.address
      value: '{{{mimecast.recipient}}}'
      allow_duplicates: false
      if: ctx.mimecast?.recipient != null
  - rename:
      field: mimecast.route
      target_field: email.direction
      ignore_missing: true
  - append:
      field: email.from.address
      value: "{{{mimecast.sender}}}"
      allow_duplicates: false
      if: "ctx?.mimecast?.sender != null"
  - rename:
      field: mimecast.senderDomain
      target_field: source.domain
      ignore_missing: true
  - rename:
      field: mimecast.sourceIp
      target_field: source.ip
      ignore_missing: true
  - rename:
      field: mimecast.subject
      target_field: email.subject
      ignore_missing: true
  - rename:
      field: mimecast.url
      target_field: url.full
      ignore_missing: true
  - rename:
      field: mimecast.action
      target_field: event.action
      ignore_missing: true
  - set:
      field: event.created
      value: "{{{mimecast.datetime}}}"
      if: 'ctx?.mimecast?.datetime != null'
  - set:
      field: tls.established
      value: false
      if: 'ctx?.tls?.established == "No"'
  - set:
      field: tls.established
      value: true
      if: 'ctx?.tls?.established == "Yes"'
  - rename:
      field: mimecast.Delivered
      target_field: event.outcome
      ignore_missing: true
  - set:
      field: event.outcome
      value: "success"
      if: ctx?.event?.outcome == true
  - set:
      field: event.outcome
      value: "failure"
      if: ctx?.event?.outcome == false
  - set:
      field: event.outcome
      value: "unknown"
      if: ctx?.event?.outcome == null
  - lowercase:
      field: email.direction
      ignore_missing: true
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true

  # Cleanup
  - remove:
      description: Cleanup of repeated/unwanted/temporary fields.
      field: 
        - mimecast.eventTime
        - mimecast.Content-Disposition
        - mimecast.datetime
        - mimecast.headerFrom
        - mimecast.log_type_part1
        - mimecast.log_type_part2
        - mimecast.log_type_parts
        - mimecast.recipient
        - mimecast.Rcpt
        - mimecast.sender
        - mimecast.Sender
      ignore_missing: true
  - script:
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
          map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
          list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
        }
        handleMap(ctx);
  - remove:
      description: Remove 'event.original' if 'preserve_original_event' is not set.
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true  

# Error handling
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
