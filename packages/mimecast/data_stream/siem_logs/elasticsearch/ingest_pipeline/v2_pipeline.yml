---
description: Pipeline for processing Mimecast siem_logs from v2 API.
processors:
  - date:
      description: Use 'mimecast.timestamp' as the '@timestamp'
      field: mimecast.timestamp
      if: ctx.mimecast?.timestamp != null
      timezone: UTC
      formats:
        - UNIX_MS
  - set:
      field: event.created
      copy_from: '@timestamp'
      if: ctx['@timestamp'] != null

  ### NOTE LOG TYPE
  - script:
      lang: painless
      params:
        'av': 'avlog'
        'delivery': 'delivery'
        'internal email protect': 'internal-email-protect'
        'impersonation protect': 'impersonation-protect'
        'journal': 'jrnl'
        'process': 'process'
        'receipt': 'receipt'
        'attachment protect': 'attachment-protect'
        'spam': 'spam'
        'url protect': 'url-protect'
      if: ctx.mimecast?.type != null
      source: |
        ctx.mimecast.log_type = params.get(ctx.mimecast.type);
        ctx.mimecast.type = null;

  - set:
      field: original
      copy_from: mimecast
      tag: preserve_custom_duplicate_fields
      ignore_empty_value: true
      if: ctx.tags?.contains('preserve_duplicate_custom_fields') == true

  - fingerprint:
      fields:
        - mimecast.messageId
        - mimecast.processingId
        - mimecast.aggregateId
        - mimecast.accountId
        - mimecast.timestamp
        - mimecast.action
        - mimecast.log_type
        - mimecast.subtype
      target_field: "_id"
      ignore_missing: true

  ### Common
  - foreach:
      if: ctx.mimecast?.recipients instanceof List
      field: mimecast.recipients
      processor:
        append:
          field: email.to.address
          value: '{{{_ingest._value.value}}}'
          allow_duplicates: false
  - append:
      field: email.to.address
      value: '{{{mimecast.recipients}}}'
      allow_duplicates: false
      if: 'ctx.mimecast?.recipients != null && !(ctx.mimecast.recipients instanceof List)'

  ### RECEIPT LOGS
  - rename:
      field: mimecast.action
      target_field: event.action
      ignore_missing: true
  - rename:
      field: mimecast.tlsCipher
      target_field: tls.cipher
      ignore_missing: true
  - rename:
      field: mimecast.direction
      target_field: email.direction
      ignore_missing: true
  - rename:
      field: mimecast.receiptErrors
      target_field: error.message
      ignore_missing: true
  - rename:
      field: mimecast.senderIp
      target_field: source.ip
      ignore_missing: true
  - rename:
      field: mimecast.messageId
      target_field: email.message_id
      ignore_missing: true
  - append:
      field: email.from.address
      value: '{{{mimecast.senderHeader}}}'
      allow_duplicates: false
      if: ctx.mimecast?.senderHeader != null
  - rename:
      field: mimecast.rejectionCode
      target_field: error.code
      ignore_missing: true
  - rename:
      field: mimecast.rejectionInfo
      target_field: event.reason
      ignore_missing: true
  - rename:
      field: mimecast.rejectionType
      target_field: error.type
      ignore_missing: true
  - append:
      field: email.from.address
      value: '{{{mimecast.senderEnvelope}}}'
      allow_duplicates: false
      if: ctx.mimecast?.senderEnvelope != null
  - rename:
      field: mimecast.subject
      target_field: email.subject
      ignore_missing: true
  - rename:
      field: mimecast.tlsVer
      target_field: tls.version
      ignore_missing: true

  ### PROCESS LOGS
  - rename:
      field: mimecast.totalSizeAttachments
      target_field: email.attachments.file.size
      ignore_missing: true
  - convert:
      field: email.attachments.file.size
      target_field: email.attachments.file.size
      type: long
      ignore_missing: true
      on_failure:
        - remove:
            field: email.attachments.file.size
  - rename:
      field: mimecast.attachments
      target_field: email.attachments.file.name
      ignore_missing: true
  - rename:
      field: mimecast.holdReason
      target_field: event.reason
      ignore_missing: true

  ### DELIVERY LOGS
  - rename:
      field: mimecast.destinationIp
      target_field: destination.ip
      ignore_missing: true
  - rename:
      field: mimecast.deliveryErrors
      target_field: error.message
      ignore_missing: true
  - rename:
      field: mimecast.tlsUsed
      target_field: tls.established
      ignore_missing: true
  - set:
      field: tls.established
      value: true
      if: ctx.tls?.established instanceof String && ctx.tls.established.equalsIgnoreCase('yes')
  - set:
      field: tls.established
      value: false
      if: ctx.tls?.established instanceof String && ctx.tls.established.equalsIgnoreCase('no')

  ### AV LOGS
  - rename:
      field: mimecast.fileExtension
      target_field: email.attachments.file.extension
      ignore_missing: true
  - rename:
      field: mimecast.md5
      target_field: email.attachments.file.hash.md5
      ignore_missing: true
  - rename:
      field: mimecast.senderDomainInternal
      target_field: source.domain
      ignore_missing: true
  - rename:
      field: mimecast.sha1
      target_field: email.attachments.file.hash.sha1
      ignore_missing: true
  - rename:
      field: mimecast.sha256
      target_field: email.attachments.file.hash.sha256
      ignore_missing: true
  - rename:
      field: mimecast.fileName
      target_field: email.attachments.file.name
      ignore_missing: true

  ### SPAM EVENT THREAD LOGS
  - rename:
      field: mimecast.senderIp
      target_field: source.ip
      ignore_missing: true

  ### SIEM Email Protect Logs
  - rename:
      field: mimecast.url
      target_field: url.full
      ignore_missing: true

  ### SIEM Impersonation logs                       
  - rename:
      field: mimecast.action
      target_field: event.action
      ignore_missing: true
  - rename:
      field: mimecast.policyDefinition
      target_field: rule.name
      ignore_missing: true
  - rename:
      field: mimecast.newDomain
      target_field: source.domain
      ignore_missing: true

  ### SIEM TTP Url Logs
  - rename:
      field: mimecast.blockReason
      target_field: event.reason
      ignore_missing: true
  - rename:
      field: mimecast.route
      target_field: email.direction
      ignore_missing: true
      if: ctx.email?.direction == null
  - append:
      field: email.from.address
      value: "{{{mimecast.sender}}}"
      allow_duplicates: false
      if: ctx.mimecast?.sender != null
  - rename:
      field: mimecast.senderDomain
      target_field: source.domain
      ignore_missing: true
  - rename:
      field: mimecast.sourceIp
      target_field: source.ip
      ignore_missing: true
  - rename:
      field: mimecast.subject
      target_field: email.subject
      ignore_missing: true
  - rename:
      field: mimecast.url
      target_field: url.full
      ignore_missing: true
  - rename:
      field: mimecast.action
      target_field: event.action
      ignore_missing: true
  - rename:
      field: mimecast.Delivered
      target_field: event.outcome
      ignore_missing: true
  - set:
      field: event.outcome
      value: "success"
      if: ctx.event?.outcome == true
  - set:
      field: event.outcome
      value: "failure"
      if: ctx.event?.outcome == false
  - set:
      field: event.outcome
      value: "unknown"
      if: ctx.event?.outcome == null
  - lowercase:
      field: email.direction
      ignore_missing: true
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true

  # Handle users.
  - foreach:
      tag: collect_related_users_from
      if: ctx.email?.from?.address instanceof List
      field: email.from.address
      processor:
        append:
          field: related.user
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - foreach:
      tag: collect_related_users_to
      if: ctx.email?.to?.address instanceof List
      field: email.to.address
      processor:
        append:
          field: related.user
          value: '{{{_ingest._value}}}'
          allow_duplicates: false

  # Handle hosts.
  - append:
      tag: collect_related_hosts
      if: ctx.mimecast?.Hostname != null
      field: related.hosts
      value: '{{{mimecast.Hostname}}}'
      allow_duplicates: false

  # Handle attachment details.
  - foreach:
      tag: collect_attachment_file_hashes
      if: ctx.email?.attachments?.file?.hash instanceof Map
      field: email.attachments.file.hash
      processor:
        append:
          field: related.hash
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - script:
      tag: promote_email_attachments_to_array
      if: ctx.email?.attachments != null
      lang: painless
      source: |
        def attachments = [];
        attachments.add(ctx.email.attachments);
        ctx.email.attachments = attachments;

  - remove:
      tag: remove_duplicate_custom_fields
      if: ctx.tags == null || !ctx.tags.contains('preserve_duplicate_custom_fields')
      field:
        - mimecast.recipients
        - mimecast.senderEnvelope
      ignore_missing: true

  # Cleanup
  - rename:
      field: original
      target_field: mimecast
      override: true
      ignore_missing: true
  - remove:
      description: Cleanup of repeated/unwanted/temporary fields.
      field:
        - mimecast._offset
        - mimecast._partition
        - mimecast.timestamp
      ignore_missing: true
  - script:
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
          map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
          list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
        }
        handleMap(ctx);

# Error handling
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
