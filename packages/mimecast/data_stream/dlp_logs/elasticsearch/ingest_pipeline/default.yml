---
description: Pipeline for processing Mimecast dlp_logs.
processors:
  # Generic event/ecs fields we always want to populate.
  - set:
      field: ecs.version
      value: '8.11.0'
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  - json:
      description: Parse 'message' JSON contents into a 'mimecast' object.
      field: event.original
      target_field: mimecast
  - drop:
      if: ctx.mimecast?.eventTime == null || (ctx.mimecast?.data != null && ctx.mimecast.data.isEmpty())
  - fingerprint:
      fields:
        - mimecast.messageId
        - mimecast.action
        - mimecast.eventTime
      target_field: "_id"
      ignore_missing: true
  - set:
      field: event.category
      value: [email]
  - set:
      field: event.kind
      value: alert
      if: ctx._conf?.alerting instanceof List && ctx._conf.alerting.contains(ctx.mimecast?.action)

  - date:
      description: Use 'mimecast.eventTime' as the '@timestamp'
      field: mimecast.eventTime
      timezone: UTC
      formats:
        - yyyy-MM-dd'T'HH:mm:ssZ

  ###
  - append:
      field: email.from.address
      value: "{{{mimecast.senderAddress}}}"
      if: "ctx?.mimecast?.senderAddress != null"
  - append:
      field: email.to.address
      value: "{{{mimecast.recipientAddress}}}"
      if: "ctx?.mimecast?.recipientAddress != null"
  - dissect:
       field: email.from.address
       pattern: "<%{email.from.address}>"
       ignore_missing: true
       ignore_failure: true
  - gsub:
       field: email.from.address
       pattern: '<>'
       replacement: ''
       ignore_missing: true
       ignore_failure: true
  - dissect:
       field: email.to.address
       pattern: "<%{email.to.address}>"
       ignore_missing: true
       ignore_failure: true  
  - gsub:
       field: email.to.address
       pattern: '<>'
       replacement: ''
       ignore_missing: true
       ignore_failure: true
  - rename:
      field: mimecast.action
      target_field: event.action
      ignore_missing: true
      if: 'ctx?.mimecast?.action !=null'
  - rename:
      field: mimecast.subject
      target_field: email.subject
      ignore_missing: true
      if: 'ctx?.mimecast?.subject !=null'
  - rename:
      field: mimecast.messageId
      target_field: email.message_id
      ignore_missing: true
      if: 'ctx?.mimecast?.messageId !=null'
  - rename:
      field: mimecast.route
      target_field: email.direction
      ignore_missing: true
      if: 'ctx?.mimecast?.route !=null'
  - rename:
      field: mimecast.policy
      target_field: rule.name
      ignore_missing: true
      if: 'ctx?.mimecast?.policy !=null'
  - set:
      field: event.created
      value: "{{{mimecast.eventTime}}}"
      if: 'ctx?.mimecast?.eventTime != null'
  - lowercase:
      field: email.direction
      ignore_missing: true
  # Cleanup
  - remove:
      description: Cleanup of repeated/unwanted/temporary fields.
      field: 
        - mimecast
        - _conf
      ignore_missing: true
  # Cleanup
  - script:
      description: Drops null/empty values recursively
      tag: script_to_drop_null_values
      lang: painless
      ignore_failure: true
      source: |
        void handleMap(Map map) {
          map.values().removeIf(v -> {
            if (v instanceof Map) {
                handleMap(v);
            } else if (v instanceof List) {
                handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        void handleList(List list) {
          list.removeIf(v -> {
            if (v instanceof Map) {
                handleMap(v);
            } else if (v instanceof List) {
                handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        handleMap(ctx);
      
# Error handling
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
  - append:
      field: error.message
      value: >-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{{#_ingest.on_failure_processor_tag}}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{{/_ingest.on_failure_processor_tag}}}failed with message '{{{ _ingest.on_failure_message }}}'
