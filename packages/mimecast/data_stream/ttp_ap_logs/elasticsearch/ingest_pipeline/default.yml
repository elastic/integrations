---
description: Pipeline for processing sample logs
processors:
  # Generic event/ecs fields we always want to populated
  - set:
      field: ecs.version
      value: "8.0.0"
  - rename:
      field: message
      target_field: event.original
  - json:
      description: Parse 'message' JSON contents into a 'mimecast' object.
      field: event.original
      target_field: mimecast
  - drop:
      if: ctx?.mimecast?.date == null
  - date:
      description: Use 'mimecast.date' as the '@timestamp'
      field: mimecast.date
      timezone: UTC
      formats:
        - yyyy-MM-dd'T'HH:mm:ssZ

  - rename:
      field: mimecast.senderAddress
      target_field: email.from.address
      ignore_missing: true
      if: 'ctx?.mimecast?.senderAddress !=null'
  - rename:
      field: mimecast.recipientAddress
      target_field: email.to.address
      ignore_missing: true
      if: 'ctx?.mimecast?.recipientAddress !=null'
  - gsub:
      field: mimecast.actionTriggered
      pattern: ","
      replacement: ""
      ignore_missing: true
  - gsub:
      field: mimecast.actionTriggered
      pattern: " "
      replacement: "_"
      ignore_missing: true
  - rename:
      field: mimecast.actionTriggered
      target_field: event.action
      ignore_missing: true
      if: 'ctx?.mimecast?.actionTriggered !=null'
  - rename:
      field: mimecast.subject
      target_field: email.subject
      ignore_missing: true
      if: 'ctx?.mimecast?.subject !=null'
  - rename:
      field: mimecast.messageId
      target_field: email.message_id
      ignore_missing: true
      if: 'ctx?.mimecast?.messageId !=null'
  - rename:
      field: mimecast.route
      target_field: email.direction
      ignore_missing: true
      if: 'ctx?.mimecast?.route !=null'
  - rename:
      field: mimecast.fileName
      target_field: email.attachments.file.name
      ignore_missing: true
      if: 'ctx?.mimecast?.fileName !=null'
  - rename:
      field: mimecast.definition
      target_field: rule.name
      ignore_missing: true
      if: 'ctx?.mimecast?.definition !=null'
  - rename:
      field: mimecast.fileHash
      target_field: email.attachments.hash
      ignore_missing: true
      if: 'ctx?.mimecast?.fileHash !=null'
  - rename:
      field: mimecast.fileType
      target_field: email.attachments.file.mime_type
      ignore_missing: true
      if: 'ctx?.mimecast?.fileType !=null'
  - set:
      field: event.created
      value: "{{mimecast.date}}"
      if: 'ctx?.mimecast?.date != null'
  - split:
      field: email.attachments.file.name
      separator: "\\."
      target_field: file.parts
      if: 'ctx?.email?.attachments?.file?.name != null'
  - script:
      lang: painless
      source: | 
        ctx.email.attachments.file.extension = ctx.file.parts[ctx.file.parts.length-1];
      if: 'ctx?.file?.parts !=null && ctx?.file?.parts.length > 1'
  - append:
      field: related.hash
      value: "{{email.attachments.hash}}"
      allow_duplicates: false
      if: 'ctx?.email?.attachments?.hash !=null'
  ### Cleanup
  - remove:
      description: Cleanup of repeated/unwanted/temporary fields.
      field: 
        - mimecast.date
        - file.parts
        - file
      ignore_missing: true
  - remove:
      description: Remove 'event.original' if 'preserve_original_event' is not set.
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      
# Error handling
on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}'