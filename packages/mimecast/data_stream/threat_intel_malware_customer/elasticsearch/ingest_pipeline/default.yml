---
description: Pipeline for parsing Mimecast - Threat Intel Feed Malware Customer Logs
processors:
  ####################
  # Event ECS fields #
  ####################
  - set:
      field: ecs.version
      value: "8.2.0"
  - set:
      field: event.kind
      value: enrichment
  - set:
      field: event.category
      value: threat
  - set:
      field: event.type
      value: indicator

  ######################
  # General ECS fields #
  ######################
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - json:
      field: event.original
      target_field: mimecast
  - drop:
      if: 'ctx.mimecast?.type != "indicator"'
  - fingerprint:
      fields:
        - mimecast.id
      target_field: "_id"
      ignore_missing: true

  #####################
  # Threat ECS Fields #
  #####################
  ## File indicator operations
  - date:
      field: mimecast.created
      formats:
        - "yyyy-MM-dd'T'HH:mm:ssz"
        - "yyyy-MM-dd'T'HH:mm:ssZ"
        - "yyyy-MM-dd'T'HH:mm:ss.Sz"
        - "yyyy-MM-dd'T'HH:mm:ss.SZ"
        - "yyyy-MM-dd'T'HH:mm:ss.SSz"
        - "yyyy-MM-dd'T'HH:mm:ss.SSZ"
        - "yyyy-MM-dd'T'HH:mm:ss.SSSz"
        - "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
      if: "ctx.mimecast?.created != null"
  - date:
      field: mimecast.modified
      target_field: threat.indicator.modified_at
      formats:
        - "yyyy-MM-dd'T'HH:mm:ssz"
        - "yyyy-MM-dd'T'HH:mm:ssZ"
        - "yyyy-MM-dd'T'HH:mm:ss.Sz"
        - "yyyy-MM-dd'T'HH:mm:ss.SZ"
        - "yyyy-MM-dd'T'HH:mm:ss.SSz"
        - "yyyy-MM-dd'T'HH:mm:ss.SSZ"
        - "yyyy-MM-dd'T'HH:mm:ss.SSSz"
        - "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
      if: "ctx.mimecast?.modified != null"
  - date:
      field: mimecast.valid_from
      target_field: threat.indicator.first_seen
      formats:
        - "yyyy-MM-dd'T'HH:mm:ssz"
        - "yyyy-MM-dd'T'HH:mm:ssZ"
        - "yyyy-MM-dd'T'HH:mm:ss.Sz"
        - "yyyy-MM-dd'T'HH:mm:ss.SZ"
        - "yyyy-MM-dd'T'HH:mm:ss.SSz"
        - "yyyy-MM-dd'T'HH:mm:ss.SSZ"
        - "yyyy-MM-dd'T'HH:mm:ss.SSSz"
        - "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
      if: "ctx.mimecast?.valid_from != null"
  - dissect: 
      field: mimecast.pattern
      pattern: "[%{_tmp.threattype}:%{mimecast.pattern_value}.'%{mimecast.pattern_hash_type}' = '%{_tmp.threatvalue}']"
      if: 'ctx.mimecast?.pattern != null'
  - set: 
      field: mimecast.value
      value: "{{_tmp.threatvalue}}"
      if: 'ctx?._tmp?.threatvalue != null'
  - set: 
      field: mimecast.hashtype
      value: "{{mimecast.pattern_hash_type}}"
      if: 'ctx?.mimecast?.pattern_hash_type != null'
  - rename:
      field: _tmp.threattype
      target_field: threat.indicator.type
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: mimecast.value
      target_field: threat.indicator.file.hash.sha256
      ignore_missing: true
      if: 'ctx?.mimecast?.hashtype == "SHA-256"'
  - rename:
      field: mimecast.value
      target_field: threat.indicator.file.hash.sha1
      ignore_missing: true
      if: 'ctx?.mimecast?.hashtype == "SHA-1"'
  - rename:
      field: mimecast.value
      target_field: threat.indicator.file.hash.md5
      ignore_missing: true
      if: 'ctx?.mimecast?.hashtype == "MD-5"'
  - append:
      field: related.hash
      value: "{{threat.indicator.file.hash.sha256}}"
      allow_duplicates: false
      if: 'ctx?.mimecast?.hashtype == "SHA-256"'
  - append:
      field: related.hash
      value: "{{threat.indicator.file.hash.sha1}}"
      allow_duplicates: false
      if: 'ctx?.mimecast?.hashtype == "SHA-1"'
  - append:
      field: related.hash
      value: "{{threat.indicator.file.hash.md5}}"
      allow_duplicates: false
      if: 'ctx?.mimecast?.hashtype == "MD-5"'
  - set:
      field: threat.indicator.type
      value: unknown
      if: ctx.threat?.indicator?.type == null
  - foreach:
      field: mimecast.labels
      ignore_missing: true
      processor:
        append:
          field: tags
          value: "{{_ingest._value}}"
          allow_duplicates: false
  - grok:
      field: mimecast.description
      patterns:
        - "^%{GREEDYDATA}Source: %{GREEDYDATA:threat.indicator.provider}"
      ignore_missing: true
      ignore_failure: true
  - dissect:
      field: mimecast.Content-Disposition
      pattern: "%{?drop->}=\"%{mimecast.logtype_part.1}_%{mimecast.logtype_part.2}_%{?drop->}"
      ignore_missing: true
  - set:
      field: mimecast.log_type
      value: "{{mimecast.logtype_part.1}}_{{mimecast.logtype_part.2}}"
      if: 'ctx?.mimecast?.logtype_part?.1 != null && ctx?.mimecast?.logtype_part?.2 != null'
  - rename:
      field: mimecast.name
      target_field: email.attachments.file.name
      ignore_missing: true 
      if: 'ctx?.mimecast?.name != null'
  - split:
      field: email.attachments.file.name
      separator: "\\."
      target_field: file.parts
      if: 'ctx?.email?.attachments?.file?.name != null'
  - script:
      lang: painless
      source: | 
        ctx.email.attachments.file.name = ctx.file.parts[0];
      if: 'ctx?.file?.parts !=null && ctx?.file?.parts.length > 1'
  - script:
      lang: painless
      source: | 
        ctx.email.attachments.file.extension = ctx.file.parts[ctx.file.parts.length-1];
      if: 'ctx?.file?.parts !=null && ctx?.file?.parts.length > 1'
  ######################
  # Cleanup processors #
  ######################
  - script:
      lang: painless
      if: ctx?.threatintel != null
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
        map.values().removeIf(v -> v == null);
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
        }
        handleMap(ctx);
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
  - remove:
      field:
        - mimecast.created
        - message
        - _tmp
        - mimecast.pattern_value
        - mimecast.pattern_hash_type
        - mimecast.hashtype
        - mimecast.value
        - mimecast.Content-Disposition
        - mimecast.logtype_part
        - mimecast.modified
        - mimecast.valid_from
        - file.parts
      ignore_missing: true
on_failure:
  - set:
      field: error.message
      value: "{{ _ingest.on_failure_message }}"