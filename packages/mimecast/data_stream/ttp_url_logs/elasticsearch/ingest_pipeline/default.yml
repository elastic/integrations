---
description: Pipeline for processing sample logs
processors:
  # Generic event/ecs fields we always want to populated
  - set:
      field: ecs.version
      value: "8.2.0"
  - rename:
      field: message
      target_field: event.original
  - json:
      description: Parse 'message' JSON contents into a 'mimecast' object.
      field: event.original
      target_field: mimecast
  - drop:
      if: ctx?.mimecast?.date == null
  - date:
      description: Use 'mimecast.date' as the '@timestamp'
      field: mimecast.date
      timezone: UTC
      formats:
        - yyyy-MM-dd'T'HH:mm:ssZ

  ###
  - rename:
      field: mimecast.url
      target_field: url.original
      ignore_missing: true
  - rename:
      field: mimecast.userAwarenessAction
      target_field: event.action
      ignore_missing: true
  - rename:
      field: mimecast.route
      target_field: email.direction
      ignore_missing: true
  - rename:
      field: mimecast.ttpDefinition
      target_field: rule.name
      ignore_missing: true
  - rename:
      field: mimecast.subject
      target_field: email.subject
      ignore_missing: true
  - rename:
      field: mimecast.messageId
      target_field: email.message_id
      ignore_missing: true
  - set:
      field: email.from.address
      value: ["{{{mimecast.fromUserEmailAddress}}}"]
      if: "ctx?.mimecast?.fromUserEmailAddress != null"
      ignore_failure: true
  - rename:
      field: mimecast.sendingIp
      target_field: source.ip
      ignore_missing: true
  - set:
      field: event.created
      value: "{{mimecast.date}}"
      if: 'ctx?.mimecast?.date != null'
  - append:
      field: related.ip
      value: "{{source.ip}}"
      allow_duplicates: false
      if: 'ctx?.source?.ip !=null'
  - lowercase:
      field: email.direction
      ignore_missing: true
  - set:
      field: email.to.address
      value: ["{{{mimecast.userEmailAddress}}}"]
      if: "ctx?.mimecast?.userEmailAddress != null"
      ignore_failure: true
  ### Cleanup
  - remove:
      description: Cleanup of repeated/unwanted/temporary fields.
      field: 
        - mimecast.date
        - mimecast.fromUserEmailAddress
        - mimecast.userEmailAddress
      ignore_missing: true
  - remove:
      description: Remove 'event.original' if 'preserve_original_event' is not set.
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      
# Error handling
on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}'