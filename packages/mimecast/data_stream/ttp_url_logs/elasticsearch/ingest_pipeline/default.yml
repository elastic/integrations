---
description: Pipeline for processing Mimecast ttp_url_logs.
processors:
  # Generic event/ecs fields we always want to populate.
  - set:
      field: ecs.version
      value: '8.11.0'
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  - json:
      description: Parse 'message' JSON contents into a 'mimecast' object.
      field: event.original
      target_field: mimecast
  - drop:
      if: ctx.mimecast?.date == null || (ctx.mimecast?.data != null && ctx.mimecast.data.isEmpty())
  - fingerprint:
      fields:
        - mimecast.messageId
        - mimecast.date
      target_field: "_id"
      ignore_missing: true
  - date:
      description: Use 'mimecast.date' as the '@timestamp'
      field: mimecast.date
      timezone: UTC
      formats:
        - yyyy-MM-dd'T'HH:mm:ssZ
  - set:
      field: event.category
      value: [email]
  - set:
      field: event.kind
      value: alert
      if: ctx.mimecast?.scanResult == 'malicious'

  ###
  - rename:
      field: mimecast.url
      target_field: url.original
      ignore_missing: true
  - uri_parts:
      field: url.original
      keep_original: true
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: mimecast.userAwarenessAction
      target_field: event.action
      ignore_missing: true
  - rename:
      field: mimecast.route
      target_field: email.direction
      ignore_missing: true
  - rename:
      field: mimecast.ttpDefinition
      target_field: rule.name
      ignore_missing: true
  - rename:
      field: mimecast.subject
      target_field: email.subject
      ignore_missing: true
  - rename:
      field: mimecast.messageId
      target_field: email.message_id
      ignore_missing: true
  - set:
      field: email.from.address
      value: ["{{{mimecast.fromUserEmailAddress}}}"]
      if: "ctx.mimecast?.fromUserEmailAddress != null"
  - append:
      field: related.user
      value: "{{{mimecast.fromUserEmailAddress}}}"
      allow_duplicates: false
      if: 'ctx.mimecast?.fromUserEmailAddress != null'
      ignore_failure: true
  - set:
      field: email.to.address
      value: ["{{{mimecast.userEmailAddress}}}"]
      if: "ctx.mimecast?.userEmailAddress != null"
  - set:
      field: user.email
      value: ["{{{mimecast.userEmailAddress}}}"]
      if: "ctx?.mimecast?.userEmailAddress != null"
  - append:
      field: related.user
      value: "{{{mimecast.userEmailAddress}}}"
      allow_duplicates: false
      if: 'ctx.mimecast?.userEmailAddress != null'
      ignore_failure: true
  - convert:
      field: mimecast.sendingIp
      target_field: source.ip
      type: ip
      ignore_missing: true
      ignore_failure: true
  - remove:
      field: mimecast.sendingIp
      if: ctx.source?.ip != null
      ignore_missing: true
  - set:
      field: event.created
      value: "{{{mimecast.date}}}"
      if: 'ctx?.mimecast?.date != null'
  - append:
      field: related.ip
      value: "{{{source.ip}}}"
      allow_duplicates: false
      if: 'ctx?.source?.ip !=null'
  - dissect:
      field: email.from.address
      pattern: "<%{email.from.address}>"
      ignore_missing: true
      ignore_failure: true
  - dissect:
      field: email.to.address
      pattern: "<%{email.to.address}>"
      ignore_missing: true
      ignore_failure: true
  - foreach:
      field: mimecast.tagMap.DangerousFileExt
      ignore_missing: true
      ignore_failure: true
      processor:
        gsub:
          field: _ingest._key
          pattern: ':'
          replacement: '_'
          ignore_missing: true
  ### Cleanup
  - remove:
      description: Cleanup of repeated/unwanted/temporary fields.
      field:
        - mimecast.date
        - mimecast.fromUserEmailAddress
        - mimecast.userEmailAddress
      ignore_missing: true
  - script:
      description: Drops null/empty values recursively
      tag: script_to_drop_null_values
      lang: painless
      ignore_failure: true
      source: |
        void handleMap(Map map) {
          map.values().removeIf(v -> {
            if (v instanceof Map) {
                handleMap(v);
            } else if (v instanceof List) {
                handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        void handleList(List list) {
          list.removeIf(v -> {
            if (v instanceof Map) {
                handleMap(v);
            } else if (v instanceof List) {
                handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        handleMap(ctx);
# Error handling
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
  - append:
      field: error.message
      value: >-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{{#_ingest.on_failure_processor_tag}}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{{/_ingest.on_failure_processor_tag}}}failed with message '{{{ _ingest.on_failure_message }}}'
