---
description: Pipeline for processing collection logs.
processors:
  - set:
      field: ecs.version
      value: 8.6.0
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - json:
      field: event.original
      target_field: json
      ignore_failure: true
  - drop:
      if: ctx.json?.data != null && ctx.json.data.isEmpty()
  - set:
      field: event.type
      value: [info]
  - set:
      field: event.kind
      value: state
  - rename:
      field: json.externalId
      target_field: bitwarden.collection.external.id
      ignore_missing: true
  - rename:
      field: json.object
      target_field: bitwarden.object
      ignore_missing: true
  - rename:
      field: json.groups
      target_field: bitwarden.collection.groups
      ignore_missing: true
  - rename:
      field: json.id
      target_field: bitwarden.collection.id
      ignore_missing: true
  - remove:
      field:
        - json
      ignore_missing: true
  - remove:
      field:
        - event.original
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
  - script:
      lang: painless
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
      description: Drops null/empty values recursively.
  - set:
      field: event.kind
      value: pipeline_error
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: '{{{_ingest.on_failure_message}}}'
  - append:
      field: event.kind
      value: pipeline_error
