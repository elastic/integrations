config_version: 2
interval: {{period}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
auth.digest:
  user: {{public_key}}
  password: {{private_key}}
resource.url: {{url}}
state:
  group_id: {{groupId}}
  want_more: false
  page_num: 1
  query: /fts/metrics/measurements?granularity=PT{{period}}&period=PT{{period}}
redact:
  fields: ~
program: |
      (
        (has(state.hostlist) && size(state.hostlist) > 0) ?
          state
        :
          state.with(
            request(
              "GET",
              state.url.trim_right("/") + "/api/atlas/v2/groups/" + state.group_id + "/processes?" + {
                "pageNum": [string(state.page_num)],
                "itemsPerPage": ["100"],
              }.format_query()
            ).with(
              {
                "Header": {
                  "Accept": ["application/vnd.atlas." + string(now.getFullYear()) + "-01-01+json"],
                },
              }
            ).do_request().as(resp, (resp.StatusCode == 200) ?
              bytes(resp.Body).decode_json().as(body,
                {
                  "hostlist": body.results.map(e, state.url + "/api/atlas/v2/groups/" + state.group_id + "/hosts/" + e.id + state.query),
                  "next": 0,
                  "page_num": body.links.exists_one(res, res.rel == "next") ? (int(state.page_num) + 1) : 1,
                }
              )
            :
              bytes(resp.Body).decode_json().as(body, (body != null) ?
                {
                  "events": [
                    {
                      "error": {
                        "code": body.error,
                        "message": body.detail,
                      },
                    },
                  ],
                  "want_more": false,
                }
              :
                {
                  "events": [
                    {
                      "error": {
                        "code": resp.StatusCode,
                        "message": resp.Status,
                      },
                    },
                  ],
                  "want_more": false,
                }
              )
            )
          )
      ).as(state, !has(state.next) ?
        state
      : (state.next >= size(state.hostlist)) ?
        {}
      :
        request("GET", string(state.hostlist[state.next])).with(
          {
            "Header": {
              "Accept": ["application/vnd.atlas." + string(now.getFullYear()) + "-01-01+json"],
            },
          }
        ).do_request().as(resp, (resp.StatusCode == 200) ?
          bytes(resp.Body).decode_json().as(body,
            {
              "events": [
                (has(body.hardwareMeasurements) && has(body.statusMeasurements)) ?
                  body.with(
                    {
                      "hardware": zip(
                        // Combining measurement names and actual values of measurement to generate `key : value` pairs.
                        body.hardwareMeasurements.map(m, m.name),
                        body.hardwareMeasurements.map(m, m.dataPoints.map(d, d.value).as(v, (size(v) == 0) ? null : (v[0])))
                      ),
                      "status": zip(
                        body.statusMeasurements.map(m, m.name),
                        body.statusMeasurements.map(m, m.dataPoints.map(d, d.value).as(v, (size(v) == 0) ? null : (v[0])))
                      ),
                    }
                  ).drop(["hardwareMeasurements", "statusMeasurements", "links"])
                :
                  {},
              ],
              "hostlist": (int(state.next) + 1 < size(state.hostlist)) ? state.hostlist : [],
              "next": (int(state.next) + 1 < size(state.hostlist)) ? (int(state.next) + 1) : 0,
              "want_more": int(state.next) + 1 < size(state.hostlist) || state.page_num != 1,
              "page_num": state.page_num,
              "group_id": state.group_id,
              "query": state.query,
            }
          )
        :
          bytes(resp.Body).decode_json().as(body, (body != null) ?
            {
              "events": [
                {
                  "error": {
                    "code": body.error,
                    "message": body.detail,
                  },
                },
              ],
              "want_more": false,
            }
          :
            {
              "events": [
                {
                  "error": {
                    "code": resp.StatusCode,
                    "message": resp.Status,
                  },
                },
              ],
              "want_more": false,
            }
          )
        )
      )
