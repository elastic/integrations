---
description: Pipeline for processing MongoDB Atlas Mongod Database logs.
processors:
  - drop:
      if: ctx.message == "No data for given time period or host is unreachable"
      tag: drop_empty_events
  - set:
      field: ecs.version
      value: 8.11.0
  - set:
      field: event.kind
      value: event
  - set:
      field: event.module
      value: mongodb_atlas
  - set:
      field: event.category
      value: ["network", "database"]
  - set:
      field: event.type
      value: ["access", "info"]
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: 'ctx.event?.original == null'
  - rename:
      field: host_name
      target_field: mongodb_atlas.mongod_database.hostname
      ignore_missing: true
  - json:
      field: event.original
      target_field: json
      tag: json_decoding
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: json.t.$date
      target_field: '@timestamp'
      formats: [ISO8601]
      on_failure:
        - append:
            field: error.message
            value: '{{ _ingest.on_failure_message }}'
  - script:
      lang: painless
      description: Maps log severity levels to descriptive values
      tag: informative_log_level
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
      params:
        severity_levels:
          F: fatal
          E: error
          W: warning
          I: informational
          D1: debug 1
          D2: debug 2
          D3: debug 3
          D4: debug 4
          D5: debug 5
      source: |
          String value = ctx.json?.s;
          if (value != null) {
            ctx.severity = params.severity_levels.getOrDefault(value, null);
          }
  - rename:
      field: severity
      target_field: log.level
      ignore_missing: true
  - rename:
      field: json.msg
      target_field: mongodb_atlas.mongod_database.message
      ignore_missing: true
  - rename:
      field: json.c
      target_field: mongodb_atlas.mongod_database.component
      ignore_missing: true
  - rename:
      field: json.id
      target_field: mongodb_atlas.mongod_database.id
      ignore_missing: true
  - rename:
      field: json.ctx
      target_field: mongodb_atlas.mongod_database.thread.name
      ignore_missing: true
  - rename:
      field: json.attr
      target_field: mongodb_atlas.mongod_database.attributes
      ignore_missing: true
  - rename:
      field: json.tags
      target_field: mongodb_atlas.mongod_database.tags
      ignore_missing: true
  - rename:
      field: json.size
      target_field: mongodb_atlas.mongod_database.size
      ignore_missing: true
  - script:
      lang: painless
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
      description: Drops null and empty values recursively from the Elasticsearch document context.
  - remove:
      field:
        - event.original
      tag: remove_original_event
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
  - remove:
      field:
        - json
      ignore_missing: true
      description: Removes temporary fields.
  - set:
      field: event.kind
      value: pipeline_error
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
