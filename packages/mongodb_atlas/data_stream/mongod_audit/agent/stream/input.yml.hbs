config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
auth.digest:
  user: {{public_key}}
  password: {{private_key}}
resource.url: {{url}}
state:
  group_id: {{groupId}}
  want_more: false
  page_num: 1
redact:
  fields: ~
program: |
    (
      // Check if the host list is available and not empty
      (has(state.hostlist) && size(state.hostlist) > 0) ?
        state // If host list is available, proceed with the current state
      :
        (
          // If the page number is not 1, proceed with the current state
          (state.page_num != 1) ?
            state
          :
            // Otherwise, set the start and end dates for the query
            state.with(
              {
                "startDate": state.?cursor.last_timestamp.orValue(int(now - duration("30m"))),
                "endDate": int(now),
              }
            )
        ).as(state,
          // Make a GET request to retrieve the host list
          state.with(
            request("GET", state.url + "/api/atlas/v2/groups/" + state.group_id + "/processes?pageNum=" + string(state.page_num) + "&itemsPerPage=100").with(
              {
                "Header": {
                  "Accept": ["application/vnd.atlas." + string(now.getFullYear()) + "-01-01+json"],
                },
              }
            ).do_request().as(resp,
            // Check if the response status code is 200
            (resp.StatusCode == 200) ?
              // Parse the response body as JSON
              bytes(resp.Body).decode_json().as(body,
                {
                  // Extract the host list and other relevant information
                  "hostlist": body.results.map(e, e.hostname),
                  "next": 0,
                  "page_num": body.links.exists_one(res, res.rel == "next") ? (int(state.page_num) + 1) : 1,
                }
              )
            :
              // Handle error response
              bytes(resp.Body).decode_json().as(body, (body != null) ?
                {
                  "events": [
                    {
                      "error": {
                        "code": body.error,
                        "message": body.detail,
                      },
                    },
                  ],
                  "want_more": false,
                }
              :
                {
                  "events": [
                    {
                      "error": {
                        "code": resp.StatusCode,
                        "message": resp.Status,
                      },
                    },
                  ],
                  "want_more": false,
                }
              )
            )
          )
        )
    ).as(state,
    // Check if the next host is available
    !has(state.next) ?
      state // If no next host, proceed with the current state
    : (state.next >= size(state.hostlist)) ?
      {} // If no more hosts, return an empty object
    :
      // Make a GET request to retrieve the log data for the current host
      request("GET", state.url + "/api/atlas/v2/groups/" + state.group_id + "/clusters/" + state.hostlist[state.next] + "/logs/mongodb-audit-log.gz?startDate=" + string(int(state.startDate)) + "&endDate=" + string(int(state.endDate))).with(
        {
          "Header": {
            "Accept": ["application/vnd.atlas." + string(now.getFullYear()) + "-01-01+gzip"],
          },
        }
      ).do_request().as(resp,
        // Check if the response status code is 200 and the response body is not empty
        (resp.StatusCode == 200 && resp.ContentLength != 0) ?
          // Parse the response body as a gzip file
          string(bytes(resp.Body).mime("application/gzip")).as(body,
            {
              // Extract the log data and other relevant information
              "events": body.trim_space().split("\n").map(value, {"message": value, "host_name": state.hostlist[state.next]}),
              "cursor": {
                "last_timestamp": state.endDate,
              },
              "hostlist": (int(state.next) + 1 < size(state.hostlist)) ? state.hostlist : [],
              "next": (int(state.next) + 1 < size(state.hostlist)) ? (int(state.next) + 1) : 0,
              "want_more": int(state.next) + 1 < size(state.hostlist) || state.page_num != 1,
              "page_num": state.page_num,
              "startDate": state.startDate,
              "endDate": state.endDate,
              "group_id": state.group_id,
            }
          )
        :
          {
            // If data is not available during this period, or if the host is unreachable,
            // an event will be generated with the following message, and this event will be dropped during pipeline processing.
            // keep this message in a sync with pipeline as it is being used there.
            "events": [{"message": "No data for given time period or host is unreachable"}],
            "cursor": {
              "last_timestamp": state.endDate,
            },
            "hostlist": (int(state.next) + 1 < size(state.hostlist)) ? state.hostlist : [],
            "next": (int(state.next) + 1 < size(state.hostlist)) ? (int(state.next) + 1) : 0,
            "want_more": int(state.next) + 1 < size(state.hostlist) || state.page_num != 1,
            "page_num": state.page_num,
            "startDate": state.startDate,
            "endDate": state.endDate,
            "group_id": state.group_id,
          }
      )
    )
