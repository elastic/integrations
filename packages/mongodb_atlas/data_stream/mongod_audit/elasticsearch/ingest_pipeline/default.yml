---
description: Pipeline for processing MongoDB Atlas Mongod Audit logs.
processors:
  - drop:
      if: ctx.message == "No data for given time period or host is unreachable"
      tag: drop_empty_events
  - set:
      field: ecs.version
      value: 8.11.0
  - set:
      field: event.kind
      value: event
  - set:
      field: event.module
      value: mongodb_atlas
  - set:
      field: event.category
      value: ["network", "authentication"]
  - set:
      field: event.type
      value: ["access", "info"]
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: 'ctx.event?.original == null'
  - rename:
      field: host_name
      target_field: mongodb_atlas.mongod_audit.hostname
      ignore_missing: true
  - json:
      field: event.original
      target_field: json
      tag: json_decoding
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: json.ts.$date
      target_field: '@timestamp'
      formats: [ISO8601]
      on_failure:
        - append:
            field: error.message
            value: '{{ _ingest.on_failure_message }}'
  - append:
      field: related.ip
      value: '{{{json.local.ip}}}'
      if: ctx.json?.local?.ip != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: '{{{json.remote.ip}}}'
      if: ctx.json?.remote?.ip != null
      allow_duplicates: false
  - rename:
      field: json.atype
      target_field: event.action
      ignore_missing: true
  - rename:
      field: json.local.port
      target_field: mongodb_atlas.mongod_audit.local.port
      ignore_missing: true
  - rename:
      field: json.local.ip
      target_field: mongodb_atlas.mongod_audit.local.ip
      ignore_missing: true
  - rename:
      field: json.local.isSystemUser
      target_field: mongodb_atlas.mongod_audit.local.is_system_user
      ignore_missing: true
  - rename:
      field: json.local.unix
      target_field: mongodb_atlas.mongod_audit.local.unix
      ignore_missing: true
  - rename:
      field: json.remote.port
      target_field: mongodb_atlas.mongod_audit.remote.port
      ignore_missing: true
  - rename:
      field: json.remote.ip
      target_field: mongodb_atlas.mongod_audit.remote.ip
      ignore_missing: true
  - rename:
      field: json.remote.isSystemUser
      target_field: mongodb_atlas.mongod_audit.remote.is_system_user
      ignore_missing: true
  - rename:
      field: json.remote.unix
      target_field: mongodb_atlas.mongod_audit.remote.unix
      ignore_missing: true
  - rename:
      field: json.param
      target_field: mongodb_atlas.mongod_audit.param
      ignore_missing: true
  - rename:
      field: json.users
      target_field: mongodb_atlas.mongod_audit.user.names
      ignore_missing: true
  - rename:
      field: json.roles
      target_field: mongodb_atlas.mongod_audit.user.roles
      ignore_missing: true
  - rename:
      field: json.uuid.$binary
      target_field: mongodb_atlas.mongod_audit.uuid.binary
      ignore_missing: true
  - rename:
      field: json.uuid.$type
      target_field: mongodb_atlas.mongod_audit.uuid.type
      ignore_missing: true
  - script:
      description: Provide information of the error code.
      lang: painless
      ignore_failure: true
      source: |
        Map m = new HashMap();
        m.put(0, "Success");
        m.put(13, "Unauthorized to perform the operation");
        m.put(18, "Authentication Failed");
        m.put(26, "Namespace Not Found");
        m.put(276, "Index build aborted");
        m.put(334, "Unauthorized to perform the operation");
        ctx.mongodb_atlas.mongod_audit.result = m.get(ctx.json.result);
  - script:
      lang: painless
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
      description: Drops null/empty values recursively.
  - remove:
      field:
        - event.original
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
  - remove:
      field:
        - json
      ignore_missing: true
  - set:
      field: event.kind
      value: pipeline_error
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: '{{{_ingest.on_failure_message}}}'
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false

