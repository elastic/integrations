---
description: Pipeline for processing MongoDB Atlas Organization logs
processors:
  - drop:
      if: ctx.response == "The application encountered an error while retrieving the current page"
      tag: drop_retry_page_events
  - fingerprint:
      fields: 
        - response.id
      target_field: _id
      ignore_missing: true 
  - set:
      field: ecs.version
      value: 8.11.0
  - set:
      field: event.kind
      value: event
  - set:
      field: event.module
      value: mongodb_atlas
  - set:
      field: event.dataset
      value: mongodb_atlas.organization
  - set:
      field: event.category
      value: ["configuration", "database"]
  - set:
      field: event.type
      value: ["info","access","change"]
  - set:
      copy_from: response
      field: event.original
      ignore_empty_value: true
      if: ctx.event?.original == null && (ctx.tags != null && (ctx.tags.contains('preserve_original_event')))
  - convert:
      type: string
      field: event.original
      ignore_missing: true
  - date:
      field: response.created
      target_field: '@timestamp'
      formats: [ISO8601]
      on_failure:
        - append:
            field: error.message
            value: '{{ _ingest.on_failure_message }}'
  - rename:
      field: response.remoteAddress
      target_field: client.ip
      ignore_missing: true 
  - rename:
      field: response.id
      target_field: event.id
      ignore_missing: true
  - rename:
      field: response.groupId
      target_field: group.id
      ignore_missing: true
  - rename:
      field: response.orgId
      target_field: organization.id
      ignore_missing: true
  - append:
      field: related.user
      value: '{{{response.username}}}'
      if: ctx.response?.username != null
      allow_duplicates: false
  - append:
      field: related.user
      value: '{{{response.targetUsername}}}'
      if: ctx.response?.targetUsername != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: '{{{client.ip}}}'
      if: ctx.client?.ip != null
      allow_duplicates: false
  - rename:
      field: response.port
      target_field: server.port
      ignore_missing: true
  - rename:
      field: response.userId
      target_field: user.id
      ignore_missing: true
  - rename:
      field: response.username
      target_field: user.name
      ignore_missing: true
  - rename:
      field: response.accessListEntry
      target_field: mongodb_atlas.organization.access_list_entry
      ignore_missing: true
  - script:
      description: Convert Additional Info keys to snake case.
      tag: additional-info-keys-to-snake-case
      lang: painless
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
      source: |
        Map keysToSnakeCase(Map m) {
          def regex = /_?([a-z])([A-Z]+)/;
          def snakeCaseMap = [:];

          for (entry in m.entrySet()) {
            def k = entry.getKey();
            def v = entry.getValue();

            if (v instanceof Map) {
              v = keysToSnakeCase(v);
            } else if (v instanceof List) {
              for (int i = 0; i < v.size(); i++) {
                def item = v.get(i);
                if (item instanceof Map) {
                  v.set(i, keysToSnakeCase(item));
                }
              }
            }

            k = regex.matcher(k).replaceAll('$1_$2').toLowerCase();
            snakeCaseMap.put(k, v);
          }
          return snakeCaseMap;
        }
        if(ctx.response?.raw != null) {
          ctx.response['raw'] = keysToSnakeCase(ctx.response.raw);
        }
  - rename:
      field: response.raw
      target_field: mongodb_atlas.organization.additional_info
      ignore_missing: true
  - rename:
      field: response.alertConfigId
      target_field: mongodb_atlas.organization.alert.config.id
      ignore_missing: true
  - rename:
      field: response.alertId
      target_field: mongodb_atlas.organization.alert.id
      ignore_missing: true
  - rename:
      field: response.apiKeyId
      target_field: mongodb_atlas.organization.api_key.id
      ignore_missing: true
  - rename:
      field: response.clusterId
      target_field: mongodb_atlas.organization.cluster.id
      ignore_missing: true
  - rename:
      field: response.clusterName
      target_field: mongodb_atlas.organization.cluster.name
      ignore_missing: true
  - rename:
      field: response.collection
      target_field: mongodb_atlas.organization.collection.name
      ignore_missing: true
  - rename:
      field: response.currentValue.number
      target_field: mongodb_atlas.organization.current_value.number
      ignore_missing: true
  - rename:
      field: response.currentValue.units
      target_field: mongodb_atlas.organization.current_value.units
      ignore_missing: true
  - rename:
      field: response.database
      target_field: mongodb_atlas.organization.database.name
      ignore_missing: true
  - rename:
      field: response.eventTypeName
      target_field: mongodb_atlas.organization.event_type.name
      ignore_missing: true
  - rename:
      field: response.hostId
      target_field: mongodb_atlas.organization.host.id
      ignore_missing: true
  - rename:
      field: response.hostname
      target_field: mongodb_atlas.organization.host.name
      ignore_missing: true
  - rename:
      field: response.invoiceId
      target_field: mongodb_atlas.organization.invoice.id
      ignore_missing: true
  - rename:
      field: response.isGlobalAdmin
      target_field: mongodb_atlas.organization.is_global_admin
      ignore_missing: true
  - rename:
      field: response.metricName
      target_field: mongodb_atlas.organization.metric.name
      ignore_missing: true
  - rename:
      field: response.opType
      target_field: mongodb_atlas.organization.operation.type
      ignore_missing: true
  - rename:
      field: response.paymentId
      target_field: mongodb_atlas.organization.payment.id
      ignore_missing: true
  - rename:
      field: response.publicKey
      target_field: mongodb_atlas.organization.public_key
      ignore_missing: true
  - rename:
      field: response.replicaSetName
      target_field: mongodb_atlas.organization.replicaset.name
      ignore_missing: true
  - rename:
      field: response.shardName
      target_field: mongodb_atlas.organization.shard.name
      ignore_missing: true
  - rename:
      field: response.targetPublicKey
      target_field: mongodb_atlas.organization.target_public_key
      ignore_missing: true
  - rename:
      field: response.targetUsername
      target_field: mongodb_atlas.organization.target.username
      ignore_missing: true
  - rename:
      field: response.teamId
      target_field: mongodb_atlas.organization.team.id
      ignore_missing: true
  - script:
      lang: painless
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).size() == 0);
          }
          return false;
        }
        drop(ctx);
      description: Drops null and empty values recursively from the Elasticsearch document context.
  - remove:
      field: response
      ignore_missing: true
      description: Removes temporary fields.
  - set:
      field: event.kind
      value: pipeline_error
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: '{{{_ingest.on_failure_message}}}'
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false      
