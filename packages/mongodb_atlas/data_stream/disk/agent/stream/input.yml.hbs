config_version: 2
interval: {{period}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
auth.digest:
  user: {{public_key}}
  password: {{private_key}}
resource.url: {{url}}
state:
  group_id: {{groupId}}
  want_more: false
  page_num: 1
  disk_page_num: 1
  query: /measurements?granularity=PT{{period}}&period=PT{{period}}
redact:
  fields: ~
program: |     
  (
    (has(state.host_list) && size(state.host_list) > 0) ?
      state
    : 
      state.with(
        request(
          "GET",
          state.url.trim_right("/") + "/api/atlas/v2/groups/" + state.group_id + "/processes?" + {
            "pageNum": [string(state.page_num)],
            "itemsPerPage": ["100"],
            }.format_query()
        ).with({
            "Header": {
              "Accept": ["application/vnd.atlas." + string(timestamp(now).getFullYear()) + "-01-01+json"],
            },
          }).do_request().as(resp, (resp.StatusCode == 200) ?
          bytes(resp.Body).decode_json().as(body,
            {
              "host_list": body.results.map(e, state.url.trim_right("/") + "/api/atlas/v2/groups/" + state.group_id + "/processes/" + e.id + "/disks/"),
              "next": 0,
              "page_num": body.links.exists_one(res, res.rel == "next") ? (int(state.page_num) + 1) : 1,
            })
            :
              {
                "events": {
                  "error": {
                    "code": string(resp.StatusCode),
                    "id": string(resp.Status),
                    "message": "GET:" + 
                    (
                      (size(resp.Body) != 0) ?
                        string(resp.Body)
                      :
                        string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                    ),
                  },
                },
              "want_more": false,
            }
          )
        )
    ).as(state, (state.next >= size(state.host_list)) ? {} :
      (
        (has(state.disk_list) && size(state.disk_list) > 0) ?
          state
        :
          state.with(
            request("GET", string(state.host_list[state.next] + "?pageNum=" + string(state.disk_page_num) + "&itemsPerPage=100"))
            .with({
                "Header": {
                  "Accept": ["application/vnd.atlas." + string(timestamp(now).getFullYear()) + "-01-01+json"],
                },
              }).do_request().as(resp, (resp.StatusCode == 200) ?
              bytes(resp.Body).decode_json().as(body,
                {
                  "disk_list": body.results.map(e, e.partitionName),
                  "disk_next": 0,
                  "disk_page_num": body.links.exists_one(res, res.rel == "next") ? (int(state.disk_page_num) + 1) : 1,
                }
              )
              :
                {
                  "events": {
                    "error": {
                      "code": string(resp.StatusCode),
                      "id": string(resp.Status),
                      "message": "GET:" + 
                      (
                        (size(resp.Body) != 0) ?
                          string(resp.Body)
                        :
                          string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                      ),
                    },
                  },
                "want_more": false,
              }
            )
          )
      ).as(state, (state.disk_next >= size(state.disk_list)) ? {} :
        request("GET", string(state.host_list[state.next] + state.disk_list[state.disk_next] + state.query))
        .with({
            "Header": {
              "Accept": ["application/vnd.atlas." + string(timestamp(now).getFullYear()) + "-01-01+json"],
            },
          }).do_request().as(res, (res.StatusCode == 200) ?
          {
            "events": bytes(res.Body).decode_json().as(f,
              f.with(
                {
                  "response": zip(
                    // Combining measurement names and actual values of measurement to generate `key : value` pairs.
                    f.measurements.map(m, m.name),
                    f.measurements.map(m, m.dataPoints.map(d, d.value).as(v, (size(v) == 0) ? null : (v[0])))
                  ),
                }
              ).drop(["measurements", "links"])
            ),
            "disk_list": (int(state.disk_next) + 1 < size(state.disk_list)) ? state.disk_list : [],
            "disk_next": (int(state.disk_next) + 1 < size(state.disk_list)) ? (int(state.disk_next) + 1) : 0,
            "disk_page_num": state.disk_page_num,
            "host_list": (int(state.next) + 1 >= size(state.host_list) && int(state.disk_page_num) == 1 && int(state.disk_next) + 1 >= size(state.disk_list)) ? [] : state.host_list,
            "next": (int(state.disk_next) + 1 >= size(state.disk_list) && int(state.disk_page_num) == 1 && int(state.next) + 1 < size(state.host_list)) ? (int(state.next) + 1) : int(state.next),
            "want_more": int(state.next) + 1 < size(state.host_list) || int(state.page_num) != 1 || int(state.disk_next) + 1 < size(state.disk_list) || int(state.disk_page_num) != 1,
            "page_num": state.page_num,
            "group_id": state.group_id,
            "query": state.query,
          }
        :
          {
            "events": {
              "error": {
                "code": string(res.StatusCode),
                "id": string(res.Status),
                "message": "GET:" + 
                (
                  (size(res.Body) != 0) ?
                    string(res.Body)
                  :
                    string(res.Status) + " (" + string(res.StatusCode) + ")"
                ),
              },
            },
          "want_more": false,
        }
      )
    )
  )
