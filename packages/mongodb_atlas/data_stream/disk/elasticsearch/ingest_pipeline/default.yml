---
description: Pipeline for processing MongoDB Atlas disk metrics.
processors:
  - set:
      field: ecs.version
      value: 8.11.0
  - set:
      field: event.kind
      value: metric
  - set:
      field: event.module
      value: mongodb_atlas
  - set:
      field: event.category
      value: ["database"]
  - set:
      field: event.type
      value: ["info"]
  - fail:
      if: ctx.error?.message != null && ctx.message == null && ctx.event?.original == null
      message: error message set and no data to process.
  - rename:
      field: groupId
      target_field: group.id
      ignore_missing: true
  - rename:
      field: processId
      target_field: mongodb_atlas.process_id
      ignore_missing: true
  - rename:
      field: partitionName
      target_field: mongodb_atlas.partition_name
      ignore_missing: true
  - rename:
      field: hostId
      target_field: mongodb_atlas.host_id
      ignore_missing: true
  - rename:
      field: response.MAX_DISK_PARTITION_IOPS_READ
      target_field: mongodb_atlas.disk.read.iops.max.throughput
      ignore_missing: true
  - rename:
      field: response.DISK_PARTITION_IOPS_READ
      target_field: mongodb_atlas.disk.read.iops.throughput
      ignore_missing: true
  - rename:
      field: response.MAX_DISK_PARTITION_LATENCY_READ
      target_field: mongodb_atlas.disk.read.latency.max.ms
      ignore_missing: true
  - rename:
      field: response.DISK_PARTITION_LATENCY_READ
      target_field: mongodb_atlas.disk.read.latency.ms
      ignore_missing: true
  - rename:
      field: response.MAX_DISK_PARTITION_IOPS_WRITE
      target_field: mongodb_atlas.disk.write.iops.max.throughput
      ignore_missing: true
  - rename:
      field: response.DISK_PARTITION_IOPS_WRITE
      target_field: mongodb_atlas.disk.write.iops.throughput
      ignore_missing: true
  - rename:
      field: response.MAX_DISK_PARTITION_LATENCY_WRITE
      target_field: mongodb_atlas.disk.write.latency.max.ms
      ignore_missing: true
  - rename:
      field: response.DISK_PARTITION_LATENCY_WRITE
      target_field: mongodb_atlas.disk.write.latency.ms
      ignore_missing: true
  - rename:
      field: response.DISK_PARTITION_SPACE_FREE
      target_field: mongodb_atlas.disk.space.free.bytes
      ignore_missing: true
  - rename:
      field: response.MAX_DISK_PARTITION_SPACE_FREE
      target_field: mongodb_atlas.disk.space.free.max.bytes
      ignore_missing: true
  - rename:
      field: response.MAX_DISK_PARTITION_SPACE_PERCENT_FREE
      target_field: mongodb_atlas.disk.space.free.max.pct
      ignore_missing: true
  - rename:
      field: response.DISK_PARTITION_SPACE_PERCENT_FREE
      target_field: mongodb_atlas.disk.space.free.pct
      ignore_missing: true
  - rename:
      field: response.DISK_PARTITION_SPACE_USED
      target_field: mongodb_atlas.disk.space.used.bytes
      ignore_missing: true
  - rename:
      field: response.MAX_DISK_PARTITION_SPACE_USED
      target_field: mongodb_atlas.disk.space.used.max.bytes
      ignore_missing: true
  - rename:
      field: response.MAX_DISK_PARTITION_SPACE_PERCENT_USED
      target_field: mongodb_atlas.disk.space.used.max.pct
      ignore_missing: true
  - rename:
      field: response.DISK_PARTITION_SPACE_PERCENT_USED
      target_field: mongodb_atlas.disk.space.used.pct
      ignore_missing: true
  - rename:
      field: response.MAX_DISK_PARTITION_IOPS_TOTAL
      target_field: mongodb_atlas.disk.total.iops.max.throughput
      ignore_missing: true
  - rename:
      field: response.DISK_PARTITION_IOPS_TOTAL
      target_field: mongodb_atlas.disk.total.iops.throughput
      ignore_missing: true
  - remove:
      field:
        - response
        - start
        - granularity
        - end
      ignore_missing: true
  - script:
      description: "Drops null/empty values recursively."
      lang: painless
      source: |
        boolean drop(Object o) {
          if (o == null || o == "") {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).size() == 0);
          }
          return false;
        }
        drop(ctx);
  - set:
      field: event.kind
      value: pipeline_error
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: '{{{_ingest.on_failure_message}}}'
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false