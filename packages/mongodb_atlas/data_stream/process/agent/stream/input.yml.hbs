config_version: 2
interval: {{period}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
auth.digest:
  user: {{public_key}}
  password: {{private_key}}
resource.url: {{url}}
state:
  group_id: {{groupId}}
  want_more: false
  page_num: 1
  query: /measurements?granularity=PT{{period}}&period=PT{{period}}
redact:
  fields: ~
program: |
      (
        has(state.hostlist) && size(state.hostlist) > 0 ?
          state
        : 
          state.with(request("GET", state.url + "/api/atlas/v2/groups/" + state.group_id + "/processes?pageNum=" + string(state.page_num) + "&itemsPerPage=100").with({
            "Header": {
              "Accept": ["application/vnd.atlas." + string(now.getFullYear()) + "-01-01+json"]
            }
          }).do_request().as(resp, bytes(resp.Body).decode_json().as(body, {
            "hostlist": body.results.map(e, state.url + "/api/atlas/v2/groups/" + state.group_id + "/processes/" + e.id + state.query),
            "next": 0,
            "page_num": body.links.exists_one(res, res.rel == "next") ? int(state.page_num)+1 : 1
          })))
      ).as(state, state.next >= size(state.hostlist) ? {} :
        request("GET", string(state.hostlist[state.next])).with({
          "Header": {
            "Accept": ["application/vnd.atlas." + string(now.getFullYear()) + "-01-01+json"]
          }
        }).do_request().as(res, {
          "events": bytes(res.Body).decode_json().as(f, f.with({"response": zip(
            //Combining measurement names and actual values of measurement to generate `key : value` pairs.
            f.measurements.map(m, m.name),
            f.measurements.map(m, m.dataPoints.map(d, d.value).as(v, size(v) == 0 ? 0 : v[0]))
          )}).drop(["measurements", "links"])),
          "hostlist": (int(state.next)+1) < size(state.hostlist) ? state.hostlist : [],
          "next": (int(state.next)+1) < size(state.hostlist) ? (int(state.next)+1) : 0,
          "want_more": (int(state.next)+1) < size(state.hostlist) || state.page_num != 1,
          "page_num": state.page_num,
          "group_id": state.group_id,
          "query": state.query,
        })
      )
