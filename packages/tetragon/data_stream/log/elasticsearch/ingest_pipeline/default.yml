---
description: Pipeline to process cilium_tetragon log logs
processors:
  - set:
      tag: set_ecs_version
      field: ecs.version
      value: 8.11.0
  - set:
      tag: copy_original_message
      field: originalMessage
      copy_from: message
  - rename:
      ignore_missing: true
      if: ctx.event?.original == null
      tag: rename_message
      field: originalMessage
      target_field: event.original
  - json:
      tag: json_original
      field: event.original
      target_field: cilium_tetragon.log

  # The below scripts are based on the Tetragon API https://github.com/cilium/tetragon/tree/main/api/v1
  # Each will parse an object type into ECS, for all Tetragon events that have the object
  - script:
      tag: parse_processes
      description: Parse process data into ECS.
      lang: painless
      source: |
        void run(Map map) {
          for (def k : map?.cilium_tetragon?.log?.keySet()) {
            /* these tetragon objects have "process" */
            if (k == "process_exec" ||
                k == "process_exit" ||
                k == "process_kprobe" ||
                k == "process_tracepoint" ||
                k == "process_loader" ||
                k == "process_lsm" ||
                k == "process_uprobe") {
              parseProcess(map?.cilium_tetragon?.log[k], map, "process");
            }

            /* these tetragon objects have "parent" */
            if (k == "process_exec" ||
                k == "process_exit" ||
                k == "process_kprobe" ||
                k == "process_tracepoint" ||
                k == "process_lsm" ||
                k == "process_uprobe") {
              parseProcess(map?.cilium_tetragon?.log[k], map, "parent");
            }

          }
        }

        /* parse tetragon process from m into ECS process in base */
        void parseProcess(Map m, Map base, String name) {
          Map p = new HashMap();
          p["args"] = m[name]?.arguments;
          p["executable"] = m[name]?.binary;
          p["working_directory"] = m[name]?.cwd;
          p["pid"] = m[name]?.pid;
          p["start"] = m[name]?.start_time;

          Map user = new HashMap();
          user["id"] = m[name]?.uid;
          p["user"] = user;

          Map thread = new HashMap();
          thread["id"] = m[name]?.uid;
          p["thread"] = thread;
          base[name] = p;

          /* parse container */
          Map container = new HashMap();
          container["id"] = m[name]?.pod?.container?.id;
          container["name"] = m[name]?.pod?.container?.name;
          container["image"] = new HashMap();
          container["image"]["name"] = m[name]?.pod?.container?.image?.name;
          base["container"] = container;

          
        }
        run(ctx);


  - rename:
      ignore_missing: true
      field: cilium_tetragon.log.node_name
      target_field: host.name
  #  - script:
  #      tag: script_convert_array_to_string
  #      description: Ensures the date processor does not receive an array value.
  #      lang: painless
  #      source: >
  #        if (ctx.cilium_tetragon?.log?.process_exit?.parent?.start_time != null
  #        &&
  #            ctx.cilium_tetragon.log.process_exit.parent.start_time instanceof ArrayList){
  #            ctx.cilium_tetragon.log.process_exit.parent.start_time = ctx.cilium_tetragon.log.process_exit.parent.start_time[0];
  #        }
  #  - date:
  #      if: ctx.cilium_tetragon?.log?.process_exit?.parent?.start_time != null
  #      tag: date_processor_cilium_tetragon.log.process_exit.parent.start_time
  #      field: cilium_tetragon.log.process_exit.parent.start_time
  #      target_field: process.parent.start
  #      formats:
  #        - 'yyyy-MM-dd''T''HH:mm:ss.SSSSSSSSS''Z'''
  #        - ISO8601
  #  - rename:
  #      ignore_missing: true
  #      field: cilium_tetragon.log.process_exit.status
  #      target_field: process.exit_code
  - geoip:
      ignore_missing: true
      tag: geoip_source_ip
      field: source.ip
      target_field: source.geo
  - geoip:
      ignore_missing: true
      tag: geoip_source_asn
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
  - rename:
      ignore_missing: true
      tag: rename_source_as_asn
      field: source.as.asn
      target_field: source.as.number
  - rename:
      ignore_missing: true
      tag: rename_source_as_organization_name
      field: source.as.organization_name
      target_field: source.as.organization.name
  - geoip:
      ignore_missing: true
      tag: geoip_destination_ip
      field: destination.ip
      target_field: destination.geo
  - geoip:
      ignore_missing: true
      tag: geoip_destination_asn
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
  - rename:
      ignore_missing: true
      tag: rename_destination_as_asn
      field: destination.as.asn
      target_field: destination.as.number
  # - append:
  #      if: ctx.host?.name != null
  #      field: related.hosts
  #      value: '{{{host.name}}}'
  #      allow_duplicates: false
  #  - append:
  #      if: ctx.user?.id != null
  #      field: related.user
  #      value: '{{{user.id}}}'
  #      allow_duplicates: false
  #  - append:
  #      if: ctx.container?.image?.id != null
  #      field: related.hash
  #      value: '{{{container.image.id}}}'
  #      allow_duplicates: false
  #  - rename:
  #      ignore_missing: true
  #      tag: rename_destination_as_organization_name
  #      field: destination.as.organization_name
  #      target_field: destination.as.organization.name
  #  #  - remove:
  #  #      ignore_failure: true
  #  #      ignore_missing: true
  #  #      if: ctx?.tags == null || !(ctx.tags.contains("preserve_original_event"))
  #  #      tag: remove_original_event
  #  #      field: event.original
  - script:
      tag: script_drop_null_empty_values
      description: Drops null/empty values recursively.
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);
on_failure:
  - append:
      field: error.message
      value: >-
        Processor {{{_ingest.on_failure_processor_type}}} with tag
        {{{_ingest.on_failure_processor_tag}}} in pipeline
        {{{_ingest.on_failure_pipeline}}} failed with message:
        {{{_ingest.on_failure_message}}}
  - set:
      field: event.kind
      value: pipeline_error
