---
description: Mapping of Menlo DLP Fields from API into ECS fields.
processors:
  - set:
      field: ecs.version
      value: 8.11.0
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      if: ctx.event?.original == null
      ignore_missing: true
  - set:
      field: event.kind
      value: alert
  - json:
      field: event.original
      tag: 'json_decoding'
      target_field: json
  - rename:
      field: json.event.event_id
      target_field: event.id
      ignore_missing: true
  - date:
      field: "json.event.event_time"
      formats:
        - "ISO8601"
      target_field: "event.created"
      timezone: "UTC"
      tag: date_event_created_time_epoch
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - uri_parts:
      field: json.event.dst_url
      target_field: "url"
      keep_original: true
      remove_if_successful: true
      if: ctx.json?.event?.dst_url != null
  - registered_domain:
      field: url.domain
      target_field: url
  - rename:
      field: json.event.rule_id
      target_field: rule.id
      ignore_missing: true
  - rename:
      field: json.event.action
      target_field: event.action
      ignore_missing: true
  - set:
      field: event.action
      value: blocked
      if: ctx.json.event.action == 'block'
  - set:
      field: event.action
      value: log
      if: ctx.json.event.action == 'log'
  - set:
      field: event.type
      value: denied
      if: ctx.event.action == 'blocked'
  - rename:
      field: json.event.rule_name
      target_field: rule.name
      ignore_missing: true
  - set:
      field: event.category
      value: intrusion_detection
  - append:
      field: event.category
      value: network
  - convert:
      field: "json.event.severity"
      type: long
      target_field: "event.severity"
      ignore_missing: true
  - set:
      field: event.outcome
      value: unknown
  - set:
      field: event.outcome
      value: success
      if: ctx.event.action == 'log' || ctx.event.action == 'block'
  - rename:
      field: json.event.product
      target_field: observer.product
      ignore_missing: true
  - rename:
      field: json.event.vendor
      target_field: observer.vendor
      ignore_missing: true
  - rename:
      field: json.event.version
      target_field: observer.version
      ignore_missing: true
  - rename:
      field: json.event.request_type
      target_field: http.request.method
      ignore_missing: true
  - rename:
      field: menlo.protocol
      target_field: network.protocol
      ignore_missing: true
  - append:
      field: related.user
      value: '{{json.event.userid}}'
      allow_duplicates: false
      if: ctx.json?.event?.userid != null
  - rename:
      field: json.event.userid
      target_field: user.name
      ignore_missing: true
  - rename:
      field: json.event.filename
      target_field: file.name
      ignore_missing: true
  - rename:
      field: json.event.sha256
      target_field: file.hash.sha256
      if: ctx.json?.sha256 != "NA"
      ignore_missing: true
  - append:
      field: related.hash
      value: "{{{file.hash.sha256}}}"
      allow_duplicates: false
      if: ctx.file?.hash.sha256 != null  
  - rename:
      field: json.event.categories
      target_field: menlo.dlp.category
      ignore_missing: true
  - convert:
      ignore_failure: true
      field: json.event.ccl_match_counts
      type: long
      target_field: menlo.dlp.ccl.match_counts
      ignore_missing: true
  - rename:
      field: json.event.user_input
      target_field: menlo.dlp.user_input
      ignore_missing: true
  - rename:
      field: json.event.alerted
      target_field: menlo.dlp.alerted
      ignore_missing: true
  - rename:
      field: json.event.status
      target_field: menlo.dlp.status
      ignore_missing: true
  - convert:
      field: json.event.ccl_scores
      type: long
      target_field: menlo.dlp.ccl.score
      ignore_missing: true
  - rename:
      field: json.event.ccl_ids
      target_field: menlo.dlp.ccl.id
  - rename:
      field: json.event.stream_name
      target_field: menlo.dlp.stream_name
  - remove:
      field: json
      tag: remove_json
      ignore_missing: true
  - remove:
      field: event.original
      tag: remove_event_original
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: Drops null/empty values recursively.
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
