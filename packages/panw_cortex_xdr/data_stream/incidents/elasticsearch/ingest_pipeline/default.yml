---
description: Pipeline for Palo Alto XDR Incident API.
processors:
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: event.kind
      value: alert
  - append:
      field: event.category
      value: malware
  - append:
      field: event.type
      value: info
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  - json:
      field: event.original
      target_field: panw_cortex.xdr
  - drop:
      if: ctx.panw_cortex?.xdr?.reply?.result_count == 0
  - fingerprint:
      fields:
        - panw_cortex.xdr.alert_count
        - panw_cortex.xdr.incident_id
      target_field: "_id"
      ignore_missing: true
  - date:
      field: panw_cortex.xdr.creation_time
      target_field: panw_cortex.xdr.creation_time
      formats:
        - UNIX_MS
      if: ctx.panw_cortex?.xdr?.creation_time != null
  - date:
      field: panw_cortex.xdr.resolved_timestamp
      target_field: panw_cortex.xdr.resolved_timestamp
      formats:
        - UNIX_MS
      if: ctx.panw_cortex?.xdr?.resolved_timestamp != null
  - date:
      field: panw_cortex.xdr.modification_time
      target_field: panw_cortex.xdr.modification_time
      formats:
        - UNIX_MS
      if: ctx.panw_cortex?.xdr?.modification_time != null
  - set:
      field: "@timestamp"
      copy_from: panw_cortex.xdr.creation_time
      if: ctx.panw_cortex?.xdr?.creation_time != null
  - set:
      field: event.severity
      value: 0
      if: ctx.panw_cortex?.xdr?.severity == "unknown"
  - set:
      field: event.severity
      value: 1
      if: ctx.panw_cortex?.xdr?.severity == "informational"
  - set:
      field: event.severity
      value: 2
      if: ctx.panw_cortex?.xdr?.severity == "low"
  - set:
      field: event.severity
      value: 3
      if: ctx.panw_cortex?.xdr?.severity == "medium"
  - set:
      field: event.severity
      value: 4
      if: ctx.panw_cortex?.xdr?.severity == "high"
  - rename:
      field: panw_cortex.xdr.incident_id
      target_field: event.id
      ignore_missing: true
  - rename:
      field: panw_cortex.xdr.description
      target_field: event.reason
      ignore_missing: true
      if: ctx.panw_cortex?.xdr?.description instanceof String
  - set:
      field: related.hosts
      copy_from: panw_cortex.xdr.hosts
      if: ctx.panw_cortex?.xdr?.hosts != null
  - set:
      field: related.user
      copy_from: panw_cortex.xdr.users
      if: ctx.panw_cortex?.xdr?.users != null
  - gsub:
      field: related.hosts
      pattern: ":.*"
      replacement: ""
      if: ctx.related?.hosts != null
  - gsub:
      field: related.user
      pattern: '.*\\'
      replacement: ""
      if: ctx.related?.user != null
  - script:
      if: ctx.panw_cortex?.xdr?.mitre_techniques_ids_and_names != null
      lang: painless
      description: "Extract Mitre Techniques and append it to Threat ECS fields"
      source: |-
        void addTechnique(def ctx, def x, def y) {
          if (ctx.threat == null) {
            ctx.threat = new HashMap();
          }
          if (ctx.threat.technique == null) {
            ctx.threat.technique = new HashMap();
          }
          if (ctx.threat.technique.id == null) {
            ctx.threat.technique.id = new ArrayList();
          }
          if (ctx.threat.technique.name == null) {
            ctx.threat.technique.name = new ArrayList();
          }
          if (!ctx.threat.technique.id.contains(x)) {
            ctx.threat.technique.id.add(x);
          }
          if (!ctx.threat.technique.name.contains(y)) {
            ctx.threat.technique.name.add(y);
          }
        }
        for (mitre_technique in ctx.panw_cortex?.xdr?.mitre_techniques_ids_and_names) {
          addTechnique(ctx, mitre_technique.splitOnToken(' - ')[0], mitre_technique.splitOnToken(' - ')[1]);
        }
  - script:
      if: ctx.panw_cortex?.xdr?.mitre_tactics_ids_and_names != null
      lang: painless
      description: "Extract Mitre Tactics and append it to Threat ECS fields"
      source: |-
        void addTactic(def ctx, def x, def y) {
          if (ctx.threat == null) {
          ctx.threat = new HashMap();
          }
          if (ctx.threat.tactic == null) {
          ctx.threat.tactic = new HashMap();
          }
          if (ctx.threat.tactic.id == null) {
          ctx.threat.tactic.id = new ArrayList();
          }
          if (ctx.threat.tactic.name == null) {
          ctx.threat.tactic.name = new ArrayList();
          }
          if (!ctx.threat.tactic.id.contains(x)) {
          ctx.threat.tactic.id.add(x);
          }
          if (!ctx.threat.tactic.name.contains(y)) {
          ctx.threat.tactic.name.add(y);
          }
        }
        for (mitre_tactic in ctx.panw_cortex?.xdr?.mitre_tactics_ids_and_names) {
            addTactic(ctx, mitre_tactic.splitOnToken(' - ')[0], mitre_tactic.splitOnToken(' - ')[1]);
        }
  - set:
      field: threat.framework
      value: "MITRE ATT&CK"
      if: "ctx.threat?.technique != null || ctx.threat?.tactic != null"
  - append:
      field: related.user
      value: "{{{user.name}}}"
      allow_duplicates: false
      if: ctx.user?.name != null
  - append:
      field: related.host
      value: "{{{host.name}}}"
      allow_duplicates: false
      if: ctx.host?.name != null
  - foreach:
      field: panw_cortex.xdr.tags
      if: ctx.panw_cortex?.xdr?.tags != null
      processor:
        append:
          field: tags
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - script:
      description: Drops null/empty values recursively
      lang: painless
      source: |
        boolean drop(Object o) {
          if (o == null || o == "") {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  - remove:
      field:
        - panw_cortex.xdr.severity
        - panw_cortex.xdr.tags
        - panw_cortex.xdr.mitre_techniques_id_and_names
        - panw_cortex.xdr.mitre_tactics_id_and_names
      ignore_missing: true
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
