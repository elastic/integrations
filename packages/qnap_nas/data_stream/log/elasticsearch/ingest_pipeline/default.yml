---
description: Pipeline for parsing QNAP NAS logs
processors:
  - set:
      field: event.ingested
      value: '{{_ingest.timestamp}}'
  - set:
      field: ecs.version
      value: '1.12.0'
  - rename:
      field: message
      target_field: event.original
  - set:
      field: observer.vendor
      value: QNAP
  - set:
      field: observer.product
      value: NAS
  - set:
      field: observer.type
      value: nas
  - grok:
      field: event.original
      patterns:
        - '^(%{ECS_SYSLOG_PRI})?%{SYSLOGTIMESTAMP:_tmp.timestamp} %{NAS} %{SYSLOGPROG}: %{LOG_TYPE:event.provider}: %{GREEDYDATA:message}'
      pattern_definitions:
        NAS: '(?:%{IP:host.ip}|%{HOSTNAME:host.name})'
        ECS_SYSLOG_PRI: '<%{NONNEGINT:log.syslog.priority:long}>'
        SYSLOGPROG: '%{PROG:process.name}(?:\[%{POSINT:process.pid:int}\])?'
        LOG_TYPE: '(event log|conn log)'
  - set:
      field: event.timezone
      value: "{{_tmp.tz_offset}}"
      if: ctx._tmp?.tz_offset != null && ctx._tmp?.tz_offset != 'local'
  - date:
      field: _tmp.timestamp
      target_field: '@timestamp'
      timezone: "{{ event.timezone }}"
      formats:
      - MMM  d HH:mm:ss
      - MMM dd HH:mm:ss
      if: ctx.event?.timezone != null   
  - date:
      field: _tmp.timestamp
      target_field: '@timestamp'
      formats:
      - MMM  d HH:mm:ss
      - MMM dd HH:mm:ss
      if: ctx.event?.timezone == null      
  - set:
      field: event.created
      copy_from: '@timestamp'
  - grok:
      field: event.original
      patterns:
        - '%{SHARED}, Application: %{DATA:qnap.nas.application}, Category: %{DATA:qnap.nas.category}, Content: %{GREEDYDATA:message}\.' 
        - '%{SHARED}, Connection type: %{DATA:qnap.nas.connection_type}, Accessed resources: %{DATA:qnap.nas.file.path}, Action: %{DATA:event.action}'     
      pattern_definitions:
        SHARED: 'Users: %{USER:user.name}, Source IP: (127.0.0.1|%{IP:source.address}), Computer name: (---|%{HOSTNAME:source.domain})'
  - convert:
      field: source.address
      target_field: source.ip
      type: ip
      ignore_missing: true
  # IP Geolocation Lookup
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  # IP Autonomous System (AS) Lookup
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
          - asn
          - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename: 
      field: qnap.nas.accessed_resources
      target_field: qnap.nas.file.path
      ignore_missing: true
  - grok:
      field: qnap.nas.file.path
      patterns:
        - '%{FILE_PATH:file.path} -> %{FILE_PATH:qnap.nas.file.new_path}'
        - '%{FILE_PATH:file.path}'
      pattern_definitions:
        FILE_PATH: '(\/([_%!$@:.,+~\-\s[:alnum:]])*)+'
      ignore_failure: true
      ignore_missing: true
  - grok:
      field: file.path
      patterns:
        - '\.%{DATA:file.extension}$'
      ignore_failure: true
      ignore_missing: true
  - lowercase:
      field: event.action
      ignore_missing: true
  - gsub:
      field: event.action
      pattern: \s
      replacement: '-'
      ignore_missing: true
  - gsub:
      field: event.provider
      pattern: \s
      replacement: '-'
      ignore_missing: true
  - append:
      if: ctx.source?.ip != null
      field: related.ip
      value: '{{source.ip}}'
      allow_duplicates: false
  - append:
      if: ctx.source?.domain != null
      field: related.hosts
      value: '{{source.domain}}'
      allow_duplicates: false    
  - append:
      if: ctx.user?.name != null
      field: related.user
      value: '{{user.name}}'
      allow_duplicates: false    
  - remove:
      field:
        - _tmp
      ignore_missing: true
  - script:
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
          map.values().removeIf(v -> v == null || v == "---");
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
        }
        handleMap(ctx);
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - set:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'
