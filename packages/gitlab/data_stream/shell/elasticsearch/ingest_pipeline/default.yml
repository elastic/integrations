---
description: Pipeline for processing auth logs
processors:
  - set:
      field: ecs.version
      value: 8.11.0
  - append:
      field: event.category
      value: web
  - append:
      field: event.type
      value: info
  - set:
      field: event.kind
      value: event
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      if: ctx.event?.original == null
      ignore_missing: true
  - json:
      field: event.original
      tag: 'json_decoding'
      target_field: json
  - date:
      field: json.time
      formats:
        - "ISO8601"
      target_field: "@timestamp"
      timezone: "UTC"
      tag: date_event_created_time_epoch
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - lowercase:
      field: json.level
  - set:
      field: event.level
      value: 0
      if: ctx.json?.level == 'emergency'
      tag: set_level_0
  - set:
      field: event.level
      value: 1
      if: ctx.json?.level == 'alert'
      tag: set_level_1
  - set:
      field: event.level
      value: 2
      if: ctx.json?.level == 'critical'
      tag: set_level_2
  - set:
      field: event.level
      value: 3
      if: ctx.json?.level == 'error'
      tag: set_level_3
  - set:
      field: event.level
      value: 4
      if: ctx.json?.level == 'warn'
      tag: set_level_4
  - set:
      field: event.level
      value: 5
      if: ctx.json?.level == 'notice'
      tag: set_level_5
  - set:
      field: event.level
      value: 6
      if: ctx.json?.level == 'info'
      tag: set_level_6
  - set:
      field: event.level
      value: 7
      if: ctx.json?.level == 'debug'
      tag: set_level_7
  - rename:
      field: json.duration_ms
      target_field: event.duration
      ignore_missing: true
  - rename:
      field: json.method
      target_field: http.request.method
      ignore_missing: true
  - rename:
      field: json.msg
      target_field: message
  - uri_parts:
      field: json.url
      keep_original: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
      ignore_missing: true
  - urldecode:
      field: json.url
      target_field: url.original
      ignore_missing: true
  - rename:
      field: json.command
      target_field: gitlab.shell.command
      ignore_missing: true
  - rename:
      field: json.git_protocol
      target_field: gitlab.shell.git_protocol
      ignore_missing: true
  - rename:
      field: json.gl_project_path
      target_field: gitlab.shell.project_path
      ignore_missing: true
  - rename:
      field: json.gl_repository
      target_field: gitlab.shell.repository
      ignore_missing: true
  - rename:
      field: json.user_id
      target_field: user.id
      ignore_missing: true
  - rename:
      field: json.username
      target_field: user.name
      ignore_missing: true
  - append:
      field: related.user
      value: '{{user.name}}'
      if: ctx.user?.name != null
      allow_duplicates: false
  - append:
      field: related.user
      value: '{{user.id}}'
      if: ctx.user?.id != null
      allow_duplicates: false
  - remove:
      field: json
      tag: remove_json
      ignore_missing: true
  - remove:
      field: event.original
      tag: remove_event_original
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: Drops null/empty values recursively.
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'




