---
description: Pipeline for processing audit logs
processors:
  - set:
      field: ecs.version
      value: 8.11.0
  - set:
      field: event.kind
      value: event
  - rename:
      field: message
      target_field: event.original
      tag: rename_message
      ignore_missing: true
      if: ctx.event?.original == null
  - remove:
      field: message
      ignore_missing: true
      tag: remove_message
      if: ctx.event?.original != null
  - drop: 
      if: ctx.event.original.startsWith('#')
      description: Drop if logline contains header(s), which startswith `#`.
  - json:
      field: event.original
      tag: 'json_decoding'
      target_field: gitlab.audit
  - date:
      field: gitlab.audit.time
      formats:
        - "ISO8601"
      target_field: "@timestamp"
      timezone: "UTC"
      tag: date_event_created_time_epoch
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
      if: ctx.gitlab?.audit?.time != null
  - remove:
      field: gitlab.audit.time
  - set:
      field: event.severity
      value: 0
      if: ctx.gitlab?.audit?.severity == 'DEBUG'
      tag: set_severity_0
  - set:
      field: event.severity
      value: 1
      if: ctx.gitlab?.audit?.severity == 'INFO'
      tag: set_severity_1
  - set:
      field: event.severity
      value: 2
      if: ctx.gitlab?.audit?.severity == 'WARN'
      tag: set_severity_2
  - set:
      field: event.severity
      value: 3
      if: ctx.gitlab?.audit?.severity == 'ERROR'
      tag: set_severity_3
  - set:
      field: event.severity
      value: 4
      if: ctx.gitlab?.audit?.severity == 'FATAL'
      tag: set_severity_4
  - set:
      field: event.severity
      value: 5
      if: ctx.gitlab?.audit?.severity == 'UNKNOWN'
      tag: set_severity_5
  - remove:
      field: gitlab.audit.severity
      ignore_missing: true
  - rename:
      field: gitlab.audit.correlation_id
      target_field: event.id
      ignore_missing: true
  - dot_expander:
      path: gitlab.audit
      field: "*"
  - convert:
      field: gitlab.audit.meta.remote_ip
      type: ip
      ignore_missing: true
      on_failure:
          - remove:
              field: gitlab.audit.meta.remote_ip
              ignore_missing: true
          - append:
              field: error.message
              value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: gitlab.audit.meta.remote_ip
      target_field: client.ip
      ignore_missing: true
  - geoip:
      field: client.ip
      tag: geoip_client_address
      target_field: client.geo
      ignore_missing: true
  - geoip:
      ignore_missing: true
      database_file: GeoLite2-ASN.mmdb
      field: client.ip
      tag: geoip_client_asn
      target_field: client.as
      properties:
      - asn
      - organization_name
  - rename:
      field: client.as.asn
      tag: rename_client_as_asn
      target_field: client.as.number
      ignore_missing: true
  - rename:
      field: client.as.organization_name
      tag: rename_client_as_organization_name
      target_field: client.as.organization.name
      ignore_missing: true
  - set:
      field: client.address
      copy_from: client.ip
      if: ctx.client?.ip != null
  - set:
      field: source
      copy_from: client
      if: ctx.client?.ip != null
  - append:
      field: related.ip
      value: '{{client.ip}}'
      if: ctx.client?.ip != null
      allow_duplicates: false
  - convert:
      field: gitlab.audit.author_id
      type: string
      ignore_missing: true
  - rename:
      field: gitlab.audit.author_id
      target_field: user.id
  - rename:
      field: gitlab.audit.author_name
      target_field: user.name
  - date:
      field: gitlab.audit.created_at
      formats:
        - "ISO8601"
      target_field: "@timestamp"
      timezone: "UTC"
      tag: date_event_created_time_epoch
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
      if: ctx.gitlab?.audit?.created_at != null
  - append:
      field: related.user
      value: '{{user.id}}'
      if: ctx.user?.id != null
      allow_duplicates: false
  - append:
      field: related.user
      value: '{{user.name}}'
      if: ctx.user?.name != null
      allow_duplicates: false
  - append:
      field: related.user
      value: '{{gitlab.audit.target_id}}'
      if: ctx.gitlab?.audit?.target_id != null && ctx.gitlab.audit.target_type == "User"
      allow_duplicates: false
  - append:
      field: related.user
      value: '{{gitlab.audit.target_details}}'
      if: ctx.gitlab?.audit?.target_details != null && ctx.gitlab.audit.target_type == "User"
      allow_duplicates: false
  - append:
      field: related.user
      value: '{{gitlab.audit.entity_id}}'
      if: ctx.gitlab?.auadit?.entity_id != null && ctx.gitlab.audit.entity_type == "User"
      allow_duplicates: false
  - append:
      field: event.category
      value: web
      allow_duplicates: false
  - append:
      field: event.type
      value: info
      allow_duplicates: false
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: Drops null/empty values recursively.
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
