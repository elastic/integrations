---
description: Pipeline for processing auth logs
processors:
  - set:
      field: ecs.version
      value: 8.11.0
  - append:
      field: event.category
      value: web
  - append:
      field: event.type
      value: info
  - set:
      field: event.kind
      value: event
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      if: ctx.event?.original == null
      ignore_missing: true
  - json:
      field: event.original
      tag: 'json_decoding'
      target_field: json
  - date:
      field: json.time
      formats:
        - "ISO8601"
      target_field: "@timestamp"
      timezone: "UTC"
      tag: date_event_created_time_epoch
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - lowercase:
      field: json.severity
  - set:
      field: event.severity
      value: 0
      if: ctx.json?.severity == 'emergency'
      tag: set_severity_0
  - set:
      field: event.severity
      value: 1
      if: ctx.json?.severity == 'alert'
      tag: set_severity_1
  - set:
      field: event.severity
      value: 2
      if: ctx.json?.severity == 'critical'
      tag: set_severity_2
  - set:
      field: event.severity
      value: 3
      if: ctx.json?.severity == 'error'
      tag: set_severity_3
  - set:
      field: event.severity
      value: 4
      if: ctx.json?.severity == 'warn'
      tag: set_severity_4
  - set:
      field: event.severity
      value: 5
      if: ctx.json?.severity == 'notice'
      tag: set_severity_5
  - set:
      field: event.severity
      value: 6
      if: ctx.json?.severity == 'info'
      tag: set_severity_6
  - set:
      field: event.severity
      value: 7
      if: ctx.json?.severity == 'debug'
      tag: set_severity_7
  - dot_expander:
      field: "*"
      path: json
  - rename:
      field: json.correlation_id
      target_field: event.id
      ignore_missing: true
  - rename: 
      field: json.meta.caller_id
      target_field: gitlab.meta.caller_id
      ignore_missing: true
  - rename: 
      field: json.meta.remote_ip
      target_field: gitlab.meta.remote_ip
      ignore_missing: true
  - rename: 
      field: json.meta.feature_category
      target_field: gitlab.meta.feature_category
      ignore_missing: true
  - rename: 
      field: json.meta.user
      target_field: gitlab.meta.user.name
      ignore_missing: true
  - rename: 
      field: json.meta.user_id
      target_field: gitlab.meta.user.id
      ignore_missing: true
  - rename: 
      field: json.meta.project
      target_field: gitlab.meta.project
      ignore_missing: true
  - rename: 
      field: json.meta.root_namespace
      target_field: gitlab.meta.root_namespace
      ignore_missing: true
  - rename: 
      field: json.meta.client_id
      target_field: gitlab.meta.client_id
      ignore_missing: true
  - rename:
      field: json.meta.root_caller_id
      target_field: gitlab.meta.root_caller_id
      ignore_missing: true
  - rename: 
      field: json.message
      target_field: message
  - rename:
      field: json.relation_key
      target_field: gitlab.importer.relation_key
  - rename:
      field: json.relation_index
      target_field: gitlab.importer.relation_index
  - rename:
      field: json.relation_class
      target_field: gitlab.importer.relation_class
  - rename: 
      field: json.error_messages
      target_field: gitlab.importer.error_messages
  - rename:
      field: json.feature_category
      target_field: gitlab.importer.feature_category
  - append:
      field: related.ip
      value: '{{gitlab.meta.remote_ip}}'
      if: ctx.destination?.ip != null
      allow_duplicates: false
  - append:
      field: related.user
      value: '{{gitlab.meta.user.name}}'
      if: ctx.gitlab?.meta?.user?.name != null
      allow_duplicates: false
  - append:
      field: related.user
      value: '{{gitlab.meta.user.id}}'
      if: ctx.gitlab?.meta?.user?.id != null
      allow_duplicates: false
  - remove:
      field: json
      tag: remove_json
      ignore_missing: true
  - remove:
      field: event.original
      tag: remove_event_original
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: Drops null/empty values recursively.
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'




