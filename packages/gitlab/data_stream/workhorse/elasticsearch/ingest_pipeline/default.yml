---
description: Pipeline for processing auth logs
processors:
  - set:
      field: ecs.version
      value: 8.11.0
  - append:
      field: event.category
      value: web
  - set:
      field: event.kind
      value: event
  - drop:
      description: Drop events that are not json as the event is duplicated to json
      if: ctx.message.charAt(0) != (char)("{")
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      if: ctx.event?.original == null
      ignore_missing: true
  - json:
      field: event.original
      tag: 'json_decoding'
      target_field: json
  - date:
      field: json.time
      formats:
        - "ISO8601"
      target_field: "@timestamp"
      timezone: "UTC"
      tag: date_event_created_time_epoch
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - lowercase:
      field: json.level
      ignore_missing: true
  - set:
      field: event.level
      value: 0
      if: ctx.json?.level == 'emergency'
      tag: set_level_0
  - set:
      field: event.level
      value: 1
      if: ctx.json?.level == 'alert'
      tag: set_level_1
  - set:
      field: event.level
      value: 2
      if: ctx.json?.level == 'critical'
      tag: set_level_2
  - set:
      field: event.level
      value: 3
      if: ctx.json?.level == 'error'
      tag: set_level_3
  - set:
      field: event.level
      value: 4
      if: ctx.json?.level == 'warn'
      tag: set_level_4
  - set:
      field: event.level
      value: 5
      if: ctx.json?.level == 'notice'
      tag: set_level_5
  - set:
      field: event.level
      value: 6
      if: ctx.json?.level == 'info'
      tag: set_level_6
  - set:
      field: event.level
      value: 7
      if: ctx.json?.level == 'debug'
      tag: set_level_7
  - rename:
      field: json.content_type
      target_field: gitlab.workhorse.content_type
      ignore_missing: true
  - rename: 
      field: json.duration_ms
      target_field: event.duration
      ignore_missing: true
  - rename: 
      field: json.host
      target_field: server.address
      ignore_missing: true
  - rename: 
      field: json.method
      target_field: http.request.method
      ignore_missing: true
  - rename: 
      field: json.msg
      target_field: message
      ignore_missing: true
  - script:
      lang: painless
      description: Grabs the HTTP version from json.proto field
      if: 'ctx.json?.proto != null'
      source: |
        String[] httpVersionSplit = ctx.json.proto.splitOnToken('/');
        ctx.json.proto = httpVersionSplit[1];
  - rename: 
      field: json.proto
      target_field: http.version
      ignore_missing: true
  - rename: 
      field: json.referrer
      target_field: http.request.referrer
      ignore_missing: true
  - rename: 
      field: json.remote_addr
      target_field: client.address
      ignore_missing: true
  - rename: 
      field: json.remote_ip
      target_field: client.ip
      ignore_missing: true
  - geoip:
      field: client.ip
      target_field: client.geo
      if: 'ctx.client?.ip != null'
  - set:
      field: source
      copy_from: client
      if: 'ctx.client?.ip !=null'
  - rename:
      field: json.route
      target_field: gitlab.workhorse.route
      ignore_missing: true
  - rename:
      field: json.status
      target_field: http.response.status_code
      ignore_missing: true
  - rename:
      field: json.system
      target_field: gitlab.workhorse.system
      ignore_missing: true
  - rename:
      field: json.ttfb_ms
      target_field: gitlab.workhorse.ttfb_ms
      ignore_missing: true
  - rename:
      field: json.encoding
      target_field: gitlab.workhorse.encoding
      ignore_missing: true
  - script:
      lang: painless
      if: 'ctx.json?.uri != null'
      description: This script builds the `url.full` field out of the available `url.*` parts.
      source: |
        def full = "";
        full += "http://";
        if(ctx.json?.host != null && ctx.json?.host != "") {
            full += ctx.json.host;
        }
        full += ctx.json.uri;
        ctx.json.uri = full
  - uri_parts:
      field: json.uri
      target_field: url
      keep_original: false
      ignore_missing: true
  - remove:
      field: url.scheme
      description: "Need to remove the scheme as log does not provide it so its unknown"
      ignore_missing: true
  - rename:
      field: json.uri
      target_field: url.full
      ignore_missing: true
  - user_agent:
      field: json.user_agent
      ignore_missing: true
  - rename:
      field: json.written_bytes
      target_field: http.request.bytes
      ignore_missing: true
  - rename:
      field: json.error
      target_field: gitlab.workhorse.error_message
      ignore_missing: true
  - append:
      field: event.type
      value: info
      if: 'ctx.gitlab?.workhorse?.error_message == null'
  - append:
      field: event.type
      value: error
      if: 'ctx.gitlab?.workhorse?.error_message != null'
  - remove:
      field: json
      tag: remove_json
      ignore_missing: true
  - remove:
      field: event.original
      tag: remove_event_original
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: Drops null/empty values recursively.
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
