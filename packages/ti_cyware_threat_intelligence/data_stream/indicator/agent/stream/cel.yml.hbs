config_version: 2
interval: {{interval}}
resource.tracer:
  enabled: {{enable_request_tracer}}
  filename: "../../logs/cel/http-request-trace-*.ndjson"
  maxbackups: 5
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  access_id: {{access_id}}
  secret_key: {{secret_key}}
  page_size: {{batch_size}}
  initial_interval: {{initial_interval}}
redact:
  fields:
    - access_id
    - secret_key
program: |-
  (
    state.?want_more.orValue(false) ?
      state.with(
        {
          "expires": int(now() + duration("28s")),
        }
      )
    :
      state.with(
        {
          "expires": int(now() + duration("28s")),
          "from_time": state.?cursor.modified_timestamp.orValue(int(now - duration(state.initial_interval))),
        }
      )
  ).as(state,
    request(
      "GET",
      state.url.trim_right("/") + "/ingestion/rules/save_result_set/?" + {
        "page_size": [string(state.page_size)],
        "page": [string(state.?page_number.orValue(1))],
        "version": ["v3"],
        "from_timestamp": [string(state.from_time)],
        "AccessID": [state.access_id],
        "Expires": [string(state.expires)],
        "Signature": [(
          [
            state.access_id,
            string(state.expires)
          ].join("\n")
          .hmac("sha1", bytes(state.secret_key))
          .base64())],
      }.format_query()
    ).do_request().as(resp, resp.StatusCode == 200 ?
      resp.Body.decode_json().as(body, {
        "events": body.results.map(r, 
          r.data.map(result, {
            "message": result.encode_json()
          })
        ).flatten(),
        "want_more": has(body.next) && body.next != null,
        "page_number": has(body.next) && body.next != null ? int(state.?page_number.orValue(1)) + 1 : 1,
        "access_id": state.access_id,
        "page_size": state.page_size,
        "secret_key": state.secret_key,
        "from_time": string(state.from_time),
        "cursor": {
          ?"modified_timestamp": body.results.size() > 0 ?
            optional.of(body.results.map(e, e.ctix_modified).max().as(last,
              has(state.?cursor.modified_timestamp) && last < state.cursor.modified_timestamp ?
                state.cursor.modified_timestamp
              :
                last
            ))
          :
            state.?cursor.modified_timestamp,
        },
      })
    :
      {
        "events": {
          "error": {
            "code": string(resp.StatusCode),
            "id": string(resp.Status),
            "message": "GET:" + state.url.trim_right("/") + "/ingestion/rules/save_result_set/? " + 
            (
            size(resp.Body) != 0 ?
                string(resp.Body)
            :
                string(resp.Status) + " (" + string(resp.StatusCode) + ")"
            ),
          },
        },
        "want_more": false,
      }
    )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
