---
description: Pipeline for processing HPE Aruba logs.

processors:
    - set:
        field: event.original
        copy_from: message
    - remove:
        field: message
        ignore_missing: true
    - set:
        field: ecs.version
        value: '8.11.0'
    - set:
        field: event.category
        value: [ network ]
  #
  # Parse the syslog message
  # This grok pattern is based on the syslog message format used by HPE Aruba CX switches.
  #
    - grok:
        field: event.original
        tag: grok_event_original
        if: ctx.event?.original != null
        patterns:
            - "%{SYSLOG_HEADER}%{GREEDYDATA:message}"
        pattern_definitions:
            SYSLOG_HEADER: "%{TIMESTAMP_ISO8601:@timestamp}\\s+%{USER:aruba.hardware.device}\\s+%{DATA:log.syslog.appname}\\[%{POSINT:log.syslog.procid}\\]:\\s+%{WORD:aruba.event_type}\\|(?:%{OPTIONAL_HEADER})?"
            OPTIONAL_HEADER: "%{POSINT:event.code}\\|%{USER:log.level}\\|(?:%{USER:aruba.component.category})?\\|(?:%{DATA:aruba.sequence})?\\|"
    - grok:
        field: aruba.sequence
        if: ctx.aruba?.sequence != null && ctx.aruba.sequence.contains("/")
        tag: parse_sequence
        patterns:
            - "%{POSINT:event.sequence:long}\\/%{POSINT}"
    - lowercase:
        field: event.kind
        tag: lowercase_event_kind
        ignore_missing: true
    
    # ECMP Events
    - grok:
        field: message
        tag: ecmp_event_1801
        description: "logs errors while creating ecmp group."
        if: "ctx.event?.code == '1801'"
        patterns:
            - "Failed to update ecmp object for route %{DATA:aruba.ecmp.route}, error: %{DATA:aruba.ecmp.err}$"
    - grok:
        field: message
        tag: ecmp_event_1802
        description: "logs while creating ecmp group."
        if: "ctx.event?.code == '1802'"
        patterns:
            - "Update ecmp object for route %{DATA:aruba.ecmp.route}$"
    - grok:
        field: message
        tag: ecmp_event_1803
        description: "logs errors while deleting ecmp group."
        if: "ctx.event?.code == '1803'"
        patterns:
            - "Failed to delete ecmp egress object %{DATA:aruba.ecmp.egressid}, error: %{DATA:aruba.ecmp.err}$"
    - dissect:
        field: message
        tag: ecmp_event_1804
        description: "logs while deleting ecmp group."
        if: "ctx.event?.code == '1804'"
        pattern: "Delete ecmp egress object %{aruba.ecmp.egressid}"
    - grok:
        field: message
        tag: ecmp_event_1805
        description: "logs for ECMP setup errors."
        if: "ctx.event?.code == '1805'"
        patterns:
            - "ECMP error: %{DATA:aruba.ecmp.err}$"

    # ERPS Events
    - dissect:
        field: message
        tag: erps_event_8501
        description: "Log event when RAPS messages are not received for a certain time interval"
        if: "ctx.event?.code == '8501'"
        pattern: "Expected R-APS packets not received on %{observer.ingress.interface.id} in ring %{aruba.erps.ring_id} with control VLAN %{network.vlan.id}"
    - dissect:
        field: message
        tag: erps_event_8502
        description: "Log event when a ring misconfiguration happens"
        if: "ctx.event?.code == '8502'"
        pattern: "Misconfiguration detected on ring %{aruba.erps.ring_id} with control VLAN %{network.vlan.id}. Another node in the ring with mac %{client.mac} is also operating as an RPL owner"
    - dissect:
        field: message
        tag: erps_event_8503
        description: "Log state transition of ring instance"
        if: "ctx.event?.code == '8503'"
        pattern: "Operational state of the ring %{aruba.erps.ring_id}, instance %{aruba.instance.id} changed to %{aruba.status}"
    - dissect:
        field: message
        tag: erps_event_8504
        description: "Log event when ring is configured with a non-L2 port"
        if: "ctx.event?.code == '8504'"
        pattern: "%{observer.ingress.interface.name} is not an L2 port"
    - dissect:
        field: message
        tag: erps_event_8505
        description: "Log event when an interface which is already associated to a ring port is getting mapped to other ring port as well"
        if: "ctx.event?.code == '8505'"
        pattern: "%{observer.ingress.interface.name} is already associated with %{aruba.erps.port_name} of ERPS ring %{aruba.erps.ring_id}"
    - dissect:
        field: message
        tag: erps_event_8506
        description: "Log event when control-channel VLAN is part of the protected-vlans"
        if: "ctx.event?.code == '8506'"
        pattern: "Configured control-channel VLAN %{network.vlan.id} is already protected by ERPS ring %{aruba.erps.ring_id}, instance %{aruba.instance.id}"
    - dissect:
        field: message
        tag: erps_event_8507
        description: "Log event when control-channel VLAN overlaps with another control-channel of same ring"
        if: "ctx.event?.code == '8507'"
        pattern: "VLAN %{network.vlan.id} is already configured as control-channel for instance %{aruba.instance.id} of ring %{aruba.erps.ring_id}"
    - dissect:
        field: message
        tag: erps_event_8508
        description: "Log event when protected-vlan(s) overlap"
        if: "ctx.event?.code == '8508'"
        pattern: "Vlan %{network.vlan.id} is already part of the protected VLAN set of ring %{aruba.erps.ring_id} instance %{aruba.instance.id}"
    - dissect:
        field: message
        tag: erps_event_8510
        description: "Log event when parent-ring id is configured to be the same as sub-ring"
        if: "ctx.event?.code == '8510'"
        pattern: "Parent-ring %{aruba.erps.ring_id} is same as sub-ring"
    - dissect:
        field: message
        tag: erps_event_8511
        description: "Log event when VLAN from the protected-vlans list is already configured as control-channel VLAN"
        if: "ctx.event?.code == '8511'"
        pattern: "VLAN %{network.vlan.id} in the protected VLANs list is also configured as the control-channel"
    - dissect:
        field: message
        tag: erps_event_8512
        description: "Log event if the same ring port is configured as RPL port for more than one instance"
        if: "ctx.event?.code == '8512'"
        pattern: "%{aruba.erps.port_name} is already configured as RPL port for instance %{aruba.instance.id}"
    - dissect:
        field: message
        tag: erps_event_8513
        description: "Log event if ring port which is also an ISL is being configured as RPL"
        if: "ctx.event?.code == '8513'"
        pattern: "RPL configuration is not allowed on ISL port %{observer.ingress.interface.name}"
    - dissect:
        field: message
        tag: erps_event_8515
        description: "Log transition of state of ring instance to initializing and the reason for it"
        if: "ctx.event?.code == '8515'"
        pattern: "Operational state of the ring %{aruba.erps.ring_id}, instance %{aruba.instance.id} changed to Initializing with reason %{event.reason}"

    # DCBX Events
    - grok:
        field: message
        tag: dcbx_event_9203_9204
        if: "['9203', '9204'].contains(ctx.event?.code)"
        patterns:
            - "DCBX is (dis|en)abled on interface %{DATA:aruba.dcbx.intf_name}$"
    - grok:
        field: message
        tag: dcbx_event_9205_9206
        if: "['9205', '9206'].contains(ctx.event?.code)"
        patterns:
            - "DCBX status (in)?active on interface %{DATA:aruba.dcbx.intf_name}$"
    - grok:
        field: message
        tag: dcbx_event_9207_9208
        if: "['9207', '9208'].contains(ctx.event?.code)"
        patterns:
            - "PFC TLV status (in)?active on interface %{DATA:aruba.dcbx.intf_name}$"
    - grok:
        field: message
        tag: dcbx_event
        if: "['9209'].contains(ctx.event?.code)"
        patterns:
            - "PFC TLV status priority mismatch on interface %{DATA:aruba.dcbx.intf_name}$"

    # DPSE Events
    - dissect:
        field: message
        tag: dpse_event_10901
        description: "A line card hit a backplane sequence error that triggered a recovery operation"
        if: "ctx.event?.code == '10901'"
        pattern: "Line card module %{aruba.dpse.linecard_name} triggered backplane sequence recovery"
    - dissect:
        field: message
        tag: dpse_event_10904
        description: "The system completed backplane sequence recovery triggered by line card error"
        if: "ctx.event?.code == '10904'"
        pattern: "Line card module %{aruba.dpse.linecard_name} completed backplane sequence recovery"
    
    # CFM Events
    - dissect:
        field: message
        tag: cfm_event_11601
        if: "ctx.event?.code == '11601'"
        pattern: "Connection lost for Maintenance Endpoint %{aruba.cfm.id} on %{aruba.cfm.interface}."
    - dissect:
        field: message
        tag: cfm_event_11602
        if: "ctx.event?.code == '11602'"
        pattern: "Connection restored for Maintenance Endpoint %{aruba.cfm.id} on %{aruba.cfm.interface}."
    
    # Container Manager Events
    - dissect:
        field: message
        tag: container_manager_11801_11802_11803
        if: "['11801', '11802', '11803'].contains(ctx.event?.code)"
        pattern: "Container %{container.name} is %{?ignore_action}"

    # DNS Client Events
    - grok:
        field: message
        tag: dns_client_event_11901
        description: "Event reported when DNS event triggered"
        if: "['11901'].contains(ctx.event?.code)"
        patterns:
            - "%{DATA:aruba.dns.type} event for VRF %{DATA:aruba.dns.vrf_name}$"

on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
