---
description: Pipeline for processing HPE Aruba logs.

processors:
    - set:
        field: event.original
        copy_from: message
    - remove:
        field: message
        ignore_missing: true
    - redact:
        field: "event.original"
        tag: redact_passkey
        description: "Reacting passkey updates"
        prefix: 'passkey update:   -> '
        patterns:
            - "passkey %{GREEDYDATA:reacted}"
    - set:
        field: ecs.version
        value: '8.11.0'
    - set:
        field: event.category
        value: [ network ]
  #
  # Parse the syslog message
  # This grok pattern is based on the syslog message format used by HPE Aruba CX switches.
  #
    - grok:
        field: event.original
        tag: grok_event_original
        if: ctx.event?.original != null
        patterns:
            - "%{SYSLOG_HEADER}%{GREEDYDATA:message}"
        pattern_definitions:
            SYSLOG_HEADER: "%{TIMESTAMP_ISO8601:@timestamp}\\s+%{USER:aruba.hardware.device}\\s+%{DATA:log.syslog.appname}\\[%{POSINT:log.syslog.procid}\\]:\\s+%{WORD:aruba.event_type}\\|(?:%{OPTIONAL_HEADER})?"
            OPTIONAL_HEADER: "%{POSINT:event.code}\\|%{USER:log.level}\\|(?:%{USER:aruba.component.category})?\\|(?:%{DATA:aruba.sequence})?\\|"
    - grok:
        field: aruba.sequence
        if: ctx.aruba?.sequence != null && ctx.aruba.sequence.contains("/")
        tag: parse_sequence
        patterns:
            - "%{POSINT:event.sequence:long}\\/%{POSINT}"
    - lowercase:
        field: event.kind
        tag: lowercase_event_kind
        ignore_missing: true

# AAA events
    - grok:
        if: "ctx.event.code == '2301'"
        tag: parse_2301
        field: "message"
        description: "Logs AAA Authentication/Authorization/Accounting/fail-through"
        patterns:
            - "AAA %{DATA:aruba.aaa.config_type} update\\s?:\\s?%{GREEDYDATA:aruba.aaa.config_event}"
    - grok:
        if: "ctx.event.code == '2302'"
        tag: parse_2302
        field: "message"
        description: "Logs TACACS+ server update, server group update and global default update"
        patterns:
            - "TACACS %{GREEDYDATA:aruba.aaa.tacacs_type} %{DATA:aruba.aaa.tacacs_action}:\\s?%{GREEDYDATA:aruba.aaa.tacacs_event}"
    - grok:
        if: "ctx.event.code == '2303'"
        tag: parse_2303
        field: "message"
        description: "Logs RADIUS server update, server group update and global default update"
        patterns:
            - "RADIUS %{GREEDYDATA:aruba.aaa.radius_type} %{DATA:aruba.aaa.radius_action}:\\s?%{GREEDYDATA:aruba.aaa.radius_event}"
    - dissect:
        if: "ctx.event.code == '2304'"
        tag: parse_2304
        field: "message"
        description: "Logs changes in RADIUS server reachability status"
        pattern: 'RADIUS Server with Address: %{server.address}, Authport:%{aruba.port}, VRF_ID:%{aruba.vrf.id} is "%{aruba.status}"'
    - dissect:
        if: "ctx.event.code == '2305'"
        tag: parse_2305
        field: "message"
        description: "Logs changes in TACACS server reachability status"
        pattern: 'TACACS server host %{server.address} port %{aruba.port} vrf %{aruba.vrf.id} %{aruba.status}'

# BGP events
    - dissect:
        if: "ctx.event.code == '2901'"
        tag: parse_2901
        field: "message"
        description: "Logs the changes in BGP connection state."
        pattern: '%{destination.address}: Peer up. vrf-name: %{aruba.vrf.name}'
    - dissect:
        if: "ctx.event.code == '2902'"
        tag: parse_2902
        field: "message"
        description: "Logs the failure in BGP connection state changes."
        pattern: '%{destination.address}: Peer down. error-code: %{error.code}, error-sub-code: %{aruba.bgp.error-subcode}. vrf-name: %{aruba.vrf.name}'
    - grok:
        if: "['2903', '2904'].contains(ctx.event?.code)"
        tag: parse_2903_2904
        field: "message"
        description: "Trap when the number of received prefix reached the [threshold|maximum prefix] value."
        patterns:
            - "%{IPORHOST:destination.address}: Peer has received prefix equal to (Maximum Prefix|Threshold) value configured. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
    - grok:
        if: "['2905', '2906'].contains(ctx.event?.code)"
        tag: parse_2905_2906
        field: "message"
        description: "Logs BGP enable event | Logs BGP disable event"
        patterns: 
            - "BGP AS %{NUMBER:aruba.bgp.as_number:long} %{WORD}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
    - dissect:
        if: "ctx.event.code == '2907'"
        tag: parse_2907
        field: "message"
        description: "Logs BGP router-id change."
        pattern: 'BGP router-id changed. vrf-name: %{aruba.vrf.name}'
    - grok:
        if: "ctx.event.code == '2908'"
        tag: parse_2908
        field: "message"
        description: "Logs creation of BGP peer."
        patterns: 
            - "%{IPORHOST:destination.address}: Peer configured, AS %{NUMBER:destination.as.number:long}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
    - dissect:
        if: "ctx.event.code == '2909'"
        tag: parse_2909
        field: "message"
        description: "Logs BGP peer session reset event."
        pattern: '%{destination.address}: User reset request. vrf-name: %{aruba.vrf.name}'
    - dissect:
        if: "ctx.event.code == '2910'"
        tag: parse_2910
        field: "message"
        description: "Logs BGP peer password change event."
        pattern: '%{destination.address}: Peer password changed. vrf-name: %{aruba.vrf.name}'
    - dissect:
        if: "ctx.event.code == '2911'"
        tag: parse_2911
        field: "message"
        description: "Logs deletion of BGP peer."
        pattern: '%{destination.address}: Peer deleted. vrf-name: %{aruba.vrf.name}'
    - grok:
        if: "['2912', '2913'].contains(ctx.event?.code)"
        tag: parse_2912_2913
        field: "message"
        description: "Logs BGP peer admin enable/disable event."
        patterns: 
            - "%{IPORHOST:destination.address}: Peer admin (dis|en)abled. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
    - grok:
        if: "ctx.event.code == '2914'"
        tag: parse_2914
        field: "message"
        description: "Logs BGP peer remote-as change event."
        patterns: 
            - "%{IPORHOST:destination.address}: Peer remote-as changed to %{NUMBER:destination.as.number:long}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
    - grok:
        if: "ctx.event.code == '2915'"
        tag: parse_2915
        field: "message"
        description: "BGP peer local-as change event."
        patterns: 
            - "%{IPORHOST:destination.address}: Peer local-as changed to %{NUMBER:client.as.number:long}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
    - grok:
        if: "ctx.event.code == '2916'"
        tag: parse_2916
        field: "message"
        description: "Logs peer source address change event."
        patterns: 
            - "%{IPORHOST:destination.address}: Peer source-address changed to %{IP:source.ip}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"
    - dissect:
        if: "ctx.event.code == '2917'"
        tag: parse_2917
        field: "message"
        description: "Logs configuration of peer remove-private-as."
        pattern: '%{destination.address}: Peer remove-private-as configuration changed. vrf-name: %{aruba.vrf.name}'
    - dissect:
        if: "ctx.event.code == '2918'"
        tag: parse_2918
        field: "message"
        description: "Logs peer identifier has been matched with local identifier."
        pattern: '%{aruba.bgp.id}: BGP identifier sent by Peer %{destination.address} matches ours. BGP session may not established. vrf-name: %{aruba.vrf.name}'
    - grok:
        if: "ctx.event.code == '2919'"
        tag: parse_2919
        field: "message"
        description: "Trap when the rib size reaches the threshold value."
        patterns: 
            - "The BGP RIB has reached the threshold limit of %{DATA:aruba.bgp.threshold_limit:long} for VRF %{DATA:aruba.vrf.name}': yes"
    - grok:
        if: "ctx.event.code == '2920'"
        tag: parse_2920
        field: "message"
        description: "BGP peer local-as change event."
        patterns: 
            - "%{DATA:aruba.bgp.pg_name}: Peer-group configured with remote-as %{NUMBER:destination.as.number:long}. vrf-name: %{GREEDYDATA:aruba.vrf.name}"

# Config Management events
    - dissect:
        if: "ctx.event.code == '6801'"
        tag: parse_6801
        field: "message"
        description: "Logs a message when configs copying from one format to another"
        pattern: 'Copying configs from: %{aruba.config.from} to: %{aruba.config.to}'
    - dissect:
        if: "['6802', '6804'].contains(ctx.event?.code)"
        tag: parse_6802_6804
        field: "message"
        description: "Logs a message when copying config has some error | Logs a message when copying config to shadowdb has some error"
        pattern: 'Error while copying configs. Error: %{event.reason}'
    - dissect:
        if: "ctx.event.code == '6803'"
        tag: parse_6803
        field: "message"
        description: "Logs a message when config validation prunes tables/columns in startup-config or when errors are encountered"
        pattern: '%{aruba.config.type}:%{aruba.config.value}'
    - dissect:
        if: "ctx.event.code == '6805'"
        tag: parse_6805
        field: "message"
        description: "Logs a message when copying config has some information"
        pattern: 'Information while copying configs. Info: %{event.reason}'

# BFD events
    - grok:
        if: "['7305', '7306'].contains(ctx.event?.code)"
        tag: parse_7305_7306
        field: "message"
        description: "Event raised when BFD echo is enabled/disable on an interface"
        patterns:
            - "BFD echo was (en|dis)abled on interface %{GREEDYDATA:aruba.interface.id}"
    - grok:
        if: "['7307', '7308', '7309', '7315'].contains(ctx.event?.code)"
        tag: parse_7307_7308_7309_7315
        field: "message"
        description: "Event raised when BFD echo is enabled/disable on an interface | administratively down | becomes unidirectional"
        patterns:
            - "BFD session is (up|down|administratively down|unidirectional). session_id=%{DATA:aruba.instance.id}, vrf=%{DATA:aruba.vrf.name}, op_mode=%{DATA:aruba.bfd.op_mode}, src_port=%{DATA:aruba.port}, dest_ip=%{IP:destination.ip}, local_state=%{DATA:aruba.bfd.local_state}, local_diag=%{DATA:aruba.bfd.local_diag}, remote_state=%{DATA:aruba.bfd.remote_state}, remote_diag=%{GREEDYDATA:aruba.bfd.remote_diag}"
    - grok:
        if: "['7311', '7312'].contains(ctx.event?.code)"
        tag: parse_7311_7312
        field: "message"
        description: "Port can[not] forward BFD traffic"
        patterns:
            - "Port %{DATA:aruba.port} (can|can not) forward BFD traffic"
    - dissect:
        if: "ctx.event.code == '7314'"
        tag: parse_7314
        field: "message"
        description: "Event raised when an Echo session is created without a valid echo_source IP address configured"
        pattern: 'The echo function for the BFD session %{aruba.instance.id} will not become active until a global echo source IP address is configured'
    - dissect:
        if: "ctx.event.code == '7316'"
        tag: parse_7316
        field: "message"
        description: "Event raised when BFD echo is enabled on a Tunnel interface"
        pattern: 'BFD echo cannot be enabled on tunnels. interface=%{aruba.interface.id}'
    - grok:
        if: "ctx.event.code == '7318'"
        tag: parse_7318
        field: "message"
        description: "Event raised when SRC or DST IP Version doesn't match the session's IP Version"
        patterns:
            - "IP Version mismatch for BFD. session_id=%{DATA:aruba.instance.id}, vrf=%{DATA:aruba.vrf.name}, op_mode=%{DATA:aruba.bfd.op_mode}, src_port=%{DATA:aruba.port}, dest_ip=%{IP:destination.ip}, local_state=%{DATA:aruba.bfd.local_state}, local_diag=%{DATA:aruba.bfd.local_diag}, remote_state=%{DATA:aruba.bfd.remote_state}, remote_diag=%{GREEDYDATA:aruba.bfd.remote_diag}, from=%{DATA:aruba.bfd.from}, ip_version=%{DATA:aruba.bfd.ip_version}, Invalid IP address: %{IPORHOST:aruba.bfd.invalid_ip}"
    - dissect:
        if: "ctx.event.code == '7319'"
        tag: parse_7319
        field: "message"
        description: "Event raised when a BFD single-hop session source port is a loopback"
        pattern: 'BFD single-hop is not supported on interface %{aruba.interface.id}'
    - dissect:
        if: "ctx.event.code == '7320'"
        tag: parse_7320
        field: "message"
        description: "Event raised when a BFD session specifies an interval for a protocol that does not support override"
        pattern: 'BFD session interval override not supported for protocol %{aruba.bfd.from}'
    - grok:
        if: "ctx.event.code == '7321'"
        tag: parse_7321
        field: "message"
        description: "Event raised when a BFD session specifies an interval outside the specified bounds"
        patterns:
            - "BFD session %{DATA:network.direction} interval override of %{NUMBER:aruba.bfd.requested_interval:long} ms is out of bounds for protocol %{DATA:aruba.bfd.from}, using %{NUMBER:aruba.bfd.applied_interval:long} ms instead"
# # Certificate management events
#     - grok:
#         if: "ctx.event.code == '7701'"
#         tag: parse_7701
#         field: "message"
#         description: "Event raised when a ta profile is created"
#         patterns:
#             - "TA Profile %{DATA:aruba.cm.cert_name} created"

# # Bluetooth Management events
#     - grok:
#         if: "ctx.event.code == '8001'"
#         tag: parse_8001
#         field: "message"
#         description: "Event raised when Bluetooth is enabled or disabled"
#         patterns:
#             - "Bluetooth has been %{DATA:event.action}"

# # CDP events
#     - grok:
#         if: "ctx.event.code == '8903'"
#         tag: parse_8903
#         field: "message"
#         description: "Log to indicate CDP neighbor addition"
#         patterns:
#             - "CDP neighbor %{MAC:aruba.vrf.name} is added on %{GREEDYDATA:observer.ingress.interface.name}"

# # ACLs events
#     - grok:
#         if: "ctx.event.code == '10002'"
#         tag: parse_10002
#         field: "message"
#         description: "ACL log statistics"
#         patterns:
#             - "%{DATA:aruba.acl.name} on %{DATA:observer.egress.interface.name} (%{DATA:network.direction})\\s?:\\s?%{DATA:aruba.acl.hit_delta} %{DATA:aruba.acl.ace_string}"

# # ARP security events
#     - grok:
#         if: "ctx.event.code == '10401'"
#         tag: parse_10401
#         field: "message"
#         description: "ARP inspection configuration on VLAN"
#         patterns:
#             - "ARP inspection %{DATA:aruba.status} on vlan %{DATA:network.vlan.id}."



on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
