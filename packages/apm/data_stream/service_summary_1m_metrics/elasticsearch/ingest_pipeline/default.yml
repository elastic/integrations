---
description: Pipeline for ingesting APM service summary metrics.
processors:
  - grok:
      field: observer.version
      pattern_definitions:
        DIGITS: (?:[0-9]+)
      patterns:
        - '%{DIGITS:observer.version_major:int}.%{DIGITS:observer.version_minor:int}.%{DIGITS:observer.version_patch:int}(?:[-+].*)?'
  - fail:
      if: ctx.observer.version_major > 8 || (ctx.observer.version_major == 8 && ctx.observer.version_minor > 13)
      message: Document produced by APM Server v{{{observer.version}}}, which is newer than the installed APM integration (v8.13.0). The APM integration must be upgraded.
  - remove:
      field:
        - observer.version_major
        - observer.version_minor
        - observer.version_patch
      ignore_missing: true
  - remove:
      field:
        - observer.id
        - observer.ephemeral_id
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: ecs
      ignore_failure: true
      ignore_missing: true
  - script:
      if: ctx._metric_descriptions != null
      source: |-
        Map dynamic_templates = new HashMap();
        for (entry in ctx._metric_descriptions.entrySet()) {
          String name = entry.getKey();
          Map description = entry.getValue();
          String metric_type = description.type;
          if (metric_type == "histogram") {
            dynamic_templates[name] = "histogram";
          } else if (metric_type == "summary") {
            dynamic_templates[name] = "summary";
          } else {
            dynamic_templates[name] = "double";
          }
        }
        ctx._dynamic_templates = dynamic_templates;
        ctx.remove("_metric_descriptions");
  - script:
      if: ctx.metricset?.samples != null
      source: |-
        Map dynamic_templates = new HashMap();
        for (sample in ctx.metricset.samples) {
          String name = sample.name;
          String metric_type = sample.type;
          if (metric_type == "histogram") {
            dynamic_templates[name] = "histogram";
            ctx.put(name, ["values": sample.values, "counts": sample.counts]);
          } else if (metric_type == "summary") {
            dynamic_templates[name] = "summary";
            ctx.put(name, ["value_count": sample.value_count, "sum": sample.sum]);
          } else {
            dynamic_templates[name] = "double";
            ctx.put(name, sample.value);
          }
        }
        ctx._dynamic_templates = dynamic_templates;
        ctx.metricset.remove("samples");
  - remove:
      field: _dynamic_templates
      ignore_missing: true
