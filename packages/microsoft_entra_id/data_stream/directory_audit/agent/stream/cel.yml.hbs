interval: {{interval}}
auth.oauth2:
    client.id: {{client_id}}
    client.secret: {{client_secret}}
    scopes:
{{#each token_scopes as |token_scope|}}
      - {{token_scope}}
{{/each}}
    endpoint_params: 
        grant_type: client_credentials
    token_url: {{token_url}}/{{azure_tenant_id}}/oauth2/v2.0/token

resource.url: {{base_url}}
{{#if resource_ssl}}
resource.ssl: 
  {{resource_ssl}}
{{/if}}
{{#if resource_timeout}}
resource.timeout: {{resource_timeout}}
{{/if}}
{{#if resource_proxy_url}}
resource.proxy_url: {{resource_proxy_url}}
{{/if}}
{{#if resource_retry_max_attempts}}
resource.retry.max_attempts: {{resource_retry_max_attempts}}
{{/if}}
{{#if resource_retry_wait_min}}
resource.retry.wait_min: {{resource_retry_wait_min}}
{{/if}}
{{#if resource_retry_wait_max}}
resource.retry.wait_max: {{resource_retry_wait_max}}
{{/if}}
{{#if resource_redirect_forward_headers}}
resource.redirect.forward_headers: {{resource_redirect_forward_headers}}
{{/if}}
{{#if resource_redirect_headers_ban_list}}
resource.redirect.headers_ban_list:
{{#each resource_redirect_headers_ban_list as |item|}}
  - {{item}}
{{/each}}
{{/if}}
{{#if resource_redirect_max_redirects}}
resource.redirect.max_redirects: {{resource_redirect_max_redirects}}
{{/if}}
{{#if resource_rate_limit_limit}}
resource.rate_limit.limit: {{resource_rate_limit_limit}}
{{/if}}
{{#if resource_rate_limit_burst}}
resource.rate_limit.burst: {{resource_rate_limit_burst}}
{{/if}}

{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 10
resource.tracer.maxsize: 5
{{/if}}

state:
  want_more: false
  start_date_time: {{start_date_time}}
  top: {{page_size}}

redact:
  fields: ~

program: |-
  state.with(
    request(
      "GET",
      has(state.next) && !(state.next == "") ? 
        state.next 
      :
        state.url.trim_right("/") + "/v1.0/auditLogs/directoryAudits?" + {
          "$top": [string(state.top)],
          ?"$filter": has(state.?cursor.last_timestamp) ? 
            optional.of(["activityDateTime gt " + state.cursor.last_timestamp]) 
          : 
            has(state.start_date_time) && !(state.start_date_time == "") ? 
              optional.of(["activityDateTime ge " + state.start_date_time])
            :
              optional.none(),
          "$orderby": ["activityDateTime asc"],
        }.format_query()
    ).do_request().as(resp, resp.StatusCode != 200 ?
      {
        "events": {
          "error": {
            "code": string(resp.StatusCode),
            "id": string(resp.Status),
            "message": "GET:" + (
              size(resp.Body) != 0 ?
                string(resp.Body) 
                :
                string(resp.Status) + " (" + string(resp.StatusCode) + ")"
            ),
          },
        },
        "want_more": false,
      }
    :
      bytes(resp.Body).decode_json().as(body, {
        "events": body.value.map(e, {
          "message": e.encode_json(),
        }),
        ?"cursor": size(body.value) != 0 ? 
          optional.of({
            "last_timestamp":  body.value[size(body.value)-1].activityDateTime,
          })
        :
          optional.none(),
        "next": "@odata.nextLink" in body ? body["@odata.nextLink"] : "",
        "want_more": "@odata.nextLink" in body && size(body.value) != 0,
      })
    )
  )
  
{{#if tags}}
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{/if}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
