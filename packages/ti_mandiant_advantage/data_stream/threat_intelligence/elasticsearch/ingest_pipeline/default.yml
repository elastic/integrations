---
description: Pipeline for processing Mandiant IOCs.
processors:
- rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: 'ctx.event?.original == null'
- set:
      field: ecs.version
      value: 8.11.0
- set:
      field: event.type
      value: ["indicator"]
- set:
      field: event.kind
      value: enrichment
- set:
      field: event.category
      value: ["threat"]
- set:
      field: event.module
      value: ti_mandiant_advantage_threat_intelligence
- json:
      field: event.original
      target_field: json
      ignore_failure: true
- drop:
      if: ctx.json?.content != null && ctx.json.content.isEmpty()
- set:
    field: threat.feed.name
    value: "Mandiant Threat Intelligence"
- rename:
      field: json.last_updated
      target_field: json.last_update_date
      ignore_missing: true
- date:
      field: json.last_update_date
      target_field: threat.indicator.modified_at
      if: ctx.json?.last_update_date != null
      formats:
      - ISO8601
      on_failure:
        - append:
              field: error.message
              value: '{{{_ingest.on_failure_message}}}'
        - remove:
              field: json.last_update_date
- set:
      field: '@timestamp'
      copy_from: threat.indicator.modified_at
      on_failure:
        - set:
              field: '@timestamp'
              copy_from: _ingest.timestamp
- uri_parts:
      field: json.value
      target_field: threat.indicator.url
      if: ctx.json?.type == 'url'
      on_failure:
        - set:
              field: threat.indicator.url.original
              value: '{{{json.value}}}'
              ignore_empty_value: true
              if: ctx.json?.type == 'url' && !ctx.containsKey('threat.indicator.url')
              ignore_failure: true
- set:
      field: threat.indicator.url.full
      value: '{{{threat.indicator.url.original}}}'
      ignore_empty_value: true
      ignore_failure: true
- set:
      field: threat.indicator.type
      value: url
      if: ctx.json?.type == 'url'
- script:
      lang: painless
      if: ctx.json?.type != null
      description: Maps IOC type field to Mandiant Threat Intelligence values (threat.indicator.type).
      params:
          fqdn:
              type: domain-name
              target: threat.indicator.url.domain
          ipv4:
              type: ipv4-addr
              target: threat.indicator.ip
          md5:
              type: file
              target: threat.indicator.file.hash.md5
      source: >
          void _set(Map base, def path, def value) {
              if (path.length == 0) return;
              for (int i = 0; i < path.length - 1; i++) {
                  String c = path[i];
                  if (base[c] == null) base[c] = new HashMap();
                  base = base[c];
              }
              base[path[path.length - 1]] = value;
          }
          void set(Map base, String path, def value) {
              _set(base, path.splitOnToken("."), value);
          }
          def mapping = params[ctx.json.type.toLowerCase()];
          if (mapping == null) return;
          set(ctx, "threat.indicator.type", mapping.type);
          def value = ctx.json.value;
          if (value == null) return;
          set(ctx, mapping.target, value);
      on_failure:
        - append:
              field: error.message
              value: >-
                  Unable to determine indicator type from "{{{json.type}}}": {{{_ingest.on_failure_message}}}
- script:
    lang: painless
    if: "ctx.json?.type == 'md5' && ctx.json?.associated_hashes instanceof List && ctx.json?.associated_hashes.size() > 0"
    description: Populates SHA1 and SHA256 hash values for hash indicator types, if they exist
    source: |-
      def hashes = new ArrayList();
      hashes.add(ctx.threat.indicator.file.hash.md5);
      for (hash in ctx.json.associated_hashes) {
        if (hash == null) {
          return;
        }
          if (hash.containsKey("type") && hash["type"] == "sha1" && hash.containsKey("value")) {
          ctx.threat.indicator.file.hash.sha1 = hash["value"];
          hashes.add(hash["value"]);
        }
          else if (hash.containsKey("type") && hash["type"] == "sha256" && hash.containsKey("value")) {
          ctx.threat.indicator.file.hash.sha256 = hash["value"];
          hashes.add(hash["value"]);
        }
      }
      if (ctx.json.hashes == null) {
        ctx.json.hashes = new HashMap();
      }
      ctx.json.hashes = hashes;
    on_failure:
    - append:
        field: error.message
        value: >-
          Unable to extract sha1 and sha256 information for "{{{json.type}}}": {{{_ingest.on_failure_message}}}
- convert:
      field: threat.indicator.ip
      type: ip
      ignore_missing: true
      on_failure:
        - append:
              field: error.message
              value: '{{{_ingest.on_failure_message}}}'
        - remove:
              field:
              - threat.indicator.ip
              - json.value
- append:
      field: related.ip
      value: '{{{threat.indicator.ip}}}'
      ignore_failure: true
      allow_duplicates: false
- rename:
      field: json.hashes
      target_field: related.hash
      ignore_missing: true
- geoip:
      field: threat.indicator.ip
      target_field: threat.indicator.geo
      ignore_missing: true
      ignore_failure: true
- geoip:
      field: threat.indicator.ip
      target_field: threat.indicator.as
      database_file: GeoLite2-ASN.mmdb
      properties:
      - asn
      - organization_name
      ignore_missing: true
      ignore_failure: true
- rename:
      field: threat.indicator.as.asn
      target_field: threat.indicator.as.number
      ignore_missing: true
- rename:
      field: threat.indicator.as.organization_name
      target_field: threat.indicator.as.organization.name
      ignore_missing: true
- convert:
      field: json.mscore
      target_field: event.risk_score
      ignore_missing: true
      type: float
      on_failure:
        - append:
              field: error.message
              value: '{{{_ingest.on_failure_message}}}'
        - remove:
              field: json.mscore

- date:
      field: json.last_seen
      target_field: threat.indicator.last_seen
      if: ctx.json?.last_seen != null
      formats:
      - ISO8601
      on_failure:
        - append:
              field: error.message
              value: '{{{_ingest.on_failure_message}}}'
        - remove:
              field: json.last_seen
- date:
      field: json.first_seen
      target_field: threat.indicator.first_seen
      if: ctx.json?.first_seen != null
      formats:
      - ISO8601
      on_failure:
        - append:
              field: error.message
              value: '{{{_ingest.on_failure_message}}}'
        - remove:
              field: json.first_seen

- set:
      field: threat.indicator.confidence
      copy_from: json.mscore
      ignore_empty_value: true
      ignore_failure: true

- script:
    if: "ctx.json?.sources != null && ctx.json?.sources instanceof List && ctx.json?.sources.size() > 0"
    lang: painless
    description: "Extract providers, categories and TLP from source"
    source: |-
      def providers = new ArrayList();
      def categories = new ArrayList();
      def is_osint = true;
      for (source in ctx.json.sources) {
        if (source == null) {
          return;
        }
        if (source.containsKey("source_name") && source["source_name"] != null && !providers.contains(source["source_name"])) {
          providers.add(source["source_name"]);
        }
        if (source.containsKey("category") && source["category"] != null) {
          categories.addAll(source["category"]);
        }
        if (source.containsKey("osint") && !source["osint"]) {
          is_osint = false;
        }
      }
      if (providers.size() > 0) {
        if (ctx.threat.indicator.provider == null) {
          ctx.threat.indicator.provider = new HashMap();
        }
        ctx.threat.indicator.provider = providers;
      }
      if (categories.size() > 0) {
        if (ctx.indicator_categories == null) {
          ctx.indicator_categories = new HashMap();
        }
        ctx.indicator_categories = categories;
      }
      if (is_osint) {
        ctx.tlp_color = "GREEN";
      }
      else {
        ctx.tlp_color = "RED";
      }
- script:
    if: "ctx.json?.attributed_associations != null && ctx.json?.attributed_associations instanceof List && ctx.json?.attributed_associations.size() > 0"
    lang: painless
    description: "Extract threat group and malware information from source"
    source: |-
      def groups = new ArrayList();
      def software = new ArrayList();
      for (association in ctx.json.attributed_associations) {
        if (association == null) {
          return;
        }
        if (association.containsKey("type") && association["type"] == "threat-actor" && !groups.contains(association["name"])) {
          groups.add(association["name"]);
        }
        else if (association.containsKey("type") && association["type"] == "malware" && !software.contains(association["name"])) {
          software.add(association["name"]);
        }
      }
      if (groups.size() > 0) {
        if (ctx.threat.group == null) {
          ctx.threat.group = new HashMap();
        }
        if (ctx.threat.group.name == null) {
          ctx.threat.group.name = new HashMap();
        }
        if (ctx.threat.group.id == null) {
          ctx.threat.group.id = new HashMap();
        }
        ctx.threat.group.id = groups;
        ctx.threat.group.name = groups;
      }
      if (software.size() > 0) {
        if (ctx.threat.software == null) {
          ctx.threat.software = new HashMap();
        }
        if (ctx.threat.software.type == null) {
          ctx.threat.software.type = "Malware";
        }
        if (ctx.threat.software.name == null) {
          ctx.threat.software.name = new HashMap();
        }
        ctx.threat.software.name = software;
      }
- remove:
    field: json.misp
    ignore_missing: true
    ignore_failure: true
- remove:
    field: json.is_publishable
    ignore_missing: true
    ignore_failure: true
- rename:
    field: json
    target_field: mandiant.threat_intelligence.ioc
    ignore_missing: true
    ignore_failure: true
- rename:
    field: indicator_categories
    target_field: mandiant.threat_intelligence.ioc.categories
    ignore_missing: true
    ignore_failure: true
- rename:
    field: tlp_color
    target_field: threat.indicator.marking.tlp
    ignore_missing: true
    ignore_failure: true
- set:
    field: threat.indicator.marking.tlp_version
    value: "2.0"
- script:
      lang: painless
      if: ctx.threat?.indicator?.confidence != null
      description: Normalize confidence level.
      source: >
          def value = ctx.threat.indicator.confidence;
          if (value <= 0 || value > 100) {
            ctx.threat.indicator.confidence = "None";
            return;
          } else if (value >= 1 && value < 40) {
            ctx.threat.indicator.confidence = "Low";
            return;
          } else if (value >= 40 && value < 80) {
            ctx.threat.indicator.confidence = "Medium";
            return;
          } else if (value >= 80 && value <= 100) {
            ctx.threat.indicator.confidence = "High";
            return;
          }
      ignore_failure: true
- script:
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: >
          boolean drop(Object o) {
            if (o == null || o == "") {
              return true;
            } else if (o instanceof Map) {
              ((Map) o).values().removeIf(v -> drop(v));
              return (((Map) o).size() == 0);
            } else if (o instanceof List) {
              ((List) o).removeIf(v -> drop(v));
              return (((List) o).length == 0);
            }
            return false;
          }
          drop(ctx);
      ignore_failure: true
- remove:
      field: event.original
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_failure: true
- fingerprint:
      fields:
      - mandiant.threat_intelligence.ioc.last_seen
      - mandiant.threat_intelligence.ioc.value
      target_field: _id
      ignore_missing: true
      ignore_failure: true
- append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - append:
        field: error.message
        value: '{{{_ingest.on_failure_message}}}'
  - append:
        field: event.kind
        value: pipeline_error
        allow_duplicates: false
