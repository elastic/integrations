config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ioc_expiration_duration}}
fields_under_root: true
fields:
  _conf:
    ioc_expiration_duration: "{{ioc_expiration_duration}}"
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
auth.oauth2:
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{token_url}}
state:
  initial_interval: {{initial_interval}}
  want_more: false
  batch_size: {{batch_size}}
redact:
  fields: ~
program: |
  (
    !state.want_more ?
      request("GET", state.url + "/intel/combined/indicators/v1?offset=0&sort=_marker.asc&limit=" + string(state.batch_size) + '&filter=_marker:>"' + (
        has(state.cursor) && has(state.cursor.last_timestamp) && state.cursor.last_timestamp != null ?
          state.cursor.last_timestamp + '"'
        :
          string(int(now - duration(state.initial_interval))) + '"'
      ))
    :
      request("GET", state.url + string(state.next_url[0]))
  ).do_request().as(resp,
    resp.StatusCode == 200 ?
      bytes(resp.Body).decode_json().as(body, {
        "events": body.resources.map(e, {
          "message": e.encode_json(),
        }),
        "want_more": "Next-Page" in resp.Header,
        "url": state.url,
        "batch_size": state.batch_size,
        "initial_interval": state.initial_interval,
        "next_url": "Next-Page" in resp.Header ? resp.Header["Next-Page"] : "",
        "cursor": {
          "last_timestamp": (
            has(body.resources) && body.resources.size() > 0 ?
              (
                has(state.cursor) && has(state.cursor.last_timestamp) && body.resources.map(e, e.last_updated).max() < state.cursor.last_timestamp ?
                  state.cursor.last_timestamp
                :
                  body.resources.map(e, e.last_updated).max()
              )
            :
              (
                has(state.cursor) && has(state.cursor.last_timestamp) ?
                  state.cursor.last_timestamp
                :
                  null
              )
          ),
        },
      })
    :
      {
        "events": {
          "error": {
            "code": string(resp.StatusCode),
            "id": string(resp.Status),
            "message": string(resp.Body)
          },
        },
        "want_more": false,
        "url": state.url,
        "batch_size": state.batch_size,
        "initial_interval": state.initial_interval,
      }
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
