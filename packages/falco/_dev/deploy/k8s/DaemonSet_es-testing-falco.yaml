---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app.kubernetes.io/instance: es-testing
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: falco
    app.kubernetes.io/version: 0.37.1
    helm.sh/chart: falco-4.2.5
  name: es-testing-falco
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: es-testing
      app.kubernetes.io/name: falco
  template:
    metadata:
      annotations:
        checksum/certs: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        checksum/config: f84bb72594a17275fedad4f5af055838a4e4dedf77be2df50f3c1dba9eb7a4bc
        checksum/rules: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
      labels:
        app.kubernetes.io/instance: es-testing
        app.kubernetes.io/name: falco
      name: es-testing-falco
    spec:
      containers:
        - args:
            - /usr/bin/falco
            - --cri
            - /run/containerd/containerd.sock
            - --cri
            - /run/crio/crio.sock
            - -pk
          env:
            - name: FALCO_K8S_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          image: docker.io/falcosecurity/falco-no-driver:0.37.1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8765
            initialDelaySeconds: 60
            periodSeconds: 15
            timeoutSeconds: 5
          name: falco
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8765
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 1000m
              memory: 1024Mi
            requests:
              cpu: 100m
              memory: 512Mi
          securityContext:
            privileged: true
          tty: true
          volumeMounts:
            - mountPath: /etc/falco
              name: rulesfiles-install-dir
            - mountPath: /usr/share/falco/plugins
              name: plugins-install-dir
            - mountPath: /root/.falco
              name: root-falco-fs
            - mountPath: /host/proc
              name: proc-fs
            - mountPath: /host/etc
              name: etc-fs
              readOnly: true
            - mountPath: /host/var/run/docker.sock
              name: docker-socket
            - mountPath: /host/run/containerd/containerd.sock
              name: containerd-socket
            - mountPath: /host/run/crio/crio.sock
              name: crio-socket
            - mountPath: /etc/falco/falco.yaml
              name: falco-yaml
              subPath: falco.yaml
        - args:
            - artifact
            - follow
            - --log-format=json
          env: null
          image: docker.io/falcosecurity/falcoctl:0.7.2
          imagePullPolicy: IfNotPresent
          name: falcoctl-artifact-follow
          securityContext: null
          volumeMounts:
            - mountPath: /plugins
              name: plugins-install-dir
            - mountPath: /rulesfiles
              name: rulesfiles-install-dir
            - mountPath: /etc/falcoctl
              name: falcoctl-config-volume
      initContainers:
        - args:
            - artifact
            - install
            - --log-format=json
          env: null
          image: docker.io/falcosecurity/falcoctl:0.7.2
          imagePullPolicy: IfNotPresent
          name: falcoctl-artifact-install
          securityContext: null
          volumeMounts:
            - mountPath: /plugins
              name: plugins-install-dir
            - mountPath: /rulesfiles
              name: rulesfiles-install-dir
            - mountPath: /etc/falcoctl
              name: falcoctl-config-volume
      serviceAccountName: default
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
      volumes:
        - emptyDir: {}
          name: plugins-install-dir
        - emptyDir: {}
          name: rulesfiles-install-dir
        - emptyDir: {}
          name: root-falco-fs
        - hostPath:
            path: /boot
          name: boot-fs
        - hostPath:
            path: /lib/modules
          name: lib-modules
        - hostPath:
            path: /usr
          name: usr-fs
        - hostPath:
            path: /etc
          name: etc-fs
        - hostPath:
            path: /var/run/docker.sock
          name: docker-socket
        - hostPath:
            path: /run/containerd/containerd.sock
          name: containerd-socket
        - hostPath:
            path: /run/crio/crio.sock
          name: crio-socket
        - hostPath:
            path: /proc
          name: proc-fs
        - configMap:
            items:
              - key: falcoctl.yaml
                path: falcoctl.yaml
            name: es-testing-falco-falcoctl
          name: falcoctl-config-volume
        - configMap:
            items:
              - key: falco.yaml
                path: falco.yaml
            name: es-testing-falco
          name: falco-yaml
  updateStrategy:
    type: RollingUpdate
