---
processors:
  - rename:
      field: json.priorAsset.osInventory.osInfo.architecture
      target_field: google_scc.asset.prior.os_inventory.os_info.architecture
      tag: rename_priorAsset_osInventory_osInfo_architecture
      ignore_missing: true
  - rename:
      field: json.priorAsset.osInventory.osInfo.hostname
      target_field: google_scc.asset.prior.os_inventory.os_info.hostname
      tag: rename_priorAsset_osInventory_osInfo_hostname
      ignore_missing: true
  - rename:
      field: json.priorAsset.name
      target_field: google_scc.asset.prior.name
      tag: rename_priorAsset_name
      ignore_missing: true
  - rename:
      field: json.priorAsset.osInventory.osInfo.shortName
      target_field: google_scc.asset.prior.os_inventory.os_info.short_name
      tag: rename_priorAsset_osInventory_osInfo_shortName
      ignore_missing: true
  - rename:
      field: json.priorAsset.osInventory.osInfo.longName
      target_field: google_scc.asset.prior.os_inventory.os_info.long_name
      tag: rename_priorAsset_osInventory_osInfo_longName
      ignore_missing: true
  - rename:
      field: json.priorAsset.osInventory.osInfo.kernelVersion
      target_field: google_scc.asset.prior.os_inventory.os_info.kernel.version
      tag: rename_priorAsset_osInventory_osInfo_kernelVersion
      ignore_missing: true
  - rename:
      field: json.priorAsset.osInventory.osInfo.version
      target_field: google_scc.asset.prior.os_inventory.os_info.version
      tag: rename_priorAsset_osInventory_osInfo_version
      ignore_missing: true
  - rename:
      field: json.priorAsset.assetType
      target_field: google_scc.asset.prior.type
      tag: rename_priorAsset_assetType
      ignore_missing: true
  - rename:
      field: json.priorAsset.accessLevel.basic.combiningFunction
      target_field: json.priorAsset.accessLevel.basic.combining_function
      tag: rename_priorAsset_accessLevel_basic_combiningFunction
      ignore_missing: true
  - rename:
      field: json.priorAsset.accessLevel.custom.expr.expression
      target_field: json.priorAsset.accessLevel.custom.expr.text
      tag: rename_priorAsset_accessLevel_custom_expr_expression
      ignore_missing: true
  - rename:
      field: json.priorAsset.accessLevel.custom.expr
      target_field: json.priorAsset.accessLevel.custom.expression
      tag: rename_priorAsset_accessLevel_custom_expr
      ignore_missing: true
  - foreach:
      field: json.priorAsset.accessLevel.basic.conditions
      if: ctx.json?.priorAsset?.accessLevel?.basic?.conditions instanceof List
      ignore_failure: true
      processor:
        foreach:
          field: _ingest._value.devicePolicy.osConstraints
          ignore_failure: true
          processor:
            convert:
              field: _ingest._value.requireVerifiedChromeOs
              tag: convert_requireVerifiedChromeOs_to_boolean
              type: boolean
              ignore_missing: true
              on_failure:
                  - remove:
                      field: _ingest._value.devicePolicy.requireCorpOwned
                  - append:
                      field: error.message
                      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.priorAsset.accessLevel.basic.conditions
      if: ctx.json?.priorAsset?.accessLevel?.basic?.conditions instanceof List
      ignore_failure: true
      processor:
        convert:
          field: _ingest._value.devicePolicy.requireScreenlock
          tag: convert_devicePolicy_requireScreenlock_to_boolean
          type: boolean
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.devicePolicy.requireScreenlock
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.priorAsset.accessLevel.basic.conditions
      if: ctx.json?.priorAsset?.accessLevel?.basic?.conditions instanceof List
      ignore_failure: true
      processor:
        convert:
          field: _ingest._value.devicePolicy.requireAdminApproval
          tag: convert_devicePolicy_requireAdminApproval_to_boolean
          type: boolean
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.devicePolicy.requireAdminApproval
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.priorAsset.accessLevel.basic.conditions
      if: ctx.json?.priorAsset?.accessLevel?.basic?.conditions instanceof List
      ignore_failure: true
      processor:
        convert:
          field: _ingest._value.negate
          tag: convert_negate_to_boolean
          type: boolean
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.negate
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - script:
      lang: painless
      description: This script processor rename the fields under the accessLevel.basic.conditions objects.
      if: ctx.json?.priorAsset?.accessLevel?.basic?.conditions != null
      tag: painless_to_rename_fields_under_accessLevel_basic_conditions_object
      source: |
        def renameKeys(Map json, Map keyMap) {
          def updatedJson = new HashMap();
          for (def entry: json.entrySet()) {
            def key = entry.getKey();
            def value = entry.getValue();
            if (value instanceof Map) {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = renameKeys(value, keyMap);
              } else {
                updatedJson[key] = renameKeys(value, keyMap);
              }
            } else if (value instanceof List) {
              def updatedList = [];
              for (def item: value) {
                if (item instanceof Map) {
                  updatedList.add(renameKeys(item, keyMap));
                } else {
                  updatedList.add(item);
                }
              }
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = updatedList;
              } else {
                updatedJson[key] = value;
              }
            } else {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = value;
              } else {
                updatedJson[key] = value;
              }
            }
          }
          return updatedJson;
        }

        def keyMap = new HashMap();
        keyMap.put('conditions','conditions');
        keyMap.put('requiredAccessLevels','required_access_levels');
        keyMap.put('devicePolicy','device_policy');
        keyMap.put('requireScreenlock','require_screenlock');
        keyMap.put('allowedEncryptionStatuses','allowed_encryption_statuses');
        keyMap.put('osConstraints','os_constraints');
        keyMap.put('osType','os_type');
        keyMap.put('minimumVersion','minimum_version');
        keyMap.put('requireVerifiedChromeOs','require_verified_chrome_os');
        keyMap.put('allowedDeviceManagementLevels','allowed_device_management_levels');
        keyMap.put('requireAdminApproval','require_admin_approval');
        keyMap.put('requireCorpOwned','require_corp_owned');
        keyMap.put('ipSubnetworks','sub_networks');
        def conditions = new ArrayList();
        for(entity in ctx.json.priorAsset.accessLevel.basic.conditions){
          conditions.add(renameKeys(entity, keyMap));
        }
        ctx.json.priorAsset.accessLevel.basic.remove('conditions');
        ctx.json.priorAsset.accessLevel.basic.put('conditions',conditions);
  - rename:
      field: json.priorAsset.accessLevel
      target_field: google_scc.asset.prior.access_level
      tag: rename_priorAsset_accessLevel
      ignore_missing: true
  - rename:
      field: json.priorAsset.accessPolicy
      target_field: google_scc.asset.prior.access_policy
      tag: rename_priorAsset_accessPolicy
      ignore_missing: true
  - rename:
      field: json.priorAsset.ancestors
      target_field: google_scc.asset.prior.ancestors
      tag: rename_priorAsset_ancestors
      ignore_missing: true
  - script:
      lang: painless
      description: This script processor rename the fields under the iamPolicy.auditConfigs objects.
      if: ctx.json?.priorAsset?.iamPolicy?.auditConfigs != null
      tag: painless_to_rename_fields_under_iamPolicy_auditConfigs_object
      source: |
        def renameKeys(Map json, Map keyMap) {
          def updatedJson = new HashMap();
          for (def entry: json.entrySet()) {
            def key = entry.getKey();
            def value = entry.getValue();
            if (value instanceof Map) {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = renameKeys(value, keyMap);
              } else {
                updatedJson[key] = renameKeys(value, keyMap);
              }
            } else if (value instanceof List) {
              def updatedList = [];
              for (def item: value) {
                if (item instanceof Map) {
                  updatedList.add(renameKeys(item, keyMap));
                } else {
                  updatedList.add(item);
                }
              }
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = updatedList;
              } else {
                updatedJson[key] = value;
              }
            } else {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = value;
              } else {
                updatedJson[key] = value;
              }
            }
          }
          return updatedJson;
        }

        def keyMap = new HashMap();
        keyMap.put('auditConfigs','audit_configs');
        keyMap.put('auditLogConfigs','audit_log_configs');
        keyMap.put('logType','log_type');
        keyMap.put('exemptedMembers','exemted_members');
        def audit_configs = new ArrayList();
        for(entity in ctx.json.priorAsset.iamPolicy.auditConfigs){
          audit_configs.add(renameKeys(entity, keyMap));
        }
        ctx.json.priorAsset.iamPolicy.remove('auditConfigs');
        ctx.json.priorAsset.iamPolicy.put('audit_configs',audit_configs);
  - convert:
      field: json.priorAsset.iamPolicy.version
      tag: convert_priorAsset_iamPolicy_version
      if: ctx.json?.priorAsset?.iamPolicy?.version != ''
      type: string
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.priorAsset.iamPolicy
      target_field: google_scc.asset.prior.iam_policy
      tag: rename_priorAsset_iamPolicy
      ignore_missing: true
  - foreach:
      field: json.priorAsset.orgPolicy
      if: ctx.json?.priorAsset?.orgPolicy instanceof List
      ignore_failure: true
      processor:
        convert:
          field: _ingest._value.version
          tag: convert_priorAsset_orgPolicy_version
          type: string
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.version
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.priorAsset.orgPolicy
      if: ctx.json?.priorAsset?.orgPolicy instanceof List
      ignore_failure: true
      processor:
        date:
          field: _ingest._value.updateTime
          target_field:  _ingest._value.updateTime
          tag: date_updateTime
          formats:
            - ISO8601
          on_failure:
            - remove:
                field:  _ingest._value.updateTime
                ignore_missing: true
  - foreach:
      field: json.priorAsset.orgPolicy
      if: ctx.json?.priorAsset?.orgPolicy instanceof List
      ignore_failure: true
      processor:
        convert:
          field: _ingest._value.listPolicy.inheritFromParent
          tag: convert_orgPolicy_listPolicy_inheritFromParent_to_boolean
          type: boolean
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.listPolicy.inheritFromParent
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.priorAsset.orgPolicy
      if: ctx.json?.priorAsset?.orgPolicy instanceof List
      ignore_failure: true
      processor:
        convert:
          field: _ingest._value.booleanPolicy.enforced
          tag: convert_orgPolicy_booleanPolicy_enforced_to_boolean
          type: boolean
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.inbooleanPolicy.enforcedheritFromParent
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - script:
      lang: painless
      description: This script processor rename the fields under the orgPolicy objects.
      if: ctx.json?.priorAsset?.orgPolicy != null
      tag: painless_to_rename_fields_under_orgPolicy_object
      source: |
        def renameKeys(Map json, Map keyMap) {
          def updatedJson = new HashMap();
          for (def entry: json.entrySet()) {
            def key = entry.getKey();
            def value = entry.getValue();
            if (value instanceof Map) {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = renameKeys(value, keyMap);
              } else {
                updatedJson[key] = renameKeys(value, keyMap);
              }
            } else if (value instanceof List) {
              def updatedList = [];
              for (def item: value) {
                if (item instanceof Map) {
                  updatedList.add(renameKeys(item, keyMap));
                } else {
                  updatedList.add(item);
                }
              }
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = updatedList;
              } else {
                updatedJson[key] = value;
              }
            } else {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = value;
              } else {
                updatedJson[key] = value;
              }
            }
          }
          return updatedJson;
        }

        def keyMap = new HashMap();
        keyMap.put('orgPolicy','organization_policy');
        keyMap.put('listPolicy','list_policy');
        keyMap.put('allowedValues','allowed_values');
        keyMap.put('deniedValues','denied_values');
        keyMap.put('allValues','all_values');
        keyMap.put('suggestedValue','suggested_value');
        keyMap.put('restoreDefault','restore_default');
        keyMap.put('updateTime','update_time');
        keyMap.put('inheritFromParent','inherit_from_parent');
        keyMap.put('booleanPolicy','boolean_policy');
        def organization_policy = new ArrayList();
        for(entity in ctx.json.priorAsset.orgPolicy){
          organization_policy.add(renameKeys(entity, keyMap));
        }
        ctx.json.priorAsset.remove('orgPolicy');
        ctx.google_scc.asset.prior.put('organization_policy',organization_policy);
  - rename:
      field: json.priorAsset.osInventory.name
      target_field: google_scc.asset.prior.os_inventory.name
      tag: rename_priorAsset_osInventory_name
      ignore_missing: true
  - rename:
      field: json.priorAsset.osInventory.osInfo.kernelRelease
      target_field: google_scc.asset.prior.os_inventory.os_info.kernel.release
      tag: rename_priorAsset_osInventory_osInfo_kernelRelease
      ignore_missing: true
  - rename:
      field: json.priorAsset.osInventory.osInfo.osconfigAgentVersion
      target_field: google_scc.asset.prior.os_inventory.os_info.os_config_agent_version
      tag: rename_priorAsset_osInventory_osInfo_osconfigAgentVersion
      ignore_missing: true
  - date:
      field: json.priorAsset.osInventory.updateTime
      target_field: google_scc.asset.prior.os_inventory.update_time
      tag: date_priorAsset_osInventory_updateTime
      formats:
        - ISO8601
      if: ctx.json?.priorAsset?.osInventory?.updateTime != null && ctx.json.priorAsset.osInventory.updateTime != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.priorAsset.relatedAsset.ancestors
      target_field: google_scc.asset.prior.related_asset.ancestors
      tag: rename_priorAsset_relatedAsset_ancestors
      ignore_missing: true
  - rename:
      field: json.priorAsset.relatedAsset.asset
      target_field: google_scc.asset.prior.related_asset.name
      tag: rename_priorAsset_relatedAsset_asset
      ignore_missing: true
  - rename:
      field: json.priorAsset.relatedAsset.relationshipType
      target_field: google_scc.asset.prior.related_asset.relationship_type
      tag: rename_priorAsset_relatedAsset_relationshipType
      ignore_missing: true
  - rename:
      field: json.priorAsset.relatedAsset.assetType
      target_field: google_scc.asset.prior.related_asset.type
      tag: rename_priorAsset_relatedAsset_assetType
      ignore_missing: true
  - rename:
      field: json.priorAsset.relatedAssets.relationshipAttributes.action
      target_field: json.priorAsset.relatedAssets.relationship_attributes.action
      tag: rename_priorAsset_relatedAssets_relationshipAttributes_action
      ignore_missing: true
  - rename:
      field: json.priorAsset.relatedAssets.relationshipAttributes.sourceResourceType
      target_field: json.priorAsset.relatedAssets.relationship_attributes.source_resource_type
      tag: rename_priorAsset_relatedAssets_relationshipAttributes_sourceResourceType
      ignore_missing: true
  - rename:
      field: json.priorAsset.relatedAssets.relationshipAttributes.targetResourceType
      target_field: json.priorAsset.relatedAssets.relationship_attributes.target_resource_type
      tag: rename_priorAsset_relatedAssets_relationshipAttributes_targetResourceType
      ignore_missing: true
  - rename:
      field: json.priorAsset.relatedAssets.relationshipAttributes.type
      target_field: json.priorAsset.relatedAssets.relationship_attributes.type
      tag: rename_priorAsset_relatedAssets_relationshipAttributes_type
      ignore_missing: true
  - script:
      lang: painless
      description: This script processor rename the fields under the relatedAssets.assets objects.
      if: ctx.json?.priorAsset?.relatedAssets?.assets != null
      tag: painless_to_rename_fields_under_relatedAssets_assets_object
      source: |
        def renameKeys(Map json, Map keyMap) {
          def updatedJson = new HashMap();
          for (def entry: json.entrySet()) {
            def key = entry.getKey();
            def value = entry.getValue();
            if (value instanceof Map) {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = renameKeys(value, keyMap);
              } else {
                updatedJson[key] = renameKeys(value, keyMap);
              }
            } else if (value instanceof List) {
              def updatedList = [];
              for (def item: value) {
                if (item instanceof Map) {
                  updatedList.add(renameKeys(item, keyMap));
                } else {
                  updatedList.add(item);
                }
              }
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = updatedList;
              } else {
                updatedJson[key] = value;
              }
            } else {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = value;
              } else {
                updatedJson[key] = value;
              }
            }
          }
          return updatedJson;
        }

        def keyMap = new HashMap();
        keyMap.put('assets','assets');
        keyMap.put('assetType','type');
        keyMap.put('asset','name');
        keyMap.put('relationshipType','relationship_type');
        def assets = new ArrayList();
        for(entity in ctx.json.priorAsset.relatedAssets.assets){
          assets.add(renameKeys(entity, keyMap));
        }
        ctx.json.priorAsset.relatedAssets.put('assets',assets);
  - rename:
      field: json.priorAsset.relatedAssets
      target_field: google_scc.asset.prior.related_assets
      tag: rename_priorAsset_relatedAssets
      ignore_missing: true
  - rename:
      field: json.priorAsset.resource.discoveryDocumentUri
      target_field: google_scc.asset.prior.resource.discovery.document_uri
      tag: rename_priorAsset_resource_discoveryDocumentUri
      ignore_missing: true
  - rename:
      field: json.priorAsset.resource.discoveryName
      target_field: google_scc.asset.prior.resource.discovery.name
      tag: rename_priorAsset_resource_discoveryName
      ignore_missing: true
  - rename:
      field: json.priorAsset.resource.location
      target_field: google_scc.asset.prior.resource.location
      tag: rename_priorAsset_resource_location
      ignore_missing: true
  - rename:
      field: json.priorAsset.resource.parent
      target_field: google_scc.asset.prior.resource.parent
      tag: rename_priorAsset_resource_parent
      ignore_missing: true
  - rename:
      field: json.priorAsset.resource.resourceUrl
      target_field: google_scc.asset.prior.resource.url
      tag: rename_priorAsset_resource_resourceUrl
      ignore_missing: true
  - rename:
      field: json.priorAsset.resource.version
      target_field: google_scc.asset.prior.resource.version
      tag: rename_priorAsset_resource_version
      ignore_missing: true
  - rename:
      field: json.priorAsset.resource.data
      target_field: google_scc.asset.prior.resource.data
      tag: rename_priorAsset_resource_data
      ignore_missing: true
  - rename:
      field: json.priorAsset.servicePerimeter.spec.accessLevels
      target_field: json.priorAsset.servicePerimeter.spec.access_levels
      tag: rename_priorAsset_servicePerimeter_spec_accessLevels
      ignore_missing: true
  - rename:
      field: json.priorAsset.servicePerimeter.spec.restrictedServices
      target_field: json.priorAsset.servicePerimeter.spec.restricted_services
      tag: rename_priorAsset_servicePerimeter_spec_restrictedServices
      ignore_missing: true
  - rename:
      field: json.priorAsset.servicePerimeter.spec.vpcAccessibleServices.allowedServices
      target_field: json.priorAsset.servicePerimeter.spec.vpc_accessible_services.allowed_services
      tag: rename_priorAsset_servicePerimeter_spec_vpcAccessibleServices_allowedServices
      ignore_missing: true
  - convert:
      field: json.priorAsset.servicePerimeter.spec.vpcAccessibleServices.enableRestriction
      target_field: json.priorAsset.servicePerimeter.spec.vpc_accessible_services.enable_restriction
      tag: convert_priorAsset_servicePerimeter_spec_vpcAccessibleServices_enableRestriction_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.json?.priorAsset?.servicePerimeter?.spec?.vpcAccessibleServices?.enableRestriction != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.priorAsset.servicePerimeter.status.restrictedServices
      target_field: json.priorAsset.servicePerimeter.status.restricted_services
      tag: rename_priorAsset_servicePerimeter_status_restrictedServices
      ignore_missing: true
  - rename:
      field: json.priorAsset.servicePerimeter.status.vpcAccessibleServices.allowedServices
      target_field: json.priorAsset.servicePerimeter.status.vpc_accessible_services.allowed_services
      tag: rename_priorAsset_servicePerimeter_status_vpcAccessibleServices_allowedServices
      ignore_missing: true
  - convert:
      field: json.priorAsset.servicePerimeter.status.vpcAccessibleServices.enableRestriction
      target_field: json.priorAsset.servicePerimeter.status.vpc_accessible_services.enable_restriction
      tag: convert_priorAsset_servicePerimeter_status_vpcAccessibleServices_enableRestriction_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.json?.priorAsset?.servicePerimeter?.status?.vpcAccessibleServices?.enableRestriction != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.priorAsset.servicePerimeter.status.accessLevels
      target_field: json.priorAsset.servicePerimeter.status.access_levels
      tag: rename_priorAsset_servicePerimeter_status_accessLevels
      ignore_missing: true
  - rename:
      field: json.priorAsset.servicePerimeter.perimeterType
      target_field: json.priorAsset.servicePerimeter.type
      tag: rename_priorAsset_servicePerimeter_perimeterType
      ignore_missing: true
  - convert:
      field: json.priorAsset.servicePerimeter.useExplicitDryRunSpec
      target_field: json.priorAsset.servicePerimeter.use_explicit_dry_run_spec
      tag: convert_priorAsset_servicePerimeter_useExplicitDryRunSpec_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.json?.priorAsset?.servicePerimeter?.useExplicitDryRunSpec != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - script:
      lang: painless
      description: This script processor rename the fields under the servicePerimeter.status.egressPolicies objects.
      if: ctx.json?.priorAsset?.servicePerimeter?.status?.egressPolicies != null
      tag: painless_to_rename_fields_under_servicePerimeter_status_egressPolicies_object
      source: |
        def renameKeys(Map json, Map keyMap) {
          def updatedJson = new HashMap();
          for (def entry: json.entrySet()) {
            def key = entry.getKey();
            def value = entry.getValue();
            if (value instanceof Map) {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = renameKeys(value, keyMap);
              } else {
                updatedJson[key] = renameKeys(value, keyMap);
              }
            } else if (value instanceof List) {
              def updatedList = [];
              for (def item: value) {
                if (item instanceof Map) {
                  updatedList.add(renameKeys(item, keyMap));
                } else {
                  updatedList.add(item);
                }
              }
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = updatedList;
              } else {
                updatedJson[key] = value;
              }
            } else {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = value;
              } else {
                updatedJson[key] = value;
              }
            }
          }
          return updatedJson;
        }

        def keyMap = new HashMap();
        keyMap.put('egressPolicies','egress_policies');
        keyMap.put('egressFrom','egress_from');
        keyMap.put('sources','sources');
        keyMap.put('accessLevel','access_level');
        keyMap.put('identityType','identity_type');
        keyMap.put('egressTo','egress_to');
        keyMap.put('operations','operations');
        keyMap.put('methodSelectors','method_selectors');
        keyMap.put('serviceName','service_name');
        def egress_policies = new ArrayList();
        for(entity in ctx.json.priorAsset.servicePerimeter.status.egressPolicies){
          egress_policies.add(renameKeys(entity, keyMap));
        }
        ctx.json.priorAsset.servicePerimeter.status.remove('egressPolicies');
        ctx.json.priorAsset.servicePerimeter.status.put('egress_policies',egress_policies);
  - script:
      lang: painless
      description: This script processor rename the fields under the servicePerimeter.spec.egressPolicies objects.
      if: ctx.json?.priorAsset?.servicePerimeter?.spec?.egressPolicies != null
      tag: painless_to_rename_fields_under_servicePerimeter_spec_egressPolicies_object
      source: |
        def renameKeys(Map json, Map keyMap) {
          def updatedJson = new HashMap();
          for (def entry: json.entrySet()) {
            def key = entry.getKey();
            def value = entry.getValue();
            if (value instanceof Map) {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = renameKeys(value, keyMap);
              } else {
                updatedJson[key] = renameKeys(value, keyMap);
              }
            } else if (value instanceof List) {
              def updatedList = [];
              for (def item: value) {
                if (item instanceof Map) {
                  updatedList.add(renameKeys(item, keyMap));
                } else {
                  updatedList.add(item);
                }
              }
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = updatedList;
              } else {
                updatedJson[key] = value;
              }
            } else {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = value;
              } else {
                updatedJson[key] = value;
              }
            }
          }
          return updatedJson;
        }

        def keyMap = new HashMap();
        keyMap.put('egressPolicies','egress_policies');
        keyMap.put('egressFrom','egress_from');
        keyMap.put('sources','sources');
        keyMap.put('accessLevel','access_level');
        keyMap.put('identityType','identity_type');
        keyMap.put('egressTo','egress_to');
        keyMap.put('operations','operations');
        keyMap.put('methodSelectors','method_selectors');
        keyMap.put('serviceName','service_name');
        def egress_policies = new ArrayList();
        for(entity in ctx.json.priorAsset.servicePerimeter.spec.egressPolicies){
          egress_policies.add(renameKeys(entity, keyMap));
        }
        ctx.json.priorAsset.servicePerimeter.spec.remove('egressPolicies');
        ctx.json.priorAsset.servicePerimeter.spec.put('egress_policies',egress_policies);
  - script:
      lang: painless
      description: This script processor rename the fields under the servicePerimeter.spec.ingressPolicies objects.
      if: ctx.json?.priorAsset?.servicePerimeter?.spec?.ingressPolicies != null
      tag: painless_to_rename_fields_under_servicePerimeter_spec_ingressPolicies_object
      source: |
        def renameKeys(Map json, Map keyMap) {
          def updatedJson = new HashMap();
          for (def entry: json.entrySet()) {
            def key = entry.getKey();
            def value = entry.getValue();
            if (value instanceof Map) {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = renameKeys(value, keyMap);
              } else {
                updatedJson[key] = renameKeys(value, keyMap);
              }
            } else if (value instanceof List) {
              def updatedList = [];
              for (def item: value) {
                if (item instanceof Map) {
                  updatedList.add(renameKeys(item, keyMap));
                } else {
                  updatedList.add(item);
                }
              }
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = updatedList;
              } else {
                updatedJson[key] = value;
              }
            } else {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = value;
              } else {
                updatedJson[key] = value;
              }
            }
          }
          return updatedJson;
        }

        def keyMap = new HashMap();
        keyMap.put('ingressPolicies','ingress_policies');
        keyMap.put('ingressFrom','ingress_from');
        keyMap.put('sources','sources');
        keyMap.put('accessLevel','access_level');
        keyMap.put('identityType','identity_type');
        keyMap.put('ingressTo','ingress_to');
        keyMap.put('operations','operations');
        keyMap.put('methodSelectors','method_selectors');
        keyMap.put('serviceName','service_name');
        def ingress_policies = new ArrayList();
        for(entity in ctx.json.priorAsset.servicePerimeter.spec.ingressPolicies){
          ingress_policies.add(renameKeys(entity, keyMap));
        }
        ctx.json.priorAsset.servicePerimeter.spec.remove('ingressPolicies');
        ctx.json.priorAsset.servicePerimeter.spec.put('ingress_policies',ingress_policies);
  - script:
      lang: painless
      description: This script processor rename the fields under the servicePerimeter.status.ingressPolicies objects.
      if: ctx.json?.priorAsset?.servicePerimeter?.status?.ingressPolicies != null
      tag: painless_to_rename_fields_under_servicePerimeter_status_ingressPolicies_object
      source: |
        def renameKeys(Map json, Map keyMap) {
          def updatedJson = new HashMap();
          for (def entry: json.entrySet()) {
            def key = entry.getKey();
            def value = entry.getValue();
            if (value instanceof Map) {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = renameKeys(value, keyMap);
              } else {
                updatedJson[key] = renameKeys(value, keyMap);
              }
            } else if (value instanceof List) {
              def updatedList = [];
              for (def item: value) {
                if (item instanceof Map) {
                  updatedList.add(renameKeys(item, keyMap));
                } else {
                  updatedList.add(item);
                }
              }
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = updatedList;
              } else {
                updatedJson[key] = value;
              }
            } else {
              if (keyMap.containsKey(key)) {
                updatedJson[keyMap[key]] = value;
              } else {
                updatedJson[key] = value;
              }
            }
          }
          return updatedJson;
        }

        def keyMap = new HashMap();
        keyMap.put('ingressPolicies','ingress_policies');
        keyMap.put('ingressFrom','ingress_from');
        keyMap.put('sources','sources');
        keyMap.put('accessLevel','access_level');
        keyMap.put('identityType','identity_type');
        keyMap.put('ingressTo','ingress_to');
        keyMap.put('operations','operations');
        keyMap.put('methodSelectors','method_selectors');
        keyMap.put('serviceName','service_name');
        def ingress_policies = new ArrayList();
        for(entity in ctx.json.priorAsset.servicePerimeter.status.ingressPolicies){
          ingress_policies.add(renameKeys(entity, keyMap));
        }
        ctx.json.priorAsset.servicePerimeter.status.remove('ingressPolicies');
        ctx.json.priorAsset.servicePerimeter.status.put('ingress_policies',ingress_policies);
  - rename:
      field: json.priorAsset.servicePerimeter
      target_field: google_scc.asset.prior.service_perimeter
      tag: rename_priorAsset_servicePerimeter
      ignore_missing: true
  - date:
      field: json.priorAsset.updateTime
      target_field: google_scc.asset.prior.update_time
      tag: date_priorAsset_updateTime
      formats:
        - ISO8601
      if: ctx.json?.priorAsset?.updateTime != null && ctx.json.priorAsset.updateTime != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - remove:
      field:
        - google_scc.asset.prior.service_perimeter.spec.vpcAccessibleServices.enableRestriction
        - google_scc.asset.prior.service_perimeter.status.vpcAccessibleServices.enableRestriction
        - google_scc.asset.prior.service_perimeter.useExplicitDryRunSpec
      tag: remove_converted_fields
      ignore_missing: true
