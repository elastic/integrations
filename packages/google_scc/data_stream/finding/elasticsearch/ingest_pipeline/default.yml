---
description: Pipeline for processing Finding logs.
processors:
  - remove:
      field:
        - organization
        - division
        - team
      ignore_missing: true
      if: ctx.organization instanceof String && ctx.division instanceof String && ctx.team instanceof String
      tag: remove_agentless_tags
      description: >-
        Removes the fields added by Agentless as metadata,
        as they can collide with ECS fields.
  - set:
      field: ecs.version
      value: 8.11.0
      tag: set_ecs_version
  
  # parse the event JSON
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      ignore_missing: true
      description: Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.
      if: ctx.event?.original == null
  - remove:
      field: message
      tag: remove_message
      ignore_missing: true
      description: The `message` field is no longer required if the document has an `event.original` field.
      if: ctx.event?.original != null
  - json:
      field: event.original
      tag: 'json_decoding'
      target_field: json
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - drop:
      if: ctx.json?.listFindingsResults != null && ctx.json.listFindingsResults.isEmpty()
      tag: drop_listFindingsResults
  - fingerprint:
      fields:
        - json.finding.eventTime
        - json.finding.createTime
        - json.finding.name
        - json.finding.muteUpdateTime
        - json.finding.resourceName
      tag: fingerprint_processor
      target_field: _id
      ignore_missing: true

  - rename:
      field: json.resource
      target_field: json.finding.resource
      tag: rename_resource
      ignore_missing: true
  - rename:
      field: json.stateChange
      target_field: json.finding.stateChange
      tag: rename_stateChange
      ignore_missing: true
  # rename to snake case
  - script:
      tag: script_convert_camelcase_to_snake_case
      lang: painless
      description: Convert camelCase to snake_case
      source: |
        // Helper function to convert camelCase to snake_case
        String camelToSnake(String str) {
          def result = "";
          def lastCharWasUpperCase = false;
          for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (Character.isUpperCase(c)) {
              if (i > 0 && !lastCharWasUpperCase) {
                result += "_";
              }
              result += Character.toLowerCase(c);
              lastCharWasUpperCase = true;
            } else {
              result += c;
              lastCharWasUpperCase = false;
            }
          }
          return result;
        }
        // Recursive function to handle nested fields
        def convertToSnakeCase(def obj) {
          if (obj instanceof Map) {
            // Convert each key in the map
            def newObj = [:];
            for (entry in obj.entrySet()) {
              // Skip fields that contain '@' in their name
              if (!entry.getKey().contains("@")) {
                String newKey = camelToSnake(entry.getKey());
                newObj[newKey] = convertToSnakeCase(entry.getValue());
              }
            }
            return newObj;
          } else if (obj instanceof List) {
            // If it's a list, process each item recursively
            def newList = [];
            for (item in obj) {
              newList.add(convertToSnakeCase(item));
            }
            return newList;
          } else {
            return obj;
          }
        }
        // Apply the conversion
        ctx.google_scc = ctx.google_scc ?: [:];
        if (ctx.json != null) {
          ctx.google_scc.finding = convertToSnakeCase(ctx.json.finding);
        }

  # convert values
  - date:
      field: google_scc.finding.event_time
      target_field: google_scc.finding.event_time
      tag: date_finding_event_time
      formats:
        - ISO8601
      if: ctx.google_scc?.finding?.event_time != null && ctx.google_scc.finding.event_time != ''
      on_failure:
        - remove:
            field: google_scc.finding.event_time
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: google_scc.finding.create_time
      target_field: google_scc.finding.create_time
      tag: date_finding_createTime
      formats:
        - ISO8601
      if: ctx.google_scc?.finding?.create_time != null && ctx.google_scc.finding.create_time != ''
      on_failure:
        - remove:
            field: google_scc.finding.create_time
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.connections
      if: ctx.google_scc?.finding?.connections instanceof List
      processor:
        convert:
          field: _ingest._value.destination_ip
          target_field: _ingest._value.destination.ip
          tag: convert_destination_ip_to_ip
          type: ip
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.destination_ip
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.connections
      if: ctx.google_scc?.finding?.connections instanceof List
      processor:
        convert:
          field: _ingest._value.destination_port
          target_field: _ingest._value.destination.port
          tag: convert_destination_port_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.destination_port
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.connections
      if: ctx.google_scc?.finding?.connections instanceof List
      processor:
        convert:
          field: _ingest._value.source_ip
          target_field: _ingest._value.source.ip
          tag: convert_source_ip_to_ip
          type: ip
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.source_ip
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.connections
      if: ctx.google_scc?.finding?.connections instanceof List
      processor:
        convert:
          field: _ingest._value.source_port
          target_field: _ingest._value.source.port
          tag: convert_source_port_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.source_port
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.connections
      if: ctx.google_scc?.finding?.connections instanceof List
      processor:
        remove:
          field:
            - _ingest._value.source_port
            - _ingest._value.source_ip
            - _ingest._value.destination_port
            - _ingest._value.destination_ip
          tag: remove_source_port_source_ip_destination_port_destination_ip
          ignore_missing: true
  - rename:
      field: google_scc.finding.mitre_attack.additional_tactics
      target_field: google_scc.finding.mitre_attack.additional.tactics
      tag: rename_finding_mitre_attack_additional_tactics
      ignore_missing: true
  - rename:
      field: google_scc.finding.mitre_attack.primary_tactic
      target_field: google_scc.finding.mitre_attack.primary.tactic
      tag: rename_finding_mitre_attack_primary_tactic
      ignore_missing: true
  - rename:
      field: google_scc.finding.mitre_attack.additional_techniques
      target_field: google_scc.finding.mitre_attack.additional.techniques
      tag: rename_finding_mitre_attack_additional_techniques
      ignore_missing: true
  - rename:
      field: google_scc.finding.mitre_attack.primary_techniques
      target_field: google_scc.finding.mitre_attack.primary.techniques
      tag: rename_finding_mitre_attack_primary_techniques
      ignore_missing: true
  - foreach:
      field: google_scc.finding.log_entries
      if: ctx.google_scc?.finding?.log_entries instanceof List
      processor:
        date:
          field: _ingest._value.cloud_logging_entry.timestamp
          target_field: _ingest._value.cloud_logging_entry.timestamp
          tag: date_finding_log_entries_cloud_logging_entry_timestamp
          formats:
            - ISO8601
          on_failure:
            - remove:
                field: _ingest._value.cloud_logging_entry.timestamp
                ignore_missing: true
  - convert:
      field: google_scc.finding.access.caller_ip
      tag: convert_finding_access_caller_ip_to_ip
      type: ip
      ignore_missing: true
      if: ctx.google_scc?.finding?.access?.caller_ip != ''
      on_failure:
        - remove:
            field: google_scc.finding.access.caller_ip
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: google_scc.finding.access.principal_email
      target_field: google_scc.finding.access.principal.email
      tag: rename_finding_access_principal_email
      ignore_missing: true
  - rename:
      field: google_scc.finding.access.principal_subject
      target_field: google_scc.finding.access.principal.subject
      tag: rename_finding_access_principal_subject
      ignore_missing: true
  - foreach:
      field: google_scc.finding.access.service_account_delegation_info
      if: ctx.google_scc?.finding?.access?.service_account_delegation_info instanceof List
      processor:
        rename:
          field: _ingest._value.principal_email
          target_field: _ingest._value.principal.email
          tag: rename_finding_access_service_account_delegation_info_principal_email
          ignore_missing: true
  - foreach:
      field: google_scc.finding.access.service_account_delegation_info
      if: ctx.google_scc?.finding?.access?.service_account_delegation_info instanceof List
      processor:
        rename:
          field: _ingest._value.principal_subject
          target_field: _ingest._value.principal.subject
          tag: rename_finding_access_service_account_delegation_info_principal_subject
          ignore_missing: true
  - rename:
      field: google_scc.finding.access.service_account_delegation_info
      target_field: google_scc.finding.access.service_account.delegation_info
      tag: rename_finding_access_service_account_delegation_info
      ignore_missing: true
  - rename:
      field: google_scc.finding.access.service_account_key_name
      target_field: google_scc.finding.access.service_account.key_name
      tag: rename_finding_access_service_account_key_name
      ignore_missing: true
  - rename:
      field: google_scc.finding.finding_class
      target_field: google_scc.finding.class
      tag: rename_finding_finding_class
      ignore_missing: true
  - rename:
      field: google_scc.finding.cloud_dlp_data_profile.data_profile
      target_field: google_scc.finding.cloud_dlp.data_profile.value
      tag: rename_finding_cloud_dlp_data_profile_data_profile
      ignore_missing: true
  - convert:
      field: google_scc.finding.cloud_dlp_inspection.full_scan
      target_field: google_scc.finding.cloud_dlp.inspection.full_scan
      tag: convert_finding_cloud_dlp_inspection_full_scan_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.google_scc?.finding?.cloud_dlp_inspection?.full_scan != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: google_scc.finding.cloud_dlp_inspection.info_type_count
      target_field: google_scc.finding.cloud_dlp.inspection.info_type.count
      tag: convert_finding_cloud_dlp_inspection_info_type_count_to_boolean
      type: long
      ignore_missing: true
      if: ctx.google_scc?.finding?.cloud_dlp_inspection?.info_type_count != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: google_scc.finding.cloud_dlp_inspection.info_type
      target_field: google_scc.finding.cloud_dlp.inspection.info_type.value
      tag: rename_finding_cloud_dlp_inspection_info_type
      ignore_missing: true
  - rename:
      field: google_scc.finding.cloud_dlp_inspection.inspect_job
      target_field: google_scc.finding.cloud_dlp.inspection.inspect_job
      tag: rename_finding_cloud_dlp_inspection_inspect_job
      ignore_missing: true
  - rename:
      field: google_scc.finding.contacts.billing.contacts
      target_field: google_scc.finding.contacts.billing
      tag: rename_finding_contacts_billing_contacts
      ignore_missing: true
      override: true
  - rename:
      field: google_scc.finding.contacts.legal.contacts
      target_field: google_scc.finding.contacts.legal
      tag: rename_finding_contacts_legal_contacts
      ignore_missing: true
      override: true
  - rename:
      field: google_scc.finding.contacts.security.contacts
      target_field: google_scc.finding.contacts.security
      tag: rename_finding_contacts_security_contacts
      ignore_missing: true
      override: true
  - rename:
      field: google_scc.finding.contacts.all.contacts
      target_field: google_scc.finding.contacts.all
      tag: rename_finding_contacts_all_contacts
      ignore_missing: true
      override: true
  - rename:
      field: google_scc.finding.contacts.product_updates.contacts
      target_field: google_scc.finding.contacts.product_updates
      tag: rename_finding_contacts_product_updates_contacts
      ignore_missing: true
      override: true
  - rename:
      field: google_scc.finding.contacts.suspension.contacts
      target_field: google_scc.finding.contacts.suspension
      tag: rename_finding_contacts_suspension_contacts
      ignore_missing: true
      override: true
  - rename:
      field: google_scc.finding.contacts.technical.contacts
      target_field: google_scc.finding.contacts.technical
      tag: rename_finding_contacts_technical_contacts
      ignore_missing: true
      override: true
  - rename:
      field: google_scc.finding.contacts.technical_incidents.contacts
      target_field: google_scc.finding.contacts.technical_incidents
      tag: rename_finding_contacts_technical_incidents_contacts
      ignore_missing: true
      override: true
  - foreach:
      field: google_scc.finding.files
      if: ctx.google_scc?.finding?.files instanceof List
      processor:
        convert:
          field: _ingest._value.size
          tag: convert_files_size_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.size
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.files
      if: ctx.google_scc?.finding?.files instanceof List
      processor:
        convert:
          field: _ingest._value.hashed_size
          tag: convert_files_hashed_size_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.hashed_size
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.files
      if: ctx.google_scc?.finding?.files instanceof List
      processor:
        convert:
          field: _ingest._value.partially_hashed
          tag: convert_files_partially_hashed_to_boolean
          type: boolean
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.partially_hashed
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.indicator.ip_addresses
      if: ctx.google_scc?.finding?.indicator?.ip_addresses instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_finding_indicator_ip_addresses_to_ip
          type: ip
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.indicator.signatures
      if: ctx.google_scc?.finding?.indicator?.signatures instanceof List
      processor:
        foreach:
          field: _ingest._value.memory_hash_signature.detections
          ignore_missing: true
          processor:
            convert:
              field: _ingest._value.percent_pages_matched
              tag: convert_finding_indicator_signatures_percent_pages_matched_to_long
              type: long
              ignore_missing: true
              on_failure:
                - remove:
                    field: _ingest._value.percent_pages_matched
                - append:
                    field: error.message
                    value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}''Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.indicator.signatures
      if: ctx.google_scc?.finding?.indicator?.signatures instanceof List
      processor:
        rename:
          field: _ingest._value.yara_rule_signature.yara_rule
          tag: rename_finding_indicator_signatures_yara_rule_signature_yara_rule
          target_field: _ingest._value.yara.rule
          ignore_missing: true
  - convert:
      field: google_scc.finding.kernel_root_kit.unexpected_code_modification
      target_field: google_scc.finding.kernel_root_kit.unexpected.code_modification
      tag: convert_finding_kernel_root_kit_unexpected_code_modification_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.google_scc?.finding?.kernel_root_kit?.unexpected_code_modification != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: google_scc.finding.kernel_root_kit.unexpected_ftrace_handler
      target_field: google_scc.finding.kernel_root_kit.unexpected.ftrace_handler
      tag: convert_finding_kernel_root_kit_unexpected_ftrace_handler_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.google_scc?.finding?.kernel_root_kit?.unexpected_ftrace_handler != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: google_scc.finding.kernel_root_kit.unexpected_interrupt_handler
      target_field: google_scc.finding.kernel_root_kit.unexpected.interrupt_handler
      tag: convert_finding_kernel_root_kit_unexpected_interrupt_handler_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.google_scc?.finding?.kernel_root_kit?.unexpected_interrupt_handler != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: google_scc.finding.kernel_root_kit.unexpected_kernel_code_pages
      target_field: google_scc.finding.kernel_root_kit.unexpected.kernel_code_pages
      tag: convert_finding_kernel_root_kit_unexpected_kernel_code_pages_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.google_scc?.finding?.kernel_root_kit?.unexpected_kernel_code_pages != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: google_scc.finding.kernel_root_kit.unexpected_kprobe_handler
      target_field: google_scc.finding.kernel_root_kit.unexpected.kprobe_handler
      tag: convert_finding_kernel_root_kit_unexpected_kprobe_handler_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.google_scc?.finding?.kernel_root_kit?.unexpected_kprobe_handler != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: google_scc.finding.kernel_root_kit.unexpected_processes_in_runqueue
      target_field: google_scc.finding.kernel_root_kit.unexpected.processes_in_runqueue
      tag: convert_finding_kernel_root_kit_unexpected_processes_in_runqueue_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.google_scc?.finding?.kernel_root_kit?.unexpected_processes_in_runqueue != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: google_scc.finding.kernel_root_kit.unexpected_read_only_data_modification
      target_field: google_scc.finding.kernel_root_kit.unexpected.read_only_data_modification
      tag: convert_finding_kernel_root_kit_unexpected_read_only_data_modification_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.google_scc?.finding?.kernel_root_kit?.unexpected_read_only_data_modification != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: google_scc.finding.kernel_root_kit.unexpected_system_call_handler
      target_field: google_scc.finding.kernel_root_kit.unexpected.system_call_handler
      tag: convert_finding_kernel_root_kit_unexpected_system_call_handler_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.google_scc?.finding?.kernel_root_kit?.unexpected_system_call_handler != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: google_scc.finding.mute
      target_field: google_scc.finding.mute.state
      tag: rename_finding_mute
      ignore_missing: true
  - rename:
      field: google_scc.finding.mute_initiator
      target_field: google_scc.finding.mute.initiator
      tag: rename_finding_mute_initiator
      ignore_missing: true
  - date:
      field: google_scc.finding.mute_update_time
      target_field: google_scc.finding.mute.update_time
      tag: date_finding_mute_update_time
      formats:
        - ISO8601
      if: ctx.google_scc?.finding?.mute_update_time != null && ctx.google_scc.finding.mute_update_time != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: google_scc.finding.mute_info.static_mute.apply_time
      target_field: google_scc.finding.mute_info.static_mute.apply_time
      tag: date_finding_mute_info_static_mute_apply_time
      formats:
        - ISO8601
      if: ctx.google_scc?.finding?.mute_info?.static_mute?.apply_time != null && ctx.google_scc.finding.mute_info.static_mute.apply_time != ''
      on_failure:
        - remove:
            field: google_scc.finding.mute_info.static_mute.apply_time
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.mute_info.dynamic_mute_records
      if: ctx.google_scc?.finding?.mute_info?.dynamic_mute_records instanceof List
      processor:
        date:
          field: _ingest._value.match_time
          target_field: _ingest._value.match_time
          tag: date_finding_mute_info_dynamic_mute_records_match_time
          formats:
            - ISO8601
          on_failure:
            - remove:
                field: _ingest._value.match_time
                ignore_missing: true
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        convert:
          field: _ingest._value.binary.size
          tag: convert_finding_processes_binary_size_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.binary.size
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        convert:
          field: _ingest._value.binary.hashed_size
          tag: convert_finding_processes_binary_hashed_size_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.binary.hashed_size
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        convert:
          field: _ingest._value.binary.partially_hashed
          tag: convert_finding_processes_binary_partially_hashed_to_boolean
          type: boolean
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.binary.partially_hashed
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        foreach:
          field: _ingest._value.libraries
          ignore_missing: true
          processor:
            convert:
              field: _ingest._value.hashed_size
              tag: convert_finding_processes_libraries_hashed_size_to_long
              type: long
              ignore_missing: true
              on_failure:
                - remove:
                    field: _ingest._value.hashed_size
                - append:
                    field: error.message
                    value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        foreach:
          field: _ingest._value.libraries
          ignore_missing: true
          processor:
            convert:
              field: _ingest._value.size
              tag: convert_finding_processes_libraries_size_to_long
              type: long
              ignore_missing: true
              on_failure:
                - remove:
                    field: _ingest._value.size
                - append:
                    field: error.message
                    value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        foreach:
          field: _ingest._value.libraries
          ignore_missing: true
          processor:
            convert:
              field: _ingest._value.partially_hashed
              tag: convert_finding_processes_libraries_partially_hashed_to_boolean
              type: boolean
              ignore_missing: true
              on_failure:
                - remove:
                    field: _ingest._value.partially_hashed
                - append:
                    field: error.message
                    value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        convert:
          field: _ingest._value.script.hashed_size
          tag: convert_finding_processes_script_hashed_size_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.script.hashed_size
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        convert:
          field: _ingest._value.script.size
          tag: convert_finding_processes_script_size_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.script.size
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        convert:
          field: _ingest._value.script.partially_hashed
          tag: convert_finding_processes_script_partially_hashed_to_boolean
          type: boolean
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.script.partially_hashed
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        rename:
          field: _ingest._value.parent_pid
          tag: rename_finding_processes_parent_pid
          target_field: _ingest._value.parent.pid
          ignore_missing: true
  # GCP meta fields namely - projectName,projectDisplayName,parentName,parentDisplayName,folders,cloudProvider,organization
  # are inside "resource" field in v1 API.
  # Copy them into "google_scc.finding.resource.gcp_metadata" to consistent with v2 API.
  - rename:
      field: google_scc.finding.resource.folders
      target_field: google_scc.finding.resource.gcp_metadata.folders
      tag: rename_resource_folders
      ignore_missing: true
  - rename:
      field: google_scc.finding.resource.parent_display_name
      target_field: google_scc.finding.resource.gcp_metadata.parent_display_name
      tag: rename_resource_parent_display_name
      ignore_missing: true
  - rename:
      field: google_scc.finding.resource.parent_name
      target_field: google_scc.finding.resource.gcp_metadata.parent
      tag: rename_resource_parent_name
      ignore_missing: true
  - rename:
      field: google_scc.finding.resource.project_display_name
      target_field: google_scc.finding.resource.gcp_metadata.project_display_name
      tag: rename_resource_project_display_name
      ignore_missing: true
  - rename:
      field: google_scc.finding.resource.project_name
      target_field: google_scc.finding.resource.gcp_metadata.project
      tag: rename_resource_project_name
      ignore_missing: true
  - rename:
      field: google_scc.finding.resource.organization
      target_field: google_scc.finding.resource.gcp_metadata.organization
      tag: rename_resource_organization
      ignore_missing: true
  - rename:
      field: google_scc.finding.security_marks.marks
      target_field: google_scc.finding.security_marks.value
      tag: rename_finding_security_marks_marks
      ignore_missing: true
  - rename:
      field: google_scc.finding.source_properties.supporting_data
      target_field: google_scc.finding.source_properties_supporting_data
      tag: rename_finding_source_properties_supporting_data
      ignore_missing: true
  - convert:
      field: google_scc.finding.vulnerability.cve.cvssv3.base_score
      tag: convert_finding_vulnerability_cve_cvssv3_base_score_to_float
      type: float
      ignore_missing: true
      if: ctx.google_scc?.finding?.vulnerability?.cve?.cvssv3?.base_score != ''
      on_failure:
        - remove:
            field: google_scc.finding.vulnerability.cve.cvssv3.base_score
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: google_scc.finding.vulnerability.cve.exploit_release_date
      target_field: google_scc.finding.vulnerability.cve.exploit_release_date
      tag: date_finding_vulnerability_cve_exploit_release_date
      formats:
        - ISO8601
      if: ctx.google_scc?.finding?.vulnerability?.cve?.exploit_release_date != null && ctx.google_scc.finding.vulnerability.cve.exploit_release_date != ''
      on_failure:
        - remove:
            field: google_scc.finding.vulnerability.cve.exploit_release_date
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: google_scc.finding.vulnerability.cve.first_exploitation_date
      target_field: google_scc.finding.vulnerability.cve.first_exploitation_date
      tag: date_finding_vulnerability_cve_first_exploitation_date
      formats:
        - ISO8601
      if: ctx.google_scc?.finding?.vulnerability?.cve?.first_exploitation_date != null && ctx.google_scc.finding.vulnerability.cve.first_exploitation_date != ''
      on_failure:
        - remove:
            field: google_scc.finding.vulnerability.cve.first_exploitation_date
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: google_scc.finding.vulnerability.cve.observed_in_the_wild
      tag: convert_finding_vulnerability_cve_observed_in_the_wild_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.google_scc?.finding?.vulnerability?.cve?.observed_in_the_wild != ''
      on_failure:
        - remove:
            field: google_scc.finding.vulnerability.cve.observed_in_the_wild
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: google_scc.finding.vulnerability.cve.upstream_fix_available
      tag: convert_finding_vulnerability_cve_upstream_fix_available_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.google_scc?.finding?.vulnerability?.cve?.upstream_fix_available != ''
      on_failure:
        - remove:
            field: google_scc.finding.vulnerability.cve.upstream_fix_available
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: google_scc.finding.vulnerability.cve.zero_day
      tag: convert_finding_vulnerability_cve_zero_day_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.google_scc?.finding?.vulnerability?.cve?.zero_day != ''
      on_failure:
        - remove:
            field: google_scc.finding.vulnerability.cve.zero_day
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: google_scc.finding.vulnerability.cve.cvssv3.attack_complexity
      target_field: google_scc.finding.vulnerability.cve.cvssv3.attack.complexity
      tag: rename_finding_vulnerability_cve_cvssv3_attack_complexity
      ignore_missing: true
  - rename:
      field: google_scc.finding.vulnerability.cve.cvssv3.attack_vector
      target_field: google_scc.finding.vulnerability.cve.cvssv3.attack.vector
      tag: rename_finding_vulnerability_cve_cvssv3_attack_vector
      ignore_missing: true
  - convert:
      field: google_scc.finding.vulnerability.provider_risk_score
      tag: convert_finding_vulnerability_provider_risk_score_to_long
      type: long
      ignore_missing: true
      if: ctx.google_scc?.finding?.vulnerability?.provider_risk_score != ''
      on_failure:
        - remove:
            field: google_scc.finding.vulnerability.provider_risk_score
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: google_scc.finding.vulnerability.reachable
      tag: convert_finding_vulnerability_reachable_to_boolean
      type: boolean
      ignore_missing: true
      if: ctx.google_scc?.finding?.vulnerability?.reachable != ''
      on_failure:
        - remove:
            field: google_scc.finding.vulnerability.reachable
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: google_scc.finding.vulnerability.security_bulletin.submission_time
      target_field: google_scc.finding.vulnerability.security_bulletin.submission_time
      tag: date_finding_vulnerability_security_bulletin_submission_time
      formats:
        - ISO8601
      if: ctx.google_scc?.finding?.vulnerability?.security_bulletin?.submission_time != null && ctx.google_scc.finding.vulnerability.security_bulletin.submission_time != ''
      on_failure:
        - remove:
            field: google_scc.finding.vulnerability.security_bulletin.submission_time
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

  # populate ECS fields

  - set:
      field: '@timestamp'
      tag: set_@timestamp_from_event_time
      copy_from: google_scc.finding.event_time
      ignore_empty_value: true
  - set:
      field: message
      tag: set_message
      copy_from: google_scc.finding.description
      ignore_empty_value: true

  # event.*
  - set:
      field: event.kind
      tag: set_event_kind_to_alert
      value: alert
      if: ctx.google_scc?.finding?.class == 'THREAT'
  - set:
      field: event.kind
      tag: set_event_kind_to_state
      value: state
      if: ctx.google_scc?.finding?.class == 'MISCONFIGURATION'
  - set:
      field: event.kind
      tag: set_event_kind_to_event
      value: event
      if: ctx.event?.kind == null
  - append:
      field: event.category
      tag: append_vulnerability_into_event_category
      value: vulnerability
      if: ctx.google_scc?.finding?.class == 'VULNERABILITY'
  - append:
      field: event.category
      tag: append_threat_into_event_category
      value: threat
      if: ctx.google_scc?.finding?.class == 'THREAT'
  - append:
      field: event.category
      tag: append_configuration_into_event_category
      value: configuration
      if: ctx.google_scc?.finding?.class == 'MISCONFIGURATION'
  - append:
      field: event.type
      tag: append_indicator_into_event_type
      value: indicator
      if: ctx.google_scc?.finding?.class == 'THREAT'
  - append:
      field: event.type
      tag: append_info_into_event_type
      value: info
      if: ctx.event?.type == null
  - set:
      field: event.outcome
      tag: set_event_outcome_to_success
      value: success
      if: ctx.google_scc?.finding?.state == 'INACTIVE' && ctx.google_scc?.finding?.class == 'MISCONFIGURATION'
  - set:
      field: event.outcome
      tag: set_event_outcome_to_failure
      value: failure
      if: ctx.google_scc?.finding?.state == 'ACTIVE' && ctx.google_scc?.finding?.class == 'MISCONFIGURATION'
  - set:
      field: event.outcome
      tag: set_event_outcome_to_unknown
      value: unknown
      if: ctx.google_scc?.finding?.state == 'STATE_UNSPECIFIED' && ctx.google_scc?.finding?.class == 'MISCONFIGURATION'
  - set:
      field: event.created
      tag: set_event_created_from_create_time
      copy_from: google_scc.finding.create_time
      ignore_empty_value: true
  - set:
      field: event.id
      tag: set_event_id_from_name
      copy_from: google_scc.finding.name
      ignore_empty_value: true
  - script:
      lang: painless
      description: Script to set event.severity.
      tag: script_to_set_event_severity
      if: ctx.google_scc?.finding?.severity != null
      source: |-
        def severity = ctx.google_scc.finding.severity;
          if (severity == 'LOW' || severity == 'SEVERITY_UNSPECIFIED') {
            ctx.event.severity = 21;
          } else if (severity == 'MEDIUM') {
            ctx.event.severity = 47;
          } else if (severity == 'HIGH') {
            ctx.event.severity = 73;
          } else if (severity == 'CRITICAL') {
            ctx.event.severity = 99;
          }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

  # observer.*
  - set:
      field: observer.vendor
      tag: set_observer_vendor
      value: Google Security Command Center

  # container.*
  - foreach:
      field: google_scc.finding.containers
      if: ctx.google_scc?.finding?.containers instanceof List
      processor:
        append:
          field: container.name
          tag: append_finding_containers_name_to_conatiner_name
          value: '{{{_ingest._value.name}}}'
          allow_duplicates: false

  # cloud.*
  - dissect:
      description: Extract Cloud Account ID.
      field: google_scc.finding.resource.gcp_metadata.organization
      pattern: 'organizations/%{cloud.account.id}'
      if: ctx.google_scc?.finding?.resource?.gcp_metadata?.organization != ''
      tag: dissect_to_extract_cloud_account_id
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: cloud.account.id
      tag: set_cloud_account_id_from_aws_metadata_account_id
      copy_from: google_scc.finding.resource.aws_metadata.account.id
      ignore_empty_value: true
      if: ctx.cloud?.account?.id == null
  - set:
      field: cloud.instance.id
      tag: set_cloud_instance_id_from_resource_name
      copy_from: google_scc.finding.resource.name
      ignore_empty_value: true
      if: ctx.google_scc?.finding?.resource?.type == 'google.compute.Instance'
  - set:
      field: cloud.instance.name
      tag: set_cloud_instance_name_from_resource_display_name
      copy_from: google_scc.finding.resource.display_name
      ignore_empty_value: true
      if: ctx.google_scc?.finding?.resource?.type == 'google.compute.Instance'
  - set:
      field: cloud.provider
      tag: set_cloud_provider_to_gcp
      value: gcp
      if: ctx.google_scc?.finding?.resource?.cloud_provider == 'GOOGLE_CLOUD_PLATFORM'
  - set:
      field: cloud.provider
      tag: set_cloud_provider_to_aws
      value: aws
      if: ctx.google_scc?.finding?.resource?.cloud_provider == 'AMAZON_WEB_SERVICES'
  - set:
      field: cloud.provider
      tag: set_cloud_provider_to_azure
      value: azure
      if: ctx.google_scc?.finding?.resource?.cloud_provider == 'MICROSOFT_AZURE'
  - grok:
      field: google_scc.finding.resource.location
      tag: grok_to_extract_cloud_region
      patterns:
        - '^%{DATA:cloud.region}-(?<_temp>.)$'
        - '^%{DATA:cloud.region}$'
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: cloud.availability_zone
      tag: set_cloud_availability_zone_from_resource_location
      copy_from: google_scc.finding.resource.location
      ignore_empty_value: true
  - set:
      field: cloud.project.id
      tag: set_cloud_project_id_from_resource_gcp_metadata_project
      copy_from: google_scc.finding.resource.gcp_metadata.project
      ignore_empty_value: true
  - set:
      field: cloud.project.name
      tag: set_cloud_project_name_from_resource_gcp_metadata_project_display_name
      copy_from: google_scc.finding.resource.gcp_metadata.project_display_name
      ignore_empty_value: true
  - set:
      field: cloud.service.name
      tag: set_cloud_service_name_from_resource_service
      copy_from: google_scc.finding.resource.service
      ignore_empty_value: true

  # host.*
  - set:
      field: host.name
      tag: set_host_name_from_resource_name
      copy_from: google_scc.finding.resource.name
      ignore_empty_value: true
      if: ctx.google_scc?.finding?.resource?.type == 'google.compute.Instance'

  # destination.*
  - foreach:
      field: google_scc.finding.connections
      if: ctx.google_scc?.finding?.connections instanceof List
      processor:
        append:
          field: destination.ip
          tag: append_destination_ip_to_destination_ip
          value: '{{{_ingest._value.destination.ip}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.connections
      if: ctx.google_scc?.finding?.connections instanceof List
      processor:
        append:
          field: destination.port
          tag: append_destination_port_to_destination_port
          value: '{{{_ingest._value.destination.port}}}'
          allow_duplicates: false
  # We are not appending error.message when the convert processor fails because it generates an error related to an empty string.
  # An empty string is appended when google_scc.finding.connections[].destination.port is null in earlier processor.
  - foreach:
      field: destination.port
      if: ctx.destination?.port instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_destination_port_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value

  # source.*
  - foreach:
      field: google_scc.finding.connections
      if: ctx.google_scc?.finding?.connections instanceof List
      processor:
        append:
          field: source.ip
          tag: append_source_ip_to_source_ip
          value: '{{{_ingest._value.source.ip}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.connections
      if: ctx.google_scc?.finding?.connections instanceof List
      processor:
        append:
          field: source.port
          tag: append_source_port_to_source_port
          value: '{{{_ingest._value.source.port}}}'
          allow_duplicates: false
  # We are not appending error.message when the convert processor fails because it generates an error related to an empty string.
  # An empty string is appended when google_scc.finding.connections[].source.port is null in earlier processor.
  - foreach:
      field: source.port
      if: ctx.source?.port instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_source_port_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value

  # network.*
  - foreach:
      field: google_scc.finding.connections
      if: ctx.google_scc?.finding?.connections instanceof List
      processor:
        append:
          field: network.transport
          tag: append_protocol_to_network_transport
          value: '{{{_ingest._value.protocol}}}'
          allow_duplicates: false
  - lowercase:
      field: network.transport
      tag: lowercase_network_transport
      ignore_missing: true

  # organization.*
  - dissect:
      description: Extract Organization ID.
      field: google_scc.finding.parent
      pattern: 'organizations/%{organization.id}/sources/%{google_scc.finding.source_id}'
      if: ctx.google_scc?.finding?.parent != ''
      tag: dissect_to_extract_organization_id
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

  # orchestrator.*
  - foreach:
      field: google_scc.finding.kubernetes.access_reviews
      if: ctx.google_scc?.finding?.kubernetes?.access_reviews instanceof List
      processor:
        append:
          field: orchestrator.namespace
          tag: append_kubernetes_access_reviews_ns_to_orchestrator_namespace
          value: '{{{_ingest._value.ns}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.kubernetes.access_reviews
      if: ctx.google_scc?.finding?.kubernetes?.access_reviews instanceof List
      processor:
        append:
          field: orchestrator.resource.name
          tag: append_kubernetes_access_reviews_name_to_orchestrator_resource_name
          value: '{{{_ingest._value.name}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.kubernetes.access_reviews
      if: ctx.google_scc?.finding?.kubernetes?.access_reviews instanceof List
      processor:
        append:
          field: orchestrator.api_version
          tag: append_kubernetes_access_reviews_version_to_orchestrator_api_version
          value: '{{{_ingest._value.version}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.kubernetes.access_reviews
      if: ctx.google_scc?.finding?.kubernetes?.access_reviews instanceof List
      processor:
        append:
          field: orchestrator.resource.type
          tag: append_kubernetes_access_reviews_resource_to_orchestrator_resource_type
          value: '{{{_ingest._value.resource}}}'
          allow_duplicates: false
  - set:
      field: orchestrator.type
      tag: set_orchestrator_type_to_kubernetes
      value: kubernetes
      if: ctx.google_scc?.finding?.kubernetes != null

  # file.*
  - foreach:
      field: google_scc.finding.files
      if: ctx.google_scc?.finding?.files instanceof List
      processor:
        append:
          field: file.path
          tag: append_files_path_to_file_path
          value: '{{{_ingest._value.path}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.files
      if: ctx.google_scc?.finding?.files instanceof List
      processor:
        append:
          field: file.size
          tag: append_files_size_to_file_size
          value: '{{{_ingest._value.size}}}'
          allow_duplicates: false
  # We are not appending error.message when the convert processor fails because it generates an error related to an empty string.
  # An empty string is appended when google_scc.finding.files[].size is null in earlier processor.
  - foreach:
      field: file.size
      if: ctx.file?.size instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_file_size_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
  - foreach:
      field: google_scc.finding.files
      if: ctx.google_scc?.finding?.files instanceof List
      processor:
        append:
          field: file.hash.sha256
          tag: append_files_sha256_to_file_hash_sha256
          value: '{{{_ingest._value.sha256}}}'
          allow_duplicates: false

  # package.*
  - set:
      field: package.name
      tag: set_package_name_from_vulnerability_offending_package_package_name
      copy_from: google_scc.finding.vulnerability.offending_package.package_name
      ignore_empty_value: true
  - set:
      field: package.version
      tag: set_package_version_from_vulnerability_offending_package_package_version
      copy_from: google_scc.finding.vulnerability.offending_package.package_version
      ignore_empty_value: true
  - set:
      field: package.fixed_version
      tag: set_package_fixed_version_from_vulnerability_fixed_package_package_version
      copy_from: google_scc.finding.vulnerability.fixed_package.package_version
      ignore_empty_value: true

  # process.*
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        append:
          field: process.parent.pid
          tag: append_finding_processes_parent_pid_to_process_parent_pid
          value: '{{{_ingest._value.parent.pid}}}'
          allow_duplicates: false
  # We are not appending error.message when the convert processor fails because it generates an error related to an empty string.
  # An empty string is appended when google_scc.finding.processes[].parent.pid is null in earlier processor.
  - foreach:
      field: process.parent.pid
      if: ctx.process?.parent?.pid instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_process_parent_pid_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        append:
          field: process.pid
          tag: append_finding_processes_pid_to_process_pid
          value: '{{{_ingest._value.pid}}}'
          allow_duplicates: false
  # We are not appending error.message when the convert processor fails because it generates an error related to an empty string.
  # An empty string is appended when google_scc.finding.processes[].pid is null in earlier processor.
  - foreach:
      field: process.pid
      if: ctx.process?.pid instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_process_pid_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        append:
          field: process.name
          tag: append_finding_processes_name_to_process_name
          value: '{{{_ingest._value.name}}}'
          allow_duplicates: false

  # resource.*
  - set:
      field: resource.id
      tag: set_resource_id_from_resource_name
      copy_from: google_scc.finding.resource.name
      ignore_empty_value: true
  - set:
      field: resource.name
      tag: set_resource_name_from_resource_display_name
      copy_from: google_scc.finding.resource.display_name
      ignore_empty_value: true
  - set:
      field: resource.type
      tag: set_resource_type_from_resource_type
      copy_from: google_scc.finding.resource.type
      ignore_empty_value: true

  # result.*
  - set:
      field: result.evaluation
      tag: set_result_evaluation_to_passed
      value: passed
      if: ctx.google_scc?.finding?.state == 'INACTIVE' && ctx.google_scc?.finding?.class == 'MISCONFIGURATION'
  - set:
      field: result.evaluation
      tag: set_result_evaluation_to_failed
      value: failed
      if: ctx.google_scc?.finding?.state == 'ACTIVE' && ctx.google_scc?.finding?.class == 'MISCONFIGURATION'
  - set:
      field: result.evaluation
      tag: set_result_evaluation_to_unknown
      value: unknown
      if: ctx.google_scc?.finding?.state == 'STATE_UNSPECIFIED' && ctx.google_scc?.finding?.class == 'MISCONFIGURATION'

  # rule.*
  - set:
      field: rule.name
      tag: set_rule_name_from_category
      copy_from: google_scc.finding.category
      ignore_empty_value: true
      if: ctx.google_scc?.finding?.class == 'MISCONFIGURATION'
  - fingerprint:
      fields:
        - google_scc.finding.category
      tag: fingerprint_rule_uuid
      target_field: rule.uuid
      if: ctx.google_scc?.finding?.class == 'MISCONFIGURATION'
      ignore_missing: true
  - set:
      field: rule.description
      tag: set_rule_description_from_description
      copy_from: google_scc.finding.description
      ignore_empty_value: true
      if: ctx.google_scc?.finding?.class == 'MISCONFIGURATION'
  - set:
      field: rule.remediation
      tag: set_rule_remediation_from_source_properties_recommendation
      copy_from: google_scc.finding.source_properties.recommendation
      ignore_empty_value: true
      if: ctx.google_scc?.finding?.class == 'MISCONFIGURATION'

  # threat.*
  - foreach:
      field: google_scc.finding.mitre_attack.additional.tactics
      if: ctx.google_scc?.finding?.mitre_attack?.additional?.tactics instanceof List
      processor:
        append:
          field: threat.tactic.name
          tag: append_additional_tactics_to_threat_tactic_name
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - append:
      field: threat.tactic.name
      tag: append_primary_tactics_to_threat_tactic_name
      value: '{{{google_scc.finding.mitre_attack.primary.tactic}}}'
      allow_duplicates: false
      if: ctx.google_scc?.finding?.mitre_attack?.primary?.tactic != null
  - foreach:
      field: google_scc.finding.mitre_attack.additional.techniques
      if: ctx.google_scc?.finding?.mitre_attack?.additional?.techniques instanceof List
      processor:
        append:
          field: threat.technique.name
          tag: append_mitre_attack_additional_technique_to_threat_technique_name
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.mitre_attack.primary.techniques
      if: ctx.google_scc?.finding?.mitre_attack?.primary?.techniques instanceof List
      processor:
        append:
          field: threat.technique.name
          tag: append_mitre_attack_primary_technique_to_threat_technique_name
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - script:
      lang: painless
      description: Set Threat Tactic ID and Threat Technique ID
      tag: painless_set_threat_tactic_id_and_threat_technique_id
      # Threat Tactic Enums
      # https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.sources.findings#Tactic
      # https://cloud.google.com/security-command-center/docs/reference/rest/v2/organizations.sources.findings#tactic
      # Threat Technique Enums
      # https://cloud.google.com/security-command-center/docs/reference/rest/v1/organizations.sources.findings#technique
      # https://cloud.google.com/security-command-center/docs/reference/rest/v2/organizations.sources.findings#technique
      params:
        tactic:
          'RECONNAISSANCE': 'TA0043'
          'RESOURCE_DEVELOPMENT': 'TA0042'
          'INITIAL_ACCESS': 'TA0001'
          'EXECUTION': 'TA0002'
          'PERSISTENCE': 'TA0003'
          'PRIVILEGE_ESCALATION': 'TA0004'
          'DEFENSE_EVASION': 'TA0005'
          'CREDENTIAL_ACCESS': 'TA0006'
          'DISCOVERY': 'TA0007'
          'LATERAL_MOVEMENT': 'TA0008'
          'COLLECTION': 'TA0009'
          'COMMAND_AND_CONTROL': 'TA0011'
          'EXFILTRATION': 'TA0010'
          'IMPACT': 'TA0040'
        technique:
          'DATA_OBFUSCATION': 'T1001'
          'DATA_OBFUSCATION_STEGANOGRAPHY': 'T1001.002'
          'OS_CREDENTIAL_DUMPING': 'T1003'
          'OS_CREDENTIAL_DUMPING_PROC_FILESYSTEM': 'T1003.007'
          'OS_CREDENTIAL_DUMPING_ETC_PASSWORD_AND_ETC_SHADOW': 'T1003.008'
          'DATA_FROM_LOCAL_SYSTEM': 'T1005'
          'AUTOMATED_EXFILTRATION': 'T1020'
          'OBFUSCATED_FILES_OR_INFO': 'T1027'
          'STEGANOGRAPHY': 'T1027.003'
          'COMPILE_AFTER_DELIVERY': 'T1027.004'
          'COMMAND_OBFUSCATION': 'T1027.010'
          'SCHEDULED_TRANSFER': 'T1029'
          'SYSTEM_OWNER_USER_DISCOVERY': 'T1033'
          'MASQUERADING': 'T1036'
          'MATCH_LEGITIMATE_NAME_OR_LOCATION': 'T1036.005'
          'BOOT_OR_LOGON_INITIALIZATION_SCRIPTS': 'T1037'
          'STARTUP_ITEMS': 'T1037.005'
          'NETWORK_SERVICE_DISCOVERY': 'T1046'
          'SCHEDULED_TASK_JOB': 'T1053'
          'SCHEDULED_TASK_JOB_CRON': 'T1053.003'
          'CONTAINER_ORCHESTRATION_JOB': 'T1053.007'
          'PROCESS_INJECTION': 'T1055'
          'INPUT_CAPTURE': 'T1056'
          'INPUT_CAPTURE_KEYLOGGING': 'T1056.001'
          'PROCESS_DISCOVERY': 'T1057'
          'COMMAND_AND_SCRIPTING_INTERPRETER': 'T1059'
          'UNIX_SHELL': 'T1059.004'
          'PYTHON': 'T1059.006'
          'EXPLOITATION_FOR_PRIVILEGE_ESCALATION': 'T1068'
          'PERMISSION_GROUPS_DISCOVERY': 'T1069'
          'CLOUD_GROUPS': 'T1069.003'
          'INDICATOR_REMOVAL': 'T1070'
          'INDICATOR_REMOVAL_CLEAR_LINUX_OR_MAC_SYSTEM_LOGS': 'T1070.002'
          'INDICATOR_REMOVAL_CLEAR_COMMAND_HISTORY': 'T1070.003'
          'INDICATOR_REMOVAL_FILE_DELETION': 'T1070.004'
          'INDICATOR_REMOVAL_TIMESTOMP': 'T1070.006'
          'INDICATOR_REMOVAL_CLEAR_MAILBOX_DATA': 'T1070.008'
          'APPLICATION_LAYER_PROTOCOL': 'T1071'
          'DNS': 'T1071.004'
          'SOFTWARE_DEPLOYMENT_TOOLS': 'T1072'
          'VALID_ACCOUNTS': 'T1078'
          'DEFAULT_ACCOUNTS': 'T1078.001'
          'LOCAL_ACCOUNTS': 'T1078.003'
          'CLOUD_ACCOUNTS': 'T1078.004'
          'FILE_AND_DIRECTORY_DISCOVERY': 'T1083'
          'ACCOUNT_DISCOVERY_LOCAL_ACCOUNT': 'T1087.001'
          'PROXY': 'T1090'
          'EXTERNAL_PROXY': 'T1090.002'
          'MULTI_HOP_PROXY': 'T1090.003'
          'ACCOUNT_MANIPULATION': 'T1098'
          'ADDITIONAL_CLOUD_CREDENTIALS': 'T1098.001'
          'ADDITIONAL_CLOUD_ROLES': 'T1098.003'
          'SSH_AUTHORIZED_KEYS': 'T1098.004'
          'ADDITIONAL_CONTAINER_CLUSTER_ROLES': 'T1098.006'
          'MULTI_STAGE_CHANNELS': 'T1104'
          'INGRESS_TOOL_TRANSFER': 'T1105'
          'NATIVE_API': 'T1106'
          'BRUTE_FORCE': 'T1110'
          'AUTOMATED_COLLECTION': 'T1119'
          'SHARED_MODULES': 'T1129'
          'DATA_ENCODING': 'T1132'
          'STANDARD_ENCODING': 'T1132.001'
          'ACCESS_TOKEN_MANIPULATION': 'T1134'
          'TOKEN_IMPERSONATION_OR_THEFT': 'T1134.001'
          'CREATE_ACCOUNT': 'T1136'
          'LOCAL_ACCOUNT': 'T1136.001'
          'DEOBFUSCATE_DECODE_FILES_OR_INFO': 'T1140'
          'EXPLOIT_PUBLIC_FACING_APPLICATION': 'T1190'
          'SUPPLY_CHAIN_COMPROMISE': 'T1195'
          'COMPROMISE_SOFTWARE_DEPENDENCIES_AND_DEVELOPMENT_TOOLS': 'T1195.001'
          'EXPLOITATION_FOR_CLIENT_EXECUTION': 'T1203'
          'USER_EXECUTION': 'T1204'
          'LINUX_AND_MAC_FILE_AND_DIRECTORY_PERMISSIONS_MODIFICATION': 'T1222.002'
          'DOMAIN_POLICY_MODIFICATION': 'T1484'
          'DATA_DESTRUCTION': 'T1485'
          'DATA_ENCRYPTED_FOR_IMPACT': 'T1486'
          'SERVICE_STOP': 'T1489'
          'INHIBIT_SYSTEM_RECOVERY': 'T1490'
          'FIRMWARE_CORRUPTION': 'T1495'
          'RESOURCE_HIJACKING': 'T1496'
          'NETWORK_DENIAL_OF_SERVICE': 'T1498'
          'CLOUD_SERVICE_DISCOVERY': 'T1526'
          'STEAL_APPLICATION_ACCESS_TOKEN': 'T1528'
          'ACCOUNT_ACCESS_REMOVAL': 'T1531'
          'TRANSFER_DATA_TO_CLOUD_ACCOUNT': 'T1537'
          'STEAL_WEB_SESSION_COOKIE': 'T1539'
          'CREATE_OR_MODIFY_SYSTEM_PROCESS': 'T1543'
          'EVENT_TRIGGERED_EXECUTION': 'T1546'
          'BOOT_OR_LOGON_AUTOSTART_EXECUTION': 'T1547'
          'KERNEL_MODULES_AND_EXTENSIONS': 'T1547.006'
          'SHORTCUT_MODIFICATION': 'T1547.009'
          'ABUSE_ELEVATION_CONTROL_MECHANISM': 'T1548'
          'ABUSE_ELEVATION_CONTROL_MECHANISM_SETUID_AND_SETGID': 'T1548.001'
          'ABUSE_ELEVATION_CONTROL_MECHANISM_SUDO_AND_SUDO_CACHING': 'T1548.003'
          'UNSECURED_CREDENTIALS': 'T1552'
          'CREDENTIALS_IN_FILES': 'T1552.001'
          'BASH_HISTORY': 'T1552.003'
          'PRIVATE_KEYS': 'T1552.004'
          'SUBVERT_TRUST_CONTROL': 'T1553'
          'INSTALL_ROOT_CERTIFICATE': 'T1553.004'
          'COMPROMISE_HOST_SOFTWARE_BINARY': 'T1554'
          'CREDENTIALS_FROM_PASSWORD_STORES': 'T1555'
          'MODIFY_AUTHENTICATION_PROCESS': 'T1556'
          'PLUGGABLE_AUTHENTICATION_MODULES': 'T1556.003'
          'MULTI_FACTOR_AUTHENTICATION': 'T1556.006'
          'IMPAIR_DEFENSES': 'T1562'
          'DISABLE_OR_MODIFY_TOOLS': 'T1562.001'
          'INDICATOR_BLOCKING': 'T1562.006'
          'DISABLE_OR_MODIFY_LINUX_AUDIT_SYSTEM': 'T1562.012'
          'HIDE_ARTIFACTS': 'T1564'
          'HIDDEN_FILES_AND_DIRECTORIES': 'T1564.001'
          'HIDDEN_USERS': 'T1564.002'
          'EXFILTRATION_OVER_WEB_SERVICE': 'T1567'
          'EXFILTRATION_TO_CLOUD_STORAGE': 'T1567.002'
          'DYNAMIC_RESOLUTION': 'T1568'
          'LATERAL_TOOL_TRANSFER': 'T1570'
          'HIJACK_EXECUTION_FLOW': 'T1574'
          'HIJACK_EXECUTION_FLOW_DYNAMIC_LINKER_HIJACKING': 'T1574.006'
          'MODIFY_CLOUD_COMPUTE_INFRASTRUCTURE': 'T1578'
          'CREATE_SNAPSHOT': 'T1578.001'
          'CLOUD_INFRASTRUCTURE_DISCOVERY': 'T1580'
          'DEVELOP_CAPABILITIES': 'T1587'
          'DEVELOP_CAPABILITIES_MALWARE': 'T1587.001'
          'OBTAIN_CAPABILITIES': 'T1588'
          'OBTAIN_CAPABILITIES_MALWARE': 'T1588.001'
          'OBTAIN_CAPABILITIES_VULNERABILITIES': 'T1588.006'
          'ACTIVE_SCANNING': 'T1595'
          'SCANNING_IP_BLOCKS': 'T1595.001'
          'STAGE_CAPABILITIES': 'T1608'
          'UPLOAD_MALWARE': 'T1608.001'
          'CONTAINER_ADMINISTRATION_COMMAND': 'T1609'
          'DEPLOY_CONTAINER': 'T1610'
          'ESCAPE_TO_HOST': 'T1611'
          'CONTAINER_AND_RESOURCE_DISCOVERY': 'T1613'
          'REFLECTIVE_CODE_LOADING': 'T1620'
          'STEAL_OR_FORGE_AUTHENTICATION_CERTIFICATES': 'T1649'
          'FINANCIAL_THEFT': 'T1657'
      source: |-
        if (ctx.threat?.tactic?.name instanceof List) {
          def list = new ArrayList();
          for (def value: ctx.threat.tactic.name) {
            list.add(params.tactic.get(value));
          }
          ctx.threat.tactic.put('id', list);
        }
        if (ctx.threat?.technique?.name instanceof List) {
          def list = new ArrayList();
          for (def value: ctx.threat.technique.name) {
            list.add(params.technique.get(value));
          }
          ctx.threat.technique.put('id', list);
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

  # url.*
  - set:
      field: url.original
      copy_from: google_scc.finding.external_uri
      tag: set_url_original
      ignore_empty_value: true
  - uri_parts:
      field: url.original
      if: ctx.google_scc?.finding?.external_uri != null && ctx.google_scc.finding.external_uri != ''
      tag: uri_parts_processor
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

  # user.*
  - set:
      field: user.name
      tag: set_user_name_from_access_user_name
      copy_from: google_scc.finding.access.user_name
      ignore_empty_value: true
  - set:
      field: user.name
      tag: set_user_name_from_database_user_name
      copy_from: google_scc.finding.database.user_name
      ignore_empty_value: true
      if: ctx.user?.name == null
  - set:
      field: user.id
      tag: set_user_id_from_access_principal_email
      copy_from: google_scc.finding.access.principal.email
      ignore_empty_value: true
  - foreach:
      field: google_scc.finding.access.service_account_delegation_info
      if: ctx.google_scc?.finding?.access?.service_account_delegation_info instanceof List && ctx.user?.id == null
      processor:
        append:
          field: user.id
          tag: append_access_service_account_delegation_info_principal_email_to_user_id
          value: '{{{_ingest._value.principal.email}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.data_access_events
      if: ctx.google_scc?.finding?.data_access_events instanceof List && ctx.user?.id == null
      processor:
        append:
          field: user.id
          tag: append_data_access_events_principal_email_to_user_id
          value: '{{{_ingest._value.principal_email}}}'
          allow_duplicates: false
  - set:
      field: user.email
      tag: set_user_email_from_user_id
      copy_from: user.id
      ignore_empty_value: true
      if: ctx.user?.name == null
  - foreach:
      field: google_scc.finding.iam_bindings
      if: ctx.google_scc?.finding?.iam_bindings instanceof List
      processor:
        append:
          field: user.roles
          tag: append_iam_bindings_role_to_user_roles
          value: '{{{_ingest._value.role}}}'
          allow_duplicates: false

  # vulnerability.*
  - set:
      field: vulnerability.classification
      value: CVSS
      tag: set_vulnerability_classification
      if: ctx.google_scc?.finding?.class == 'VULNERABILITY'
  - set:
      field: vulnerability.enumeration
      value: CVE
      tag: set_vulnerability_enumeration_to_CVE
      if: ctx.google_scc?.finding?.class == 'VULNERABILITY' && ctx.google_scc?.finding?.vulnerability?.cve?.id?.startsWith('CVE') == true
  - set:
      field: vulnerability.enumeration
      value: GHSA
      tag: set_vulnerability_enumeration_to_GHSA
      if: ctx.google_scc?.finding?.class == 'VULNERABILITY' && ctx.google_scc?.finding?.vulnerability?.cve?.id?.startsWith('GHSA') == true
  - set:
      field: vulnerability.score.version
      value: '3.1'
      tag: set_vulnerability_score_version
      if: ctx.google_scc?.finding?.class == 'VULNERABILITY'
  - set:
      field: vulnerability.id
      tag: set_vulnerability_id_from_vulnerability_cve_id
      copy_from: google_scc.finding.vulnerability.cve.id
      ignore_empty_value: true
  - append:
      field: vulnerability.category
      tag: append_category_to_vulnerability_category
      value: '{{{google_scc.finding.category}}}'
      allow_duplicates: false
      if: ctx.google_scc?.finding?.category != null && ctx.google_scc?.finding?.class == 'VULNERABILITY'
  - set:
      field: vulnerability.description
      tag: set_vulnerability_description_from_description
      copy_from: google_scc.finding.description
      ignore_empty_value: true
      if: ctx.google_scc?.finding?.class == 'VULNERABILITY'
  - foreach:
      field: google_scc.finding.vulnerability.cve.references
      if: ctx.google_scc?.finding?.vulnerability?.cve?.references instanceof List
      processor:
        append:
          field: vulnerability.reference
          tag: append_vulnerability_cve_references_uri_to_vulnerability_reference
          value: '{{{_ingest._value.uri}}}'
          allow_duplicates: false
  - set:
      field: vulnerability.score.base
      tag: set_vulnerability_score_base_from_vulnerability_cve_cvssv3_base_score
      copy_from: google_scc.finding.vulnerability.cve.cvssv3.base_score
      ignore_empty_value: true
  - set:
      field: vulnerability.published_date
      tag: set_vulnerability_published_date_from_vulnerability_cve_exploit_release_date
      copy_from: google_scc.finding.vulnerability.cve.exploit_release_date
      ignore_empty_value: true
  - script:
      description: Map vulnerability.severity to CVSS standard
      tag: script_to_map_severity_to_CVSS
      lang: painless
      if: ctx.google_scc?.finding?.severity != null && ctx.google_scc.finding.class == 'VULNERABILITY'
      source: >
        String severity = ctx.google_scc.finding.severity;
        if (severity == 'SEVERITY_UNSPECIFIED') {
          ctx.vulnerability.put('severity', 'None');
        } else if (severity == 'LOW') {
          ctx.vulnerability.put('severity', 'Low');
        } else if (severity == 'MEDIUM') {
          ctx.vulnerability.put('severity', 'Medium');
        } else if (severity == 'HIGH') {
          ctx.vulnerability.put('severity', 'High');
        } else if (severity == 'CRITICAL') {
          ctx.vulnerability.put('severity', 'Critical');
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: vulnerability.title
      tag: set_vulnerability_title_from_package_name_package_version_vulnerability_id
      value: 'Vulnerability found in {{{package.name}}} {{{package.version}}} - {{{vulnerability.id}}}'
      if: ctx.package?.name != null && ctx.package?.version != null && ctx.vulnerability?.id != null
  - set:
      field: vulnerability.title
      tag: set_vulnerability_title_from_package_name_package_version
      value: 'Vulnerability found in {{{package.name}}} {{{package.version}}}'
      if: ctx.package?.name != null && ctx.package?.version != null && ctx.vulnerability?.title == null
  - set:
      field: vulnerability.title
      tag: set_vulnerability_title_from_vulnerability_id
      value: 'Vulnerability found - {{{vulnerability.id}}}'
      if: ctx.vulnerability?.id != null && ctx.vulnerability?.title == null
  - set:
      field: vulnerability.scanner.vendor
      tag: set_vulnerability_scanner_vendor
      value: Google Security Command Center
      if: ctx.google_scc?.finding?.class == 'VULNERABILITY'
  - set:
      field: vulnerability.cve
      tag: set_vulnerability_cve_from_vulnerability_cve_id
      copy_from: google_scc.finding.vulnerability.cve.id
      ignore_empty_value: true
      if: ctx.google_scc?.finding?.class == 'VULNERABILITY' && ctx.google_scc?.finding?.vulnerability?.cve?.id?.startsWith('CVE') == true

  # related.*
  - append:
      field: related.hosts
      tag: append_finding_resource_name_to_related_hosts
      value: '{{{google_scc.finding.resource.name}}}'
      allow_duplicates: false
      if: ctx.google_scc?.finding?.resource?.name != null && ctx.google_scc.finding.resource.type == 'google.compute.Instance'
  - foreach:
      field: google_scc.finding.connections
      if: ctx.google_scc?.finding?.connections instanceof List
      processor:
        append:
          field: related.ip
          tag: append_destination_ip_to_related_ip
          value: '{{{_ingest._value.destination.ip}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.connections
      if: ctx.google_scc?.finding?.connections instanceof List
      processor:
        append:
          field: related.ip
          tag: append_source_ip_to_related_ip
          value: '{{{_ingest._value.source.ip}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.indicator.ip_addresses
      if: ctx.google_scc?.finding?.indicator?.ip_addresses instanceof List
      processor:
        append:
          field: related.ip
          tag: append_finding_indicator_ip_addresses_related_ip
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - append:
      field: related.ip
      tag: append_finding_access_caller_ip_to_related_ip
      value: '{{{google_scc.finding.access.caller_ip}}}'
      allow_duplicates: false
      if: ctx.google_scc?.finding?.access?.caller_ip != null
  - append:
      field: related.user
      tag: append_access_user_name_to_related_user
      value: '{{{google_scc.finding.access.user_name}}}'
      allow_duplicates: false
      if: ctx.google_scc?.finding?.access?.user_name != null
  - append:
      field: related.user
      tag: append_database_user_name_to_related_user
      value: '{{{google_scc.finding.database.user_name}}}'
      allow_duplicates: false
      if: ctx.google_scc?.finding?.database?.user_name != null
  - append:
      field: related.user
      tag: append_access_principal_email_to_related_user
      value: '{{{google_scc.finding.access.principal.email}}}'
      allow_duplicates: false
      if: ctx.google_scc?.finding?.access?.principal?.email != null
  - foreach:
      field: google_scc.finding.access.service_account_delegation_info
      if: ctx.google_scc?.finding?.access?.service_account_delegation_info instanceof List
      processor:
        append:
          field: related.user
          tag: append_access_service_account_delegation_info_principal_email_into_related_user
          value: '{{{_ingest._value.principal.email}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.data_access_events
      if: ctx.google_scc?.finding?.data_access_events instanceof List
      processor:
        append:
          field: related.user
          tag: append_data_access_events_principal_email_into_related_user
          value: '{{{_ingest._value.principal_email}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.contacts.billing
      if: ctx.google_scc?.finding?.contacts?.billing instanceof List
      processor:
        append:
          field: related.user
          tag: append_contacts_billing_email_into_related_user
          value: '{{{_ingest._value.email}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.contacts.legal
      if: ctx.google_scc?.finding?.contacts?.legal instanceof List
      processor:
        append:
          field: related.user
          tag: append_contacts_legal_email_into_related_user
          value: '{{{_ingest._value.email}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.contacts.security
      if: ctx.google_scc?.finding?.contacts?.security instanceof List
      processor:
        append:
          field: related.user
          tag: append_contacts_security_email_into_related_user
          value: '{{{_ingest._value.email}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.contacts.all
      if: ctx.google_scc?.finding?.contacts?.all instanceof List
      processor:
        append:
          field: related.user
          tag: append_contacts_all_email_into_related_user
          value: '{{{_ingest._value.email}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.contacts.product_updates
      if: ctx.google_scc?.finding?.contacts?.product_updates instanceof List
      processor:
        append:
          field: related.user
          tag: append_contacts_product_updates_email_into_related_user
          value: '{{{_ingest._value.email}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.contacts.suspension
      if: ctx.google_scc?.finding?.contacts?.suspension instanceof List
      processor:
        append:
          field: related.user
          tag: append_contacts_suspension_email_into_related_user
          value: '{{{_ingest._value.email}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.contacts.technical
      if: ctx.google_scc?.finding?.contacts?.technical instanceof List
      processor:
        append:
          field: related.user
          tag: append_contacts_technical_email_into_related_user
          value: '{{{_ingest._value.email}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.contacts.technical_incidents
      if: ctx.google_scc?.finding?.contacts?.technical_incidents instanceof List
      processor:
        append:
          field: related.user
          tag: append_contacts_technical_incidents_email_into_related_user
          value: '{{{_ingest._value.email}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        append:
          field: related.hash
          tag: append_finding_processes_script_sha256_to_related_hash
          value: '{{{_ingest._value.script.sha256}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        append:
          field: related.hash
          tag: append_finding_processes_binary_sha256_to_related_hash
          value: '{{{_ingest._value.binary.sha256}}}'
          allow_duplicates: false
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List
      processor:
        foreach:
          field: _ingest._value.libraries
          ignore_missing: true
          processor:
            append:
              field: related.hash
              tag: append_finding_processes_libraries_sha256_to_related_hash
              value: '{{{_ingest._value.sha256}}}'
              allow_duplicates: false
  - foreach:
      field: google_scc.finding.files
      if: ctx.google_scc?.finding?.files instanceof List
      processor:
        append:
          field: related.hash
          tag: append_files_sha256_to_related_hash
          value: '{{{_ingest._value.sha256}}}'
          allow_duplicates: false

  - remove:
      field:
        - json
        - _temp
        - google_scc.finding.cloud_dlp_inspection.full_scan
        - google_scc.finding.cloud_dlp_inspection.info_type_count
        - google_scc.finding.kernel_root_kit.unexpected_code_modification
        - google_scc.finding.kernel_root_kit.unexpected_ftrace_handler
        - google_scc.finding.kernel_root_kit.unexpected_interrupt_handler
        - google_scc.finding.kernel_root_kit.unexpected_kernel_code_pages
        - google_scc.finding.kernel_root_kit.unexpected_kprobe_handler
        - google_scc.finding.kernel_root_kit.unexpected_processes_in_runqueue
        - google_scc.finding.kernel_root_kit.unexpected_read_only_data_modification
        - google_scc.finding.kernel_root_kit.unexpected_system_call_handler
        - google_scc.finding.mute_update_time
      tag: remove_unwanted_fields
      ignore_missing: true
  - foreach:
      field: google_scc.finding.vulnerability.cve.references
      if: ctx.google_scc?.finding?.vulnerability?.cve?.references instanceof List && (ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields')))
      processor:
        remove:
          field:
            - _ingest._value.uri
          tag: remove_remove_duplicate_custom_fields_from_vulnerability_cve_references_array
          ignore_missing: true
  - foreach:
      field: google_scc.finding.connections
      if: ctx.google_scc?.finding?.connections instanceof List && (ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields')))
      processor:
        remove:
          field:
            - _ingest._value.destination.ip
            - _ingest._value.destination.port
            - _ingest._value.source.ip
            - _ingest._value.source.port
            - _ingest._value.protocol
          tag: remove_remove_duplicate_custom_fields_from_connections_array
          ignore_missing: true
  - foreach:
      field: google_scc.finding.containers
      if: ctx.google_scc?.finding?.containers instanceof List && (ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields')))
      processor:
        remove:
          field:
            - _ingest._value.name
          tag: remove_remove_duplicate_custom_fields_from_containers_array
          ignore_missing: true
  - foreach:
      field: google_scc.finding.files
      if: ctx.google_scc?.finding?.files instanceof List && (ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields')))
      processor:
        remove:
          field:
            - _ingest._value.path
            - _ingest._value.size
            - _ingest._value.sha256
          tag: remove_remove_duplicate_custom_fields_from_files_array
          ignore_missing: true
  - foreach:
      field: google_scc.finding.processes
      if: ctx.google_scc?.finding?.processes instanceof List && (ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields')))
      processor:
        remove:
          field:
            - _ingest._value.name
            - _ingest._value.pid
            - _ingest._value.parent.pid
          tag: remove_remove_duplicate_custom_fields_from_processes_array
          ignore_missing: true
  - foreach:
      field: google_scc.finding.iam_bindings
      if: ctx.google_scc?.finding?.iam_bindings instanceof List && (ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields')))
      processor:
        remove:
          field:
            - _ingest._value.role
          tag: remove_remove_duplicate_custom_fields_from_iam_bindings_array
          ignore_missing: true
  - foreach:
      field: google_scc.finding.kubernetes.access_reviews
      if: ctx.google_scc?.finding?.kubernetes?.access_reviews instanceof List && (ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields')))
      processor:
        remove:
          field:
            - _ingest._value.ns
            - _ingest._value.name
            - _ingest._value.version
            - _ingest._value.resource
          tag: remove_remove_duplicate_custom_fields_from_kubernetes_access_reviews_array
          ignore_missing: true
  - remove:
      field:
        - google_scc.finding.event_time
        - google_scc.finding.create_time
        - google_scc.finding.name
        - google_scc.finding.resource.name
        - google_scc.finding.resource.type
        - google_scc.finding.resource.display_name
        - google_scc.finding.resource.service
        - google_scc.finding.description
        - google_scc.finding.mitre_attack.additional.tactics
        - google_scc.finding.mitre_attack.primary.tactic
        - google_scc.finding.mitre_attack.additional.techniques
        - google_scc.finding.mitre_attack.primary.techniques
        - google_scc.finding.resource.location
        - google_scc.finding.resource.gcp_metadata.project
        - google_scc.finding.resource.gcp_metadata.project_display_name
        - google_scc.finding.vulnerability.offending_package.package_name
        - google_scc.finding.vulnerability.offending_package.package_version
        - google_scc.finding.vulnerability.fixed_package.package_version
        - google_scc.finding.external_uri
        - google_scc.finding.vulnerability.cve.id
        - google_scc.finding.vulnerability.cve.cvssv3.base_score
      tag: remove_duplicate_custom_fields
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))

  # Cleanup
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: |-
        void handleMap(Map map) {
          map.values().removeIf(v -> {
            if (v instanceof Map) {
              handleMap(v);
            } else if (v instanceof List) {
              handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        void handleList(List list) {
          list.removeIf(v -> {
            if (v instanceof Map) {
              handleMap(v);
            } else if (v instanceof List) {
              handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        handleMap(ctx);
  - set:
      field: event.kind
      tag: set_pipeline_error_into_event_kind
      value: pipeline_error
      if: ctx.error?.message != null
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: |-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{{#_ingest.on_failure_processor_tag}}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{{/_ingest.on_failure_processor_tag}}}failed with message '{{{ _ingest.on_failure_message }}}'
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
