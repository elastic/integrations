---
description: Pipeline for AWS Bedrock model invocation logs.
processors:
  - rename:
      field: message
      target_field: event.original
      if: 'ctx.event?.original == null'
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: ctx.event?.original != null
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - remove:
      description: Drop fields unrelated to the ingested logs.
      field:
        - host
        - cloud
        - container
      ignore_missing: true
  - json:
      field: event.original
      target_field: aws_bedrock.invocation
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: cloud.service.name
      value: bedrock
  - date:
      field: aws_bedrock.invocation.timestamp
      target_field: "@timestamp"
      ignore_failure: true
      formats:
        - ISO8601
  - remove:
      field: aws_bedrock.invocation.timestamp
      ignore_missing: true
  - rename:
      field: aws_bedrock.invocation.operation
      target_field: event.action
      ignore_missing: true
  - rename:
      field: aws_bedrock.invocation.identity.arn
      target_field: user.id
      ignore_missing: true
  - rename:
      field: aws_bedrock.invocation.accountId
      target_field: cloud.account.id
      ignore_missing: true
  - rename:
      field: aws_bedrock.invocation.region
      target_field: cloud.region
      ignore_missing: true

  - script:
      description: Remove massive artifact blobs.
      if: ctx.aws_bedrock?.invocation?.artifacts instanceof List
      lang: painless
      source: |
        for (int i = 0; i < ctx.aws_bedrock.invocation.artifacts.length; i++) {
          if (ctx.aws_bedrock.invocation.artifacts[i].base64 instanceof String && ctx.aws_bedrock.invocation.artifacts[i].base64.length() > 32766) {
            ctx.aws_bedrock.invocation.artifacts[i].base64_massive_hash = ctx.aws_bedrock.invocation.artifacts[i].base64.sha1();
            ctx.aws_bedrock.invocation.artifacts[i].base64_massive_length = ctx.aws_bedrock.invocation.artifacts[i].base64.length();
            ctx.aws_bedrock.invocation.artifacts[i].remove("base64");
          }
        }

######
# Proposed LLM fields
######
  # Remarshal the request and response.
  - set:
      description: Prepare destination for request JSON.
      field: gen_ai.request.content
      value: ""
  - set:
      description: Prepare destination for response JSON.
      field: gen_ai.response.content
      value: ""
  - script:
      description: Convert bodies back to JSON.
      tag: remarshal_bodies
      lang: painless
      source: |
        String json(def val) {
          if (val == null) {
            return null;
          }
          if (val instanceof Map) {
            String out = '{';
            List keyList = new ArrayList(val.keySet());
            Collections.sort(keyList);
            for (int i=0; i < keyList.length; i++){
              if (i != 0) {
                out += ',';
              }
              String key = keyList[i];
              out += '"' +  key + '"';
              if (val[key] instanceof String){
                out += ':"' + val[key] + '"';
              } else {
                out += ':' + json(val[key]);
              }
            }
            return out + '}';
          } else if (val instanceof ArrayList) {
            String out = '[';
            for (int i = 0; i < val.length; i++){
              if (i != 0) {
                  out += ',';
              }
              out = out + json(val[i]);
            }
            return out + ']';
          } else if (val instanceof String) {
            return '"' + val + '"'; // This may not be valid JSON depending on code points in val. TODO: Add escape helper.
          }
          return val.toString();
        }
        ctx.gen_ai.request.content = json(ctx.aws_bedrock?.invocation?.input?.inputBodyJson);
        ctx.gen_ai.response.content = json(ctx.aws_bedrock?.invocation?.output?.outputBodyJson);
  - script:
      description: Remove massive input bodies.
      if: ctx.gen_ai?.request?.content instanceof String && ctx.gen_ai.request.content.length() > 32766
      lang: painless
      source: |
        ctx.aws_bedrock.invocation.input.input_body_json_massive_hash = ctx.gen_ai.request.content.sha1();
        ctx.aws_bedrock.invocation.input.input_body_json_massive_length = ctx.gen_ai.request.content.length();
        ctx.aws_bedrock.invocation.input.remove("inputBodyJson");
        ctx.gen_ai.request.remove("content");
  - script:
      description: Remove massive output bodies.
      if: ctx.gen_ai?.response?.content instanceof String && ctx.gen_ai.response.content.length() > 32766
      lang: painless
      source: |
        ctx.aws_bedrock.invocation.output.output_body_json_massive_hash = ctx.gen_ai.response.content.sha1();
        ctx.aws_bedrock.invocation.output.output_body_json_massive_length = ctx.gen_ai.response.content.length();
        ctx.aws_bedrock.invocation.output.remove("outputBodyJson");
        ctx.gen_ai.response.remove("content");

  # This must come after the JSON remarshal to ensure that the text there is recorded
  # verbatim, mod field ordering.
  - script:
      lang: painless
      description: Rename the fields under the aws_bedrock objects.
      params:
        "modelId": "model_id"
        "inputBodyJson": "input_body_json"
        "inputContentType": "input_content_type"
        "inputTokenCount": "input_token_count"
        "outputBodyJson": "output_body_json"
        "outputContentType": "output_content_type"
        "outputTokenCount": "output_token_count"
        "requestId": "request_id"
        "schemaType": "schema_type"
        "schemaVersion": "schema_version"
        "errorCode": "error_code"
        "imageGenerationConfig": "image_generation_config"
        "cfgScale": "cfg_scale"
        "numberOfImages": "number_of_images"
        "imageVariationParams": "image_variation_params"
        "inputBodyS3Path": "input_body_s3_path"
        "outputBodyS3Path": "output_body_s3_path"
        "taskType": "task_type"
        "artifacts": "artifacts"
        "finishReason": "finish_reason"
        "amazon-bedrock-invocationMetrics": "amazon_bedrock_invocation_metrics"
        "firstByteLatency": "first_byte_latency"
        "invocationLatency": "invocation_latency"
      tag: painless_to_rename_fields_under_aws_bedrock_groups
      source: |
        def renameKeys(Map src, Map keyMap) {
          def dst = new HashMap();
          for (def entry: src.entrySet()) {
            def key = entry.getKey();
            def value = entry.getValue();
            if (value instanceof Map) {
              if (keyMap.containsKey(key)) {
                dst[keyMap[key]] = renameKeys(value, keyMap);
              } else {
                dst[key] = renameKeys(value, keyMap);
              }
            } else if (value instanceof List) {
              def updatedList = [];
              for (def item: value) {
                if (item instanceof Map) {
                  updatedList.add(renameKeys(item, keyMap));
                } else {
                  updatedList.add(item);
                }
              }
              if (keyMap.containsKey(key)) {
                dst[keyMap[key]] = updatedList;
              } else {
                dst[key] = value;
              }
            } else {
              if (keyMap.containsKey(key)) {
                dst[keyMap[key]] = value;
              } else {
                dst[key] = value;
              }
            }
          }
          return dst;
        }

        ctx.aws_bedrock = renameKeys(ctx.aws_bedrock, params)

  - set:
      if: ctx.aws_bedrock?.invocation?.input?.input_token_count != null
      field: gen_ai.usage.prompt_tokens
      copy_from: aws_bedrock.invocation.input.input_token_count
      ignore_failure: true
  - set:
      if: ctx.aws_bedrock?.invocation?.output?.output_token_count != null
      field: gen_ai.usage.completion_tokens
      copy_from: aws_bedrock.invocation.output.output_token_count
      ignore_failure: true
  - set:
      if: ctx.aws_bedrock?.invocation?.model_id != null
      field: gen_ai.model.id
      copy_from: aws_bedrock.invocation.model_id
      ignore_failure: true
  - set:
      if: ctx.aws_bedrock?.invocation?.request_id != null
      field: gen_ai.request.id
      copy_from: aws_bedrock.invocation.request_id

  - script:
      description: Drops null/empty values recursively
      lang: painless
      source: |
        boolean drop(Object o) {
          if (o == null || o == "") {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  - remove:
      field: event.original
      if: ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_failure: true
      ignore_missing: true
on_failure:
  - set:
      field: error.message
      value: >-
        Processor '{{ _ingest.on_failure_processor_type }}'
        {{#_ingest.on_failure_processor_tag}}with tag '{{ _ingest.on_failure_processor_tag }}'
        {{/_ingest.on_failure_processor_tag}}failed with message '{{ _ingest.on_failure_message }}'
