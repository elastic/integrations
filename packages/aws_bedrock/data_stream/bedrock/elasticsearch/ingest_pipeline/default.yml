---
description: Pipeline for AWS Bedrock model invocation logs.
processors:
  - rename:
      field: message
      target_field: event.original
      if: 'ctx.event?.original == null'
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: ctx.event?.original != null
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - remove:
      description: Drop fields unrelated to the ingested logs.
      field:
        - host
        - cloud
        - container
      ignore_missing: true
  - json:
      field: event.original
      target_field: aws.bedrock
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: cloud.service.name
      value: bedrock
  - date:
      field: aws.bedrock.timestamp
      target_field: "@timestamp"
      ignore_failure: true
      formats:
        - ISO8601
  - remove:
      field: aws.bedrock.timestamp
      ignore_missing: true
  - rename:
      field: aws.bedrock.operation
      target_field: event.action
      ignore_missing: true
  - rename:
      field: aws.bedrock.identity.arn
      target_field: user.id
      ignore_missing: true
  - rename:
      field: aws.bedrock.accountId
      target_field: cloud.account.id
      ignore_missing: true
  - rename:
      field: aws.bedrock.region
      target_field: cloud.region
      ignore_missing: true

######
# Proposed LLM fields
######
  - set:
      if: ctx.aws?.bedrock?.input?.inputTokenCount != null
      field: llm.request.token_count
      copy_from: aws.bedrock.input.inputTokenCount
      ignore_failure: true
  - set:
      if: ctx.aws?.bedrock?.output?.outputTokenCount != null
      field: llm.response.token_count
      copy_from: aws.bedrock.output.outputTokenCount
      ignore_failure: true
  - set:
      if: ctx.aws?.bedrock?.modelId != null
      field: llm.model.id
      copy_from: aws.bedrock.modelId
      ignore_failure: true
  - set:
      if: ctx.aws?.bedrock?.requestId != null
      field: llm.request.id
      copy_from: aws.bedrock.requestId
  - convert:
      field: aws.bedrock.input.inputBodyJson
      target_field: llm.request.content
      type: string
      ignore_missing: true
  - convert:
      field: aws.bedrock.output.outputBodyJson
      target_field: llm.response.content
      type: string
      ignore_missing: true
  - script:
      description: Drops null/empty values recursively
      lang: painless
      source: |
        boolean drop(Object o) {
          if (o == null || o == "") {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - set:
      field: error.message
      value: >-
        Processor '{{ _ingest.on_failure_processor_type }}'
        {{#_ingest.on_failure_processor_tag}}with tag '{{ _ingest.on_failure_processor_tag }}'
        {{/_ingest.on_failure_processor_tag}}failed with message '{{ _ingest.on_failure_message }}'
