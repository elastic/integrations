config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
auth.oauth2:
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{token_url}}
  endpoint_params:
    grant_type: client_credentials
  scopes: epo.evt.r
state:
  api_key: {{api_key}}
  batch_size: {{batch_size}}
  want_more: false
  initial_interval: {{initial_interval}}
redact:
  fields:
    - api_key
program: |
  (
    has(state.want_more) && !state.want_more ?
      request("GET", state.url + "/epo/v2/events?" + {
        "page[limit]": [string(state.batch_size)],
        "sort": ["timestamp"],
        "filter[timestamp][GE]": [(
          has(state.cursor) && has(state.cursor.last_timestamp) && state.cursor.last_timestamp != null
          ?
            state.cursor.last_timestamp.parse_time(time_layout.RFC3339Nano)
          :
            (now() - duration(state.initial_interval))
        ).format(time_layout.RFC3339Nano)]
      }.format_query()).with({
        "Header": {
          "Content-Type": ["application/vnd.api+json"],
          "x-api-key": [state.api_key],
        },
      })
    :
      request("GET", state.url).with({
        "Header": {
          "Content-Type": ["application/vnd.api+json"],
          "x-api-key": [state.api_key],
        }
      })
  ).do_request().as(resp, bytes(resp.Body).decode_json().as(body, {
    "events": body.data.map(e, {
      "message": e.encode_json(),
    }),
    "cursor": {
      "last_timestamp": (
        has(body.data) && body.data.size() > 0
        ?
          body.data.map(e, e.attributes.timestamp).max()
        :
          (
            has(state.cursor) && has(state.cursor.last_timestamp)
            ?
              state.cursor.last_timestamp
            :
              null
          )
      )
    },
    "url": (
      has(body.links) && has(body.links.next)
      ?
        state.url.parse_url().Scheme + "://" + state.url.parse_url().Host + body.links.next
      :
        state.url.parse_url().Scheme + "://" + state.url.parse_url().Host
    ),
    "want_more": has(body.links) && has(body.links.next),
    "api_key": state.api_key,
    "batch_size": state.batch_size,
    "initial_interval": state.initial_interval,
  }))
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
