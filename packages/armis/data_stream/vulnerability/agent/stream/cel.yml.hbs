config_version: 2
interval: {{interval}}
resource.tracer:
  enabled: {{enable_request_tracer}}
  filename: "../../logs/cel/http-request-trace-*.ndjson"
  maxbackups: 5
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  initial_interval: {{initial_interval}}
  page_size: {{page_size}}
  secret_key: {{secret_key}}
redact:
  fields:
    - secret_key
    - access_token
program: |
  (
    state.?is_token_valid.orValue(false) ?
      state
    :
      state.with(
        post_request(
          state.url.trim_right("/") + "/api/v1/access_token/", "application/json", {
            "secret_key": state.secret_key
          }.encode_json()
        ).do_request().as(resp, resp.StatusCode == 200 ?
          resp.Body.decode_json().as(body, {
            "access_token": body.data.access_token,
            "is_token_valid": true
          })
        :
          {
            "events": {
              "error": {
                "code": string(resp.StatusCode),
                "id": string(resp.Status),
                "message": "POST: " + state.url.trim_right("/") + "/api/v1/access_token/" +(
                  size(resp.Body) != 0 ?
                    string(resp.Body)
                  :
                    string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
                ),
              },
            },
            "parent_offset": 0,
            "child_offset": 0,
            "vuln_dict": {},
            "is_token_valid": false,
            "want_more": false
          }
        )
      )
  ).as(state,
    state.?want_more.orValue(false) ?
      state
    :
      state.with({
        "start_time": state.?cursor.last_timestamp.orValue((now - duration(state.initial_interval)).format("2006-01-02T15:04:05"))
      })
  ).as(state,
    !state.?is_token_valid.orValue(false) ?
      state
    :
      (has(state.vuln_dict) && size(state.vuln_dict) > 0) ?
        state
      :
        state.with(
          request(
            "GET",
            state.url.trim_right("/") + "/api/v1/search/?" + {
              "length": [string(state.page_size)],
              "orderBy": ["lastDetected"],
              "aql": ["in:vulnerabilities lastDetected:" + '"' + string((now - state.start_time.parse_time("2006-01-02T15:04:05")).getSeconds()) + " Seconds" + '"'],
              ?"from": has(state.parent_offset) && state.parent_offset != null ? optional.of([string(state.parent_offset)]) : optional.none(),
            }.format_query()
          ).with({
            "Header": {
              "Authorization": [state.access_token],
            }
          }).do_request().as(resp, resp.StatusCode == 200 ?
              resp.Body.decode_json().as(body, {
                "vuln_dict": (
                  has(body.?data.results) && size(body.data.results) > 0 ?
                    zip(body.data.results.collate("id"),body.data.results)
                  :
                    {}
                ),
                "is_token_valid": true,
                "parent_offset": body.?data.next.orValue(null),
                "want_more": true,
                "is_last_page": body.data.next == null
              })
            :
              resp.StatusCode == 401 ?
                // Armis doesn't support multiple sessions per token; generate a new token on 401 (expired).
                {
                  "events": [{"message":"retry"}],
                  "parent_offset": has(state.parent_offset) && state.parent_offset != null ? state.parent_offset : 0,
                  "child_offset": has(state.child_offset) && state.child_offset != null ? state.child_offset : 0,
                  "vuln_dict": has(state.vuln_dict) ? state.vuln_dict : {},
                  "is_token_valid": false,
                  "want_more": true
                }
              :
                {
                  "events": {
                    "error": {
                      "code": string(resp.StatusCode),
                      "id": string(resp.Status),
                      "message": "GET: " + state.url.trim_right("/") + "/api/v1/search/?aql=in:vulnerabilities" +(
                        size(resp.Body) != 0 ?
                          string(resp.Body)
                        :
                          string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
                      ),
                    },
                  },
                  "parent_offset": 0,
                  "child_offset": 0,
                  "vuln_dict": {},
                  "is_token_valid": false,
                  "want_more": false
                }
            )
        )
  ).as(state,
    !state.?is_token_valid.orValue(false) ?
      state
    :
      state.with(
        (has(state.vuln_dict) && size(state.vuln_dict) > 0) ?
          request(
            "GET",
            state.url.trim_right("/") + "/api/v1/vulnerability-match/?" + {
              "vulnerability_ids": [state.vuln_dict.keys().join(",")],
              "length": ["10000"],
              ?"from": has(state.child_offset) && state.child_offset != null ? optional.of([string(state.child_offset)]) : optional.none(),
            }.format_query()
          ).with({
            "Header":{
              "Authorization": [state.access_token],
            }
          }).do_request().as(resp, resp.StatusCode == 200 ?
            resp.Body.decode_json().as(body,{
              "events": body.?data.sample.orValue([]).map(child_data,
                {
                  "message": state.vuln_dict[child_data.cveUid].with({
                    "vulnerability_match":child_data
                  }).encode_json()
                }
              ).flatten(),
              "is_token_valid": true,
              "parent_offset": state.parent_offset,
              "cursor": {
                ?"last_timestamp": state.vuln_dict.values()[size(state.vuln_dict.values())-1].lastDetected != null  && (has(body.?data.paging.next) && body.data.paging.next == null) ?
                  (has(state.?cursor.last_timestamp) ?
                    optional.of(
                      max([
                        state.cursor.last_timestamp.parse_time("2006-01-02T15:04:05"),
                        timestamp(state.vuln_dict.values()[size(state.vuln_dict.values())-1].lastDetected )
                      ]).format("2006-01-02T15:04:05")
                    )
                    :
                    optional.of(timestamp(state.vuln_dict.values()[size(state.vuln_dict.values())-1].lastDetected ).format("2006-01-02T15:04:05"))
                  )
                  :
                    state.?cursor.last_timestamp
              },
              "child_offset": body.?data.paging.next.orValue(null),
              "vuln_dict": (has(body.?data.paging.next) && body.data.paging.next != null) ? state.vuln_dict : {},
              "want_more": !state.?is_last_page.orValue(false) || (has(body.?data.paging.next) && body.data.paging.next != null),
            })
          :
            resp.StatusCode == 401 ?
              // Armis doesn't support multiple sessions per token; generate a new token on 401 (expired).
              {
                "events": [{"message":"retry"}],
                "is_token_valid": false,
                "parent_offset": has(state.parent_offset) && state.parent_offset != null ? state.parent_offset : 0,
                "child_offset": has(state.child_offset) && state.child_offset != null ? state.child_offset : 0,
                "vuln_dict": state.vuln_dict,
                "want_more": true
              }
            :
              {
                "events": {
                  "error": {
                    "code": string(resp.StatusCode),
                    "id": string(resp.Status),
                    "message": "GET: " + state.url.trim_right("/") + "/api/v1/vulnerability-match" +(
                      size(resp.Body) != 0 ?
                        string(resp.Body)
                      :
                        string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
                    ),
                  },
                },
                "parent_offset": 0,
                "child_offset": 0,
                "vuln_dict": {},
                "is_token_valid": false,
                "want_more": false
              }
          )
        :
          {
            "events": [],
            "is_token_valid": false,
            "parent_offset": 0,
            "child_offset": 0,
            "vuln_dict": {},
            "want_more": false
          }
      )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
