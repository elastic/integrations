---
description: Pipeline for processing detection logs.
processors:
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: 8.11.0
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  - json:
      field: event.original
      tag: json_event_original
      target_field: json
      on_failure:
        - append:
            field: error.message
            value: "Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}"
  - drop:
      if: ctx.json?.message == "retry"
      tag: drop_retry_events
  - fingerprint:
      fields:
        - json.uuid
        - json.occurTime
      tag: fingerprint_detection
      target_field: _id
      ignore_missing: true
  - set:
      field: event.kind
      tag: set_event_kind
      value: alert
  - append:
      field: event.category
      tag: append_intrusion_detection_into_event_category
      value: intrusion_detection
      if: ctx.json?.category != null && ['DETECTION_CATEGORY_CORRELATION_RULE','DETECTION_CATEGORY_FIREWALL_RULE','DETECTION_CATEGORY_HIPS','DETECTION_CATEGORY_NETWORK_INTRUSION','DETECTION_CATEGORY_HIPS_RULE'].contains(ctx.json.category)
  - append:
      field: event.category
      tag: append_malware_into_event_category
      value: malware
      if: ctx.json?.category != null && ['DETECTION_CATEGORY_ANTIVIRUS'].contains(ctx.json.category)
  - append:
      field: event.category
      tag: append_web_into_event_category
      value: web
      if: ctx.json?.category != null && ['DETECTION_CATEGORY_WEB_ACCESS'].contains(ctx.json.category)
  - append:
      field: event.category
      tag: append_vulnerability_into_event_category
      value: vulnerability
      if: ctx.json?.category != null && ['DETECTION_CATEGORY_VULNERABILITY'].contains(ctx.json.category)
  - append:
      field: event.category
      tag: append_package_into_event_category
      value: package
      if: ctx.json?.category != null && ['DETECTION_CATEGORY_APPLICATION_PATCH'].contains(ctx.json.category)
  - append:
      field: event.type
      tag: append_info_into_event_type
      value: info
  - set:
      field: observer.vendor
      tag: set_observer_vendor
      value: ESET
  - set:
      field: observer.product
      tag: set_observer_product
      value: ESET PROTECT
  - set:
      field: observer.type
      tag: set_observer_type
      value: ids
  - rename:
      field: json.category
      tag: rename_category
      target_field: eset_protect.detection.category
      ignore_missing: true
  - set:
      field: rule.category
      tag: set_rule_category_from_category
      copy_from: eset_protect.detection.category
      ignore_empty_value: true
  - rename:
      field: json.context.circumstances
      tag: rename_context_circumstances
      target_field: eset_protect.detection.context.circumstances
      ignore_missing: true
  - set:
      field: message
      tag: set_message_from_detection_context_circumstances
      copy_from: eset_protect.detection.context.circumstances
      ignore_empty_value: true
  - rename:
      field: json.context.deviceUuid
      tag: rename_context_deviceUuid
      target_field: eset_protect.detection.context.device_uuid
      ignore_missing: true
  - set:
      field: host.id
      tag: set_host_id_from_detection_context_device_uuid
      copy_from: eset_protect.detection.context.device_uuid
      ignore_empty_value: true
  - append:
      field: related.hosts
      tag: append_context_device_uuid_into_related_hosts
      value: "{{{eset_protect.detection.context.device_uuid}}}"
      allow_duplicates: false
      if: ctx.eset_protect?.detection?.context?.device_uuid != null
  - rename:
      field: json.context.process.path
      tag: rename_context_process_path
      target_field: eset_protect.detection.context.process.path
      ignore_missing: true
  - set:
      field: process.executable
      tag: set_process_executable_from_detection_context_process_path
      copy_from: eset_protect.detection.context.process.path
      ignore_empty_value: true
  - grok:
      field: eset_protect.detection.context.process.path
      tag: grok_context_process_path
      ignore_missing: true
      patterns:
        - '^%{GREEDYDATA:json._temp}\\%{DATA:process.name}$'
        - "^%{GREEDYDATA:json._temp}/%{DATA:process.name}$"
        - "^%{DATA:process.name}$"
      if: ctx.eset_protect?.detection?.context?.process?.path != ''
      on_failure:
        - append:
            field: error.message
            value: "Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}"
  - rename:
      field: json.context.userName
      tag: rename_context_userName
      target_field: eset_protect.detection.context.user_name
      ignore_missing: true
  - grok:
      field: eset_protect.detection.context.user_name
      tag: grok_user_name
      ignore_missing: true
      patterns:
        - '^%{HOSTNAME:user.domain}\\%{USERNAME:user.name}$'
        - '^%{HOSTNAME:user.domain}\\\\%{USERNAME:user.name}$'
        - "^%{USERNAME:user.name}@%{HOSTNAME:user.domain}$"
        - "^%{GREEDYDATA:user.name}$"
      if: ctx.eset_protect?.detection?.context?.user_name != ''
      on_failure:
        - append:
            field: error.message
            value: "Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}"
  - append:
      field: related.user
      tag: append_user_name_into_related_user
      value: "{{{user.name}}}"
      allow_duplicates: false
      if: ctx.user?.name != null
  - rename:
      field: json.displayName
      tag: rename_displayName
      target_field: eset_protect.detection.display_name
      ignore_missing: true
  - rename:
      field: json.networkCommunication.direction
      tag: rename_networkCommunication_direction
      target_field: eset_protect.detection.network_communication.direction
      ignore_missing: true
  - set:
      field: network.direction
      tag: set_network_direction_to_inbound
      value: inbound
      if: ctx.eset_protect?.detection?.network_communication?.direction == 'NETWORK_COMMUNICATION_DIRECTION_INBOUND'
  - set:
      field: network.direction
      tag: set_network_direction_to_outbound
      value: outbound
      if: ctx.eset_protect?.detection?.network_communication?.direction == 'NETWORK_COMMUNICATION_DIRECTION_OUTBOUND'
  - convert:
      field: json.networkCommunication.localIpAddress
      tag: convert_networkCommunication_localIpAddress_to_ip
      target_field: eset_protect.detection.network_communication.local.ip_address
      type: ip
      ignore_missing: true
      if: ctx.json?.networkCommunication?.localIpAddress != null && ctx.json.networkCommunication.localIpAddress != ''
      on_failure:
        - append:
            field: error.message
            value: "Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}"
  - set:
      field: source.ip
      tag: set_source_ip_from_detection_network_communication_local_ip_address
      copy_from: eset_protect.detection.network_communication.local.ip_address
      ignore_empty_value: true
  - geoip:
      field: source.ip
      tag: geoip_source_ip_to_source_geo
      target_field: source.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      tag: geoip_source_ip_to_source_as
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      tag: rename_source_as_asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      tag: rename_source_as_organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - append:
      field: related.ip
      tag: append_network_communication_local_ip_address_into_related_ip
      value: "{{{eset_protect.detection.network_communication.local.ip_address}}}"
      allow_duplicates: false
      if: ctx.eset_protect?.detection?.network_communication?.local?.ip_address != null
  - convert:
      field: json.networkCommunication.localPort
      tag: convert_networkCommunication_localPort_to_long
      target_field: eset_protect.detection.network_communication.local.port
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: "Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}"
  - set:
      field: source.port
      tag: set_source_port_from_detection_network_communication_local_port
      copy_from: eset_protect.detection.network_communication.local.port
      ignore_empty_value: true
  - rename:
      field: json.networkCommunication.protocolName
      tag: rename_networkCommunication_protocolName
      target_field: eset_protect.detection.network_communication.protocol_name
      ignore_missing: true
  - set:
      field: network.transport
      tag: set_network_transport_from_detection_network_communication_protocol_name
      copy_from: eset_protect.detection.network_communication.protocol_name
      ignore_empty_value: true
      if: ctx.eset_protect?.detection?.network_communication?.protocol_name != "0"
  - lowercase:
      field: network.transport
      tag: lowercase_network_transport
      ignore_missing: true
  - convert:
      field: json.networkCommunication.remoteIpAddress
      tag: convert_networkCommunication_remoteIpAddress_to_ip
      target_field: eset_protect.detection.network_communication.remote.ip_address
      type: ip
      ignore_missing: true
      if: ctx.json?.networkCommunication?.remoteIpAddress != null && ctx.json.networkCommunication.remoteIpAddress != ''
      on_failure:
        - append:
            field: error.message
            value: "Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}"
  - set:
      field: destination.ip
      tag: set_destination_ip_from_detection_network_communication_remote_ip_address
      copy_from: eset_protect.detection.network_communication.remote.ip_address
      ignore_empty_value: true
  - geoip:
      field: destination.ip
      tag: geoip_destination_ip_to_destination_geo
      target_field: destination.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      tag: geoip_destination_ip_to_destination_as
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      tag: rename_destination_as_asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      tag: rename_destination_as_organization_name
      target_field: destination.as.organization.name
      ignore_missing: true
  - append:
      field: related.ip
      tag: append_network_communication_remote_ip_address_into_related_ip
      value: "{{{eset_protect.detection.network_communication.remote.ip_address}}}"
      allow_duplicates: false
      if: ctx.eset_protect?.detection?.network_communication?.remote?.ip_address != null
  - convert:
      field: json.networkCommunication.remotePort
      tag: convert_networkCommunication_remotePort_to_long
      target_field: eset_protect.detection.network_communication.remote.port
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: "Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}"
  - set:
      field: destination.port
      tag: set_destination_port_from_detection_network_communication_remote_port
      copy_from: eset_protect.detection.network_communication.remote.port
      ignore_empty_value: true
  - rename:
      field: json.objectTypeName
      tag: rename_objectTypeName
      target_field: eset_protect.detection.object_type_name
      ignore_missing: true
  - rename:
      field: json.objectHashSha1
      tag: rename_objectHashSha1
      target_field: eset_protect.detection.object_hash_sha1
      ignore_missing: true
  - set:
      field: file.hash.sha1
      tag: set_file_hash_sha1_from_detection_object_hash_sha1
      copy_from: eset_protect.detection.object_hash_sha1
      ignore_empty_value: true
      if: ctx.eset_protect?.detection?.object_type_name == "File"
  - lowercase:
      field: file.hash.sha1
      tag: lowercase_file_hash_sha1
      ignore_missing: true
  - append:
      field: related.hash
      tag: append_object_hash_sha1_into_related_hash
      value: "{{{eset_protect.detection.object_hash_sha1}}}"
      allow_duplicates: false
      if: ctx.eset_protect?.detection?.object_hash_sha1 != null
  - lowercase:
      field: related.hash
      tag: lowercase_related_hash
      ignore_missing: true
  - rename:
      field: json.objectName
      tag: rename_objectName
      target_field: eset_protect.detection.object_name
      ignore_missing: true
  - set:
      field: file.name
      tag: set_file_name_from_detection_object_name
      copy_from: eset_protect.detection.object_name
      ignore_empty_value: true
      if: ctx.eset_protect?.detection?.object_type_name == "File"
  - rename:
      field: json.objectUrl
      tag: rename_objectUrl
      target_field: eset_protect.detection.object_url
      ignore_missing: true
  - date:
      field: json.occurTime
      tag: date_occurTime
      target_field: eset_protect.detection.occur_time
      formats:
        - ISO8601
      if: ctx.json?.occurTime != null && ctx.json.occurTime != ''
      on_failure:
        - append:
            field: error.message
            value: "Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}"
  - set:
      field: "@timestamp"
      tag: set_@timestamp_from_detection_occur_time
      copy_from: eset_protect.detection.occur_time
      ignore_empty_value: true
  - foreach:
      field: json.responses
      if: ctx.json?.responses instanceof List
      processor:
        convert:
          field: _ingest._value.deviceRestartRequired
          tag: convert_responses_deviceRestartRequired_to_boolean
          target_field: _ingest._value.device_restart_required
          type: boolean
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value.deviceRestartRequired
                ignore_missing: true
            - append:
                field: error.message
                value: "Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}"
  - foreach:
      field: json.responses
      if: ctx.json?.responses instanceof List
      processor:
        rename:
          field: _ingest._value.displayName
          tag: rename_responses_displayName
          target_field: _ingest._value.display_name
          ignore_missing: true
  - foreach:
      field: json.responses
      if: ctx.json?.responses instanceof List
      processor:
        rename:
          field: _ingest._value.protectionName
          tag: rename_responses_protectionName
          target_field: _ingest._value.protection_name
          ignore_missing: true
  - foreach:
      field: json.responses
      if: ctx.json?.responses instanceof List
      processor:
        remove:
          field: _ingest._value.deviceRestartRequired
          tag: remove_responses_deviceRestartRequired
          ignore_missing: true
  - rename:
      field: json.responses
      tag: rename_responses
      target_field: eset_protect.detection.responses
      ignore_missing: true
  - rename:
      field: json.severityLevel
      tag: rename_severityLevel
      target_field: eset_protect.detection.severity_level
      ignore_missing: true
  - rename:
      field: json.typeName
      tag: rename_typeName
      target_field: eset_protect.detection.type_name
      ignore_missing: true
  - append:
      field: threat.technique.name
      tag: append_eset_protect_detection_type_name_into_threat_technique_name
      value: "{{{eset_protect.detection.type_name}}}"
      allow_duplicates: false
      if: ctx.eset_protect?.detection?.type_name != null
  - rename:
      field: json.uuid
      tag: rename_uuid
      target_field: eset_protect.detection.uuid
      ignore_missing: true
  - remove:
      field:
        - eset_protect.detection.category
        - eset_protect.detection.context.device_uuid
        - eset_protect.detection.context.process.path
        - eset_protect.detection.network_communication.local.ip_address
        - eset_protect.detection.network_communication.local.port
        - eset_protect.detection.network_communication.protocol_name
        - eset_protect.detection.network_communication.remote.ip_address
        - eset_protect.detection.network_communication.remote.port
        - eset_protect.detection.occur_time
        - eset_protect.detection.type_name
      tag: remove_custom_duplicate_fields
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))
  - remove:
      field: json
      tag: remove_json
      ignore_missing: true
  - remove:
      field: event.original
      tag: remove_event_original
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: Drops null/empty values recursively.
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: "Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}"
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
