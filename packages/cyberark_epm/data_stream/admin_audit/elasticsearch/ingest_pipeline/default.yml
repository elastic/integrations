---
description: Pipeline for processing admin audit events.
processors:
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: 8.11.0
  - fail:
      tag: data_collection_error
      if: ctx.error?.message != null && ctx.message == null && ctx.event?.original == null
      message: error message set and no data to process.
  - drop:
      tag: drop_retry_events
      if: ctx.message != null && ctx.message == 'retry'
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      ignore_missing: true
      description: Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.
      if: ctx.event?.original == null
  - remove:
      field: message
      tag: remove_message
      ignore_missing: true
      description: The `message` field is no longer required if the document has an `event.original` field.
      if: ctx.event?.original != null
  - json:
      field: event.original
      tag: json_event_original
      target_field: json
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - fingerprint:
      fields:
        - json.EventTime
        - json.LoggedFrom
        - json.LoggedAt
        - json.Description
        - json.Administrator
        - json.InternalSessionId
      tag: fingerprint_admin_audit
      target_field: _id
      ignore_missing: true
  - rename:
      field: json.Feature
      tag: rename_Feature
      target_field: cyberark_epm.admin_audit.feature
      ignore_missing: true
  - set:
      field: event.kind
      tag: set_event_kind_to_event
      value: event
  - append:
      field: event.category
      tag: append_configuration_into_event_category
      value: configuration
      if: >-
        ctx.cyberark_epm?.admin_audit?.feature != null && (
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('Agent Config') ||
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('Policies') ||
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('My Computers')
        )
  - append:
      field: event.category
      tag: append_api_into_event_category
      value: api
      if: >-
        ctx.cyberark_epm?.admin_audit?.feature != null && (
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('Public API')
        )
  - append:
      field: event.category
      tag: append_iam_into_event_category
      value: iam
      if: >-
        ctx.cyberark_epm?.admin_audit?.feature != null && (
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('Sets')
        )
  - append:
      field: event.category
      tag: append_web_into_event_category
      value: web
      if: >-
        ctx.cyberark_epm?.admin_audit?.feature != null && (
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('WebPage') ||
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('End-User UI') ||
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('Application Groups') ||
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('Reports')
        )
  - append:
      field: event.type
      tag: append_access_into_event_type
      value: access
      if: >-
        ctx.cyberark_epm?.admin_audit?.feature != null && (
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('Agent Config') ||
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('Public API') ||
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('WebPage') ||
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('End-User UI') ||
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('Application Groups') ||
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('Policies')
        )
  - append:
      field: event.type
      tag: append_admin_into_event_type
      value: admin
      if: >-
        ctx.cyberark_epm?.admin_audit?.feature != null && (
          ctx.cyberark_epm.admin_audit.feature.equalsIgnoreCase('Sets')
        )
  - append:
      field: event.type
      tag: append_event_type
      value: info
      if: ctx.event?.type == null
  - set:
      field: observer.vendor
      tag: set_observer_vendor
      value: CyberArk
  - set:
      field: observer.product
      tag: set_observer_product
      value: Endpoint Privilege Manager
  - date:
      field: json.EventTime
      tag: date_EventTime
      target_field: cyberark_epm.admin_audit.event_time
      formats:
        - ISO8601
      if: ctx.json?.EventTime != null && ctx.json.EventTime != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: '@timestamp'
      tag: set_@timestamp_from_admin_audit_event_time
      copy_from: cyberark_epm.admin_audit.event_time
      ignore_empty_value: true
  - rename:
      field: json.Description
      tag: rename_Description
      target_field: cyberark_epm.admin_audit.description
      ignore_missing: true
  - set:
      field: message
      tag: set_message_from_admin_audit_description
      copy_from: cyberark_epm.admin_audit.description
      ignore_empty_value: true
  - convert:
      field: json.LoggedFrom
      tag: convert_LoggedFrom_to_ip
      target_field: cyberark_epm.admin_audit.logged_from
      type: ip
      ignore_missing: true
      if: ctx.json?.LoggedFrom != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: source.ip
      tag: set_source_ip_from_admin_audit_logged_from
      copy_from: cyberark_epm.admin_audit.logged_from
      ignore_empty_value: true
  - geoip:
      field: source.ip
      target_field: source.geo
      tag: geoip_source_ip
      ignore_missing: true
  - append:
      field: related.ip
      tag: append_admin_audit_logged_from_to_related_ip
      value: '{{{cyberark_epm.admin_audit.logged_from}}}'
      allow_duplicates: false
  - rename:
      field: json.Administrator
      tag: rename_Administrator
      target_field: cyberark_epm.admin_audit.administrator
      ignore_missing: true
  - set:
      field: user.email
      tag: set_user_email_from_admin_audit_administrator
      copy_from: cyberark_epm.admin_audit.administrator
      ignore_empty_value: true
  - set:
      field: user.name
      tag: set_user_name_from_admin_audit_administrator
      copy_from: cyberark_epm.admin_audit.administrator
      ignore_empty_value: true
  - append:
      field: related.user
      tag: append_admin_audit_administrator_to_related_user
      value: '{{{cyberark_epm.admin_audit.administrator}}}'
      allow_duplicates: false
  - rename:
      field: json.Role
      tag: rename_Role
      target_field: cyberark_epm.admin_audit.role
      ignore_missing: true
  - append:
      field: user.roles
      tag: append_admin_audit_role_to_user_roles
      value: '{{{cyberark_epm.admin_audit.role}}}'
      allow_duplicates: false
  - convert:
      field: json.InternalSessionId
      tag: convert_InternalSessionId_to_string
      target_field: cyberark_epm.admin_audit.internal_session_id
      type: string
      ignore_missing: true
  - date:
      field: json.LoggedAt
      tag: date_LoggedAt
      target_field: cyberark_epm.admin_audit.logged_at
      formats:
        - ISO8601
      if: ctx.json?.LoggedAt != null && ctx.json.LoggedAt != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.PermissionDescription
      tag: rename_PermissionDescription
      target_field: cyberark_epm.admin_audit.permission_description
      ignore_missing: true
  - rename:
      field: json.SetName
      tag: rename_SetName
      target_field: cyberark_epm.admin_audit.set_name
      ignore_missing: true
  - remove:
      field:
        - cyberark_epm.admin_audit.event_time
        - cyberark_epm.admin_audit.logged_from
        - cyberark_epm.admin_audit.administrator
        - cyberark_epm.admin_audit.role
      tag: remove_custom_duplicate_fields
      ignore_missing: true
      if: ctx.tags == null || !ctx.tags.contains('preserve_duplicate_custom_fields')
  - remove:
      field: json
      tag: remove_json
      ignore_missing: true
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: Drops null/empty values recursively.
      source: |-
        boolean drop(Object object) {
          if (object == null || object == '') {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(v -> drop(v));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(v -> drop(v));
            return (((List) object).length == 0);
          }
          return false;
        }
        drop(ctx);
  - set:
      field: event.kind
      tag: set_pipeline_error_into_event_kind
      value: pipeline_error
      if: ctx.error?.message != null
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
