---
description: Pipeline for parsing Infoblox NIOS Audit logs.
processors:
  - grok: 
      field: message
      if: ctx.message.contains("Created") || ctx.message.contains("Modified") || ctx.message.contains("Deleted")
      patterns: 
        - "^%{GREEDYDATA:timestamp} \\[%{DATA:user.name}\\]: %{DATA:event.action} %{DATA:infoblox_nios.log.audit.object.name} %{DATA:infoblox_nios.log.audit.object.value}:? %{GREEDYDATA:infoblox_nios.log.audit.message}$"
        - "^%{GREEDYDATA:timestamp} \\[%{DATA:user.name}\\]: %{DATA:event.action} %{GREEDYDATA:infoblox_nios.log.audit.message}$"
        - "^%{GREEDYDATA:infoblox_nios.log.audit.message}$"
  - grok: 
      field: message
      if: ctx.message.contains("Called") 
      patterns: 
        - "^%{GREEDYDATA:timestamp} \\[%{DATA:user.name}\\]: %{DATA:event.action} - %{WORD:infoblox_nios.log.audit.object.name}:? %{GREEDYDATA:infoblox_nios.log.audit.message}$"
        - "^%{GREEDYDATA:timestamp} \\[%{DATA:user.name}\\]: %{DATA:event.action} - %{GREEDYDATA:infoblox_nios.log.audit.message}$"
        - "^%{GREEDYDATA:infoblox_nios.log.audit.message}$"
  - grok:
      field: message
      if: ctx.event?.action == null
      patterns:
        - "^%{GREEDYDATA:timestamp} \\[%{DATA:user.name}\\]: %{DATA:event.action} - - %{GREEDYDATA:details}$"
        - "^%{GREEDYDATA:timestamp} \\[%{DATA:user.name}\\]: %{DATA:event.action} %{GREEDYDATA:infoblox_nios.log.audit.message}$"
        - "^%{GREEDYDATA:timestamp} %{GREEDYDATA:infoblox_nios.log.audit.message}$"
        - "^%{GREEDYDATA:infoblox_nios.log.audit.message}$"
  - date:
      field: timestamp
      target_field: '@timestamp'
      formats:
        - dd-MMM-yyyy HH:mm:ss.SSS
        - yyyy-MM-dd HH:mm:ss.SSS'Z'
      ignore_failure: true
  - kv:
      field: details
      target_field: audit
      field_split: ' '
      value_split: '='
      ignore_missing: true
  - lowercase:
      field: event.action
      if: ctx.event?.action != null
      ignore_failure: true
  - set:
      field: event.outcome
      if: ctx.event?.action == "login_allowed"
      value: 'success'
      ignore_failure: true
  - append:
      field: event.type
      if: ctx.event?.action == "login_allowed"
      value: 'start'
      ignore_failure: true
  - append:
      field: event.category
      if: ctx.event?.action == "login_allowed"
      value: 'authentication'
      ignore_failure: true
  - set:
      field: event.outcome
      if: ctx.event?.action == "login_denied"
      value: 'failure'
      ignore_failure: true
  - append:
      field: event.category
      if: ctx.event?.action == "login_denied"
      value: 'authentication'
      ignore_failure: true
  - append:
      field: event.type
      if: ctx.event?.action == "logout"
      value: 'end'
      ignore_failure: true
  - append:
      field: event.category
      if: ctx.event?.action == "logout"
      value: 'authentication'
      ignore_failure: true
  - script:
      description: Add kv fields under the infoblox_nios.log.audit.
      lang: painless
      if: ctx.audit != null
      source: |
        if (ctx.infoblox_nios == null) {
          ctx["infoblox_nios"] = new HashMap();
        }
        if (ctx.infoblox_nios?.log == null) {
          ctx.infoblox_nios["log"] = new HashMap();
        }
        if (ctx.infoblox_nios?.log?.audit == null) {
          ctx.infoblox_nios.log["audit"] = new HashMap();
        }
        for (Map.Entry m : ctx.audit.entrySet()) {
          def value = m.getValue();
          if (value instanceof String) {
            value = value.replace("\\040", " ")
          }
          ctx.infoblox_nios.log.audit[m.getKey()] = value;
        }
  - append:
      field: related.ip
      value: '{{{infoblox_nios.log.audit.ip}}}'
      if: ctx.infoblox_nios?.log?.audit?.ip != null
      allow_duplicates: false
      ignore_failure: true
  - gsub:
      field: user.name
      ignore_missing: true
      pattern: '\\040'
      replacement: ' '
  - remove:
      field:
        - details
        - audit
        - timestamp
      ignore_missing: true
  - append:
      field: related.user
      value: '{{{user.name}}}'
      if: ctx.user?.name != null
      allow_duplicates: false
      ignore_failure: true
