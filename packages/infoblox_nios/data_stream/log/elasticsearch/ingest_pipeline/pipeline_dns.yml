---
description: Pipeline for parsing Infoblox NIOS DNS logs.
processors:
  - grok:
      field: message
      patterns:
        - "^zone %{DATA:dns.question.name}/%{DATA:dns.question.class}: notify from %{IP:client.ip}#%{NUMBER:client.port:long}:? %{GREEDYDATA:infoblox_nios.log.dns.message}$"
        - "^transfer of '%{DATA:dns.question.name}/%{DATA:dns.question.class}' from %{IP:client.ip}#%{NUMBER:client.port:long}:? %{GREEDYDATA:infoblox_nios.log.dns.message}$"
        - "^validating %{DATA:dns.question.name}/%{WORD:dns.question.type}: %{GREEDYDATA:infoblox_nios.log.dns.message}$"
        - "^(%{NOTSPACE:infoblox_nios.log.dns.category}:)?\\s*%{CLIENT} updating zone '%{DATA:dns.question.name}/%{DATA:dns.question.class}': %{GREEDYDATA:infoblox_nios.log.dns.message}$"
        - "^(%{NOTSPACE:infoblox_nios.log.dns.category}:)?\\s*%{CLIENT} \\(%{DATA:client.domain}\\): %{VIEW}?query failed %{GREEDYDATA:infoblox_nios.log.dns.message}$"
        - "^(%{NOTSPACE:infoblox_nios.log.dns.category}:)?\\s*%{CLIENT} \\(%{DATA:infoblox_nios.log.dns.before_query}\\): rewriting query name %{DATA} to '%{DATA:infoblox_nios.log.dns.after_query}', type %{DATA:dns.question.type}$"
        - "^(%{NOTSPACE:infoblox_nios.log.dns.category}:)?\\s*%{CLIENT} \\(%{DATA:client.domain}\\): %{VIEW}?query: %{DATA:dns.question.name} %{DATA:dns.question.class} %{WORD:dns.question.type} %{DATA:infoblox_nios.log.dns.header_flags} \\(%{IP:server.ip}\\)$"
        - "^(%{NOTSPACE:infoblox_nios.log.dns.category}:)?\\s*%{CLIENT} %{DATA:network.transport}: %{VIEW}?query: %{DATA:dns.question.name} %{DATA:dns.question.class} %{WORD:dns.question.type} response: %{DATA:dns.response_code} %{DATA:infoblox_nios.log.dns.header_flags}$"
        - "^(%{NOTSPACE:infoblox_nios.log.dns.category}:)?\\s*%{CLIENT} \\(%{DATA:client.domain}\\): transfer of '%{DATA:dns.question.name}/%{DATA:dns.question.class}': %{GREEDYDATA:infoblox_nios.log.dns.message}$"
        - "^(%{NOTSPACE:infoblox_nios.log.dns.category}:)?\\s*CEF:0\\|Infoblox\\|NIOS\\|%{GREEDYDATA:infoblox_nios.log.dns.version}\\|RPZ-%{DATA:dns.answers.type}\\|%{DATA:infoblox_nios.log.dns.answers_policy}\\|\\d+\\|app=DNS dst=%{IP:server.ip} src=%{IP:client.ip} spt=%{NUMBER:client.port:long} view=%{DATA:infoblox_nios.log.dns.view_name} qtype=%{WORD:dns.question.type} msg=%{GREEDYDATA:infoblox_nios.log.dns.message}$"
        - "^(%{NOTSPACE:infoblox_nios.log.dns.category}:)?\\s*%{GREEDYDATA:_tmp.timestamp} %{CLIENT} %{DATA:network.transport}: %{VIEW}?query: %{DATA:dns.question.name} %{DATA:dns.question.class} %{WORD:dns.question.type} response: %{DATA:dns.response_code} %{DATA:infoblox_nios.log.dns.header_flags} %{GREEDYDATA:repeat_message}$"
        - "^(%{NOTSPACE:infoblox_nios.log.dns.category}:)?\\s*%{GREEDYDATA:_tmp.timestamp} %{CLIENT} %{DATA:network.transport}: %{VIEW}?query: %{DATA:dns.question.name} %{DATA:dns.question.class} %{WORD:dns.question.type} response: %{DATA:dns.response_code} %{DATA:infoblox_nios.log.dns.header_flags}$"
        - "^(%{NOTSPACE:infoblox_nios.log.dns.category}:)?\\s*%{CLIENT} %{GREEDYDATA:infoblox_nios.log.dns.message}$"
        - "^%{GREEDYDATA:infoblox_nios.log.dns.message}$"
      pattern_definitions:
        CLIENT: 'client (?:%{DATA} )?%{IP:client.ip}#%{NUMBER:client.port:long}:?'
        VIEW: 'view %{DATA:infoblox_nios.log.view}: '
  - date:
      field: _tmp.timestamp
      target_field: _tmp.timestamp
      if: ctx._tmp?.timestamp != null && ctx.event?.timezone != null
      timezone: '{{{event.timezone}}}'
      formats:
        - dd-MMM-yyyy HH:mm:ss.SSS
        - yyyy-MM-dd HH:mm:ss.SSS'Z'
      on_failure:
        - remove:
            field: _tmp.timestamp
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - date:
      field: _tmp.timestamp
      target_field: _tmp.timestamp
      if: ctx._tmp?.timestamp != null && ctx.event?.timezone == null
      formats:
        - dd-MMM-yyyy HH:mm:ss.SSS
        - yyyy-MM-dd HH:mm:ss.SSS'Z'
      on_failure:
        - remove:
            field: _tmp.timestamp
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - script:
      lang: painless
      if: ctx.repeat_message != null
      description: |
        Process dns.answers data by splitting repeat_message by ';'
        and then each of the elements by space. It takes into account
        quoted strings.
      source: |
        def splitUnquoted(String input, String sep) {
          def tokens = [];
          def startPosition = 0;
          def isInQuotes = false;
          char quote = (char)"\"";
          for (def currentPosition = 0; currentPosition < input.length(); currentPosition++) {
              if (input.charAt(currentPosition) == quote) {
                  isInQuotes = !isInQuotes;
              }
              else if (input.charAt(currentPosition) == (char)sep && !isInQuotes) {
                  def token = input.substring(startPosition, currentPosition).trim();
                  if (!token.equals("")) {
                    tokens.add(token);
                  }
                  startPosition = currentPosition + 1;
              }
          }

          def lastToken = input.substring(startPosition);
          if (!lastToken.equals(sep) && !lastToken.equals("")) {
              tokens.add(lastToken.trim());
          }
          return tokens;
        }

        def arr = splitUnquoted(ctx.repeat_message, ";");
        ctx.repeat_message = arr;
        Map map = new HashMap();
        map.put('name', new ArrayList());
        map.put('ttl', new ArrayList());
        map.put('class', new ArrayList());
        map.put('type', new ArrayList());
        map.put('data', new ArrayList());

        for (def i = 0; i < arr.length; i++) {
          def response = splitUnquoted(arr[i], " ");
          if (response.size() >= 4) {
            map['name'].add(response[0]);
            map['ttl'].add(response[1]);
            map['class'].add(response[2]);
            map['type'].add(response[3]);
            map['data'].addAll(response.subList(4, response.length));
          }
        }
        ctx.dns.answers = map;
  - gsub:
      field: infoblox_nios.log.dns.message
      pattern: '"'
      replacement: ''
      if: ctx.infoblox_nios?.log?.dns?.message != null
  - dissect:
      field: infoblox_nios.log.dns.message
      pattern: 'rpz %{infoblox_nios.log.dns.rpz.rule_type} %{infoblox_nios.log.dns.rpz.query_class} %{infoblox_nios.log.dns.rpz.action} %{infoblox_nios.log.dns.rpz.domain} %{infoblox_nios.log.dns.rpz.query_class_rewrite} via %{infoblox_nios.log.dns.rpz.domain_rewrite} CAT=%{infoblox_nios.log.dns.rpz.type}'
      ignore_failure: true
      if: ctx.infoblox_nios?.log?.dns?.message != null
  - convert:
      field: dns.answers.ttl
      type: long
      ignore_missing: true
      ignore_failure: true
  - script:
      description: Remove last Full Stop('.') from `dns.answers.data` field.
      lang: painless
      if: ctx.dns?.answers?.data instanceof List
      source: |
        def hash = new ArrayList();
        for(data in ctx.dns.answers.data){
          def n = data.length();
          if(data.charAt(n-1).toString() == '.'){
            def data_substring = data.substring(0,n-1) + data.substring(n);
            hash.add(data_substring);
          }
          else{
            hash.add(data);
          }
        }
        ctx.dns.answers.data = hash;
  - script:
      description: Remove last Full Stop('.') from `dns.answers.name` field.
      lang: painless
      if: ctx.dns?.answers?.name instanceof List
      source: |
        def hash = new ArrayList();
        for(name in ctx.dns.answers.name){
          def n = name.length();
          if(name.charAt(n-1).toString() == '.'){
            def name_substring = name.substring(0,n-1) + name.substring(n);
            hash.add(name_substring);
          }
          else{
            hash.add(name);
          }
        }
        ctx.dns.answers.name = hash;
  - foreach:
      field: dns.answers.data
      if: ctx.dns?.answers?.data != null
      processor:
        grok:
          field: '_ingest._value'
          patterns:
            - "^%{IP:related.ip}$"
            - "^%{HOSTNAME:related.hosts}$"
          ignore_failure: true
  - convert:
      field: client.ip
      if: ctx.client?.ip != null && ctx.client.ip != ''
      type: ip
      ignore_missing: true
      on_failure:
        - remove:
            field: client.ip
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - append:
      field: related.ip
      value: '{{{client.ip}}}'
      if: ctx.client?.ip != null
      allow_duplicates: false
      ignore_failure: true
  - convert:
      field: server.ip
      if: ctx.server?.ip != null && ctx.server.ip != ''
      type: ip
      ignore_missing: true
      on_failure:
        - remove:
            field: server.ip
            ignore_missing: true
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - append:
      field: related.ip
      value: '{{{server.ip}}}'
      if: ctx.server?.ip != null
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: related.hosts
      value: '{{{client.domain}}}'
      if: ctx.client?.domain != null
      allow_duplicates: false
      ignore_failure: true
  - foreach:
      field: dns.answers.name
      if: ctx.dns?.answers?.name != null
      processor:
        append:
          field: related.hosts
          value: '{{_ingest._value}}'
          allow_duplicates: false
          ignore_failure: true
  - append:
      field: related.hosts
      value: '{{{dns.question.name}}}'
      if: ctx.dns?.question?.name != null
      allow_duplicates: false
      ignore_failure: true
  - script:
      lang: painless
      if: ctx.infoblox_nios?.log?.dns?.header_flags != null && ctx.infoblox_nios.log.dns.header_flags != ''
      params:
        'A': 'AA'
        't': 'TC'
        'C': 'CD'
        'D': 'DO'
      source: |
        ArrayList hf = new ArrayList();
        for (entry in params.entrySet()) {
          if (ctx.infoblox_nios.log.dns.header_flags.contains(entry.getKey())) {
            hf.add(entry.getValue());
          }
        }
        if (ctx.dns?.response_code != null && ctx.dns.response_code != '') {
          if (ctx.infoblox_nios.log.dns.header_flags.contains('+')) {
            hf.add('RA')
          }
        } else {
          if (ctx.infoblox_nios.log.dns.header_flags.contains('+')) {
            hf.add('RD')
          }
        }
        if (hf.length == 0) {
          return;
        }
        if (ctx.dns == null) {
          HashMap hm = new HashMap();
          ctx.put('dns', hm);
        }
        ctx.dns.put('header_flags', hf);
  - registered_domain:
      field: "dns.question.name"
      target_field: "dns.question"
      if: ctx.dns?.question != null
  - remove:
      field:
        - repeat_message
        - dns.question.domain
      ignore_missing: true
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
