---
description: Pipeline for parsing Infoblox NIOS logs.
processors:
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - set:
      field: ecs.version
      value: '8.4.0'
  - grok:
      field: event.original
      patterns:
        - "^<%{NUMBER:log.syslog.priority:long}>%{SYSLOGTIMESTAMP:event.created}\\s+%{NOTSPACE:host.domain}\\s+%{IP:host.ip}\\s+%{DATA:infoblox_nios.log.service_name}\\[?%{NUMBER:process.pid:long}?\\]?:\\s+%{GREEDYDATA:message}$"
        - "^<%{NUMBER:log.syslog.priority:long}>%{SYSLOGTIMESTAMP:event.created}\\s+(%{IP:host.ip}|%{NOTSPACE:host.domain})\\s+%{DATA:infoblox_nios.log.service_name}\\[?%{NUMBER:process.pid:long}?\\]?:\\s+%{GREEDYDATA:message}$"
        - "^%{GREEDYDATA:message}$"
  - date:
      field: event.created
      target_field: event.created
      formats:
        - MMM  d HH:mm:ss
        - MMM dd HH:mm:ss
        - MMM d HH:mm:ss
        - dd-MMM-yyyy HH:mm:ss.SSS
      ignore_failure: true
  - set:
      field: infoblox_nios.log.type
      value: 'DHCP'
      if: ctx.infoblox_nios?.log?.service_name == "dhcpd"
  - set:
      field: infoblox_nios.log.type
      value: 'DNS'
      if: ctx.infoblox_nios?.log?.service_name == "named"
  - set:
      field: infoblox_nios.log.type
      value: 'AUDIT'
      if: ctx.infoblox_nios?.log?.service_name == "httpd"
  - pipeline:
      name: '{{ IngestPipeline "pipeline_audit" }}'
      if: ctx.infoblox_nios?.log?.type == "AUDIT"
  - pipeline:
      name: '{{ IngestPipeline "pipeline_dhcp" }}'
      if: ctx.infoblox_nios?.log?.type == "DHCP"
  - pipeline:
      name: '{{ IngestPipeline "pipeline_dns" }}'
      if: ctx.infoblox_nios?.log?.type == "DNS"
  - append:
      field: related.ip
      value: '{{{host.ip}}}'
      if: ctx.host?.ip != null
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: related.hosts
      value: '{{{host.domain}}}'
      if: ctx.host?.domain != null
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: host.ip
      value: '{{{host.ip}}}'
      if: ctx.host?.ip != null
      allow_duplicates: false
      ignore_failure: true
  - lowercase:
      field: event.action
      if: ctx.event?.action != null
      ignore_failure: true
  - script:
      description: Drops null/empty values recursively.
      lang: painless
      source: |
        boolean drop(Object o) {
          if (o == null || o == "") {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - set:
      field: error.message
      value: '{{{_ingest.on_failure_message}}}'
