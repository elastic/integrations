---
description: Pipeline for processing VNet logs.
processors:
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: 8.11.0
  - set:
      field: event.kind
      tag: set_event_kind
      value: event
  - append:
      field: event.category
      tag: append_event_category
      value: network
      allow_duplicates: false
  - append:
      field: event.type
      tag: append_event_type
      value: info
      allow_duplicates: false
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      ignore_missing: true
      description: Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.
      if: ctx.event?.original == null
  - remove:
      field: message
      tag: remove_message
      ignore_missing: true
      description: The `message` field is no longer required if the document has an `event.original` field.
      if: ctx.event?.original != null
  - json:
      field: event.original
      tag: json_event_original
      target_field: json
      if: ctx.event?.original != null
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: json.time
      tag: date_time
      target_field: azure_network_watcher_vnet.log.time
      formats:
        - ISO8601
      if: ctx.json?.time != null && ctx.json.time != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: '@timestamp'
      tag: set_timestamp
      copy_from: azure_network_watcher_vnet.log.time
      ignore_empty_value: true
  - convert:
      field: json.flowLogVersion
      tag: convert_flowLogVersion_to_string
      type: string
      ignore_missing: true
  - rename:
      field: json.flowLogVersion
      tag: rename_flowLogVersion
      target_field: azure_network_watcher_vnet.log.flow_log.version
      ignore_missing: true
  - rename:
      field: json.flowLogGUID
      tag: rename_flowLogGUID
      target_field: azure_network_watcher_vnet.log.flow_log.guid
      ignore_missing: true
  - rename:
      field: json.flowLogResourceID
      tag: rename_flowLogResourceID
      target_field: azure_network_watcher_vnet.log.flow_log.resource_id
      ignore_missing: true
  - rename:
      field: json.category
      tag: rename_category
      target_field: azure_network_watcher_vnet.log.category
      ignore_missing: true
  - rename:
      field: json.targetResourceID
      tag: rename_targetResourceID
      target_field: azure_network_watcher_vnet.log.target_resource_id
      ignore_missing: true
  - rename:
      field: json.operationName
      tag: rename_operationName
      target_field: azure_network_watcher_vnet.log.operation_name
      ignore_missing: true
  - foreach:
      field: json.flowRecords.flows
      if: ctx.json?.flowRecords?.flows instanceof List
      tag: foreach_flowRecords_flow_to_rename_aclID
      processor:
        rename:
          field: _ingest._value.aclID
          tag: rename_aclID
          target_field: _ingest._value.acl_id
          ignore_missing: true
  - uppercase:
      field: json.macAddress
      tag: uppercase_mac_address
      ignore_missing: true
      if: ctx.json?.macAddress !='' && ctx.json.macAddress != null
      target_field: azure_network_watcher_vnet.log.mac_address
  - gsub:
      field: azure_network_watcher_vnet.log.mac_address
      if: ctx.azure_network_watcher_vnet?.log?.mac_address != '' && ctx.azure_network_watcher_vnet.log.mac_address!= null
      tag: gsub_mac_address
      pattern: '(..)(?!$)'
      replacement: '$1-'
      ignore_missing: true
  - set:
      field: source.mac
      tag: set_source_mac
      copy_from: azure_network_watcher_vnet.log.mac_address
      ignore_empty_value: true
  - foreach:
      field: json.flowRecords.flows
      tag: foreach_flowRecords_flow_to_append_rule_to_rule_name
      if: ctx.json?.flowRecords?.flows instanceof List
      processor:
        foreach:
          field: _ingest._value.flowGroups
          ignore_failure: true
          processor:
            append:
              field: rule.name
              tag: append_rule_to_rule_name
              value: '{{{_ingest._value.rule}}}'
              allow_duplicates: false
  - script:
      lang: painless
      tag: script_to_extract_flow_tupple_values
      description: Script to extract flow tupple values.
      if: ctx.json?.flowRecords?.flows instanceof List
      source: |
        def removeDuplicateValues(def list) {
            List arrayList = new ArrayList(new HashSet(list));
            return arrayList;
          }
          List flowsList = ctx.json.flowRecords.flows;
          List destinationBytes = new ArrayList();
          List sourceBytes = new ArrayList();
          List destinationPackets = new ArrayList();
          List sourcePackets = new ArrayList();
          List srcPort = new ArrayList();
          List destinationPort = new ArrayList();
          List destinationIp = new ArrayList();
          List srcIp = new ArrayList();
          List netDirection = new ArrayList();
          List netIana = new ArrayList();
          for (Map flows: flowsList) {
            List flowGroupsList = flows.containsKey('flowGroups') ? (List) flows.get('flowGroups') : Collections.emptyList();
            for (Map flowGroups: flowGroupsList) {
              List flowTuplesList = flowGroups.containsKey('flowTuples') ? (List) flowGroups.get('flowTuples') : Collections.emptyList();
              List newFlowTuplesList = new ArrayList();
              for (String flowTuple: flowTuplesList) {
                String[] flowTupleParts = flowTuple.splitOnToken(',');
                if (flowTupleParts.length == 13) {
                  Map flowTupleMap = new HashMap();
                  flowTupleMap.put('flow', new HashMap());
                  flowTupleMap.put('source', new HashMap());
                  flowTupleMap.put('destination', new HashMap());
                  flowTupleMap.put('bytes', new HashMap());
                  flowTupleMap.put('packets', new HashMap());
                  if (!flowTupleParts[0].isEmpty()) {
                    flowTupleMap.put('timestamp', flowTupleParts[0]);
                  }
                  if (!flowTupleParts[1].isEmpty()) {
                    srcIp.add(flowTupleParts[1]);
                    flowTupleMap.source.put('ip', flowTupleParts[1]);
                  }
                  if (!flowTupleParts[2].isEmpty()) {
                    destinationIp.add(flowTupleParts[2]);
                    flowTupleMap.destination.put('ip', flowTupleParts[2]);
                  }
                  if (!flowTupleParts[3].isEmpty()) {
                    srcPort.add(flowTupleParts[3]);
                    flowTupleMap.source.put('port', flowTupleParts[3]);
                  }
                  if (!flowTupleParts[4].isEmpty()) {
                    destinationPort.add(flowTupleParts[4]);
                    flowTupleMap.destination.put('port', flowTupleParts[4]);
                  }
                  if (!flowTupleParts[5].isEmpty()) {
                    netIana.add(flowTupleParts[5]);
                    flowTupleMap.put('protocol', flowTupleParts[5]);
                  }
                  String flowDirection = flowTupleParts[6];
                  if (flowDirection.contains('I')) {
                    flowDirection = 'Inbound';
                  } else if (flowDirection.contains('O')) {
                    flowDirection = 'Outbound';
                  }
                  if (!flowTupleParts[6].isEmpty()) {
                    netDirection.add(flowDirection);
                    flowTupleMap.flow.put('direction', flowDirection);
                  }
                  String flowState = flowTupleParts[7];
                  if (flowState.contains('B')) {
                    flowState = 'Begin';
                  } else if (flowState.contains('C')) {
                    flowState = 'Continuing';
                  } else if (flowState.contains('E')) {
                    flowState = 'End';
                  } else if (flowState.contains('D')) {
                    flowState = 'Deny';
                  }
                  if (!flowTupleParts[7].isEmpty()) {
                    flowTupleMap.flow.put('state', flowState);
                  }
                  if (!flowTupleParts[8].isEmpty()) {
                    flowTupleMap.flow.put('encryption', flowTupleParts[8]);
                  }
                  if (!flowTupleParts[9].isEmpty()) {
                    sourcePackets.add(flowTupleParts[9]);
                    flowTupleMap.packets.put('sent', flowTupleParts[9]);
                  }
                  if (!flowTupleParts[10].isEmpty()) {
                    sourceBytes.add(flowTupleParts[10]);
                    flowTupleMap.bytes.put('sent', flowTupleParts[10]);
                  }
                  if (!flowTupleParts[11].isEmpty()) {
                    destinationPackets.add(flowTupleParts[11]);
                    flowTupleMap.packets.put('received', flowTupleParts[11]);
                  }
                  if (!flowTupleParts[12].isEmpty()) {
                    destinationBytes.add(flowTupleParts[12]);
                    flowTupleMap.bytes.put('received', flowTupleParts[12]);
                  }
                  newFlowTuplesList.add(flowTupleMap);
                }
              }
              flowGroups.put('tuples', newFlowTuplesList);
              flowGroups.remove('flowTuples');
            }
          }
          ctx.json.flowRecords.flows = flowsList;
          if (ctx.destination == null) {
            Map map = new HashMap();
            ctx.put('destination', map);
          }
          if (ctx.source == null) {
            Map map = new HashMap();
            ctx.put('source', map);
          }
          if (ctx.network == null) {
            Map map = new HashMap();
            ctx.put('network', map);
          }
          if (ctx.destination?.packets == null) {
            ctx.destination.put('packets', removeDuplicateValues(destinationPackets));
          }
          if (ctx.destination?.bytes == null) {
            ctx.destination.put('bytes', removeDuplicateValues(destinationBytes));
          }
          if (ctx.source?.packets == null) {
            ctx.source.put('packets', removeDuplicateValues(sourcePackets));
          }
          if (ctx.source?.bytes == null) {
            ctx.source.put('bytes', removeDuplicateValues(sourceBytes));
          }
          if (ctx.source?.port == null) {
            ctx.source.put('port', removeDuplicateValues(srcPort));
          }
          if (ctx.destination?.port == null) {
            ctx.destination.put('port', removeDuplicateValues(destinationPort));
          }
          if (ctx.source?.ip == null) {
            ctx.source.put('ip', removeDuplicateValues(srcIp));
          }
          if (ctx.destination?.ip == null) {
            ctx.destination.put('ip', removeDuplicateValues(destinationIp));
          }
          if (ctx.network?.direction == null) {
            ctx.network.put('direction', removeDuplicateValues(netDirection));
          }
          if (ctx.network?.iana_number == null) {
            ctx.network.put('iana_number', removeDuplicateValues(netIana));
          }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.flowRecords.flows
      if: ctx.json?.flowRecords?.flows instanceof List
      tag: foreach_flowRecords_flow_to_convert_destination_port_to_long
      processor:
        foreach:
          field: _ingest._value.flowGroups
          tag: foreach_flowGroups_to_convert_destination_port_to_long
          ignore_failure: true
          processor:
            foreach:
              field: _ingest._value.tuples
              tag: foreach_tuples_to_convert_destination_port_to_long
              ignore_failure: true
              processor:
                convert:
                  field: _ingest._value.destination.port
                  tag: convert_destination_port_to_long
                  type: long
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.destination.port
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.flowRecords.flows
      if: ctx.json?.flowRecords?.flows instanceof List
      tag: foreach_flowRecords_flow_to_convert_source_port_to_long
      processor:
        foreach:
          field: _ingest._value.flowGroups
          tag: foreach_flowGroups_to_convert_source_port_to_long
          ignore_failure: true
          processor:
            foreach:
              field: _ingest._value.tuples
              tag: foreach_tuples_to_convert_source_port_to_long
              ignore_failure: true
              processor:
                convert:
                  field: _ingest._value.source.port
                  tag: convert_source_port_to_long
                  type: long
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.source.port
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.flowRecords.flows
      if: ctx.json?.flowRecords?.flows instanceof List
      tag: foreach_flowRecords_flow_to_convert_destination_ip_to_ip
      processor:
        foreach:
          field: _ingest._value.flowGroups
          tag: foreach_flowGroups_to_convert_destination_ip_to_ip
          ignore_failure: true
          processor:
            foreach:
              field: _ingest._value.tuples
              tag: foreach_tuples_to_convert_destination_ip_to_ip
              ignore_failure: true
              processor:
                convert:
                  field: _ingest._value.destination.ip
                  tag: convert_destination_ip_to_ip
                  type: ip
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.destination.ip
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.flowRecords.flows
      if: ctx.json?.flowRecords?.flows instanceof List
      tag: foreach_flowRecords_flow_to_convert_source_ip_to_ip
      processor:
        foreach:
          field: _ingest._value.flowGroups
          tag: foreach_flowGroups_to_convert_source_ip_to_ip
          ignore_failure: true
          processor:
            foreach:
              field: _ingest._value.tuples
              tag: foreach_tuples_to_convert_source_ip_to_ip
              ignore_failure: true
              processor:
                convert:
                  field: _ingest._value.source.ip
                  tag: convert_source_ip_to_ip
                  type: ip
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.source.ip
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.flowRecords.flows
      if: ctx.json?.flowRecords?.flows instanceof List
      tag: foreach_flowRecords_flow_to_convert_packets_received_to_long
      processor:
        foreach:
          field: _ingest._value.flowGroups
          tag: foreach_flowGroups_to_convert_packets_received_to_long
          ignore_failure: true
          processor:
            foreach:
              field: _ingest._value.tuples
              tag: foreach_tuples_to_convert_packets_received_to_long
              ignore_failure: true
              processor:
                convert:
                  field: _ingest._value.packets.received
                  tag: convert_packets_received_to_long
                  type: long
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.packets.received
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.flowRecords.flows
      if: ctx.json?.flowRecords?.flows instanceof List
      tag: foreach_flowRecords_flow_to_convert_packets_sent_to_long
      processor:
        foreach:
          field: _ingest._value.flowGroups
          tag: foreach_flowGroups_to_convert_packets_sent_to_long
          ignore_failure: true
          processor:
            foreach:
              field: _ingest._value.tuples
              tag: foreach_tuples_to_convert_packets_sent_to_long
              ignore_failure: true
              processor:
                convert:
                  field: _ingest._value.packets.sent
                  tag: convert_packets_sent_to_long
                  type: long
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.packets.sent
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.flowRecords.flows
      if: ctx.json?.flowRecords?.flows instanceof List
      tag: foreach_flowRecords_flow_to_convert_bytes_received_to_long
      processor:
        foreach:
          field: _ingest._value.flowGroups
          tag: foreach_flowGroups_to_convert_bytes_received_to_long
          ignore_failure: true
          processor:
            foreach:
              field: _ingest._value.tuples
              tag: foreach_tuples_to_convert_bytes_received_to_long
              ignore_failure: true
              processor:
                convert:
                  field: _ingest._value.bytes.received
                  tag: convert_bytes_received_to_long
                  type: long
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.bytes.received
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.flowRecords.flows
      if: ctx.json?.flowRecords?.flows instanceof List
      tag: foreach_flowRecords_flow_to_convert_bytes_sent_to_long
      processor:
        foreach:
          field: _ingest._value.flowGroups
          tag: foreach_flowGroups_to_convert_bytes_sent_to_long
          ignore_failure: true
          processor:
            foreach:
              field: _ingest._value.tuples
              tag: foreach_tuples_to_convert_bytes_sent_to_long
              ignore_failure: true
              processor:
                convert:
                  field: _ingest._value.bytes.sent
                  tag: convert_bytes_sent_to_long
                  type: long
                  ignore_missing: true
                  on_failure:
                    - remove:
                        field: _ingest._value.bytes.sent
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.flowRecords.flows
      if: ctx.json?.flowRecords?.flows instanceof List
      tag: foreach_flowRecords_flow_to_date_timestamp
      processor:
        foreach:
          field: _ingest._value.flowGroups
          tag: foreach_flowGroups_to_date_timestamp
          ignore_failure: true
          processor:
            foreach:
              field: _ingest._value.tuples
              tag: foreach_tuples_to_date_timestamp
              ignore_failure: true
              processor:
                date:
                  field: _ingest._value.timestamp
                  tag: date_timestamp
                  target_field: _ingest._value.timestamp
                  formats:
                    - UNIX_MS
                  on_failure:
                    - remove:
                        field: _ingest._value.timestamp
                    - append:
                        field: error.message
                        value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: json.flowRecords.flows
      if: ctx.json?.flowRecords?.flows instanceof List
      tag: foreach_flowRecords_flow_to_rename_flowGroups
      processor:
        rename:
          field: _ingest._value.flowGroups
          tag: rename_flowGroups
          target_field: _ingest._value.groups
          ignore_missing: true
  - rename:
      field: json.flowRecords.flows
      tag: rename_records_flows
      target_field: azure_network_watcher_vnet.log.records.flows
      ignore_missing: true
  - foreach:
      field: source.port
      if: ctx.source?.port instanceof List
      tag: foreach_source_port_to_convert_source_port_to_long
      processor:
        convert:
          field: _ingest._value
          tag: convert_source_port_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: destination.port
      if: ctx.destination?.port instanceof List
      tag: foreach_destination_port_to_convert_destination_port_to_long
      processor:
        convert:
          field: _ingest._value
          tag: convert_destination_port_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: source.ip
      tag: foreach_source_ip_to_convert_source_ip_to_ip
      if: ctx.source?.ip instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_source_ip_to_ip
          type: ip
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: destination.ip
      tag: foreach_destination_ip_to_convert_destination_ip_to_ip
      if: ctx.destination?.ip instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_destination_ip_to_ip
          type: ip
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: source.packets
      if: ctx.source?.packets instanceof List
      tag: foreach_source_packets_to_convert_source_packets_to_long
      processor:
        convert:
          field: _ingest._value
          tag: convert_source_packets_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: source.bytes
      if: ctx.source?.bytes instanceof List
      tag: foreach_source_bytes_to_convert_source_bytes_to_long
      processor:
        convert:
          field: _ingest._value
          tag: convert_source_bytes_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: destination.packets
      if: ctx.destination?.packets instanceof List
      tag: foreach_destination_packets_to_convert_destination_packets_to_long
      processor:
        convert:
          field: _ingest._value
          tag: convert_destination_packets_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: destination.bytes
      if: ctx.destination?.bytes instanceof List
      tag: foreach_destination_bytes_to_convert_destination_bytes_to_long
      processor:
        convert:
          field: _ingest._value
          tag: convert_destination_bytes_to_long
          type: long
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: destination.ip
      tag: foreach_destination_ip_to_append_related_ip_from_destination_ip
      if: ctx.destination?.ip instanceof List
      processor:
        append:
          field: related.ip
          tag: append_related_ip_from_destination_ip
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - foreach:
      field: source.ip
      tag: foreach_source_ip_to_append_related_ip_from_source_ip
      if: ctx.source?.ip instanceof List
      processor:
        append:
          field: related.ip
          tag: append_related_ip_from_source_ip
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - foreach:
      field: network.direction
      if: ctx.network?.direction instanceof List
      tag: foreach_network_direction_to_lowercase_network_direction
      processor:
        lowercase:
          field: _ingest._value
          tag: lowercase_network_direction
          ignore_missing: true
  - remove:
      field: json
      tag: remove_json
      ignore_missing: true
  - remove:
      field: event.original
      tag: remove_event_original
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
  - pipeline:
      name: '{{ IngestPipeline "azure_shared_pipeline" }}'
      if: ctx.azure_network_watcher_vnet?.log?.flow_log?.resource_id != null
      tag: pipeline_azure_shared
      ignore_missing_pipeline: true
  - script:
      lang: painless
      description: Drops null/empty values recursively.
      tag: painless_remove_null
      source: |-
        boolean drop(Object object) {
          if (object == null || object == '') {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(v -> drop(v));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(v -> drop(v));
            return (((List) object).length == 0);
          }
          return false;
        }
        drop(ctx);
  - set:
      field: event.kind
      value: pipeline_error
      tag: set_pipeline_error_into_event_kind
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      value: pipeline_error
