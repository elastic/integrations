---
description: Pipeline for processing Cisco Meraki events
processors:
- set:
    field: ecs.version
    value: '8.0.0'
- set:
    field: observer.serial_number
    copy_from: json.deviceSerial
- gsub:
    field: json.deviceMac
    target_field: observer.mac
    pattern: '[-:.]'
    replacement: '-'
- set:
    field: observer.name
    copy_from: json.deviceName
- set:
    field: observer.vendor
    value: Cisco
- set:
    field: observer.product
    copy_from: json.deviceModel
- set:
    field: network.name
    copy_from: json.networkName
- date:
    field: json.occurredAt
    formats:
      - ISO8601
- set:
    field: organization.id
    copy_from: json.organizationId
- set:
    field: organization.name
    copy_from: json.organizationName
- append:
    field: event.category
    value: network
- append:
    field: event.type
    value: info
- script:
    lang: painless
    description: The script sets event type, action and category based on type and sub-type fields
    params:
       eventmap:
        "cellular_up":
          type:
            - start
    source: |-
         def alertTypeId = ctx.json.alertTypeId;
         if (alertTypeId == null) {
           return;
         }
         def eventMap = params.get('eventmap');
         def eventData = eventMap.get(alertTypeId);
         if (eventData == null) {
           ctx.event.action = 'unknown-' + alertTypeId;
           return;
         }
         def eventCategory = eventData.get('category');
         if (eventCategory != null) {
           for (def c : eventCategory) {
             ctx.event.category.add(c);
           }
         }

         def eventType = eventData.get('type');
         if (eventType != null) {
           for (def t : eventType) {
             ctx.event.type.add(t);
           }
         }
         ctx.event.action = ctx.json.alertType;
         return;

- set:
    field: cisco_meraki.event
    copy_from: json
##
# Clean up
##
- remove:
    field: 
      - json
      - cisco_meraki.event.deviceSerial
      - cisco_meraki.event.deviceMac
      - cisco_meraki.event.deviceName
      - cisco_meraki.event.deviceModel
      - cisco_meraki.event.occurredAt
      - cisco_meraki.event.networkName
      - cisco_meraki.event.organizationId
      - cisco_meraki.event.organizationName
      - cisco_meraki.event.alertType
    ignore_missing: true
- remove:
    field: event.original
    if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
    ignore_failure: true
    ignore_missing: true
- script:
    lang: painless
    description: This script processor iterates over the whole document to remove fields with null values.
    source: |
      void handleMap(Map map) {
        for (def x : map.values()) {
          if (x instanceof Map) {
              handleMap(x);
          } else if (x instanceof List) {
              handleList(x);
          }
        }
        map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      void handleList(List list) {
        for (def x : list) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
        }
        list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      handleMap(ctx);

on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}'
