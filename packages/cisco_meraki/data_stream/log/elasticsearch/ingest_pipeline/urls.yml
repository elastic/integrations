---
description: Pipeline for Cisco Meraki urls type
processors:
- dissect:
    description: Determine the security event type
    field: event.original
    pattern: "%{} urls %{*src}=%{&src} %{*dst}=%{&dst} %{*mac}=%{&mac} request: %{http.request.method} %{url.original}"
# extract user-agent if present (it will be following the mac field)
- dissect:
    description: Extract the user-agent that can be embedded into the mac field due to the previous extaction
    field: mac
    ignore_missing: true
    ignore_failure: true
    pattern: "%{mac} agent=%{user_agent.original}"
# src processing
- grok:
    field: src
    patterns:
      - "^%{IPV4:_temp.src_ip}:%{PORT:sport}$"
      - "^\\[%{IPV6:_temp.src_ip}\\]:%{PORT:sport}$"
      - "^%{IPV6NOCOMPRESS:_temp.src_ip}:%{PORT:sport}$"
      - "^%{IPV6:_temp.src_ip}%{IPV6PORTSEP}%{PORT:sport}$"
    pattern_definitions:
      IPV6NOCOMPRESS: '([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}'
      IPV6PORTSEP: '(?: port |[p#.])'
      PORT: '[0-9]+'
- convert:
    type: ip
    field: _temp.src_ip
    target_field: source.ip
- convert:
    type: long
    field: sport
    target_field: source.port
    ignore_failure: true
# dst processing
- grok:
    field: dst
    patterns:
      - "^%{IPV4:_temp.dst_ip}:%{PORT:dport}$"
      - "^\\[%{IPV6:_temp.dst_ip}\\]:%{PORT:dport}$"
      - "^%{IPV6NOCOMPRESS:_temp.dst_ip}:%{PORT:dport}$"
      - "^%{IPV6:_temp.dst_ip}%{IPV6PORTSEP}%{PORT:dport}$"
    pattern_definitions:
      IPV6NOCOMPRESS: '([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4}'
      IPV6PORTSEP: '(?: port |[p#.])'
      PORT: '[0-9]+'
- convert:
    type: ip
    field: _temp.dst_ip
    target_field: destination.ip
    ignore_failure: true
- convert:
    type: long
    field: dport
    target_field: destination.port
    if: ctx?.dport != "0" && ctx?.cisco_meraki?.event_subtype != 'security_filtering_disposition_change'
    ignore_failure: true
- gsub:
    field: mac
    target_field: cisco_meraki.urls.mac
    pattern: '[-:.]'
    replacement: '-'
- set:
    field: cisco_meraki.event_subtype
    value: 'http_access'
    if: ctx?.http?.request?.method.toLowerCase() != 'unknown'
- set:
    field: cisco_meraki.event_subtype
    value: 'http_access_error'
    if: ctx?.http?.request?.method.toLowerCase() == 'unknown'
# user_agent processing
- user_agent:
    field: user_agent.original
    ignore_missing: true
# url processing
- uri_parts:
    field: url.original
    target_field: url
    if: ctx.url?.original != null && ctx.url.original != ""
- registered_domain:
    field: url.domain
    target_field: url
    ignore_missing: true
on_failure:
- set:
    field: event.kind
    value: pipeline_error
- append:
    field: error.message
    value: '{{{ _ingest.on_failure_message }}}'
