---
description: Pipeline for Cisco Meraki ip_flow_start and ip_flow_end message type
processors:
- dissect:
    description: Determine if the token is src= or operation
    field: event.original
    pattern: "%{} %{} %{} %{event.code} %{_temp.token} %{}"
- dissect:
    description: Case for src= follows ip_flow_start
    field: event.original
    pattern: "%{} ip_flow_start %{*src}=%{&src} %{*dst}=%{&dst} %{*prot}=%{&prot} %{*sport}=%{&sport} %{*dport}=%{&dport} %{*tsi}=%{&tsi} %{*tp}=%{&tp}"
    if: ctx.event.code == 'ip_flow_start' && ctx._temp.token.startsWith("src=") == true
- dissect:
    description: Case for src= follows ip_flow_end
    field: event.original
    pattern: "%{} ip_flow_end %{*src}=%{&src} %{*dst}=%{&dst} %{*prot}=%{&prot} %{*sport}=%{&sport} %{*dport}=%{&dport} %{_temp.tsi_or_tdi} %{*tp}=%{&tp}"
    if: ctx.event.code == 'ip_flow_end' && ctx._temp.token.startsWith("src=") == true
# source field IP:port handling
- set:
    field: source.ip
    copy_from: translated_src_ip
    if: ctx?.translated_src_ip != null
- set:
    field: source.ip
    copy_from: src
    if: ctx?.translated_src_ip == null && ctx?.src != null
- convert:
    field: translated_port
    target_field: source.port
    type: long
    if: ctx?.translated_src_ip != null && ctx?.translated_port != null
- convert:
    field: sport
    target_field: source.port
    type: long
    if: ctx?.translated_src_ip == null && ctx?.sport != null
# destination field IP:port handling
- set:
    field: destination.ip
    copy_from: translated_dst_ip
    if: ctx?.translated_dst_ip != null
- set:
    field: destination.ip
    copy_from: dst
    if: ctx?.translated_dst_ip == null && ctx?.dst != null
- convert:
    field: translated_port
    target_field: destination.port
    type: long
    if: ctx?.translated_dst_ip != null && ctx?.translated_port != null
- convert:
    field: dport
    target_field: destination.port
    type: long
    if: ctx?.translated_dst_ip == null && ctx?.dport != null
- rename:
    field: protocol
    target_field: network.protocol
# IP Geolocation Lookup (source)
- geoip:
    field: source.ip
    target_field: source.geo
    ignore_missing: true
    if: ctx.source?.geo == null && ctx?.source?.ip != null
# IP Autonomous System (AS) Lookup
- geoip:
    database_file: GeoLite2-ASN.mmdb
    field: source.ip
    target_field: source.as
    properties:
        - asn
        - organization_name
    ignore_missing: true
    if: ctx?.source?.ip != null
- rename:
    field: source.as.asn
    target_field: source.as.number
    ignore_missing: true
- rename:
    field: source.as.organization_name
    target_field: source.as.organization.name
    ignore_missing: true
# IP Geolocation Lookup (destination)
- geoip:
    field: destination.ip
    target_field: destination.geo
    ignore_missing: true
    if: ctx.destination?.geo == null && ctx?.destination?.ip != null
# IP Autonomous System (AS) Lookup
- geoip:
    database_file: GeoLite2-ASN.mmdb
    field: destination.ip
    target_field: destination.as
    properties:
        - asn
        - organization_name
    ignore_missing: true
    if: ctx?.destination?.ip != null
- rename:
    field: destination.as.asn
    target_field: destination.as.number
    ignore_missing: true
- rename:
    field: destination.as.organization_name
    target_field: destination.as.organization.name
    ignore_missing: true
