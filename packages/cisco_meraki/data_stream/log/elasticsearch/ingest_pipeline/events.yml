---
description: Pipeline for Cisco Meraki events type
processors:
####################################################
# set event_subtype based on type/format
####################################################
- dissect:
    field: event.original
    pattern: "%{} events %{message}"
    ignore_failure: true
- dissect:
    description: Determine event type/format
    field: event.original
    pattern: "%{} events %{msgtype} %{}"
- set:
    field: cisco_meraki.event_subtype
    value: 'Site-to-Site VPN'
    if: ctx.msgtype.toLowerCase() == "site-to-site"
- set:
    field: cisco_meraki.event_subtype
    value: client_vpn_connect
    if: ctx.msgtype.toLowerCase() == "client_vpn_connect"
- set:
    field: cisco_meraki.event_subtype
    value: blocked
    if: ctx.msgtype.toLowerCase() == "blocked"
- set:
    field: cisco_meraki.event_subtype
    value: auth
    if: ctx.msgtype.toLowerCase() == "auth"
- set:
    field: cisco_meraki.event_subtype
    value: port
    if: ctx.msgtype.toLowerCase() == "port"
- set:
    field: cisco_meraki.event_subtype
    value: carrier_change
    if: ctx.msgtype.toLowerCase() == "carrier_change"
- set:
    field: cisco_meraki.event_subtype
    value: anyconnect_vpn_connect
    if: ctx.msgtype.toLowerCase() == "anyconnect_vpn_connect"
- set:
    field: cisco_meraki.event_subtype
    value: anyconnect_vpn_disconnect
    if: ctx.msgtype.toLowerCase() == "anyconnect_vpn_disconnect"
- set:
    field: cisco_meraki.event_subtype
    value: splash_auth
    if: ctx.msgtype.toLowerCase() == "splash_auth"
- set:
    field: cisco_meraki.event_subtype
    value: martian_vlan
    if: ctx.msgtype.toLowerCase() == "martian_vlan"
####################################################
# log event with type=<value> format
# these are dfs_event, association, disassociation, 
# vpn_connectivity_change, wpa_auth, wpa_deauth
####################################################
- dissect:
    description: Get the event subtype
    field: event.original
    pattern: "%{} events type=%{type} %{}"
    if: ctx?.msgtype.startsWith("type=")
- rename:
    field: type
    target_field: cisco_meraki.event_subtype
    if: ctx?.type != null

####################################################
# Handle DHCP log events
####################################################
- dissect:
    field: event.original
    pattern: "%{} events dhcp %{_temp.dhcp_op} %{_temp.dhcp_op2} %{}"
    if: ctx?.msgtype.toLowerCase() == "dhcp"
- set:
    field: network.protocol
    value: dhcp
    if: ctx?.msgtype.toLowerCase() == "dhcp"
- dissect:
    field: event.original
    pattern: "%{} events dhcp lease of ip %{_temp.client_ip} from %{} mac %{server.mac} for client mac %{client.mac} %{}"
    if: ctx?.msgtype.toLowerCase() == "dhcp" && ctx?._temp?.dhcp_op.toLowerCase() == 'lease'
- dissect:
    field: event.original
    pattern: "%{} events dhcp no offers for mac %{client.mac} %{}"
    if: ctx?.msgtype.toLowerCase() == "dhcp" && ctx?._temp?.dhcp_op.toLowerCase() == 'no' && ctx?._temp?.dhcp_op2.toLowerCase() == 'offers'
- set:
    field: cisco_meraki.event_subtype
    value: dhcp_offer
    if: ctx?.msgtype.toLowerCase() == "dhcp" && ctx?._temp?.dhcp_op == 'lease'
- set:
    field: cisco_meraki.event_subtype
    value: dhcp_no_offer
    if: ctx?.msgtype.toLowerCase() == "dhcp" && ctx?._temp?.dhcp_op.toLowerCase() == 'no' && ctx?._temp?.dhcp_op2.toLowerCase() == 'offers'
- grok:
    field: event.original
    patterns: 
      - "events dhcp %{GREEDYDATA:message}$"
    if: ctx?.msgtype.toLowerCase() == "dhcp"
####################################################
# Handle Site-to-Site VPN message
####################################################
- grok:
    description: Process Site-to-Site VPN messages
    field: event.original
    patterns:
      - '%{SYSLOGHDR}%{SPACE}%{NUMBER}%{SPACE}%{WORDORHOST}%{SPACE}events%{SPACE}(?i)Site-to-Site VPN:%{GREEDYDATA:cisco_meraki.site_to_site_vpn.raw}'
    pattern_definitions:
      SYSLOGPRI: '<%{NONNEGINT:log.syslog.priority:long}>'
      SYSLOGVER: '\b(?:\d{1,2})\b'
      SYSLOGHDR: '%{SYSLOGPRI}%{SYSLOGVER}'
      WORDORHOST: '(?:%{WORD}|%{HOSTNAME})'
    if: ctx.event.original.startsWith('<') && ctx?.cisco_meraki?.event_subtype == "Site-to-Site VPN"

####################################################
# Handle Blocked ARP
####################################################
- grok:
    field: event.original
    patterns: 
      - '^%{SYSLOGHDR}%{SPACE}%{NUMBER}%{SPACE}%{WORDORHOST}%{SPACE}events%{SPACE}(?<message>%{BLOCKEDARP:_temp.blocked_arp} from %{MAC:source.mac} with IP %{IP:source.ip} on %{NOTSPACE} %{GREEDYDATA:observer.ingress.vlan.id})$'
    pattern_definitions:
      SYSLOGPRI: '<%{NONNEGINT:log.syslog.priority:long}>'
      SYSLOGVER: '\b(?:\d{1,2})\b'
      SYSLOGHDR: '%{SYSLOGPRI}%{SYSLOGVER}'
      WORDORHOST: '(?:%{WORD}|%{HOSTNAME})'
      BLOCKEDARP: 'Blocked ARP Packet'
    if: ctx.event.original.startsWith('<') && ctx?.cisco_meraki?.event_subtype == "blocked"
- gsub:
    field: source.mac
    pattern: '[:.]'
    replacement: '-'
    ignore_missing: true
- uppercase:
    field: source.mac
    ignore_missing: true
- set:
    field: cisco_meraki.event_subtype
    value: arp_blocked
    if: ctx._temp?.blocked_arp != null

####################################################
# Handle Ports
####################################################
- grok:
    field: event.original
    patterns: 
      - '^(?i)%{SYSLOGHDR}%{SPACE}%{NUMBER}%{SPACE}%{WORDORHOST}%{SPACE}events%{SPACE}(?<message>port %{NOTSPACE:cisco_meraki.port} %{PORTACTION:_temp.port_action}(?: from %{NOTSPACE:cisco_meraki.old_port_status} to %{NOTSPACE:cisco_meraki.new_port_status}|.*))$'
    pattern_definitions:
      SYSLOGPRI: '<%{NONNEGINT:log.syslog.priority:long}>'
      SYSLOGVER: '\b(?:\d{1,2})\b'
      SYSLOGHDR: '%{SYSLOGPRI}%{SYSLOGVER}'
      WORDORHOST: '(?:%{WORD}|%{HOSTNAME})'
      PORTACTION: '(?:changed stp role|status changed)'
    if: ctx.event.original.startsWith('<') && ctx.cisco_meraki?.event_subtype == "port"
- gsub:
    field: _temp.port_action
    pattern: ' '
    replacement: '_'
    ignore_missing: true
- lowercase:
    field: _temp.port_action
    ignore_missing: true
- set:
    field: cisco_meraki.event_subtype
    value: 'port_{{{_temp.port_action}}}'
    if: ctx._temp?.port_action != null

####################################################
# Handle Carrier Change
####################################################
- grok:
    field: event.original
    patterns: 
      - '^(?i)%{SYSLOGHDR}%{SPACE}%{NUMBER}%{SPACE}%{WORDORHOST}%{SPACE}events carrier_change device%{SPACE}%{NOTSPACE:cisco_meraki.mxport} up %{NOTSPACE:_temp.up}.*$'
    pattern_definitions:
      SYSLOGPRI: '<%{NONNEGINT:log.syslog.priority:long}>'
      SYSLOGVER: '\b(?:\d{1,2})\b'
      SYSLOGHDR: '%{SYSLOGPRI}%{SYSLOGVER}'
      WORDORHOST: '(?:%{WORD}|%{HOSTNAME})'
    if: ctx.event.original.startsWith('<') && ctx.cisco_meraki?.event_subtype == "carrier_change"
- set:
    field: cisco_meraki.new_port_status
    value: up
    if: ctx._temp?.up == 'true'
- set:
    field: cisco_meraki.new_port_status
    value: down
    if: ctx._temp?.up == 'false'

####################################################
# Handle dfs_event, wpa_auth, wpa_deauth, 
# association or disassociation
####################################################
- grok:
    field: event.original
    patterns: 
      - '%{SYSLOGHDR}%{SPACE}%{NUMBER}%{SPACE}%{WORDORHOST}%{SPACE}events%{SPACE}%{GREEDYDATA:_temp.rest}'
    pattern_definitions:
      SYSLOGPRI: '<%{NONNEGINT:log.syslog.priority:long}>'
      SYSLOGVER: '\b(?:\d{1,2})\b'
      SYSLOGHDR: '%{SYSLOGPRI}%{SYSLOGVER}'
      WORDORHOST: '(?:%{WORD}|%{HOSTNAME})'
    if: ctx.event.original.startsWith('<') && ['dfs_event', 'association', 'disassociation', 'aps_association_reject', 'multiple_dhcp_servers_detected', 'wpa_deauth', 'wpa_auth', 'vpn_connectivity_change', '8021x_eap_failure', '8021x_auth', '8021x_deauth', '8021x_eap_success', 'splash_auth', 'device_packet_flood'].contains(ctx.cisco_meraki.event_subtype)
- kv:
    field: _temp.rest
    field_split: "[ \t]{1,}"
    value_split: "="
    target_field: cisco_meraki.{{{cisco_meraki.event_subtype}}}
    strip_brackets: true
    if: ctx?._temp?.rest != null && ['dfs_event', 'association', 'disassociation', 'aps_association_reject', 'multiple_dhcp_servers_detected', 'wpa_deauth', 'wpa_auth', '8021x_eap_failure', '8021x_auth', '8021x_deauth', '8021x_eap_success', 'splash_auth', 'device_packet_flood'].contains(ctx.cisco_meraki.event_subtype)
# special case for site-to-site vpn
- kv:
    field: _temp.rest
    field_split: "[ \t]{1,}"
    value_split: "="
    target_field: cisco_meraki.site_to_site_vpn.connectivity_change
    strip_brackets: true
    if: ctx?._temp?.rest != null && ctx?.cisco_meraki?.event_subtype == 'vpn_connectivity_change'

####################################################
# Move values from event subtypes to ECS fields
# multiple_dhcp_servers_detected
####################################################
- set:
    field: network.protocol
    value: dhcp
    if: ctx?.cisco_meraki?.event_subtype == 'multiple_dhcp_servers_detected'
- rename:
    field: cisco_meraki.multiple_dhcp_servers_detected.original_server_mac
    target_field: server.mac
    if: ctx?.cisco_meraki?.event_subtype == 'multiple_dhcp_servers_detected'
# process original_server_ip
- grok:
    field: cisco_meraki.multiple_dhcp_servers_detected.original_server_ip
    patterns:
      - "^%{IPV4:cisco_meraki.multiple_dhcp_servers_detected.original_server_ip}$"
      - "^%{IPV6:cisco_meraki.multiple_dhcp_servers_detected.original_server_ip}$"
    if: ctx?.cisco_meraki?.event_subtype == 'multiple_dhcp_servers_detected'
    ignore_failure: true
- convert:
    type: ip
    field: cisco_meraki.multiple_dhcp_servers_detected.original_server_ip
    target_field: server.ip
    if: ctx?.cisco_meraki?.event_subtype == 'multiple_dhcp_servers_detected'
    ignore_failure: true
# cleanup only if the conversion was successful
- remove:
    field: cisco_meraki.multiple_dhcp_servers_detected.original_server_ip
    if: ctx?.server?.ip != null
- append:
    field: related.ip
    value: "{{{server.ip}}}"
    if: ctx?.cisco_meraki?.event_subtype == 'multiple_dhcp_servers_detected'
# process server_ip (the other dhcp server ip)
- grok:
    field: cisco_meraki.multiple_dhcp_servers_detected.server_ip
    patterns:
      - "^%{IPV4:cisco_meraki.multiple_dhcp_servers_detected.server_ip}$"
      - "^%{IPV6:cisco_meraki.multiple_dhcp_servers_detected.server_ip}$"
    if: ctx?.cisco_meraki?.event_subtype == 'multiple_dhcp_servers_detected'
- convert:
    type: ip
    field: cisco_meraki.multiple_dhcp_servers_detected.server_ip
    if: ctx?.cisco_meraki?.event_subtype == 'multiple_dhcp_servers_detected'
- append:
    field: related.ip
    value: "{{{cisco_meraki.multiple_dhcp_servers_detected.server_ip}}}"
    if: ctx?.cisco_meraki?.event_subtype == 'multiple_dhcp_servers_detected'
####################################################
# wpa_deauth
####################################################
- rename:
    field: cisco_meraki.wpa_deauth.client_mac
    target_field: client.mac
    if: ctx?.cisco_meraki?.event_subtype == 'wpa_deauth'

####################################################
# Handle client_vpn_connect
####################################################
- dissect:
    field: event.original
    pattern: "%{} events client_vpn_connect user id '%{user.name}' local ip %{network.forwarded_ip} connected from %{_temp.client_ip}"
    if: ctx?.cisco_meraki?.event_subtype == "client_vpn_connect"
- grok:
    field: event.original
    patterns: 
      - "events client_vpn_connect %{GREEDYDATA:message}$"
    if: ctx?.cisco_meraki?.event_subtype == "client_vpn_connect"

####################################################
# Handle anyconnect_vpn_session_manager
####################################################
- grok:
    field: message
    patterns: 
      - "msg= ?'%{NOTCOLON:_temp.left}: %{DATA:_temp.right}%{REASON}? ?'"
    pattern_definitions:
      NOTCOLON: '[^:]*'
      REASON: ' Reason: %{DATA:cisco_meraki.anyconnect_vpn_session_manager.reason}'
    if: ctx.cisco_meraki?.event_subtype == "anyconnect_vpn_session_manager"
    ignore_failure: true
- grok:
    field: _temp.left
    patterns: 
      - '%{SESSID}'
    pattern_definitions:
      SESSID: 'Sess-ID\[%{NOTBRACKET:cisco_meraki.anyconnect_vpn_session_manager.session_id}\]'
      NOTBRACKET: '[^\]]*'
    if: ctx._temp?.left != null
    ignore_failure: true
- grok:
    field: _temp.left
    patterns: 
      - '%{USER}'
    pattern_definitions:
      USER: 'User\[%{NOTBRACKET:cisco_meraki.anyconnect_vpn_session_manager.user_name}\]'
      NOTBRACKET: '[^\]]*'
    if: ctx._temp?.left != null
    ignore_failure: true
- grok:
    field: _temp.left
    patterns: 
      - 'Peer IP=%{IP:cisco_meraki.anyconnect_vpn_session_manager.peer_ip}'
    if: ctx._temp?.left != null
    ignore_failure: true
- grok:
    field: _temp.right
    patterns: 
      - '^(?:%{ADD}|%{DELETE}|%{APPLY}|%{SESSEND})$'
    pattern_definitions:
      ADD: '%{CONNID} %{ADDED:cisco_meraki.anyconnect_vpn_session_manager.action} %{TUNNEL} to DB'
      ADDED: 'Added'
      DELETE: '%{DELETED:cisco_meraki.anyconnect_vpn_session_manager.action} %{TUNNEL} from DB\.'
      DELETED: 'Deleted'
      APPLY: 'Applied VPN %{FILTER} for assigned IP %{IP:cisco_meraki.anyconnect_vpn_session_manager.ip}'
      SESSEND: 'Session %{DISCONNECTED:cisco_meraki.anyconnect_vpn_session_manager.action}\. Session Type: %{WORD:cisco_meraki.anyconnect_vpn_session_manager.session_type}, Duration: %{NOTSPACE:cisco_meraki.anyconnect_vpn_session_manager.duration}, Bytes xmt: %{NUMBER:cisco_meraki.anyconnect_vpn_session_manager.bytes_out}, Bytes rcv: %{NUMBER:cisco_meraki.anyconnect_vpn_session_manager.bytes_in},?'
      DISCONNECTED: 'disconnected'
      FILTER: 'filter\[%{NOTBRACKET:cisco_meraki.anyconnect_vpn_session_manager.filter}\]'
      CONNID: 'conn_id\[%{NOTBRACKET:cisco_meraki.anyconnect_vpn_session_manager.conn_id}\]'
      TUNNEL: '%{WORD:cisco_meraki.anyconnect_vpn_session_manager.tunnel_type} tunnel\[%{NOTBRACKET:cisco_meraki.anyconnect_vpn_session_manager.tunnel_id}\]'
      NOTBRACKET: '[^\]]*'
    if: ctx._temp?.right != null
    ignore_failure: true
- set:
    field: cisco_meraki.anyconnect_vpn_session_manager.action
    value: "added tunnel"
    if: ctx.cisco_meraki?.anyconnect_vpn_session_manager?.action == 'Added'
- set:
    field: cisco_meraki.anyconnect_vpn_session_manager.action
    value: "deleted tunnel"
    if: ctx.cisco_meraki?.anyconnect_vpn_session_manager?.action == 'Deleted'
- set:
    field: cisco_meraki.anyconnect_vpn_session_manager.action
    value: "session disconnected"
    if: ctx.cisco_meraki?.anyconnect_vpn_session_manager?.action == 'disconnected'

####################################################
# Handle anyconnect_vpn_connect
####################################################
- dissect:
    field: event.original
    pattern: "%{} events anyconnect_vpn_connect user id '%{user.name}' local ip %{network.forwarded_ip} reconnected from %{_temp.client_ip}"
    if: ctx?.cisco_meraki?.event_subtype == "anyconnect_vpn_connect"
- grok:
    field: event.original
    patterns: 
      - "events anyconnect_vpn_connect %{GREEDYDATA:message}$"
    if: ctx.cisco_meraki?.event_subtype == "anyconnect_vpn_connect"

####################################################
# Handle anyconnect_vpn_disconnect
####################################################
- dissect:
    field: event.original
    pattern: "%{} events anyconnect_vpn_disconnect user id '%{user.name}' local ip %{network.forwarded_ip} connected from %{_temp.client_ip}"
    if: ctx?.cisco_meraki?.event_subtype == "anyconnect_vpn_disconnect"
- grok:
    field: event.original
    patterns: 
      - "events anyconnect_vpn_disconnect %{GREEDYDATA:message}$"
    if: ctx.cisco_meraki?.event_subtype == "anyconnect_vpn_disconnect"

####################################################
# Handle splash_auth
####################################################
- set:
    field: client.mac
    copy_from: cisco_meraki.splash_auth.mac
    if: ctx.cisco_meraki?.event_subtype == "splash_auth" && ctx.cisco_meraki.splash_auth?.mac != null

####################################################
# Handle martian_vlan
####################################################
- dissect:
    field: message
    pattern: "%{}martian_vlan %{_temp.martian_vlan}"
    if: ctx?.cisco_meraki?.event_subtype == "martian_vlan"
- kv:
    field: _temp.martian_vlan
    if: ctx._temp?.martian_vlan != null
    field_split: "' "
    value_split: "='"
    target_field: cisco_meraki.martian_vlan
- set:
    field: _temp.client_ip
    copy_from: cisco_meraki.martian_vlan.Client
    if: ctx.cisco_meraki?.martian_vlan?.Client != null
- set:
    field: client.mac
    copy_from: cisco_meraki.martian_vlan.MAC
    if: ctx.cisco_meraki?.martian_vlan?.MAC != null

####################################################
# parse dissected IP values and convert to IP type
# common case for DHCP lease and client_vpn_connect
####################################################
- grok:
    field: _temp.client_ip
    patterns:
      - "^%{IPV4:_temp.client_ip}$"
      - "^%{IPV6:_temp.client_ip}$"
    if: ctx?._temp?.client_ip != null
    ignore_failure: true
- convert:
    type: ip
    field: _temp.client_ip
    target_field: client.ip
    if: ctx?._temp?.client_ip != null
    ignore_failure: true

# Make MAC addresses conform to ECS spec.
- gsub:
    field: client.mac
    pattern: '[:.]'
    replacement: '-'
    ignore_missing: true
- uppercase:
    field: client.mac
    ignore_missing: true
- gsub:
    field: server.mac
    pattern: '[:.]'
    replacement: '-'
    ignore_missing: true
- uppercase:
    field: server.mac
    ignore_missing: true

on_failure:
- set:
    field: event.kind
    value: pipeline_error
- append:
    field: error.message
    value: '{{{ _ingest.on_failure_message }}}'
