config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ioc_expiration_duration}}
fields_under_root: true
fields:
  _conf:
    ioc_expiration_duration: "{{ioc_expiration_duration}}"
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  access_id: "{{access_id}}"
  secret_key: {{secret_key}}
  counter: 0
  want_more: false
  batch: {{batch_size}}
  initial_interval: {{initial_interval}}
  event_list:
    - associatedGroups
    - associatedIndicators
    - attributes
    - securityLabels
    - sightings
    - tags
    - threatAssess
  tql_filter: {{tql}}
redact:
  fields:
    - secret_key
program: |
  request("GET", (
    !state.want_more ?
        state.url + "/api/v3/indicators?" + {
            "fields": state.event_list,
            "resultStart": ["0"],
            "resultLimit": [string(state.batch)],
            "sorting": ["lastModified asc"],
            "tql": ['lastModified GEQ "'+(
                !state.want_more ?
                    (has(state.cursor) && has(state.cursor.last_timestamp) && state.cursor.last_timestamp != null ?
                        string(state.cursor.last_timestamp)
                    :
                        string((now - duration(state.initial_interval)).format(time_layout.RFC3339)).split("+")[0]
                    )
                :
                    (has(state.cursor) && has(state.cursor.first_timestamp) && state.cursor.first_timestamp != null ?
                        state.cursor.first_timestamp
                    :
                        ""
                    )
                )+'"'+(
                    has(state.tql_filter) && state.tql_filter != null && state.tql_filter != "" ?
                        " AND "+state.tql_filter.trim(" ")
                    :
                        ""
                )
            ],
        }.format_query()
      :
        state.next_url
      )
    )
    .with({
      "Header": {
        "Authorization": ["TC "+ string(state.access_id) + ":" +
          base64(
            bytes(
            (
              has(state.next_url) && state.next_url.contains_substr("/api") ?
                "/api" + state.next_url.split("/api")[1]
              :
                "/api/v3/indicators?" +
                  {
                    "fields": state.event_list,
                    "resultStart": ["0"],
                    "resultLimit": [string(state.batch)],
                    "sorting": ["lastModified asc"],
                    "tql": ['lastModified GEQ "'+(
                        !state.want_more ?
                            (has(state.cursor) && has(state.cursor.last_timestamp) && state.cursor.last_timestamp != null ?
                                string(state.cursor.last_timestamp)
                            :
                                string((now - duration(state.initial_interval)).format(time_layout.RFC3339)).split("+")[0]
                            )
                        :
                            (has(state.cursor) && has(state.cursor.first_timestamp) && state.cursor.first_timestamp != null ?
                                state.cursor.first_timestamp
                            :
                                ""
                            )
                        )+'"'+(
                            has(state.tql_filter) && state.tql_filter != null && state.tql_filter != "" ?
                                " AND "+state.tql_filter.trim(" ")
                            :
                                ""
                        )
                    ],
                }.format_query()
              ) +
              ":GET:" + string(int(now))
              ).hmac("sha256", bytes(state.secret_key)))
            ],
          "Timestamp": [string(int(now))]
        }
      })
      .do_request()
      .as(resp, bytes(resp.Body).decode_json().as(body, {
        "events": body.data.map(e, {
        "message": e.encode_json(),
       }),
      "url": state.url,
      "counter": has(body.next) && body.next != null && body.next != "" ? int(state.counter) + int(state.batch) : 0,
      "access_id": state.access_id,
      "secret_key": state.secret_key,
      "want_more": has(body.next) && body.next != null && body.next != "",
      "batch": state.batch,
      "initial_interval": state.initial_interval,
      "event_list": has(state.event_list) && state.event_list != null && state.event_list != "" ? state.event_list : null,
      "tql_filter": has(state.tql_filter) && state.tql_filter != null && state.tql_filter != "" ? state.tql_filter : null,
      "next_url": (
        has(body.next) && body.next != null && body.next != "" ?
          state.url + "/api/v3/indicators?" + 
            {
              "fields": state.event_list,
              "resultStart": [string(int(state.counter) + body.data.size())],
              "resultLimit": [string(state.batch)],
              "sorting": ["lastModified asc"],
              "tql": ['lastModified GEQ "'+(
                  !state.want_more ?
                      (has(state.cursor) && has(state.cursor.last_timestamp) && state.cursor.last_timestamp != null ?
                          string(state.cursor.last_timestamp)
                      :
                          string((now - duration(state.initial_interval)).format(time_layout.RFC3339)).split("+")[0]
                      )
                  :
                      (has(state.cursor) && has(state.cursor.first_timestamp) && state.cursor.first_timestamp != null ?
                          state.cursor.first_timestamp
                      :
                          ""
                      )
                  )+'"'+(
                      has(state.tql_filter) && state.tql_filter != null && state.tql_filter != "" ?
                          " AND "+state.tql_filter.trim(" ")
                      :
                          ""
                  )
              ],
            }.format_query()
        :
          state.url
      ),
      "cursor": {
        "last_timestamp": (
          has(body.data) && body.data.size() > 0 ?
            string((body.data.map(e, e.lastModified).max()).parse_time(time_layout.RFC3339) + duration("1s")).split("+")[0]
          :
            has(state.cursor) && has(state.cursor.last_timestamp) ?
              state.cursor.last_timestamp
            :
              null
          ),
        "first_timestamp": (
            has(state.cursor) && has(state.cursor.first_timestamp) && has(body.data) && state.cursor.first_timestamp != null ?
              (has(body.next) && body.next != null && body.next != "" ?
                state.cursor.first_timestamp
              :
                state.cursor.last_timestamp)
            :
              string((now - duration(state.initial_interval)).format(time_layout.RFC3339)).split("+")[0]
          )
        }
    }))
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
