config_version: 2
# Set interval in between polling.
interval: {{interval}}

# Set the filename and max backups if need be.
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}

# Set proxy url.
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}

# Set expiration duration.
{{#if ioc_expiration_duration}}
fields_under_root: true
fields:
  _conf:
    ioc_expiration_duration: "{{ioc_expiration_duration}}"
{{/if}}

# This specifies SSL/TLS configuration. If the ssl section is missing, the hostâ€™s CAs are used for HTTPS connections.
# If set to a boolean, this controls if SSL verification is enabled or not.
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}

# Timeout for contacting TC.
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}

# Set the base url.
resource.url: {{url}}

state:
  access_id: {{escape_string access_id}}
  secret_key: {{escape_string secret_key}}
  want_more: false
  batch: {{batch_size}}
  initial_interval: {{initial_interval}}
  event_list:
{{#if include_group_assoc}}
    - associatedGroups
{{/if}}
{{#if include_group_assoc_attribs}}
    - associatedGroups.attributes
{{/if}}
{{#if include_indicator_assoc}}
    - associatedIndicators
{{/if}}
{{#if include_attributes}}
    - attributes
{{/if}}
    - securityLabels
    - sightings
    - tags
    - threatAssess
  tql_filter: {{tql}}

# Hide the secret_key.
redact:
  fields:
    - secret_key

# The program section is where the logic of the stream processor is defined.
# Notice the format for the last timestamp does not include milliseconds. The default format included
# milliseconds and if it ended in 0, that 0 would be dropped and TC TQL then would error on the timestamp.
program: |
  state.?cursor.last_timestamp.orValue(
    (now - duration(state.initial_interval)).format(time_layout.RFC3339)
  ).as(start,
      request("GET",
          state.?cursor.next_url.orValue(
              state.url.trim_right("/") + "/api/v3/indicators?" + {
                  "fields": state.event_list,
                  "resultStart": ["0"],
                  "resultLimit": [string(state.batch)],
                  "sorting": ["lastModified asc"],
                  "tql": ['lastModified GEQ "'+start+'"' + state.?tql_filter.optMap(f, " AND "+f.trim(" ")).orValue("")],
              }.format_query()
          )
      ).as(req, req.URL.parse_url().as(url, req.with({
          "Header": {
              "Authorization": ["TC "+ string(state.access_id) + ":" +
                  bytes(url.Path + (url.RawQuery == "" ? "" : "?") + url.RawQuery + ":" + req.Method + ":" + string(int(now))).hmac("sha256", bytes(state.secret_key)).base64()
              ],
              "Timestamp": [string(int(now))],
          }
      }))).do_request().as(resp, resp.StatusCode == 200 ?
          bytes(resp.Body).decode_json().as(body, {
              "events": body.data.map(e, {
                  "message": e.encode_json(),
              }),
              "url": state.url,
              "access_id": state.access_id,
              "secret_key": state.secret_key,
              "want_more": has(body.next),
              "batch": state.batch,
              "initial_interval": state.initial_interval,
              "event_list": state.event_list,
              ?"tql_filter": state.?tql_filter,
              "cursor": {
                  ?"next_url": body.?next,
                  "last_timestamp": (
                      has(body.data) && body.data.size() > 0 ?
                          body.data.map(e, timestamp(e.lastModified)).max() + duration("1s")
                      :
                          start
                  ),
              }
          })
      :
          state.with({
              "events": {
                  "error": {
                      "code": string(resp.StatusCode),
                      "id": string(resp.Status),
                      "message": "GET:"+(
                          size(resp.Body) != 0 ?
                              string(resp.Body)
                          :
                              string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
                      ),
                  },
              },
              "want_more": false,
          })
      )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
