config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  page_size: {{page_size}}
  offset: 0
  api_key: {{api_key}}
redact:
  fields:
    - api_key
program: |
  state.with(
    request(
      "GET",
      state.url.trim_right("/") + "/v0/audit-log/events?" + {
        "limit": [string(state.page_size)],
        "offset": [string(state.offset)]
      }.format_query()
    ).with({
      "Header": {
        "Authorization": ["Bearer " + state.api_key],
      },
    }).do_request().as(resp, resp.StatusCode == 200 ?
      state.?latest.optMap(t, timestamp(t)).as(latest,
        bytes(resp.Body).decode_json().as(body, {
          "events": body.events.map(e,
            // Filter on timestamp to reduce the risk of duplicate events
            // being ingested. We allow equality to prevent loss of events
            // at the slight risk of duplication. The implementation here
            // depends on the ordering of events being returned by the API
            // being ascending chronological. If that is not the case this
            // will result in data loss.
            !latest.hasValue() || timestamp(e.created_at) >= latest.value(),
            {
              "message": e.encode_json()
            }
          ),
          "offset": size(body.events) > 0 ? int(state.offset) + int(state.page_size) : 0,
          ?"cursor": size(body.events) > 0 ?
            optional.of({
              "latest": body.events.map(e, timestamp(e.created_at)).max(),
            })
          :
            // Leave the existing cursor in place if there is no event.
            optional.none(),
          "want_more": size(body.events) > 0,
        })
      )
    :
      {
        "events": {
          "error": {
            "code": string(resp.StatusCode),
            "id": string(resp.Status),
            "message": "GET:"+(
              size(resp.Body) != 0 ?
                string(resp.Body)
              :
                string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
            ),
          },
        },
        "want_more": false,
        "offset": 0,
      }
    )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
