---
description: Pipeline for processing indicators
processors:
  ####################
  # Event ECS fields #
  ####################
  - set:
      field: ecs.version
      value: '8.8.0'
  - set:
      field: event.kind
      value: enrichment
  - set:
      field: event.category
      value: threat
  - set:
      field: event.type
      value: indicator

  ############################
  # OpenCTI Indicator Fields #
  ############################
  - json:
      field: toStix
      target_field: threat.indicator.opencti.stix
  - rename:
      field: pattern_type
      target_field: threat.indicator.opencti.pattern_type
      ignore_missing: true
  - rename:
      field: pattern_version
      target_field: threat.indicator.opencti.pattern_version
      ignore_missing: true
  - rename:
      field: pattern
      target_field: threat.indicator.opencti.pattern
      ignore_missing: true

  ###############################
  # Threat ECS Fields - Generic #
  ###############################
  - set:
      field: threat.feed.name
      value: "OpenCTI"
  - rename:
      field: description
      target_field: threat.indicator.description
      ignore_missing: true
  - rename:
      field: modified
      target_field: threat.indicator.modified_at
  - script:
      # based on https://stix2.readthedocs.io/en/latest/api/confidence/stix2.confidence.scales.html#stix2.confidence.scales.value_to_none_low_medium_high
      lang: painless
      source: |
        if (ctx.confidence == null) {
          ctx.threat.indicator.confidence = 'Not Specified';
        } else if (ctx.confidence == 0) {
          ctx.threat.indicator.confidence = 'None';
        } else if (1 <= ctx.confidence && ctx.confidence <= 29) {
          ctx.threat.indicator.confidence = 'Low';
        } else if (30 <= ctx.confidence && ctx.confidence <= 69) {
          ctx.threat.indicator.confidence = 'Med';
        } else if (70 <= ctx.confidence && ctx.confidence <= 100) {
          ctx.threat.indicator.confidence = 'High';
        } else {
          ctx.threat.indicator.confidence = 'Not Specified';
        }
  - gsub:
      if: "!ctx.objectMarking.edges.isEmpty() && ctx.objectMarking.edges[0].node.definition_type == 'TLP'"
      field: objectMarking.edges[0].node.definition
      pattern: '^TLP:'
      replacement: ''
      target_field: threat.indicator.marking.tlp
  - rename:
      field: createdBy.name
      target_field: threat.indicator.provider
  - lowercase:
      field: x_opencti_main_observable_type
      target_field: threat.indicator.type

  ############################################
  # Threat Fields - Observable type specific #
  ############################################

  - script:
      description: Collect first observable of each type, note dropped observables
      lang: painless
      source: |
        ctx.has_additional_observables = false;
        if (ctx.observables.edges.hasNextPage) {
          ctx.has_additional_observables = true;
        }
        observables = ctx.observables.edges;
        ctx.observables_by_type = [:];
        for (int i = 0; i < observables.length; i++) {
          k = observables[i]['__type'];
          if (ctx.observables_by_type.containsKey(k) {
            ctx.has_additional_observables = true;
          } else {
            ctx.observables_by_type[k] = observables[i];
          }
        }

  # - rename:
  #     if: observables_by_type.containsKey('Artifact')
  #     field: observables_by_type.Artifact.
  #     target_field: threat.indicator.

  - rename:
      if: observables_by_type.containsKey('AutonomousSystem')
      field: observables_by_type.AutonomousSystem.standard_id
      target_field: threat.indicator.as.opencti.standard_id
  - rename:
      if: observables_by_type.containsKey('AutonomousSystem')
      field: observables_by_type.AutonomousSystem.number
      target_field: threat.indicator.as.number
  - rename:
      if: observables_by_type.containsKey('AutonomousSystem')
      field: observables_by_type.AutonomousSystem.name
      target_field: threat.indicator.as.organization_name
  - rename:
      if: observables_by_type.containsKey('AutonomousSystem')
      field: observables_by_type.AutonomousSystem.rir
      target_field: threat.indicator.as.opencti.rir

  # - rename:
  #     if: observables_by_type.containsKey('BankAccount')
  #     field: observables_by_type.BankAccount.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('CryptocurrencyWallet')
  #     field: observables_by_type.CryptocurrencyWallet.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('CryptographicKey')
  #     field: observables_by_type.CryptographicKey.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('Directory')
  #     field: observables_by_type.Directory.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('DomainName')
  #     field: observables_by_type.DomainName.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('EmailAddr')
  #     field: observables_by_type.EmailAddr.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('EmailMessage')
  #     field: observables_by_type.EmailMessage.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('EmailMimePartType')
  #     field: observables_by_type.EmailMimePartType.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('Hostname')
  #     field: observables_by_type.Hostname.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('IPv4Addr')
  #     field: observables_by_type.IPv4Addr.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('IPv6Addr')
  #     field: observables_by_type.IPv6Addr.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('MacAddr')
  #     field: observables_by_type.MacAddr.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('MediaContent')
  #     field: observables_by_type.MediaContent.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('Mutex')
  #     field: observables_by_type.Mutex.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('NetworkTraffic')
  #     field: observables_by_type.NetworkTraffic.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('PaymentCartd')
  #     field: observables_by_type.PaymentCartd.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('PhoneNumber')
  #     field: observables_by_type.PhoneNumber.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('Process')
  #     field: observables_by_type.Process.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('Software')
  #     field: observables_by_type.Software.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('StixFile')
  #     field: observables_by_type.StixFile.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('Text')
  #     field: observables_by_type.Text.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('Url')
  #     field: observables_by_type.Url.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('UserAccount')
  #     field: observables_by_type.UserAccount.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('UserAgent')
  #     field: observables_by_type.UserAgent.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('WindowsRegistryKey')
  #     field: observables_by_type.WindowsRegistryKey.
  #     target_field: threat.indicator.

  # - rename:
  #     if: observables_by_type.containsKey('WindowsRegistryValueType')
  #     field: observables_by_type.WindowsRegistryValueType.
  #     target_field: threat.indicator.

  - rename:
      if: observables_by_type.containsKey('X509Certificate')
      field: observables_by_type.X509Certificate.standard_id
      target_field: threat.indicator.x509.opencti.standard_id





  ############
  # Clean up #
  ############
  - remove:
      field:
        - confidence
        - toStix
        - objectMarking
        - createdBy
        - x_opencti_main_observable_type
        - observables
        - observables_by_type

on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}'
