---
description: Pipeline for processing indicators
processors:

  ####################
  # Event ECS fields #
  ####################

  - set:
      field: ecs.version
      value: '8.8.0'
  - set:
      field: event.kind
      value: enrichment
  - set:
      field: event.category
      value: threat
  - set:
      field: event.type
      value: indicator

  # TODO: threat.feed.* static fields

  ############################
  # Generic indicator fields #
  ############################

  - rename:
      field: id
      target_field: event.id
  - rename:
      field: standard_id
      target_field: opencti.indicator.standard_id
  - rename:
      field: is_inferred
      target_field: opencti.indicator.is_inferred
  - rename:
      field: revoked
      target_field: opencti.indicator.revoked
  # TODO bring back script to map confidence values
  - rename:
      field: confidence
      target_field: threat.indicator.confidence
  - rename:
      field: lang
      target_field: opencti.indicator.lang
  # TODO set @timestamp right https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest.html#access-ingest-metadata
  # - remove:
  #     field: '@timestamp'
  #     ignore_missing: true
  # - rename:
  #     field: created
  #     target_field: '@timestamp'
  - rename:
      field: modified
      target_field: threat.indicator.modified_at
  - rename:
      field: pattern_type
      target_field: opencti.indicator.pattern_type
  - rename:
      field: pattern_version
      target_field: opencti.indicator.pattern_version
      ignore_missing: true
  - rename:
      field: pattern
      target_field: opencti.indicator.pattern
  - rename:
      field: name
      target_field: threat.indicator.name
  - rename:
      field: description
      target_field: threat.indicator.description
  - rename:
      field: valid_from
      target_field: opencti.indicator.valid_from
  - rename:
      field: valid_until
      target_field: opencti.indicator.valid_until
  - rename:
      field: x_opencti_score
      target_field: opencti.indicator.score
  - rename:
      field: x_opencti_detection
      target_field: opencti.indicator.detection
  - rename:
      field: x_opencti_main_observable_type
      target_field: threat.indicator.type
  - script:
      description: Reformat indicator type
      lang: painless
      source: |
        String type = ctx.threat.indicator.type;
        type = type.toLowerCase();
        type = type.replace('stixfile', 'file');
        ctx.threat.indicator.type = type;
  - rename:
      field: createdBy.name
      target_field: threat.indicator.provider
  - rename:
      field: createdBy.identity_class
      target_field: opencti.indicator.creator_identity_class

  - gsub:
      if: '!ctx.objectMarking.edges.isEmpty() && ctx.objectMarking.edges[0].node.definition_type == "TLP"'
      field: objectMarking.edges.0.node.definition
      pattern: '^TLP:'
      replacement: ''
      target_field: threat.indicator.marking.tlp
  - remove:
      field: objectMarking

  - foreach:
      field: objectLabel.edges
      processor:
        append:
          field: tags
          value: "{{{_ingest._value.node.value}}}"
          allow_duplicates: false
  - remove:
      field: objectLabel

  # TODO: fix kill chain phases to be an array of pairs
  - foreach:
      field: killChainPhases.edges
      processor:
        append:
          field: opencti.indicator.kill_chain_phase_name
          value: "{{{_ingest._value.node.phase_name}}}"
  - foreach:
      field: killChainPhases.edges
      processor:
        append:
          field: opencti.indicator.kill_chain_name
          value: "{{{_ingest._value.node.kill_chain_name}}}"
  - remove:
      field: killChainPhases

  - foreach:
      field: externalReferences.edges
      processor:
        append:
          field: opencti.indicator.external_reference
          value: "{{{_ingest._value.node}}}"
  - remove:
      field: externalReferences

  #####################
  # Observable fields #
  #####################

  - rename:
      field: observables.pageInfo.globalCount
      target_field: opencti.indicator.observables_count
      ignore_missing: true

  - foreach:
      field: observables.edges
      processor:
        remove:
          field: _ingest._value.node.value
          ignore_missing: true
  - foreach:
      field: observables.edges
      processor:
        rename:
          field: _ingest._value.node.observable_value
          target_field: _ingest._value.node.value

  - foreach:
      field: observables.edges
      processor:
        rename:
          field: _ingest._value.node.x_opencti_description
          target_field: _ingest._value.node.description
          ignore_missing: true

  - foreach:
      field: observables.edges
      processor:
        rename:
          field: _ingest._value.node.x_opencti_additional_names
          target_field: _ingest._value.node.additional_names
          ignore_missing: true

  - foreach:
      field: observables.edges
      processor:
        rename:
          field: _ingest._value.node.obsContent
          target_field: _ingest._value.node.content
          ignore_missing: true

  - foreach:
      field: observables.edges
      processor:
        foreach:
          field: _ingest._value.node.serviceDlls.edges
          ignore_missing: true
          processor:
            rename:
              field: _ingest._value.node.x_opencti_additional_names
              target_field: _ingest.node._value.additional_names

  - foreach:
      field: observables.edges
      processor:
        foreach:
          field: _ingest._value.node.serviceDlls.edges
          ignore_missing: true
          processor:
            rename:
              field: _ingest._value.node.obsContent
              target_field: _ingest._value.node.content

  - foreach:
      field: observables.edges
      processor:
        foreach:
          field: _ingest._value.node.serviceDlls.edges
          ignore_missing: true
          processor:
            rename:
              field: _ingest._value.node
              target_field: _ingest._value

  - foreach:
      field: observables.edges
      processor:
        rename:
          field: _ingest._value.node.serviceDlls.edges
          target_field: _ingest._value.node.service_dlls
          ignore_missing: true

  - script:
      description: Restructure hashes to ECS format
      lang: painless
      source: |
        Map hashesToECS(ArrayList hashes) {
          Map hash = [:];
          for (int i = 0; i < hashes.length; i++) {
            String algorithm = hashes[i].algorithm;
            algorithm = algorithm.toLowerCase();
            algorithm = algorithm.replace('sha-', 'sha');
            algorithm = algorithm.replace('sha3-', 'sha3_');
            hash[algorithm] = hashes[i].hash;
          }
          return hash;
        }
        ArrayList observables = ctx.observables.edges;
        for (int i = 0; i < observables.length; i++) {
          Map observable = observables[i].node;
          if (observable.containsKey('hashes')) {
            observable.hash = hashesToECS(observable.hashes);
            observable.remove('hashes');
          }
          if (observable.containsKey('service_dlls')) {
            for (int ii = 0; ii < observable.service_dlls.length; ii++) {
              Map serviceDll = observable.service_dlls[ii];
              if (serviceDll.containsKey('hashes')) {
                serviceDll.hash = hashesToECS(serviceDll.hashes);
                serviceDll.remove('hashes');
              }
            }
          }
        }

  - script:
      description: Move observable nodes to their target location
      lang: painless
      source: |
        if (!ctx.containsKey('opencti')) {
          ctx.opencti = [:];
        }
        if (!ctx.opencti.containsKey('observable')) {
          ctx.opencti.observable = [:];
        }
        ArrayList observables = ctx.observables.edges;
        for (int i = 0; i < observables.length; i++) {
          String entity = observables[i]['node']['entity_type'];
          entity = entity.replace('StixFile', 'file');
          entity = entity.toLowerCase();
          entity = entity.replace('-', '_');
          if (!ctx.opencti.observable.containsKey(entity)) {
            ctx.opencti.observable[entity] = [];
          }
          ctx.opencti.observable[entity].add(observables[i]['node']);
        }
  - remove:
      field: observables

  #########################################
  # ECS indicator fields from observables #
  #########################################

  - foreach:
      field: opencti.observable.email_addr
      ignore_missing: true
      processor:
        append:
          field: threat.indicator.email.address
          value: "{{_ingest._value.value}}"
          allow_duplicates: false

  - foreach:
      field: opencti.observable.ipv4_addr
      ignore_missing: true
      processor:
        append:
          field: threat.indicator.ip
          value: "{{_ingest._value.value}}"
          allow_duplicates: false

  - foreach:
      field: opencti.observable.ipv6_addr
      ignore_missing: true
      processor:
        append:
          field: threat.indicator.ip
          value: "{{_ingest._value.value}}"
          allow_duplicates: false

  - foreach:
      field: opencti.observable.network_traffic
      ignore_missing: true
      processor:
        append:
          field: threat.indicator.port
          value: "{{_ingest._value.src_port}}"
          allow_duplicates: false
  - foreach:
      field: opencti.observable.network_traffic
      ignore_missing: true
      processor:
        append:
          field: threat.indicator.port
          value: "{{_ingest._value.dst_port}}"
          allow_duplicates: false

  - foreach:
      field: opencti.observable.autonomous_system
      ignore_missing: true
      processor:
        pipeline:
          name: '{{ IngestPipeline "ecs_from_autonomous_system" }}'

  - foreach:
      field: opencti.observable.windows_registry_key
      ignore_missing: true
      processor:
        pipeline:
          name: '{{ IngestPipeline "ecs_from_windows_registry_key" }}'

  - foreach:
      field: opencti.observable.windows_registry_value_type
      ignore_missing: true
      processor:
        pipeline:
          name: '{{ IngestPipeline "ecs_from_windows_registry_value_type" }}'

  - foreach:
      field: opencti.observable.x509_certificate
      ignore_missing: true
      processor:
        pipeline:
          name: '{{ IngestPipeline "ecs_from_x509_certificate" }}'

  - foreach:
      field: opencti.observable.url
      ignore_missing: true
      processor:
        append:
          field: _tmp_found_urls
          value: "{{_ingest._value.value}}"
          allow_duplicates: false
  - foreach:
      field: opencti.observable.artifact
      ignore_missing: true
      processor:
        append:
          field: _tmp_found_urls
          value: "{{_ingest._value.url}}"
          allow_duplicates: false
  - foreach:
      field: opencti.observable.file
      ignore_missing: true
      processor:
        append:
          field: _tmp_found_urls
          value: "{{_ingest._value.content?.url}}"
          allow_duplicates: false
  - foreach:
      field: opencti.observable.media_content
      ignore_missing: true
      processor:
        append:
          field: _tmp_found_urls
          value: "{{_ingest._value.url}}"
          allow_duplicates: false
  - foreach:
      field: opencti.observable.process
      ignore_missing: true
      processor:
        foreach:
          field: _ingest._value.service_dll
          ignore_missing: true
          processor:
            append:
              field: _tmp_found_urls
              value: "{{_ingest._value.content?.url}}"
              allow_duplicates: false
  - script:
      description: Remove null or empty items
      lang: painless
      source: |
        if (ctx._tmp_found_urls != null) {
          def result = [];
          for (item in ctx._tmp_found_urls) {
              if (item != null && item != '') {
                  result.add(item);
              }
          }
          ctx._tmp_found_urls = result;
        }
  - foreach:
      field: _tmp_found_urls
      ignore_missing: true
      processor:
        pipeline:
          name: '{{ IngestPipeline "ecs_from_url_field" }}'
  - remove:
      field: _tmp_found_urls
      ignore_missing: true

  - foreach:
      field: opencti.observable.file
      ignore_missing: true
      processor:
        pipeline:
          name: '{{ IngestPipeline "ecs_from_file" }}'

  - foreach:
      field: opencti.observable.process
      ignore_missing: true
      processor:
        foreach:
          field: _ingest._value.service_dll
          ignore_missing: true
          processor:
            pipeline:
              name: '{{ IngestPipeline "ecs_from_file" }}'

  - foreach:
      field: opencti.observable.directory
      ignore_missing: true
      processor:
        pipeline:
          name: '{{ IngestPipeline "ecs_from_directory" }}'

  - foreach:
      field: opencti.observable.artifact
      ignore_missing: true
      processor:
        pipeline:
          name: '{{ IngestPipeline "ecs_from_artifact" }}'

  ######################
  # ECS related fields #
  ######################

  - foreach:
      field: opencti.observable.x509_certificate
      ignore_missing: true
      processor:
        foreach:
          field: _ingest._value.hash
          ignore_missing: true
          processor:
            append:
              field: "related.hash.{{_ingest._key}}"
              value: "{{_ingest._value}}"
              allow_duplicates: false
  - foreach:
      field: opencti.observable.file
      ignore_missing: true
      processor:
        foreach:
          field: _ingest._value.hash
          ignore_missing: true
          processor:
            append:
              field: "related.hash.{{_ingest._key}}"
              value: "{{_ingest._value}}"
              allow_duplicates: false
  - foreach:
      field: opencti.observable.artifact
      ignore_missing: true
      processor:
        foreach:
          field: _ingest._value.hash
          ignore_missing: true
          processor:
            append:
              field: "related.hash.{{_ingest._key}}"
              value: "{{_ingest._value}}"
              allow_duplicates: false
  - foreach:
      field: opencti.observable.process
      ignore_missing: true
      processor:
        foreach:
          field: _ingest._value.service_dll
          ignore_missing: true
          processor:
            foreach:
              field: _ingest._value.hash
              ignore_missing: true
              processor:
                append:
                  field: "related.hash.{{_ingest._key}}"
                  value: "{{_ingest._value}}"
                  allow_duplicates: false

  - foreach:
      field: opencti.observable.hostname
      ignore_missing: true
      processor:
        append:
          field: related.hosts
          value: "{{_ingest._value.value}}"
          allow_duplicates: false
  - foreach:
      field: threat.indicator.url
      ignore_missing: true
      processor:
        append:
          field: related.hosts
          value: "{{_ingest._value.domain}}"
          allow_duplicates: false
  - script:
      description: Remove null or empty items
      lang: painless
      source: |
        if (ctx.related?.hosts != null) {
          def result = [];
          for (item in ctx.related.hosts) {
              if (item != null && item != '') {
                  result.add(item);
              }
          }
          ctx.related.hosts = result;
        }

  - set:
      field: related.ip
      copy_from: threat.indicator.ip
      if: ctx.threat.indicator.ip instanceof List

  - foreach:
      field: opencti.observable.email_addr
      ignore_missing: true
      processor:
        append:
          field: related.user
          value: "{{_ingest._value.value}}"
          allow_duplicates: false
  - foreach:
      field: threat.indicator.url
      ignore_missing: true
      processor:
        append:
          field: related.user
          value: "{{_ingest._value.username}}"
          allow_duplicates: false
  - foreach:
      field: opencti.observable.user_account
      ignore_missing: true
      processor:
        append:
          field: related.user
          value: "{{_ingest._value.user_id}}"
          allow_duplicates: false
  - foreach:
      field: opencti.observable.user_account
      ignore_missing: true
      processor:
        append:
          field: related.user
          value: "{{_ingest._value.account_login}}"
          allow_duplicates: false
  - script:
      description: Remove null or empty items
      lang: painless
      source: |
        if (ctx.related?.user != null) {
          def result = [];
          for (item in ctx.related.user) {
              if (item != null && item != '') {
                  result.add(item);
              }
          }
          ctx.related.user = result;
        }

###################
# Failure handler #
###################

on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}'
