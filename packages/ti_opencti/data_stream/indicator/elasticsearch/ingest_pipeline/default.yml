---
description: Pipeline for processing indicators
processors:

  ####################
  # Event ECS fields #
  ####################

  - set:
      field: ecs.version
      value: '8.8.0'
  - set:
      field: event.kind
      value: enrichment
  - set:
      field: event.category
      value: threat
  - set:
      field: event.type
      value: indicator

  ############################
  # Generic indicator fields #
  ############################

  - rename:
    field: id
    target_field: event.id
  - rename:
    field: standard_id
    target_field: opencti.indicator.standard_id
  - rename:
    field: is_inferred
    target_field: opencti.indicator.is_inferred
  - rename:
    field: revoked
    target_field: opencti.indicator.revoked
  # TODO bring back script to map confidence values
  - rename:
    field: confidence
    target_field: threat.indicator.confidence
  - rename:
    field: lang
    target_field: opencti.indicator.lang
  - rename:
    field: created
    target_field: '@timestamp'
  - rename:
    field: modified
    target_field: threat.indicator.modified_at
  - rename:
    field: pattern_type
    target_field: opencti.indicator.pattern_type
  - rename:
    field: pattern_version
    target_field: opencti.indicator.pattern_version
  - rename:
    field: pattern
    target_field: opencti.indicator.pattern
  - rename:
    field: name
    target_field: threat.indicator.name
  - rename:
    field: description
    target_field: threat.indicator.description
  - rename:
    field: valid_from
    target_field: opencti.indicator.valid_from
  - rename:
    field: valid_until
    target_field: opencti.indicator.valid_until
  - rename:
    field: x_opencti_score
    target_field: opencti.indicator.score
  - rename:
    field: x_opencti_detection
    target_field: opencti.indicator.detection
  - rename:
    field: x_opencti_main_observable_type
    target_field: threat.indicator.type
  - rename:
    field: createdBy.name
    target_field: threat.indicator.provider
  - rename:
    field: createdBy.identity_class
    target_field: opencti.indicator.creator_identity_class

  - gsub:
    if: '!ctx.objectMarking.edges.isEmpty() && ctx.objectMarking.edges[0].node.definition_type == "TLP"'
    field: objectMarking.edges[0].node.definition
    pattern: '^TLP:'
    replacement: ''
    target_field: threat.indicator.marking.tlp

  - foreach:
    field: objectLabel.edges
    processor:
      append:
        field: tags
        value: "{{{_ingest._value.node.value}}}"
  - remove:
    field: objectLabel

  # TODO: fix kill chain phases to be an array of pairs
  - foreach:
    field: killChainPhases.edges
    processor:
      append:
        field: opencti.indicator.kill_chain_phase_name
        value: "{{{_ingest._value.node.phase_name}}}"
  - foreach:
    field: killChainPhases.edges
    processor:
      append:
        field: opencti.indicator.kill_chain_name
        value: "{{{_ingest._value.node.kill_chain_name}}}"
  - remove:
    field: killChainPhases

  - foreach:
    field: externalReferences.edges
    processor:
      append:
        field: opencti.indicator.external_reference
        value: "{{{_ingest._value.node}}}"
  - remove:
    field: externalReferences

  #####################
  # Observable fields #
  #####################

  - rename:
    field: opencti.observables.pageInfo.globalCount
    target_field: opencti.indicator.observables_count

  - foreach:
    field: observables.edges
    processor:
      pipeline:
        processors:
        - rename:
            field: _ingest._value.node.observable_value
            target_field: _ingest._value.node.value
        - rename:
            field: _ingest._value.node.x_opencti_description
            target_field: _ingest._value.node.description
            ignore_missing: true
        - rename:
            field: _ingest._value.node.x_opencti_additional_names
            target_field: _ingest._value.node.additional_names
            ignore_missing: true
        - rename:
            field: _ingest._value.node.obsContent
            target_field: _ingest._value.node.content
            ignore_missing: true
        - foreach:
          field: _ingest._value.node.serviceDlls.edges
          ignore_missing: true
          processor:
            pipeline:
              processors:
              - rename:
                  field: _ingest._value.node.x_opencti_additional_names
                  target_field: _ingest.node._value.additional_names
              - rename:
                  field: _ingest._value.node.obsContent
                  target_field: _ingest._value.node.content
              - rename:
                  field: _ingest._value.node
                  target_field: _ingest._value
        - rename:
            field: _ingest._value.node.serviceDlls.edges
            target_field: _ingest._value.node.service_dlls
            ignore_missing: true

  - script:
      description: Restructure hashes to ECS format
      lang: painless
      source: |
        Map hashesToECS(ArrayList hashes) {
          Map hash = [:];
          for (int i = 0; i < hashes.length; i++) {
            String algorithm = hashes[i].algorithm;
            algorithm = algorithm.toLowerCase();
            algorithm = algorithm.replace('sha-', 'sha');
            algorithm = algorithm.replace('sha3-', 'sha3_');
            hash[algorithm] = hashes[i].hash;
          }
          return hash;
        }
        ArrayList observables = ctx.observables.edges;
        for (int i = 0; i < observables.length; i++) {
          Map observable = observables[i].node;
          if (observable.containsKey('hashes')) {
            observable.hash = hashesToECS(observable.hashes);
            observable.remove('hashes');
          }
          if (observable.containsKey('service_dlls')) {
            for (int ii = 0; ii < observable.service_dlls.length; ii++) {
              Map serviceDll = observable.service_dlls[ii];
              if (serviceDll.containsKey('hashes')) {
                serviceDll.hash = hashesToECS(serviceDll.hashes);
                serviceDll.remove('hashes');
              }
            }
          }
        }

  - script:
      description: Move observable nodes to their target location
      lang: painless
      source: |
        if (!ctx.containsKey('opencti')) {
          ctx.opencti = [:];
        }
        if (!ctx.opencti.containsKey('observable')) {
          ctx.opencti.observable = [:];
        }
        ArrayList observables = ctx.observables.edges;
        for (int i = 0; i < observables.length; i++) {
          String entity = observables[i]['node']['entity_type'];
          entity = entity.toLowerCase();
          entity = entity.replace('-', '_');
          if (ctx.opencti.observable.containsKey(entity)) {
            ctx.opencti.observable[entity].append(observables[i]['node'])
          } else {
            ctx.opencti.observable[entity] = observables[i]['node'];
          }
        }

  - remove:
    field: observables

on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}'
