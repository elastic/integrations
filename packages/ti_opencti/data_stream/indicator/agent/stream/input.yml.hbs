config_version: 2
interval: {{interval}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
{{#if token_url}}
auth.oauth2:
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{token_url}}
{{/if}}
state:
  api_key: {{api_key}}
  page_size: {{page_size}}
  want_more: false
  query: |
    query IndicatorsLinesPaginationQuery(
      $search: String
      $count: Int!
      $cursor: ID
      $filters: [IndicatorsFiltering]
      $orderBy: IndicatorsOrdering
      $orderMode: OrderingMode
    ) {
      indicators(
        search: $search
        first: $count
        after: $cursor
        filters: $filters
        orderBy: $orderBy
        orderMode: $orderMode
      ) {
        edges {
          node {
            id
            ...IndicatorLine_node
            __typename
          }
          cursor
        }
        pageInfo {
          endCursor
          hasNextPage
          globalCount
        }
      }
    }

    fragment IndicatorLine_node on Indicator {
      id
      standard_id
      entity_type
      parent_types
      x_opencti_stix_ids
      is_inferred
      spec_version
      created_at
      updated_at
      # x_opencti_inferences: [Inference]
      # createdBy: Identity
      # objectMarking: MarkingDefinitionConnection
      # objectOrganization: OrganizationConnection
      # objectLabel: LabelConnection
      externalReferences(first: 100) {
        # ...
        edges {
          cursor
          node {
            id
            standard_id
            entity_type
            source_name
            url
            # ...
          }
        }
      }
      # reports(first: Int): ReportConnection
      # notes(first: Int): NoteConnection
      # opinions(first: Int): OpinionConnection
      # observedData(first: Int): ObservedDataConnection
      # groupings(first: Int): GroupingConnection
      # cases(first: Int): CaseConnection
      stixCoreRelationships(first: 100) {
        # ...
        edges {
          node {
            id
            # ...
          }
        }
      }
      # stixCoreObjectsDistribution(
      #   relationship_type: [String]
      #   toTypes: [String]
      #   field: String!
      #   startDate: DateTime
      #   endDate: DateTime
      #   dateAttribute: String
      #   operation: StatsOperation!
      #   limit: Int
      #   order: String
      #   types: [String]
      #   filters: [StixCoreObjectsFiltering]
      #   filterMode: FilterMode
      #   search: String
      # ): [Distribution]
      # stixCoreRelationshipsDistribution(
      #   field: String!
      #   operation: StatsOperation!
      #   startDate: DateTime
      #   endDate: DateTime
      #   dateAttribute: String
      #   isTo: Boolean
      #   limit: Int
      #   order: String
      #   elementWithTargetTypes: [String]
      #   fromId: [String]
      #   fromRole: String
      #   fromTypes: [String]
      #   toId: [String]
      #   toRole: String
      #   toTypes: [String]
      #   relationship_type: [String]
      #   confidences: [Int]
      #   search: String
      #   filters: [StixCoreRelationshipsFiltering]
      #   filterMode: FilterMode
      # ): [Distribution]
      revoked
      confidence
      lang
      created
      modified
      x_opencti_graph_data
      # objectAssignee: AssigneeConnection
      pattern_type
      pattern_version
      pattern
      name
      description
      indicator_types
      valid_from
      valid_until
      x_opencti_score
      x_opencti_detection
      x_opencti_main_observable_type
      x_mitre_platforms
      # killChainPhases: KillChainPhaseConnection
      # observables(first: Int): StixCyberObservableConnection
      # creators: [Creator!]
      toStix
      # importFiles(first: Int): FileConnection
      # pendingFiles(first: Int): FileConnection
      # exportFiles(first: Int): FileConnection
      # editContext: [EditUserContext!]
      # connectors(onlyAlive: Boolean): [Connector]
      # jobs(first: Int): [Work]
      status {
        id
        template_id
        template {
          id
          name
          color
          editContext {
            name
            focusOn
          }
          usages
        }
        type
        order
        disabled
      }
      workflowEnabled
    }
redact:
  fields:
    - api_key
program: |
  request("POST", state.url + "/graphql").with({
    "Header": {
      "Content-Type": ["application/json"],
      "Authorization": ["Bearer " + state.api_key],
    }
  }).with({
    // Using string concatenation to avoid encode_json() on nested data,
    // until release of https://github.com/elastic/beats/pull/35774
    "Body": '''{
      "query": ''' + state.query.encode_json() + ''',
      "variables": {
        "count": ''' + string(state.page_size) + ''',
        "cursor": ''' + (has(state.cursor) && has(state.cursor.value) ? state.cursor.value.encode_json() : 'null') + ''',
        "orderBy": "modified",
        "orderMode": "asc"
      }
    }'''
  }).do_request().as(resp,
    bytes(resp.Body).decode_json().as(body, {
      "events": body.data.indicators.edges.map(e, e.node),
      "url": state.url,
      "want_more": body.data.indicators.pageInfo.hasNextPage,
      "cursor": { "value": body.data.indicators.pageInfo.endCursor },
      "api_key": state.api_key,
      "page_size": state.page_size,
      "query": state.query,
    })
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
