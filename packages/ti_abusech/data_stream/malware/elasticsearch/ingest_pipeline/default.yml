---
description: Pipeline for parsing Abuse.ch URL Threat Intel
processors:
  ####################
  # Event ECS fields #
  ####################
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: event.kind
      value: enrichment
  - set:
      field: event.category
      value: [threat]
  - set:
      field: event.type
      value: [indicator]
  ######################
  # General ECS fields #
  ######################
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  - json:
      field: event.original
      target_field: abusech.malware
  #####################
  # Threat ECS Fields #
  #####################
  - date:
      field: abusech.malware.firstseen
      target_field: threat.indicator.first_seen
      formats:
        - "yyyy-MM-dd HH:mm:ss z"
        - "yyyy-MM-dd HH:mm:ss Z"
        - "yyyy-MM-dd HH:mm:ss"
      if: "ctx.abusech?.malware?.firstseen != null"
  # Set threat.indicator.name
  - set:
      field: threat.indicator.name
      copy_from: abusech.malware.sha256_hash
      tag: set-indicator-name
      if: ctx.abusech?.malware?.sha256_hash != null
  - set:
      field: threat.indicator.type
      value: file
  - rename:
      field: abusech.malware.file_size
      target_field: threat.indicator.file.size
      ignore_missing: true
  - rename:
      field: abusech.malware.file_type
      target_field: threat.indicator.file.type
      ignore_missing: true
  # This includes a direct link to malicious files, we do not want them to appear in Kibana
  # in case they are accidently clicked.
  - remove:
      field: abusech.malware.urlhaus_download
      ignore_missing: true
  - convert:
      field: threat.indicator.file.size
      type: long
      ignore_missing: true
  - convert:
      field: abusech.malware.virustotal.percent
      type: float
      ignore_missing: true
  - rename:
      field: abusech.malware.md5_hash
      target_field: threat.indicator.file.hash.md5
      ignore_missing: true
  - rename:
      field: abusech.malware.sha256_hash
      target_field: threat.indicator.file.hash.sha256
      ignore_missing: true
  - rename:
      field: abusech.malware.imphash
      target_field: threat.indicator.file.pe.imphash
      ignore_missing: true
  - rename:
      field: abusech.malware.ssdeep
      target_field: threat.indicator.file.hash.ssdeep
      ignore_missing: true
  - rename:
      field: abusech.malware.tlsh
      target_field: threat.indicator.file.hash.tlsh
      ignore_missing: true
  - append:
      field: related.hash
      value: "{{{threat.indicator.file.hash.md5}}}"
      if: ctx?.threat?.indicator?.file?.hash?.md5 != null
  - append:
      field: related.hash
      value: "{{{threat.indicator.file.hash.sha256}}}"
      if: ctx?.threat?.indicator?.file?.hash?.sha256 != null
  - append:
      field: related.hash
      value: "{{{threat.indicator.file.hash.ssdeep}}}"
      if: ctx?.threat?.indicator?.file?.hash?.ssdeep != null
  - append:
      field: related.hash
      value: "{{{threat.indicator.file.pe.imphash}}}"
      if: ctx?.threat?.indicator?.file?.pe?.imphash != null
  - append:
      field: related.hash
      value: "{{{threat.indicator.file.hash.tlsh}}}"
      if: ctx?.threat?.indicator?.file?.hash?.tlsh != null
  # Copy tags (either as list or comma-separated string) and remove
  - foreach:
      field: abusech.malware.tags
      if: ctx.abusech?.malware?.tags instanceof List
      processor:
        append:
          field: tags
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - remove:
      field: abusech.malware.tags
      ignore_missing: true
  ######################
  #   IOC expiration   #
  ######################
  - script:
      lang: painless
      tag: script-default-deleted_at
      if: ctx.abusech?.malware?.deleted_at == null && ctx._conf?.ioc_expiration_duration != null && (ctx._conf.ioc_expiration_duration instanceof String) && ctx._conf.ioc_expiration_duration != ''
      description: Indicator Expiration is done after `_conf.ioc_expiration_duration` (default 90d) since the indicator's last_seen time (if not present, then since first_seen). This script adds a default `abusech.malware.deleted_at` field to allow indicator expiration.
      source: >
        def dur = ctx._conf.ioc_expiration_duration;
        ZonedDateTime _tmp_deleted_at;
        ZonedDateTime _tmp_updated_at;
        if (ctx.threat.indicator.last_seen != null) {
          _tmp_updated_at = ZonedDateTime.parse(ctx.threat.indicator.last_seen);
        }
        else {
          _tmp_updated_at = ZonedDateTime.parse(ctx.threat.indicator.first_seen);
        }
        String time_unit = dur.substring(dur.length() -  1, dur.length());
        String time_value = dur.substring(0, dur.length() - 1);
        if (time_unit == 'd') {
          _tmp_deleted_at = _tmp_updated_at.plusDays(Long.parseLong(time_value));
        } else if (time_unit == 'h') {
          _tmp_deleted_at = _tmp_updated_at.plusHours(Long.parseLong(time_value));
        } else if (time_unit == 'm') {
          _tmp_deleted_at = _tmp_updated_at.plusMinutes(Long.parseLong(time_value));
        } else {
          _tmp_deleted_at = _tmp_updated_at.plusDays(90L);
          if (ctx.error == null) {
            ctx.error = new HashMap();
          }
          if (ctx.error.message == null) {
            ctx.error.message = new ArrayList();
          }
          ctx.error.message.add('invalid ioc_expiration_duration: using default 90 days');
        }
        ctx.abusech.malware.deleted_at = _tmp_deleted_at;
  - date:
      field: abusech.malware.deleted_at
      tag: date_deleted_at
      target_field: abusech.malware.deleted_at
      formats:
        - ISO8601
        - UNIX
  - rename:
      field: _conf.ioc_expiration_duration
      tag: rename_conf_ioc_expiration_duration
      target_field: abusech.malware.ioc_expiration_duration
      ignore_missing: true
  ######################
  # Cleanup processors #
  ######################
  - set:
      field: threat.indicator.type
      value: unknown
      if: ctx?.threat?.indicator?.type == null
  - script:
      lang: painless
      if: ctx?.abusech != null
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
        map.values().removeIf(v -> v == null);
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
        }
        handleMap(ctx);
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
  - remove:
      field:
        - abusech.malware.firstseen
        - message
        - _conf
      ignore_missing: true
  - script:
      description: Remove null/empty values recursively.
      lang: painless
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: 'Processor {{{ _ingest.on_failure_processor_type }}} {{{#_ingest.on_failure_processor_tag}}}with tag {{{ _ingest.on_failure_processor_tag }}} {{{/_ingest.on_failure_processor_tag}}}in pipeline {{{_ingest.pipeline}}} failed with message {{{ _ingest.on_failure_message }}}'
