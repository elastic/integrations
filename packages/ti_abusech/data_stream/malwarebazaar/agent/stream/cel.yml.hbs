config_version: 2
interval: {{interval}}
resource.tracer:
  enabled: {{enable_request_tracer}}
  filename: "../../logs/cel/http-request-trace-*.ndjson"
  maxbackups: 5
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
{{#if auth_key}}
state:
  auth_key: {{auth_key}}
{{/if}}
redact:
  fields: 
    - auth_key
program: |
  state.with(
    request("POST", state.url, "query=get_recent&selector=time").with({
      "Header":{
        "Content-Type": ["application/x-www-form-urlencoded"],
        ?"Auth-Key": has(state.auth_key) ? 
          optional.of([state.auth_key]) 
        :
          optional.none(),
      }
    }).do_request().as(resp, resp.StatusCode == 200 ?
      resp.Body.decode_json().as(body, body.?query_status == optional.of("ok") ?
        {
          "events": body.data.map(ind, {
            "message": ind.encode_json()
          }),
          "url": state.url
        }
      : body.?query_status == optional.of("no_results") ?
        {
          "events": [],
          "url": state.url
        }
      :
        {
          "events": {
            "error": {
              ?"id": body.?query_status,
              "message": "POST "+state.url+": "+(
                size(resp.Body) != 0 ?
                  string(resp.Body)
                :
                  string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
              ),
            },
          },
          "url": state.url
        }
      )
    :
      {
        "events": {
          "error": {
            "code": string(resp.StatusCode),
            "id": string(resp.Status),
            "message": "POST:"+(
              size(resp.Body) != 0 ?
                string(resp.Body)
              :
                string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
            ),
          },
        },
        "url": state.url
      }
    )
  )

{{#if ioc_expiration_duration}}
fields_under_root: true
fields:
  _conf:
    ioc_expiration_duration: {{ioc_expiration_duration}}
{{/if}}

tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
