inputs:
    - data_stream:
        namespace: ep
      meta:
        package:
            name: ti_abusech
      name: test-default-ti_abusech
      streams:
        - config_version: 2
          data_stream:
            dataset: ti_abusech.malwarebazaar
            type: logs
          fields:
            _conf:
                ioc_expiration_duration: 90d
          fields_under_root: true
          interval: 10m
          program: |
            state.with(
              request("POST", state.url, "query=get_recent&selector=time").with({
                "Header":{
                  "Content-Type": ["application/x-www-form-urlencoded"],
                  ?"Auth-Key": has(state.auth_key) ?
                    optional.of([state.auth_key])
                  :
                    optional.none(),
                }
              }).do_request().as(resp, resp.StatusCode == 200 ?
                resp.Body.decode_json().as(body, body.?query_status == optional.of("ok") ?
                  {
                    "events": body.data.map(ind, {
                      "message": ind.encode_json()
                    }),
                    "url": state.url
                  }
                : body.?query_status == optional.of("no_results") ?
                  {
                    "events": [],
                    "url": state.url
                  }
                :
                  {
                    "events": {
                      "error": {
                        ?"id": body.?query_status,
                        "message": "POST "+state.url+": "+(
                          size(resp.Body) != 0 ?
                            string(resp.Body)
                          :
                            string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
                        ),
                      },
                    },
                    "url": state.url
                  }
                )
              :
                {
                  "events": {
                    "error": {
                      "code": string(resp.StatusCode),
                      "id": string(resp.Status),
                      "message": "POST:"+(
                        size(resp.Body) != 0 ?
                          string(resp.Body)
                        :
                          string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
                      ),
                    },
                  },
                  "url": state.url
                }
              )
            )
          publisher_pipeline.disable_host: true
          redact:
            fields:
                - auth_key
          resource.timeout: 30s
          resource.tracer:
            enabled: false
            filename: ../../logs/cel/http-request-trace-*.ndjson
            maxbackups: 5
          resource.url: https://mb-api.abuse.ch/api/v1/
          state:
            auth_key: ${SECRET_0}
          tags:
            - forwarded
            - abusech-malwarebazaar
      type: cel
      use_output: default
output_permissions:
    default:
        _elastic_agent_checks:
            cluster:
                - monitor
        _elastic_agent_monitoring:
            indices: []
        uuid-for-permissions-on-related-indices:
            indices:
                - names:
                    - logs-ti_abusech.malwarebazaar-ep
                  privileges:
                    - auto_configure
                    - create_doc
secret_references:
    - {}
