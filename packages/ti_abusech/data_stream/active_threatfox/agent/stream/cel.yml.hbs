config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  api_key: {{api_key}}
  want_more: false
redact:
  fields:
    - api_key
program: |
  request("GET", (
      state.url
  )).with({
    "Header":{
      "Content-Type": ["application/zip"],
    }
  }).do_request().as(resp, bytes(resp.Body).resp.Body.mime("application/zip").File[0].Data.decode_json().as(body, 
    body.size() > 0
    ?
      body.drop_empty().as(res, 
            {
              "events": res.map(e, {
                "message": e.encode_json(),
              }),
              "url": (
                has(body.next) && body.next != null && body.next != ""
                ?
                  body.next
                :
                  state.url.parse_url().as(parsed_url, parsed_url.Scheme + "://" + parsed_url.Host + parsed_url.Path)
              ),
              "want_more": has(body.next) && body.next != null && body.next != "",
              "api_key": state.api_key,
              "modified_since": (now() - duration("{{lookback_range}}")).format(time_layout.RFC3339)
            })
      )
    :
      ({
        "url": state.url.parse_url().as(parsed_url, parsed_url.Scheme + "://" + parsed_url.Host + parsed_url.Path),
        "want_more": false,
        "api_key": state.api_key,
        "modified_since": (now() - duration("{{lookback_range}}")).format(time_layout.RFC3339)
      })
    ))
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}