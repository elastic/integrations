---
description: Pipeline for processing server activities logs.
processors:
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: 8.17.0
  - terminate:
      tag: data_collection_error
      if: ctx.error?.message != null && ctx.message == null && ctx.event?.original == null
      description: error message set and no data to process.
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      ignore_missing: true
      description: Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.
      if: ctx.event?.original == null
  - remove:
      field: message
      tag: remove_message
      ignore_missing: true
      description: The `message` field is no longer required if the document has an `event.original` field.
      if: ctx.event?.original != null
  - remove:
      field:
        - organization
        - division
        - team
      ignore_missing: true
      if: ctx.organization instanceof String && ctx.division instanceof String && ctx.team instanceof String
      tag: remove_agentless_tags
      description: >-
        Removes the fields added by Agentless as metadata,
        as they can collide with ECS fields.
  - json:
      field: event.original
      tag: json_event_original
      target_field: json
  - set:
      field: event.kind
      tag: set_event_kind
      value: event
  - append:
      field: event.type
      tag: append_info_into_event_type
      value: info
  - append:
      field: event.category
      tag: append_host_into_event_category
      value: host
  - rename:
      field: json.checkpoint
      tag: rename_checkpoint
      target_field: airlock_digital.server_activities.checkpoint
      ignore_missing: true
  - set:
      field: event.id
      tag: set_event_id_from_server_activities_checkpoint
      copy_from: airlock_digital.server_activities.checkpoint
      ignore_empty_value: true
  - date:
      field: json.datetime
      tag: date_datetime
      target_field: airlock_digital.server_activities.datetime
      formats:
        - ISO8601
      if: ctx.json?.datetime != null && ctx.json.datetime != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: '@timestamp'
      tag: set_@timestamp_from_server_activities_datetime
      copy_from: airlock_digital.server_activities.datetime
      ignore_empty_value: true
  - rename:
      field: json.description
      tag: rename_description
      target_field: airlock_digital.server_activities.description
      ignore_missing: true
  - set:
      field: message
      tag: set_message_from_server_activities_description
      copy_from: airlock_digital.server_activities.description
      ignore_empty_value: true
  - rename:
      field: json.task
      tag: rename_task
      target_field: airlock_digital.server_activities.task
      ignore_missing: true
  - set:
      field: event.action
      tag: set_event_action_from_server_activities_task
      copy_from: airlock_digital.server_activities.task
      ignore_empty_value: true
  - lowercase:
      field: event.action
      tag: lowercase_event_action
      ignore_missing: true
  - split:
      field: event.action
      tag: split_event_action
      separator: \s+
      ignore_missing: true
      if: ctx.event?.action != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - join:
      field: event.action
      tag: join_event_action
      separator: '-'
      if: ctx.event?.action != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.user
      tag: rename_user
      target_field: airlock_digital.server_activities.user
      ignore_missing: true
  - set:
      field: user.name
      tag: set_user_name_from_server_activities_user
      copy_from: airlock_digital.server_activities.user
      ignore_empty_value: true
  - append:
      field: related.user
      tag: append_server_activities_user_into_related_user
      value: '{{{airlock_digital.server_activities.user}}}'
      allow_duplicates: false
      if: ctx.airlock_digital?.server_activities?.user != null
  - remove:
      field:
        - airlock_digital.server_activities.checkpoint
        - airlock_digital.server_activities.datetime
        - airlock_digital.server_activities.description
        - airlock_digital.server_activities.user
      tag: remove_custom_duplicate_fields
      ignore_missing: true
      if: ctx.tags == null || !ctx.tags.contains('preserve_duplicate_custom_fields')
  - remove:
      field: json
      tag: remove_json
      ignore_missing: true
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: |-
        void handleMap(Map map) {
          map.values().removeIf(v -> {
            if (v instanceof Map) {
              handleMap(v);
            } else if (v instanceof List) {
              handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        void handleList(List list) {
          list.removeIf(v -> {
            if (v instanceof Map) {
              handleMap(v);
            } else if (v instanceof List) {
              handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        handleMap(ctx);
  - set:
      field: event.kind
      tag: set_pipeline_error_into_event_kind
      value: pipeline_error
      if: ctx.error?.message != null
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: |-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{{#_ingest.on_failure_processor_tag}}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{{/_ingest.on_failure_processor_tag}}}failed with message '{{{ _ingest.on_failure_message }}}'
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
