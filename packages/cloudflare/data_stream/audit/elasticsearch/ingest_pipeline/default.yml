---
description: Pipeline for parsing Cloudflare Audit logs.
processors:
  - set:
      field: ecs.version
      value: '8.4.0'
  - set:
      field: event.kind
      value: event
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - json:
      field: event.original
      target_field: json
      ignore_failure: true
  - pipeline:
      name: '{{ IngestPipeline "logpull" }}'
      if: ctx.json?.actor != null && ctx.json.actor instanceof Map
  - pipeline:
      name: '{{ IngestPipeline "logpush" }}'
      if: ctx.json?.actor == null
  - set:
      field: cloud.provider
      value: cloudflare
  - fingerprint:
      fields:
        - event.id
      target_field: _id
      ignore_missing: true
  - set:
      field: cloudflare.audit.timestamp
      copy_from: '@timestamp'
      ignore_failure: true
  - set:
      field: event.action
      copy_from: cloudflare.audit.action.type
      ignore_failure: true
  - lowercase:
      field: event.action
      ignore_missing: true
  - set:
      field: event.outcome
      copy_from: cloudflare.audit.action.result
      ignore_failure: true
  - set:
      field: event.provider
      copy_from: cloudflare.audit.interface
      ignore_failure: true
  - set:
      field: event.id
      copy_from: cloudflare.audit.id
      ignore_failure: true
  - set:
      field: user.email
      copy_from: cloudflare.audit.actor.email
      ignore_failure: true
  - set:
      field: user.id
      copy_from: cloudflare.audit.actor.id
      ignore_failure: true
  - set:
      field: source.address
      copy_from: cloudflare.audit.actor.ip
      ignore_failure: true
  - convert:
      field: cloudflare.audit.actor.ip
      type: ip
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: source.ip
      copy_from: cloudflare.audit.actor.ip
      ignore_failure: true
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
      - asn
      - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true

  - script:
      lang: painless
      tag: Add ECS categorization
      params:
        login:
          category:
            - authentication
          type:
            - info
          outcome: success
        token_create:
          category: 
            - iam
          type:
            - creation
        token_revoke:
          category: 
            - iam
          type:
            - deletion
        token_roll:
          category: 
            - iam
          type:
            - change
        api_key_view:
          category: 
            - iam
          type:
            - info
        rotate_api_key:
          category: 
            - iam
          type:
            - change
        api_key_created:
          category: 
            - iam
          type:
            - creation
        purge:
          category: 
            - configuration
          type:
            - deletion
        tls_settings_deployed:
          category: 
            - configuration
          type:
            - info
        add:
          category: 
            - configuration
          type:
            - creation
        delete:
          category: 
            - configuration
          type:
            - deletion
        rec_add:
          category: 
            - configuration
          type:
            - creation
        rec_del:
          category: 
            - configuration
          type:
            - deletion
        pending:
          category: 
            - configuration
          type:
            - info
        change_setting:
          category: 
            - configuration
          type:
            - change
        add_enforce_twofactor:
          category: 
            - iam
            - configuration
          type:
            - admin
            - info
      source: >-
        ctx.event.kind = 'event';
        ctx.event.type = 'info';
        if (ctx?.event?.action == null) {
            return;
        }
        if (params.get(ctx.event.action) == null) {
            return;
        }
        def hm = new HashMap(params.get(ctx.event.action));
        hm.forEach((k, v) -> ctx.event[k] = v);
  - append:
      field: related.user
      value: '{{{user.id}}}'
      if: ctx.user?.id != null
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: related.user
      value: "{{cloudflare.audit.resource.id}}"
      allow_duplicates: false
      if: ctx.cloudflare?.audit?.resource?.id != null && ctx.cloudflare?.audit?.resource?.type == "user"
  - append:
      field: related.ip
      value: '{{{source.ip}}}'
      if: ctx.source?.ip != null
      allow_duplicates: false
      ignore_failure: true
  - remove:
      field:
        - json
        - _config
      ignore_missing: true
  - remove:
      field:
        - cloudflare.audit.timestamp
        - cloudflare.audit.action.result
        - cloudflare.audit.action.type
        - cloudflare.audit.id
        - cloudflare.audit.interface
        - cloudflare.audit.actor.ip
        - cloudflare.audit.actor.email
        - cloudflare.audit.actor.id
      if: ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: event.original
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_failure: true
      ignore_missing: true
  - script:
        description: Drops null/empty values recursively.
        lang: painless
        source:
          boolean dropEmptyFields(Object object) {
            if (object == null || object == "") {
              return true;
            } else if (object instanceof Map) {
              ((Map) object).values().removeIf(value -> dropEmptyFields(value));
              return (((Map) object).size() == 0);
            } else if (object instanceof List) {
              ((List) object).removeIf(value -> dropEmptyFields(value));
              return (((List) object).length == 0);
            }
            return false;
          }
          dropEmptyFields(ctx);
on_failure:
- append:
    field: error.message
    value: '{{{ _ingest.on_failure_message }}}'
