---
description: Pipeline for parsing cloudflare logs
processors:
- set:
    field: event.ingested
    value: '{{_ingest.timestamp}}'
- set:
    field: ecs.version
    value: '8.0.0'
- rename:
    field: message
    target_field: event.original
- json:
    field: event.original
    target_field: json
- set:
    field: observer.vendor
    value: cloudflare
- set:
    field: observer.type
    value: proxy
- pipeline:
    name: '{{ IngestPipeline "http" }}'
    if: "ctx.json?.EdgeRequestHost != null"
- remove:
    field:
      - json
    ignore_missing: true  
- remove:
    field: event.original
    if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
    ignore_failure: true
    ignore_missing: true
- script:
    lang: painless
    description: This script processor iterates over the whole document to remove fields with null values.
    source: |
      void handleMap(Map map) {
        for (def x : map.values()) {
          if (x instanceof Map) {
              handleMap(x);
          } else if (x instanceof List) {
              handleList(x);
          }
        }
        map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      void handleList(List list) {
        for (def x : list) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
        }
        list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      handleMap(ctx);
on_failure:
- set:
    field: error.message
    value: "{{ _ingest.on_failure_message }}"
