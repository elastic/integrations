config_version: "2"
interval: {{period}}
resource.url: "{{url}}/_node/stats?graph=true&vertices=true"
{{#if resource_ssl}}
resource.ssl:
  {{resource_ssl}}
{{/if}}

{{#if username}}
auth.basic.user: {{escape_string username}}
{{/if}}
{{#if password}}
auth.basic.password: {{escape_string password}}
{{/if}}

redact:
  fields: ~

program: |
  get(state.url)
  .as(resp, bytes(resp.Body)
  .decode_json().as(body,
    body.pipelines.map(pipeline_name, pipeline_name != ".monitoring-logstash", {"name":pipeline_name}.with(body.pipelines[pipeline_name])
      .with({
        "es_cluster_id":((body.pipelines[pipeline_name].vertices).as(vertices, vertices.map(each, has(each.cluster_uuid), each.cluster_uuid))),
        "es_cluster_id_map":((body.pipelines[pipeline_name].vertices).as(vertices, vertices.map(each, has(each.cluster_uuid), {"plugin_id":each.id, "cluster_id":each.cluster_uuid}))),
        "outputs":body.pipelines[pipeline_name].plugins.outputs,
        "inputs":body.pipelines[pipeline_name].plugins.inputs,
        "filters":body.pipelines[pipeline_name].plugins.filters,
        "codecs":body.pipelines[pipeline_name].plugins.codecs,
        "host":{
          "name":body.name,
          "address":body.http_address,
        }
      })
    )
    )).as(events, events.map(event,
    {
      "inputs":event.inputs.map(input,
      {
        "name":event.name,
        "id":event.hash,
        "host":event.host,
        "elasticsearch.cluster.id":event.es_cluster_id,
        "plugin":{
          "type":"input",
          "input":{
            "elasticsearch.cluster.id":event.es_cluster_id_map.map(tuple, (tuple.plugin_id == input.id), tuple.cluster_id),
            "name":input.name,
            "id":input.id,
            "flow": has(input.flow) ? input.flow : {},
            "events":{
              "out":input.events.out,
            },
            "time":{
              "queue_push_duration":{
                "ms":input.events.queue_push_duration_in_millis
              }
            }
          }
        }
      }.drop_empty()
      ),
      "codecs":event.codecs.map(codec,
      {
        "name":event.name,
        "id":event.hash,
        "host":event.host,
        "elasticsearch.cluster.id":event.es_cluster_id,
        "plugin":{
          "type":"codec",
          "codec":{
          "id":codec.id,
          "name":codec.name,
            "flow": has(codec.flow) ? codec.flow : {},
            "decode":{
              "duration":{
                "ms":codec.decode.duration_in_millis
              },
              "in":codec.decode.writes_in,
              "out":codec.decode.out,
            },
            "encode":{
              "in":codec.encode.writes_in,
              "duration":{
                "ms":codec.encode.duration_in_millis
              }
            }
          }
        }
      }.drop_empty()
      ),
      "filters":event.filters.map(filter,
      {
        "name":event.name,
        "id":event.hash,
        "host":event.host,
        "elasticsearch.cluster.id":event.es_cluster_id,
        "plugin":{
          "type":"filter",
          "filter":{
            "id":filter.id,
            "name":filter.name,
            "elasticsearch.cluster.id":event.es_cluster_id_map.map(tuple, (tuple.plugin_id == filter.id), tuple.cluster_id),
            "flow": has(filter.flow) ? filter.flow : {},
            "events":{
              "in":filter.events['in'],
              "out":filter.events.out,
            },
            "time":{
              "duration":{
                "ms":filter.events.duration_in_millis
              }
            }
          }
        }
      }.drop_empty()
      ),
      "outputs":event.outputs.map(output,
      {
        "name":event.name,
        "id":event.hash,
        "host":event.host,
        "elasticsearch.cluster.id":event.es_cluster_id,
        "plugin":{
          "type":"output",
          "output":{
            "id":output.id,
            "name":output.name,
            "elasticsearch.cluster.id":event.es_cluster_id_map.map(tuple, (tuple.plugin_id == output.id), tuple.cluster_id),
            "flow": has(output.flow) ? output.flow : {},
            "events":{
              "in":output.events['in'],
              "out":output.events.out,
            },
            "time":{
              "duration":{
                "ms":output.events.duration_in_millis
              }
            }
          }
        }
      }.drop_empty()
      )
    }).collate(["filters", "outputs", "inputs", "codecs"])).as(plugins, {
      "events":plugins.map(plugin, {"logstash":{"pipeline":plugin}})})