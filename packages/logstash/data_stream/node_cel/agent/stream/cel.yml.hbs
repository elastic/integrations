config_version: "2"
interval: {{period}}
resource.url: "{{url}}/_node/stats?graph=true"
{{#if resource_ssl}}
resource.ssl:
  {{resource_ssl}}
{{/if}}

{{#if username}}
auth.basic.user: {{escape_string username}}
{{/if}}
{{#if password}}
auth.basic.password: {{escape_string password}}
{{/if}}

redact:
  fields: ~

program: |
  get(state.url)
  .as(resp, bytes(resp.Body)
  .decode_json().as(body,
    {"logstash":{"node":{"stats":{
             "events":body.events,
             "jvm":{
                "uptime_in_millis":body.jvm.uptime_in_millis,
                "mem":body.jvm['mem'].drop("pools"),
                "threads":body.jvm.threads
              },
             "queue":body.queue,
             "reloads":body.reloads,
             "process":body.process,
             "os":{
              "cpu":body.process.cpu,
              "cgroup":has(body.os.group) ? body.os.cgroup : {},
             },
             "logstash":{
               "ephemeral_id":body.ephemeral_id,
               "host":body.host,
               "http_address":body.http_address,
               "name":body.name,
               "pipeline":body.pipeline,
               "pipelines":body.pipelines.map(pipeline, pipeline != '.monitoring-logstash', [pipeline]).flatten(),
               "snapshot":body.snapshot,
               "status":body.status,
               "uuid":body.id,
               "version":body.version,
              }
          }}
        }})
  )
  .as(eve, {
    "events":[eve]
  })