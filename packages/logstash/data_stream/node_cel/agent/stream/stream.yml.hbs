config_version: "2"
interval: {{period}}
resource.url: "{{url}}/_node/stats?graph=true"
{{#if resource_ssl}}
resource.ssl:
  {{resource_ssl}}
{{/if}}

state:
  username: {{username}}
  password: {{password}}

redact:
  fields: ~

program: |
  (has(state.username) && state.username != null ?
    get_request(state.url).with({
        "Header":{
            "Authorization": ["Basic "+string(base64(state.username+":"+state.password))],
        }
    })
  : (has(state.cursor) && has(state.cursor.username) && state.cursor.username != null ?
      get_request(state.url).with({
        "Header":{
          "Authorization": ["Basic "+string(base64(state.cursor.username+":"+state.cursor.password))],
        }
      }
     )
    :
      get_request(state.url)
    )
   )
  .do_request().as(resp, bytes(resp.Body)
  .decode_json()
  .as(body, {"b":body}
    .with({"logstash":{"node":{"stats":{
             "events":body['events'],
             "jvm":body['jvm'],
             "queue":body['queue'],
             "reloads":body['reloads'],
             "process":body['process'],
             "os":{
              "cpu":body['process']['cpu'],
              "cgroup":has(body.os.group) ? body['os']['cgroup'] : {},
             },
             "logstash":{
               "ephemeral_id":body['ephemeral_id'],
               "host":body['host'],
               "http_address":body['http_address'],
               "name":body['name'],
               "pipeline":body['pipeline'],
               "pipelines":body['pipelines'].map(pipeline, [pipeline]).flatten(),
               "snapshot":body['snapshot'],
               "status":body['status'],
               "uuid":body['id'],
               "version":body['version'],
              }
          }}
          }})
    )
    ).drop("b")
    .as(eve, {
      "events":eve.map(each, eve),
      "cursor": {"username":(has(state.cursor) && has(state.cursor.username)) ? state.cursor.username : has(state.username) ? state.username : null,
                 "password":has(state.cursor) && has(state.cursor.password) ? state.cursor.password : has(state.password) ? state.password : null
                 },
      })