config_version: "1"
interval: {{period}}
resource.url: "{{url}}/_health_report"
{{#if resource_ssl}}
resource.ssl:
  {{resource_ssl}}
{{/if}}

{{#if username}}
auth.basic.user: {{escape_string username}}
{{/if}}
{{#if password}}
auth.basic.password: {{escape_string password}}
{{/if}}
{{#if condition}}
condition: {{ condition }}
{{/if}}

redact: 
  fields: ~

program: |
  get(state.url)
  .as(resp, bytes(resp.Body)
  .decode_json().as(body,
    [   
        [{"event.dataset": "logstash.node",
            "logstash.node": {
            "name":body.name,
            "address":body.http_address,
            "uuid":body.id,
            "version":body.version,
            "status":body.status,
            "symptom":body.symptom,
            },
        }],
        body.indicators.pipelines.indicators.as(pipelines, // pipelines = body.indicators.pipelines.indicators
              pipelines.map(pipeline_name, pipelines[pipeline_name].as(pipeline, { // pipeline = pipelines[pipeline_name]
                    "event.dataset": "logstash.pipeline",
                    "logstash": {
                        "node": {
                            "name": body.name,
                            "version": body.version,
                            "address": body.http_address,
                            "uuid": body.id
                        },
                        "pipeline": {
                            "id":pipeline_name,
                            "status":pipeline.status,
                            "symptom":pipeline.symptom,
                            "state":pipeline.details.status.state,
                            "flow": pipeline.details.flow,
                            "diagnosis": has(pipeline.diagnosis) ? pipeline.diagnosis[0] : {},
                            "impacts": has(pipeline.impacts) ? pipeline.impacts[0] : {},
                        }
                    }
                }
            ))
        )
    ].as(entries, {
        "events": entries.flatten()
    })
    )
  )