---
description: Pipeline for parsing Golang heap metrics.
processors:
  - set:
      field: ecs.version
      value: 8.5.1
      ignore_failure: true
      ignore_empty_value: true
  - set:
      field: event.dataset
      value: golang.heap
      ignore_failure: true
      ignore_empty_value: true
  - set:
      field: event.type
      value: [info]
      ignore_failure: true
      ignore_empty_value: true
  - set:
      field: event.kind
      value: metric
      ignore_failure: true
      ignore_empty_value: true
  - set:
      field: event.module
      value: golang
      ignore_failure: true
      ignore_empty_value: true
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      ignore_failure: true
  - json:
      field: event.original
      target_field: json
      ignore_failure: true
  - script:
      ignore_failure: true
      description: Calculate count, average, max and sum of GC pause duration during this collection period.
      lang: painless
      source: |
        def duration = 0;
        def maxDuration = 0;
        def lastNumGC = 0;
        def numGC = 0;
        def arrGC;
        def idx;
        def arrSize = 256;
        if(ctx.json?.last_num_gc!=null && ctx.json?.last_num_gc!=""){
            lastNumGC = ctx.json.last_num_gc;
        }
        if(ctx.json?.memstats?.NumGC != null && ctx.json?.memstats?.NumGC!=""){
            numGC = ctx.json.memstats.NumGC;
        }
        if(ctx.json?.memstats?.PauseNs!=null && ctx.json?.memstats?.PauseNs!=""){
            arrGC = ctx.json.memstats.PauseNs;
        }
        if (lastNumGC < numGC) {
            def delta = numGC - lastNumGC;
            def start = lastNumGC;
            // If the difference is more than 256 which is the the size of array, we have to set `start` and `delta` because the array index will be overwriting as soon as it will cross 256 mark
            if (delta > arrSize) {
                start = numGC - arrSize;
                delta = arrSize;
            }
            def end = start + delta;
            def i = start;
            while (i < end) {
                idx = i % arrSize;
                def temp = arrGC[idx];
                duration = duration + temp;
                if (temp > maxDuration) {
                    maxDuration = temp;
                }
                i++;
            }
            float avgDuration = (float) duration / delta;
            ctx.count_gc = delta;
            ctx.avg_gc = avgDuration;
            ctx.duration_gc = duration;
            ctx.maxDuration_gc = maxDuration;
        }
  - rename: 
      field: count_gc
      target_field: golang.heap.gc.pause.count
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: avg_gc
      target_field: golang.heap.gc.pause.avg.ns
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: duration_gc
      target_field: golang.heap.gc.pause.sum.ns
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: maxDuration_gc
      target_field: golang.heap.gc.pause.max.ns
      ignore_missing: true
      ignore_failure: true     
  - rename: 
      field: json.memstats.HeapInuse
      target_field: golang.heap.allocations.active.bytes
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.memstats.Frees
      target_field: golang.heap.allocations.frees.count
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.memstats.HeapIdle
      target_field: golang.heap.allocations.idle.bytes
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.memstats.HeapAlloc
      target_field: golang.heap.allocations.object.bytes
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.memstats.HeapObjects
      target_field: golang.heap.allocations.object.count
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.memstats.TotalAlloc
      target_field: golang.heap.allocations.total.bytes
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.cmdline
      target_field: golang.heap.cmdline
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.memstats.GCCPUFraction
      target_field: golang.heap.gc.cpu_fraction
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.memstats.NextGC
      target_field: golang.heap.gc.next_gc_limit
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.memstats.NumGC
      target_field: golang.heap.gc.total.count
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.memstats.PauseTotalNs
      target_field: golang.heap.gc.pause.total.ns
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.memstats.Mallocs
      target_field: golang.heap.mallocs.count
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.memstats.HeapReleased
      target_field: golang.heap.system.released.bytes
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.memstats.StackSys
      target_field: golang.heap.system.stack.bytes
      ignore_missing: true
      ignore_failure: true
  - rename: 
      field: json.memstats.HeapSys
      target_field: golang.heap.system.total.bytes
      ignore_missing: true
      ignore_failure: true
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_missing: true
      ignore_failure: true
  - remove:
      field:
        - json
      ignore_missing: true
      ignore_failure: true
  - script:
      description: Drops null/empty values recursively.
      lang: painless
      source: |
        boolean drop(Object o) {
          if (o == null || o == "") {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
on_failure:
  - set:
      field: error.message
      value: "{{{_ingest.on_failure_message}}}"
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
