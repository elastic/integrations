---
description: Pipeline for normalizing envoyproxy logs
processors:
- set:
    field: ecs.version
    value: 8.11.0
- set:
    field: event.kind
    value: event
- append:
    field: event.category
    value: network
- set:
    field: event.ingested
    value: '{{_ingest.timestamp}}'
    ignore_empty_value: true
    ignore_failure: true
- pipeline:
    if: ctx.message.startsWith('{')
    name: '{{ IngestPipeline "json"}}'
- pipeline:
    if: ctx.message.charAt(0) != (char)("{")
    name: '{{ IngestPipeline "plaintext"}}'
- pipeline:
    name: '{{ IngestPipeline "geo"}}'
- rename:
    field: message
    target_field: event.original
    tag: rename_message
    ignore_missing: true
    if: ctx.event?.original == null
- remove:
    field: message
    ignore_missing: true
    tag: remove_message
    if: ctx.event?.original != null
- set:
    field: event.created
    value: '{{@timestamp}}'
- append:
    field: related.ip
    value: "{{source.ip}}"
    if: "ctx?.source?.ip != null"
    allow_duplicates: false
- append:
    field: related.ip
    value: "{{destination.ip}}"
    if: "ctx?.destination?.ip != null"
    allow_duplicates: false
- set:
    field: event.outcome
    value: failure
    if: ctx.envoyproxy?.log?.response_flags != null
- set:
    field: event.outcome
    value: success
    if: ctx.envoyproxy?.log?.response_flags == null
- set:
    field: '@timestamp'
    value: '{{timestamp}}'
- remove:
    field:
    - timestamp
- remove:
    field: event.original
    tag: remove_original_event
    if: ctx?.tags == null || !(ctx.tags.contains("preserve_original_event"))
    ignore_failure: true
    ignore_missing: true
- script:
    tag: script_to_drop_null_values
    lang: painless
    description: Drops null/empty values recursively.
    source: |-
      boolean drop(Object o) {
        if (o == null || o == '' || o == '-') {
          return true;
        } else if (o instanceof Map) {
          ((Map) o).values().removeIf(v -> drop(v));
          return (((Map) o).size() == 0);
        } else if (o instanceof List) {
          ((List) o).removeIf(v -> drop(v));
          return (((List) o).length == 0);
        }
        return false;
      }
      drop(ctx);
- append:
    field: event.kind
    value: pipeline_error
    allow_duplicates: false
    if: ctx.error?.message != null
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
