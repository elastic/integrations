---
processors:
  - set:
      field: event.original
      copy_from: message
      if: ctx.event?.original == null && ctx.message != null
      ignore_failure: true
  - remove:
      field: message
      if: ctx.event?.original != null && ctx.message != null && ctx.message == ctx.event.original
      ignore_missing: true
  - json:
      field: event.original
      target_field: _temp
      if: ctx.event?.original != null && ctx.event.original instanceof String
      ignore_failure: true
      tag: json_decode
      description: Decode JSON from event.original
  - script:
      lang: painless
      description: Move JSON fields from _temp to root context
      tag: move_json_fields
      source: |
        if (ctx._temp != null) {
          for (entry in ctx._temp.entrySet()) {
            ctx[entry.getKey()] = entry.getValue();
          }
          ctx.remove('_temp');
        }
      if: ctx._temp != null
  - set:
      field: event.dataset
      value: withsecure_elements.incidents
  - set:
      field: event.module
      value: withsecure_elements
  - set:
      field: event.category
      value: threat
  - set:
      field: event.type
      value: incident
  - set:
      field: event.kind
      value: alert
  - set:
      field: event.provider
      value: withsecure_elements
  - set:
      field: event.action
      value: detected
  - set:
      field: event.outcome
      value: success

  # Set WithSecure custom fields FIRST
  - set:
      field: withsecure.incident.id
      value: "{{incidentId}}"
      if: ctx.incidentId != null
  - set:
      field: withsecure.incident.status
      value: "{{status}}"
      if: ctx.status != null
  - set:
      field: withsecure.incident.severity
      value: "{{severity}}"
      if: ctx.severity != null
  - set:
      field: withsecure.incident.risk_level
      value: "{{riskLevel}}"
      if: ctx.riskLevel != null
  - set:
      field: withsecure.incident.risk_score
      value: "{{riskScore}}"
      if: ctx.riskScore != null
  - set:
      field: withsecure.incident.resolution
      value: "{{resolution}}"
      if: ctx.resolution != null
  - set:
      field: withsecure.incident.created_timestamp
      value: "{{createdTimestamp}}"
      if: ctx.createdTimestamp != null
  - set:
      field: withsecure.incident.updated_timestamp
      value: "{{updatedTimestamp}}"
      if: ctx.updatedTimestamp != null
  - set:
      field: withsecure.incident.initial_received_timestamp
      value: "{{initialReceivedTimestamp}}"
      if: ctx.initialReceivedTimestamp != null
  - set:
      field: withsecure.incident.categories
      value: "{{categories}}"
      if: ctx.categories != null
  - set:
      field: withsecure.incident.sources
      value: "{{sources}}"
      if: ctx.sources != null
  - set:
      field: withsecure.incident.name
      value: "{{name}}"
      if: ctx.name != null
  - set:
      field: withsecure.incident.public_id
      value: "{{incidentPublicId}}"
      if: ctx.incidentPublicId != null
  - set:
      field: withsecure.incident.organization_id
      value: "{{organizationId}}"
      if: ctx.organizationId != null

  # Set @timestamp from createdTimestamp
  - date:
      field: createdTimestamp
      target_field: "@timestamp"
      formats:
        - ISO8601
        - UNIX_MS
      if: ctx.createdTimestamp != null
      tag: set_timestamp
      ignore_failure: true

  # Now set ECS event fields using withsecure.incident fields
  - set:
      field: event.id
      copy_from: withsecure.incident.id
      if: ctx.withsecure?.incident?.id != null
      ignore_failure: true
  - set:
      field: event.created
      copy_from: withsecure.incident.created_timestamp
      if: ctx.withsecure?.incident?.created_timestamp != null
      ignore_failure: true
  - set:
      field: event.start
      copy_from: withsecure.incident.created_timestamp
      if: ctx.withsecure?.incident?.created_timestamp != null
      ignore_failure: true
  - set:
      field: event.end
      copy_from: withsecure.incident.updated_timestamp
      if: ctx.withsecure?.incident?.updated_timestamp != null
      ignore_failure: true
  - set:
      field: event.severity
      copy_from: withsecure.incident.severity
      if: ctx.withsecure?.incident?.severity != null
      ignore_failure: true
  - set:
      field: event.risk_score
      copy_from: withsecure.incident.risk_score
      if: ctx.withsecure?.incident?.risk_score != null
      ignore_failure: true
  - remove:
      field:
        - status
        - severity
        - riskLevel
        - riskScore
        - resolution
        - createdTimestamp
        - updatedTimestamp
        - initialReceivedTimestamp
        - categories
        - sources
        - name
        - incidentPublicId
        - organizationId
        - incidentId
      ignore_missing: true
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
