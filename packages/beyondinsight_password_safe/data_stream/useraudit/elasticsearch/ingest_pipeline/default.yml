---
description: Pipeline for processing BeyondInsight User Audit events.
processors:
  - set:
      field: ecs.version
      value: '9.1.0'
  - terminate:
      tag: data_collection_error
      if: ctx.error?.message != null && ctx.event?.original == null
      description: error message set and no data to process.
  - fingerprint:
      description: >-
        The fingerprint prevents some duplication of user audit events in cases
        of retransmission on connection failures.
      fields:
        - event.original
      target_field: _id
  - json:
      field: event.original
      tag: json_event_original
      target_field: beyondinsight_password_safe.useraudit
  - script:
      description: Remove null values and empty strings from beyondinsight_password_safe.useraudit.
      lang: painless
      source: |
        ctx.beyondinsight_password_safe.useraudit.entrySet().removeIf(entry ->
          entry.getValue() == null ||
          (entry.getValue() instanceof String && entry.getValue().isEmpty())
        );
  - script:
      tag: script_numeric_id_to_string
      description: Convert numeric ID fields to strings.
      params:
        numeric_ids:
          - AuditID
          - UserID
      source: |
        for (field in params.numeric_ids) {
          def value = ctx.beyondinsight_password_safe.useraudit[field];
          if (value instanceof Number) {
            ctx.beyondinsight_password_safe.useraudit[field] =
              Integer.toString(value.intValue());
          }
        }
  - script:
      tag: script_camel_to_snake_naming
      description: Rename CapitalCamelCase-ish fields to lower_snake_case.
      params:
        field_mappings:
          ActionType: action_type
          AuditID: audit_id
          CreateDate: create_date
          IPAddress: ip_address
          Section: section
          UserID: user_id
          UserName: user_name
      source: |
        Map renamedFields = [:];
        for (entry in ctx.beyondinsight_password_safe.useraudit.entrySet()) {
          def originalKey = entry.getKey();
          def snakeKey = params.field_mappings[originalKey];
          if (snakeKey != null) {
            renamedFields[snakeKey] = entry.getValue();
          } else {
            renamedFields[originalKey] = entry.getValue();
          }
        }
        ctx.beyondinsight_password_safe.useraudit = renamedFields;
  - date:
      if: ctx.beyondinsight_password_safe?.useraudit?.create_date != null
      field: beyondinsight_password_safe.useraudit.create_date
      target_field: beyondinsight_password_safe.useraudit.create_date
      formats:
        - ISO8601
  - set:
      if: ctx.beyondinsight_password_safe?.useraudit?.create_date != null
      copy_from: beyondinsight_password_safe.useraudit.create_date
      field: "@timestamp"
  - set:
      field: event.kind
      value: event
  - append:
      field: event.category
      value: iam
  - append:
      field: event.type
      value: info
  - set:
      field: event.id
      copy_from: ctx.beyondinsight_password_safe.useraudit.audit_id
      ignore_empty_value: true
  - set:
      if: ctx.beyondinsight_password_safe?.useraudit?.user_id != "-1"
      field: user.id
      copy_from: beyondinsight_password_safe.useraudit.user_id
      ignore_empty_value: true
  - set:
      field: user.name
      copy_from: beyondinsight_password_safe.useraudit.user_name
      ignore_empty_value: true
  - gsub:
      if: ctx.beyondinsight_password_safe?.useraudit?.ip_address != null
      description: Remove leading zeros from IP address octets.
      field: beyondinsight_password_safe.useraudit.ip_address
      pattern: '\b0+(\d)'
      replacement: '$1'
  - convert:
      if: ctx.beyondinsight_password_safe.useraudit?.ip_address != null
      field: beyondinsight_password_safe.useraudit.ip_address
      type: ip
      on_failure:
        - remove:
            field: beyondinsight_password_safe.useraudit.ip_address
  - append:
      if: ctx.beyondinsight_password_safe?.useraudit?.ip_address != null
      field: host.ip
      value: "{{{beyondinsight_password_safe.useraudit.ip_address}}}"
      allow_duplicates: false
  - geoip:
      field: host.ip
      target_field: host.geo
      ignore_missing: true
      ignore_failure: true
  - set:
      copy_from: beyondinsight_password_safe.useraudit.user
      field: user.name
      ignore_empty_value: true
  - rename:
      tag: rename_user_email
      if: ctx.user?.name instanceof String && ctx.user.name.indexOf("@") > 0
      field: user.name
      target_field: user.email
  - dissect:
      tag: dissect_user_email
      if: ctx.user?.email != null
      field: user.email
      pattern: '%{user.name}@%{user.domain}'
      ignore_failure: true
  - append:
      if: ctx.beyondinsight_password_safe?.useraudit?.ip_address != null
      field: related.ip
      value: "{{{beyondinsight_password_safe.useraudit.ip_address}}}"
      allow_duplicates: false
  - append:
      if: ctx.user?.name != null
      field: related.user
      value: "{{{user.name}}}"
      allow_duplicates: false
  - append:
      if: ctx.user?.email != null
      field: related.user
      value: "{{{user.email}}}"
      allow_duplicates: false
  - append:
      if: ctx.beyondinsight_password_safe.useraudit?.user_id != "-1"
      field: related.user
      value: "{{{beyondinsight_password_safe.useraudit.user_id}}}"
      allow_duplicates: false
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: >-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{#_ingest.on_failure_processor_tag}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{/_ingest.on_failure_processor_tag}}failed with message '{{{ _ingest.on_failure_message }}}'
