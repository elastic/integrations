config_version: 2
interval: {{interval}}
resource.tracer:
  enabled: {{enable_request_tracer}}
  filename: "../../logs/cel/http-request-trace-*.ndjson"
  maxbackups: 5
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.ssl.renegotiation: freely
resource.url: {{url}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
state:
  limit: {{limit}}
  apikey: {{escape_string apikey}}
  password: {{escape_string password}}
  username: {{escape_string username}}
redact:
  fields:
    - apikey
    - password
{{!--
API References:
  https://docs.beyondtrust.com/bips/docs/api#post-authsignappin
  https://docs.beyondtrust.com/bips/docs/password-safe-apis#get-managedaccounts
--}}
program: |-
  state.with(
    has(state.?cursor.cookies) ?
      // Fetch managed accounts using authenticated session.
      request(
        "GET",
        state.url.trim_suffix("/") + "/ManagedAccounts?" + {
          "limit": [string(state.limit)],
          "offset": [string(state.?offset.orValue(0))],
        }.format_query()
      ).with(
        {
          "Header": {
            "Content-Type": ["application/json"],
            "Cookie": state.cursor.cookies,
          },
        }
      ).do_request().as(resp,
        (resp.StatusCode == 200) ?
          // Success: process JSON array of managed account objects.
          // More data may exist if returned array size equals the limit.
          resp.Body.decode_json().as(body,
            {
              "events": body.map(e,
                {
                  "event": {
                    "original": e.encode_json(),
                  },
                }
              ),
              "want_more": size(body) == int(state.limit),
              "offset": (size(body) == int(state.limit)) ?
                (int(state.?offset.orValue(0)) + size(body))
              :
                0,
              "retries": 0,
            }
          )
        : (resp.StatusCode == 401) ?
          (
            // Authentication failure: clear session and retry once.
            (int(state.?retries.orValue(0)) == 0) ?
              {
                "events": [
                  // Must produce an event for want_more=true to be honored.
                  {"cel": true},
                ],
                "retries": 1,
                "want_more": true,
                "cursor": {},
              }
            :
              {
                "events": {
                  "error": {
                    "code": string(resp.StatusCode),
                    "id": string(resp.Status),
                    "message": "Authentication failed after retry: " + "GET " + state.url.trim_suffix("/") + "/ManagedAccounts: " + (
                      (size(resp.Body) != 0) ?
                        string(resp.Body)
                      :
                        string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                    ),
                  },
                },
                "want_more": false,
              }
          )
        :
          // Handle all other HTTP error responses.
          {
            "events": {
              "error": {
                "code": string(resp.StatusCode),
                "id": string(resp.Status),
                "message": "GET " + state.url.trim_suffix("/") + "/ManagedAccounts: " + (
                  (size(resp.Body) != 0) ?
                    string(resp.Body)
                  :
                    string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                ),
              },
            },
            "want_more": false,
          }
      )
    :
      // Establish new authenticated session.
      request("POST", state.url.trim_suffix("/") + "/Auth/SignAppin").with(
        {
          "Header": {
            "Authorization": [
              sprintf("PS-Auth key=%s; runas=%s;", [state.apikey, state.username]) + (
              // pwd is required only if the user password is required on the application API registration.
              (state.password != "") ? (sprintf(" pwd=[%s];", [state.password])) : ""),
            ],
            "Content-Type": ["application/json"],
          },
        }
      ).do_request().as(resp,
        (resp.StatusCode == 200) ?
          {
            "events": [
              // Must produce an event for want_more=true to be honored.
              {"cel": true},
            ],
            "cursor": {
              "cookies": resp.Header["Set-Cookie"],
            },
            "want_more": true,
          }
        :
          {
            "events": {
              "error": {
                "code": string(resp.StatusCode),
                "id": string(resp.Status),
                "message": "Failed to create session: " + "POST " + state.url.trim_suffix("/") + "/Auth/SignAppin: " + (
                  (size(resp.Body) != 0) ?
                    string(resp.Body)
                  :
                    string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                ),
              },
            },
            "want_more": false,
          }
      )
  ).as(state, (state.want_more == false) ?
    // Reset retry counter when execution completes.
    state.drop("retries")
  :
    state
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}

processors:
- drop_event.when.equals.cel: true
{{#if processors}}
{{processors}}
{{/if}}
