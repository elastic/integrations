---
description: Pipeline for processing BeyondTrust Password Safe Sessions.
processors:
  - set:
      field: ecs.version
      value: '9.1.0'
  - terminate:
      tag: data_collection_error
      if: ctx.error?.message != null && ctx.event?.original == null
      description: error message set and no data to process.
  - fingerprint:
      description: >-
        This API does does not have a cursor.
        The integration collects all sessions on each execution.
        The fingerprint prevents some duplication of sessions that have not changed.
      fields:
        - event.original
      target_field: _id
  - json:
      field: event.original
      tag: json_event_original
      target_field: beyondinsight_password_safe.session
  - script:
      tag: script_drop_null_or_empty
      description: Remove null values and empty strings from beyondinsight_password_safe.session.
      lang: painless
      source: |
        ctx.beyondinsight_password_safe.session.entrySet().removeIf(entry ->
          entry.getValue() == null ||
          (entry.getValue() instanceof String && entry.getValue().isEmpty())
        );
  - script:
      tag: script_numeric_id_to_string
      description: Convert numeric ID fields to strings.
      params:
        numeric_ids:
          - ApplicationID
          - ArchiveStatus
          - ManagedAccountID
          - ManagedSystemID
          - Protocol
          - RequestID
          - SessionID
          - SessionType
          - Status
          - UserID
      source: |
        for (field in params.numeric_ids) {
          def value = ctx.beyondinsight_password_safe.session[field];
          if (value instanceof Number) {
            ctx.beyondinsight_password_safe.session[field] =
              Integer.toString(value.intValue());
          }
        }
  - script:
      tag: script_camel_to_snake_naming
      description: Rename CapitalCamelCase-ish fields to lower_snake_case.
      params:
        field_mappings:
          ApplicationID: application_id
          ArchiveStatus: archive_status
          AssetName: asset_name
          Duration: duration
          EndTime: end_time
          ManagedAccountID: managed_account_id
          ManagedAccountName: managed_account_name
          ManagedSystemID: managed_system_id
          NodeID: node_id
          Protocol: protocol
          RecordKey: record_key
          RequestID: request_id
          SessionID: session_id
          SessionType: session_type
          StartTime: start_time
          Status: status
          Token: token
          UserID: user_id
      source: |
        Map renamedFields = [:];
        for (entry in ctx.beyondinsight_password_safe.session.entrySet()) {
          def originalKey = entry.getKey();
          def snakeKey = params.field_mappings[originalKey];
          if (snakeKey != null) {
            renamedFields[snakeKey] = entry.getValue();
          } else {
            renamedFields[originalKey] = entry.getValue();
          }
        }
        ctx.beyondinsight_password_safe.session = renamedFields;
  - date:
      if: ctx.beyondinsight_password_safe.session?.start_time != null
      field: beyondinsight_password_safe.session.start_time
      target_field: beyondinsight_password_safe.session.start_time
      formats:
        - ISO8601
  - date:
      if: ctx.beyondinsight_password_safe.session?.end_time != null
      field: beyondinsight_password_safe.session.end_time
      target_field: beyondinsight_password_safe.session.end_time
      formats:
        - ISO8601
  - set:
      if: ctx.beyondinsight_password_safe.session?.start_time != null
      field: event.start
      copy_from: beyondinsight_password_safe.session.start_time
  - set:
      if: ctx.beyondinsight_password_safe.session?.end_time != null
      field: event.end
      copy_from: beyondinsight_password_safe.session.end_time
  - set:
      if: ctx.event?.end != null
      field: '@timestamp'
      copy_from: event.end
  - set:
      if: ctx.event?.end == null && ctx.event?.start != null
      field: '@timestamp'
      copy_from: event.start
  - set:
      field: event.kind
      value: event
  - append:
      field: event.category
      value: session
  - append:
      field: event.type
      value: info
  - set:
      field: event.duration
      copy_from: beyondinsight_password_safe.session.duration
      ignore_empty_value: true
  - script:
      description: Convert event.duration from seconds to nanoseconds to align with ECS.
      lang: painless
      if: ctx.event?.duration != null
      source: |
        ctx.event.duration = ctx.event.duration * 1000000000L;
  - script:
      tag: script_status_human_readable
      if: ctx.beyondinsight_password_safe?.session?.status != null
      description: Convert status to human-readable value.
      lang: painless
      params:
        descriptions:
          "0": "not_started"
          "1": "in_progress"
          "2": "completed"
          "5": "locked"
          "7": "terminated"
          "8": "logged_off"
          "9": "disconnected"
      source: |
        def description = params.descriptions.get(ctx.beyondinsight_password_safe.session.status);
        if (description != null) {
          ctx.beyondinsight_password_safe.session.status = description;
        }
  - script:
      tag: script_archive_status_human_readable
      if: ctx.beyondinsight_password_safe?.session?.archive_status != null
      description: Convert archive_status to human-readable value.
      lang: painless
      params:
        descriptions:
          "0": "not_archived"
          "1": "archived"
          "2": "restoring"
          "3": "archiving"
          "4": "session_not_found"
          "5": "repository_offline"
          "6": "unknown"
      source: |
        def description = params.descriptions.get(ctx.beyondinsight_password_safe.session.archive_status);
        if (description != null) {
          ctx.beyondinsight_password_safe.session.archive_status = description;
        }
  - script:
      tag: script_protocol_human_readable
      if: ctx.beyondinsight_password_safe?.session?.protocol != null
      description: Convert protocol to human-readable value.
      lang: painless
      params:
        descriptions:
          "0": "rdp"
          "1": "ssh"
      source: |
        def description = params.descriptions.get(ctx.beyondinsight_password_safe.session.protocol);
        if (description != null) {
          ctx.beyondinsight_password_safe.session.protocol = description;
        }
  - script:
      tag: script_session_type_human_readable
      if: ctx.beyondinsight_password_safe?.session?.session_type != null
      description: Convert session_type to human-readable value.
      lang: painless
      params:
        descriptions:
          "1": "regular"
          "2": "isa"
          "3": "admin"
      source: |
        def description = params.descriptions.get(ctx.beyondinsight_password_safe.session.session_type);
        if (description != null) {
          ctx.beyondinsight_password_safe.session.session_type = description;
        }
  - set:
      field: network.protocol
      copy_from: beyondinsight_password_safe.session.protocol
      ignore_empty_value: true
  - set:
      field: event.id
      copy_from: beyondinsight_password_safe.session.session_id
      ignore_empty_value: true
  - set:
      field: user.id
      copy_from: beyondinsight_password_safe.session.user_id
      ignore_empty_value: true
  - set:
      field: user.name
      copy_from: beyondinsight_password_safe.session.managed_account_name
      ignore_empty_value: true
  - append:
      if: ctx.beyondinsight_password_safe?.session?.asset_name != null
      field: related.hosts
      value: "{{{beyondinsight_password_safe.session.asset_name}}}"
      allow_duplicates: false
  - append:
      if: ctx.beyondinsight_password_safe?.session?.managed_account_name != null
      field: related.user
      value: "{{{beyondinsight_password_safe.session.managed_account_name}}}"
      allow_duplicates: false
  - append:
      if: ctx.beyondinsight_password_safe?.session?.user_id != null
      field: related.user
      value: "{{{beyondinsight_password_safe.session.user_id}}}"
      allow_duplicates: false
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: >-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{#_ingest.on_failure_processor_tag}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{/_ingest.on_failure_processor_tag}}failed with message '{{{ _ingest.on_failure_message }}}'
