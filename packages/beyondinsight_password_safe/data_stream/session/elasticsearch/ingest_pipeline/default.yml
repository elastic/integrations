---
description: Pipeline for processing BeyondInsight and Password Safe Sessions logs
processors:
  - rename:
      field: message
      target_field: beyondinsight_password_safe.session
  - drop:
      if: ctx.error?.statuscode != null && ctx.error.statuscode != 200
  - fingerprint:
      fields:
        - beyondinsight_password_safe.session
      target_field: "_id"

####################
# Scripts for processing input #
####################
  - script:
      description: Drops null/empty values recursively.
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);

  - script:
      description: Convert Additional Info keys to snake case.
      tag: additional-info-keys-to-snake-case
      lang: painless
      source: |
        Map keysToSnakeCase(Map m) {
          def regex = /_?([a-z])([A-Z]+)/;
          def snakeCaseMap = [:];

          for (entry in m.entrySet()) {
            def k = entry.getKey();
            def v = entry.getValue();

            if (v instanceof Map) {
              v = keysToSnakeCase(v);
            } else if (v instanceof List) {
              for (int i = 0; i < v.size(); i++) {
                def item = v.get(i);
                if (item instanceof Map) {
                  v.set(i, keysToSnakeCase(item));
                }
              }
            }

            k = regex.matcher(k).replaceAll('$1_$2').toLowerCase();
            snakeCaseMap.put(k, v);
          }
          return snakeCaseMap;
        }

        if (ctx.beyondinsight_password_safe.session != null) {
          ctx.beyondinsight_password_safe.session = keysToSnakeCase(ctx.beyondinsight_password_safe.session);
        }


####################
# ECS Fields #
####################
  - set:
      field: ecs.version
      value: '8.11.0'

  - set:
      field: event.kind
      value: event

  - append:
      field: event.category
      value: session

  - append:
      field: event.type
      value: info

  - set:
      field: event.dataset
      value: beyondinsight_password_safe.session

  - set:
      field: event.module
      value: beyondinsight_password_safe

  - set:
      field: event.id
      value: "{{{beyondinsight_password_safe.session.session_id}}}"
      ignore_empty_value: true

  - set:
      field: event.duration
      copy_from: beyondinsight_password_safe.session.duration
      ignore_empty_value: true

  - date:
      if: ctx.beyondinsight_password_safe.session?.start_time != null
      field: beyondinsight_password_safe.session.start_time
      target_field: event.start
      formats: ["ISO8601"]
      ignore_failure: false

  - append:
      field: related.user
      value: "{{{beyondinsight_password_safe.session.user_id}}}"
      allow_duplicates: false

  - date:
      if: ctx.beyondinsight_password_safe.session?.end_time != null
      field: beyondinsight_password_safe.session.end_time
      target_field: event.end
      formats: ["ISO8601"]
      ignore_failure: false

####################
# Session Specific Fields #
####################
  - convert:
      field: beyondinsight_password_safe.session.status
      type: string
  - convert:
      field: beyondinsight_password_safe.session.archive_status
      type: string
  - convert:
      field: beyondinsight_password_safe.session.protocol
      type: string

  - script:
      description: Convert status to their text meaning using params
      lang: painless
      params:
        descriptions:
          "0": "not_started"
          "1": "in_progress"
          "2": "completed"
          "5": "locked"
          "7": "terminated"
          "8": "logged_off"
          "9": "disconnected"
      if: ctx.beyondinsight_password_safe?.session?.status != null
      source: |
        ctx.beyondinsight_password_safe.session.status = params.descriptions.getOrDefault(
          ctx.beyondinsight_password_safe.session.status,
          "unknown"
        );

  - script:
      description: Convert archive_status to text values
      lang: painless
      params:
        descriptions:
          "0": "not_archived"
          "1": "archived"
          "2": "restoring"
          "3": "archiving"
          "4": "session_not_found"
          "5": "repository_offline"
      if: ctx.beyondinsight_password_safe?.session?.archive_status != null
      source: |
        ctx.beyondinsight_password_safe.session.archive_status = params.descriptions.getOrDefault(
          ctx.beyondinsight_password_safe.session.archive_status,
          "unknown"
        );

  - script:
      description: Convert protocol to text values
      lang: painless
      params:
        descriptions:
          "0": "rdp"
          "1": "ssh"
      if: ctx.beyondinsight_password_safe?.session?.protocol != null
      source: |
        ctx.beyondinsight_password_safe.session.protocol = params.descriptions.getOrDefault(
          ctx.beyondinsight_password_safe.session.protocol,
          "unknown"
        );

  - append:
      field: network.protocol
      value: "{{{beyondinsight_password_safe.session.protocol}}}"
      allow_duplicates: false
          
  - remove:
      field:
        - beyondinsight_password_safe.session.token

on_failure:
  - append:
      field: error.message
      value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      value: pipeline_error