---
description: Pipeline for Jamf Protect Telemetry events.
processors:

##########################
## ECS Event Specific ##
##########################
    - set:
        field: event.reason
        value: A user has logged out of an OpenSSH session
    - convert:
        field: jamf_protect.telemetry.event.openssh_logout.graphical_session_id
        target_field: custom.graphical_session_id
        type: string
        ignore_missing: true
        ignore_failure: true
    - rename:
        field: jamf_protect.telemetry.event.openssh_logout.username
        target_field: user.name
        ignore_missing: true
    - convert:
        field: jamf_protect.telemetry.event.openssh_logout.uid
        target_field: user.id
        type: string
        ignore_missing: true
        ignore_failure: true
        
    - rename:
        field: jamf_protect.telemetry.event.openssh_logout.source_address
        target_field: source.ip
        ignore_missing: true
    - script:
        lang: painless
        source: >
            if (ctx.jamf_protect?.telemetry?.event?.openssh_logout?.source_address_type != null) {
                def itemType = ctx.jamf_protect.telemetry.event.openssh_logout.source_address_type;
                def itemTypeMap = [
                0: 'Unknown',
                1: 'IPv4',
                2: 'IPv6',
                3: 'UNIX Socket'
                ];
                def itemTypeString = itemTypeMap.containsKey(itemType) ? itemTypeMap[itemType] : 'Unknown';
                ctx.custom = ctx.custom != null ? ctx.custom : new HashMap();
                ctx.custom.source_address_type = itemTypeString;
            }
##########################
## ECS Process ##
##########################
    - append:
        field: event.type
        value: start

    - append:
        field: event.category
        value: authentication
    - append:
        field: event.category
        value: session    
    - pipeline:
        name: '{{ IngestPipeline "pipeline_object_process" }}'
