config_version: 2
interval: {{interval}}
resource.tracer:
  enabled: {{enable_request_tracer}}
  filename: "../../logs/cel/http-request-trace-*.ndjson"
  maxbackups: 5
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
auth.oauth2:
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{url}}/oauth2/token
  endpoint_params:
    grant_type: client_credentials

state:
  initial_interval: {{initial_interval}}
  batch_size: {{batch_size}}
  skip: 0
redact:
  fields: ~
program: |
  (
    state.?want_more.orValue(false) ?
      state
    :
      state.with({
        "start_time": state.?cursor.last_timestamp.orValue(string(int(now - duration(state.initial_interval)) * 1000))
      })
  ).as(state,
    state.with(
      request(
        "POST",
        state.url.trim_right("/") + "/api/v1/detections/search"
      ).with(
        {
          "Body": {
            "limit": state.batch_size,
            "offset": state.skip,
            "mod_time": int(state.start_time),
          }.encode_json(),
        }
      ).do_request().as(resp, (resp.StatusCode == 200) ?
        resp.Body.decode_json().as(body,
          {
            "events": body.map(e,
              {
                "message": e.encode_json(),
              }
            ),
            "start_time": state.start_time,
            "skip": (size(body) >= int(state.batch_size)) ? (int(state.skip) + int(state.batch_size)) : 0,
            "want_more": size(body) >= int(state.batch_size),
            "cursor": {
              ?"max_mod_time": (size(body) >= int(state.batch_size)) ?
                (
                  (size(body) != 0) ?
                    (
                      has(state.?cursor.max_mod_time) ?
                        optional.of(string(max(int(state.cursor.max_mod_time), int(body.map(e, e.mod_time).max()))))
                      :
                        optional.of(string(int(body.map(e, e.mod_time).max())))
                    )
                  :
                    optional.none()
                )
              :
                optional.none(),
              ?"last_timestamp": (size(body) < int(state.batch_size)) ?
                (
                  (size(body) != 0) ?
                    (
                      has(state.?cursor.max_mod_time) ?
                        optional.of(string(max(int(state.cursor.max_mod_time), int(body.map(e, e.mod_time).max()))))
                      :
                        optional.of(string(int(body.map(e, e.mod_time).max())))
                    )
                  :
                    optional.of(string(int(state.cursor.max_mod_time)))
                )
              :
                state.?cursor.last_timestamp,
            },
          }
        )
      :
        {
          "events": {
            "error": {
              "code": string(resp.StatusCode),
              "id": string(resp.Status),
              "message": "POST " + state.url.trim_right("/") + "/api/v1/detections/search " + (
                (size(resp.Body) != 0) ?
                  string(resp.Body)
                :
                  string(resp.Status) + " (" + string(resp.StatusCode) + ")"
              ),
            },
          },
          "want_more": false,
        }
      )
    )
  )

tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
