config_version: 2
interval: {{interval}}
resource.tracer:
  enabled: {{enable_request_tracer}}
  filename: "../../logs/cel/http-request-trace-*.ndjson"
  maxbackups: 5
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  access_key: {{access_key}}
  secret_key: {{secret_key}}
  batch_size: {{batch_size}}
  initial_interval: {{initial_interval}}
redact:
  fields:
    - access_key
    - secret_key
program: |
  (
    state.?want_more.orValue(false) ?
      state.start_time
    :
      state.?cursor.last_timestamp.orValue((now - duration(state.initial_interval)).format(time_layout.RFC3339))
  ).as(start_time, state.with(
    request("GET",
      state.url.trim_right("/") + "/audit-log/v1/events?" + {
        "limit": [string(state.batch_size)],
        "f": ["date.gte:" + string(start_time)],
        "next": [state.?next.orValue("0")],
        "sort": ["received:asc"],
      }.format_query()
    ).with({
      "Header":{
        "X-ApiKeys": ["accessKey=" + state.access_key + ";secretKey=" + state.secret_key],
        "User-Agent": ["Integration/1.0 (Elastic; Tenable.io; Build/3.0.0)"]
      },
    }).do_request().as(resp, resp.StatusCode == 200 ?
      resp.Body.decode_json().as(body, {
        "events": body.events.map(e, {
          "message": e.encode_json(),
        }),
        "cursor": {
          ?"last_timestamp": (
            body.pagination.limit == body.pagination.count ?
              state.?cursor.last_timestamp
            :
              optional.of(body.events.map(e, e.received).map(t, timestamp(t)).max().format(time_layout.RFC3339))
          )
        },
        "start_time": start_time,
        "next": body.pagination.limit == body.pagination.count ? body.pagination.next : "0",
        "want_more": body.pagination.limit == body.pagination.count,
      })
    :
      {
        "events": {
          "error": {
            "code": string(resp.StatusCode),
            "id": string(resp.Status),
            "message": "GET " + state.url.trim_right("/") + "/audit-log/v1/events: " + (
              size(resp.Body) != 0 ?
                string(resp.Body)
              :
                string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
            ),
          },
        },
        "want_more": false,
      }
    )
  ))
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
