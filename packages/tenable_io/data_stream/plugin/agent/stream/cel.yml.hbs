config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  access_key: {{access_key}}
  secret_key: {{secret_key}}
  batch_size: {{batch_size}}
  next_page: 1
  want_more: false
redact:
  fields:
    - access_key
    - secret_key
program: |
  request("GET",
    state.url.trim_right("/") + "/plugins/plugin?last_updated=" + (
      !state.?want_more.orValue(false) ?
        state.?cursor.last_update_time.orValue(string(timestamp(0)))
      :
        state.?cursor.first_update_time.orValue(null)
    ) + "&page=" + string(state.next_page) + "&size=" + string(state.batch_size)
  ).with({
    "Header":{
      "X-ApiKeys": ["accessKey=" + state.access_key + ";secretKey=" + state.secret_key],
      "User-Agent": ["Integration/1.0 (Elastic; Tenable.io; Build/3.0.0)"]
    },
  }).do_request().as(resp,
    resp.StatusCode == 200 ?
      bytes(resp.Body).decode_json().as(body, {
        "events": has(body.?data.plugin_details) ? body.data.plugin_details.map(e, { "message": e.encode_json() }) : [{}],
        "cursor": {
          "last_update_time": (
            has(body.?data.plugin_details) && body.data.plugin_details.size() > 0 ?
              (
                has(state.?cursor.last_update_time) && body.data.plugin_details.map(e, e.attributes.plugin_modification_date).max() < state.cursor.last_update_time ?
                  state.cursor.last_update_time
                :
                  body.data.plugin_details.map(e, e.attributes.plugin_modification_date).max()
              )
            :
              state.?cursor.last_update_time.orValue(string(timestamp(0)))
          ),
          "first_update_time": (
            has(state.?cursor.first_update_time) && has(body.data.plugin_details) ?
              (
                body.data.plugin_details.size() > 0 ?
                  (
                    body.size == int(state.batch_size) && state.want_more ?
                      state.cursor.first_update_time
                    :
                      state.cursor.last_update_time
                  )
                :
                  state.cursor.last_update_time
              )
            :
              string(timestamp(0))
          ),
        },
        "next_page": body.size == int(state.batch_size) ? int(state.next_page)+1 : 1,
        "want_more": body.size == int(state.batch_size),
        "access_key": state.access_key,
        "secret_key": state.secret_key,
        "batch_size": state.batch_size,
      })
    :
      {
        "events": {
          "error": {
            "code": string(resp.StatusCode),
            "id": string(resp.Status),
            "message": "GET:"+(
              size(resp.Body) != 0 ?
                string(resp.Body)
              :
                string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
            ),
          },
        },
        "want_more": false,
        "next_page": 1,
        "batch_size": state.batch_size,
        "access_key": state.access_key,
        "secret_key": state.secret_key,
      }
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
