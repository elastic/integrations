---
description: Pipeline for parsing PostgreSQL logs.
processors:
  - set:
      field: event.ingested
      value: '{{_ingest.timestamp}}'
  - set:
      field: ecs.version
      value: "1.10.0"
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - grok:
      field: event.original
      patterns:
      - '^%{DATETIME:postgresql.log.timestamp}%{CHAR:separator}%{GREEDYDATA:raw_message}'
      pattern_definitions:
        DATETIME: '[-0-9]+ %{TIME} %{WORD:event.timezone}'
        CHAR: .
        GREEDYDATA: |-
          (.|
          |	)*
  - pipeline:
      name: '{{ IngestPipeline "pipeline-log" }}'
      if: ctx.separator != ','
  - pipeline:
      name: '{{ IngestPipeline "pipeline-csv" }}'
      if: ctx.separator == ','
  - date:
      field: postgresql.log.timestamp
      target_field: '@timestamp'
      formats:
      - yyyy-MM-dd HH:mm:ss.SSS zz
      - yyyy-MM-dd HH:mm:ss zz
  - script:
      lang: painless
      source: ctx.event.duration = Math.round(ctx.temp.duration * params.scale)
      params:
        scale: 1000000
      if: ctx.temp?.duration != null
  - remove:
      field: temp.duration
      ignore_missing: true
  - set:
      field: event.kind
      value: event
  - append:
      field: event.category
      value:
        - database
  - set:
      field: event.type
      value:
        - info
      if: "ctx?.postgresql?.log?.sql_state_code == null || (ctx.postgresql.log.sql_state_code ==~ /^0[012].*/)"
  - set:
      field: event.type
      value:
        - error
      if: "ctx?.postgresql?.log?.sql_state_code != null && ! (ctx.postgresql.log.sql_state_code ==~ /^0[012].*/)"
  - append:
      field: related.user
      value: "{{user.name}}"
      if: "ctx?.user?.name != null"
  - remove:
      field:
        - separator
        - raw_message
  - remove:
      field: temp
      ignore_missing: true
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - set:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'
