config_version: 2
interval: {{interval}}
resource.url: {{hostname}}
resource.rate_limit.burst: 1
resource.rate_limit.limit: {{rate_limit}}

{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
resource.tracer.maxsize: 5
{{/if}}

state:
  url: {{hostname}}
  integration_key: {{integration_key}}
  secret_key: {{secret_key}}
  limit: {{limit}}
  initial_interval: {{initial_interval}}
  want_more: false
redact:
  fields:
    - integration_key
    - secret_key

program: |
    (
        state.want_more ?
            state
        :
            state.with({
                "mintime": string(int(state.?cursor.last_published.orValue(int(now - duration(state.initial_interval)) * 1000))),
            })
    ).as(state, state.with({
        // the duration between maxtime and mintime should be less than 180d to avoid error_code 400 from API.
        "maxtime": state.want_more ?
            string(state.maxtime)
        :
            string(int([
                int(timestamp(int(state.mintime)/1000) + duration("4320h")),
                int(now - duration("2m"))
            ].min()) * 1000)
    })).as(state, state.with(
        // prepare the data inside r.
        {
            // data should be calculated for each request to avoid error_code 40103.
            "date": now().format(time_layout.RFC1123Z),
            "method": "GET",
            "url_base": state.url.trim_right("/"),
            "url_path": "/admin/v1/trust_monitor/events",
            "query_string": {
                 "limit": [string(dyn(state).limit)],
                 "maxtime": [string(state.maxtime)],
                 "mintime": [string(state.mintime)],
                 ?"offset": state.?next_offset.optMap(v, [string(v)]),
            }.format_query(),
        }.as(r, r.with({
            // add an authorization header value using prepared data from r.
            "authorization": "Basic " + (
                state.integration_key + ":" + (
                    [
                        r.date,
                        r.method,
                        r.url_base.trim_prefix("https://"),
                        r.url_path,
                        r.query_string,
                    ].join("\n")
                    .hmac("sha1", bytes(state.secret_key))
                    .hex()
                )
            ).base64(),
        })).as(r,
            // perform request using prepared data from r.
            request(
                r.method,
                [r.url_base, r.url_path, "?", r.query_string].join("")
            ).with({
                "Header": {
                    "Content-Type": ["application/x-www-form-urlencoded"],
                    "Date": [r.date],
                    "Authorization": [r.authorization],
                },
            }).do_request().as(resp, (resp.StatusCode == 200) ?
                bytes(resp.Body).decode_json().as(body, has(body.?response.events) && size(body.response.events) > 0 ?
                    {
                        "events": body.response.events.map(event,
                            {
                                "message": event.encode_json(),
                            }
                        ),
                        "want_more": has(body.?response.?metadata.next_offset),
                        ?"next_offset": (body.?response.metadata.next_offset.orValue(null) != null) ?
                            optional.of(string(body.response.metadata.next_offset))
                        :
                            optional.none(),
                        "cursor": {
                            ?"last_published": (has(body.?response.events) && size(body.response.events) > 0) ?
                                optional.of(
                                    body.response.events.map(e, e.surfaced_timestamp).max().as(last_timestamp,
                                        !has(dyn(state).?cursor.last_published) ?
                                            last_timestamp
                                        : (last_timestamp < dyn(state).cursor.last_published) ?
                                            dyn(state).cursor.last_published
                                        :
                                            last_timestamp
                                    )
                                )
                            :
                                dyn(state).?cursor.last_published,
                        }
                    }
                :
                    {
                        "events":[],
                        "want_more": false,
                    }

                )
            :
                bytes(resp.Body).decode_json().as(body,
                    {
                        "events": {
                            "error": {
                                "code": has(body.code) ? string(body.code) : string(resp.StatusCode),
                                "id": string(resp.Status),
                                "message": "GET:"+(
                                    size(resp.Body) != 0 ?
                                        string(resp.Body)
                                    :
                                        string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
                                ),
                            },
                        },
                        "want_more": false,
                    }
                )
            )
        )
    ))

tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
