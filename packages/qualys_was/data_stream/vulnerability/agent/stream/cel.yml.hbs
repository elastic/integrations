config_version: 2
interval: {{interval}}
resource.tracer:
  enabled: {{enable_request_tracer}}
  filename: "../../logs/cel/http-request-trace-*.ndjson"
  maxbackups: 5
  maxsize: 5
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  user: {{username}}
  password: {{password}}
  batch_size: {{batch_size}}
  initial_interval: {{initial_interval}}
  disable_information_gathered: {{disable_information_gathered}}
  disable_sensitive_content: {{disable_sensitive_content}}
  disable_verbose: {{disable_verbose}}
  preserve_original_event: {{preserve_original_event}}
redact:
  fields:
    - password
program: |
  // Qualys detection records are updated over time. Each interval queries for the latest scans.
  // A single record may be retrieved repeatedly over time. Querying is controlled
  // by a date range. Paging is controlled within a single interval by record id.
  //
  // This script
  // - Queries for vulnerability (detection) reports in batches. Records are returned sorted by
  //   detection record id. Paging is accomplished by setting the max ID from the previous batch.
  // - For each batch, the qids of the the vulnerabilities are collated and deduped.
  // - qids are compared against qids that have already been found in previous batches.
  // - qids that have not been previously seen are sent in a query to the Qualys Knowledge Base to retrieve
  //   vulnerability information. Results are cached.
  // - Qualys Knowledge Base information is added to each detection record using the cached data.
  // - Cached data is persisted in the cursor.
  (
    has(state.vulnerability_filter) ?
      state
    :
      state.with(
        {
          "kb_map": {},

          "vulnerability_filter": (!state.disable_sensitive_content && !state.disable_information_gathered) ?
            {}
          : (state.disable_sensitive_content && state.disable_information_gathered) ?
            {
              "field": "type",
              "operator": "EQUALS",
              "value": "VULNERABILITY",
            }
          : state.disable_sensitive_content ?
            {
              "field": "type",
              "operator": "NOT EQUALS",
              "value": "SENSITIVE_CONTENT",
            }
          :
            {
              "field": "type",
              "operator": "NOT EQUALS",
              "value": "INFORMATION_GATHERED",
            },
          "start_time": now,
          "org_last_runtime": state.?cursor.last_runtime.orValue(null),
        }
      ).as(state,
        has(state.min_datetime) ?
          state
        :
          state.with(
            {
              "min_datetime": (state.org_last_runtime != null) ? state.org_last_runtime : (state.start_time - duration(state.initial_interval)).format("2006-01-02T15:04:05Z"),
              "max_datetime": state.start_time.format("2006-01-02T15:04:05Z"),
              "cursor": {
                "last_runtime": state.start_time.format("2006-01-02T15:04:05Z"),
              },
            }
          )
      )
  ).as(state,
    (state.?start_id.orValue(null) == null) ?
      // The initial query for the interval does not have an ID filter
      state.with(
        {
          "Body": {
            "ServiceRequest": {
              "preferences": {
                "limitResults": state.batch_size,
                "verbose": !state.disable_verbose,
              },
              "filters": {
                "Criteria": [
                  {
                    "field": "lastTestedDate",
                    "operator": "GREATER",
                    "value": state.min_datetime,
                  },
                  {
                    "field": "lastTestedDate",
                    "operator": "LESSER",
                    "value": state.max_datetime,
                  },
                  state.vulnerability_filter,
                ].filter(c, has(c.field)),
              },
            },
          },
        }
      )
    :
      // Subsequent queries have ID filters
      state.with(
        {
          "Body": {
            "ServiceRequest": {
              "preferences": {
                "limitResults": state.batch_size,
                "verbose": !state.disable_verbose,
              },
              "filters": {
                "Criteria": [
                  {
                    "field": "lastTestedDate",
                    "operator": "GREATER",
                    "value": state.min_datetime,
                  },
                  {
                    "field": "lastTestedDate",
                    "operator": "LESSER",
                    "value": state.max_datetime,
                  },
                  {
                    "field": "id",
                    "operator": "GREATER",
                    "value": state.start_id,
                  },
                  state.vulnerability_filter,
                ].filter(c, has(c.field)),
              },
            },
          },
        }
      )
  ).as(state,
    request("POST", dyn(state).url.trim_right("/") + "/qps/rest/3.0/search/was/finding").with(
      {
        "Header": {
          "X-Requested-With": ["curl"],
          "Authorization": ["Basic " + (dyn(state).user + ":" + dyn(state).password).base64()],
          "Content-Type": ["application/json"],
          "Accept": ["application/json"],
        },
        "Body": state.Body.encode_json(),
      }
    ).do_request().as(resp, (resp.StatusCode == 200) ?
      try(resp.Body.decode_json(), "decode_error").as(body,
        has(body.decode_error) ?
          state.with(
            {
              "events": {
                "error": {
                  "code": string(resp.StatusCode),
                  "id": string(resp.Status),
                  "message": body.decode_error + " for body: " +
                  (
                    (size(resp.Body) != 0) ?
                      string(resp.Body)
                    :
                      "no body"
                  ),
                },
              },
              "want_more": false,
              "cursor": {
                "last_runtime": state.min_datetime,
              },
            }
          )
        : (!has(body.?ServiceResponse.data) || size(body.ServiceResponse.data) == 0) ?
          state.with(
            {
              "events": [],
              "want_more": false,
              "cursor": {
                "last_runtime": state.max_datetime,
              },
            }
          )
        :
          // kb_map is a map of qid to knowledge base record
          // qids_str is a list of qids that were found in this batch minus the qids that are already in kb_map keys
          // qids_str is sent as a query parameter to the Qualys Knowledge Base API
          // detection_list is the list of detections.
          state.with(
            {
              "qids_str": body.ServiceResponse.data.collate("Finding.qid").as(qids,
                qids.map(qid, string(qid)).as(str_qids,
                  zip(str_qids, qids)
                ).keys().filter(x,
                  try(state.kb_map[x], "map_has_no_key_error").as(
                    value,
                    has(value.map_has_no_key_error)
                  )
                ).join(",")
              ),
              "detection_list": body.ServiceResponse.data.collate("Finding").map(findings, findings.drop("history")),
              "start_id":
              (
                has(body.?ServiceResponse.hasMoreRecords) && body.ServiceResponse.hasMoreRecords == "true" &&
                  has(body.?ServiceResponse.lastId)
              ) ?
                  body.ServiceResponse.lastId
                :
                  null,
              "want_more": has(body.?ServiceResponse.hasMoreRecords) && body.ServiceResponse.hasMoreRecords == "true",
            }
          )
      )
    :
      state.with(
        {
          "events": {
            "error": {
              "code": string(resp.StatusCode),
              "id": string(resp.Status),
              "message": "POST:" +
              (
                (size(resp.Body) != 0) ?
                  string(resp.Body)
                :
                  string(resp.Status) + " (" + string(resp.StatusCode) + ")"
              ),
            },
          },
          "want_more": false,
          "cursor": {
            "last_runtime": state.max_datetime,
          },
        }
      )
    ).as(state,
      (!has(state.detection_list) || size(state.detection_list) == 0 || !has(state.qids_str) ||
        state.qids_str == "") ?
        state
      :
        request(
          "GET",
          state.url.trim_right("/") + "/api/3.0/fo/knowledge_base/vuln/?" + {
            "ids": [state.qids_str],
            "action": ["list"],
          }.format_query()
        ).with(
          {
            "Header": {
              "X-Requested-With": ["curl"],
              "Authorization": ["Basic " + (state.user + ":" + state.password).base64()],
            },
          }
        ).do_request().as(resp, (resp.StatusCode == 200) ?
          resp.Body.as(xml,
            try(xml.decode_xml("qualys_api_3_0_kb"), "decode_xml_error_kb").as(kb_body,
              !has(kb_body.decode_xml_error_kb) ?
                state.with(
                  {
                    "kb_map": state.kb_map.with(kb_body.doc.KNOWLEDGE_BASE_VULN_LIST_OUTPUT.RESPONSE.VULN_LIST.VULN.map(kb, string(kb.QID)).as(qs, zip(qs, kb_body.doc.KNOWLEDGE_BASE_VULN_LIST_OUTPUT.RESPONSE.VULN_LIST.VULN))),
                  }
                ).as(state,
                  state.with(
                    {
                      "events": state.detection_list.map(d,
                        {
                          "message": try(state.kb_map[string(d.qid)], "map_has_no_key_error").as(kb_qid,
                            !has(kb_qid.map_has_no_key_error) ?
                              {
                                "Finding": {
                                  "detection": d,
                                  "knowledge_base": kb_qid,
                                },
                              }
                            :
                              {
                                "Finding": {
                                  "detection": d,
                                },
                              }
                          ).encode_json(),
                          ?"event.original": state.?preserve_original_event.orValue(false) ?
                            optional.of(d.encode_json())
                          :
                            optional.none(),
                        }
                      ),
                    }
                  )
                )
              :
                state.with(
                  {
                    "events": {
                      "error": {
                        "message": "decode_xml error in kb:" + string(kb_body.decode_xml_error_kb) + ":" +
                        (
                          (size(resp.Body) != 0) ?
                            string(resp.Body)
                          :
                            string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                        ),
                      },
                    },
                    "want_more": false,
                    "cursor": {
                      "last_runtime": state.min_datetime,
                    },
                  }
                )
            )
          )
        :
          state.with(
            {
              "events": {
                "error": {
                  "code": string(resp.StatusCode),
                  "id": string(resp.Status),
                  "message": "GET " + state.url.trim_right("/") + "/api/3.0/fo/knowledge_base/vuln/: " +
                  (
                    (size(resp.Body) != 0) ?
                      string(resp.Body)
                    :
                      string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                  ),
                },
              },

              "want_more": false,
              "cursor": {
                "last_runtime": state.min_datetime,
              },
            }
          )
        )
    )
  )

fields_under_root: true
tags:
{{#if preserve_original_event}}
    - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
    - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
    - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
  {{processors}}
{{/if}}
xsd:
  qualys_api_3_0_kb: |
    <xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
      <xs:element name="KNOWLEDGE_BASE_VULN_LIST_OUTPUT">
        <xs:complexType>
        <xs:sequence>
      <xs:element minOccurs="0" ref="REQUEST"/>
      <xs:element ref="RESPONSE"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="REQUEST">
        <xs:complexType>
        <xs:sequence>
      <xs:element ref="DATETIME"/>
      <xs:element ref="USER_LOGIN"/>
      <xs:element ref="RESOURCE"/>
      <xs:element minOccurs="0" ref="PARAM_LIST"/>
      <xs:element minOccurs="0" ref="POST_DATA"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="DATETIME" type="xs:string"/>
        
      <xs:element name="USER_LOGIN" type="xs:string"/>
        
      <xs:element name="RESOURCE" type="xs:string"/>
        
      <xs:element name="PARAM_LIST">
      <xs:complexType>
      <xs:sequence>
      <xs:element maxOccurs="unbounded" ref="PARAM"/>
      </xs:sequence>
      </xs:complexType>
      </xs:element>
        
      <xs:element name="PARAM">
        <xs:complexType>
        <xs:sequence>
      <xs:element ref="KEY"/>
      <xs:element ref="VALUE"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="KEY" type="xs:string"/>
        
      <xs:element name="VALUE" type="xs:string"/>
        
      <xs:element name="POST_DATA" type="xs:string"/>
        
      <xs:element name="RESPONSE">
        <xs:complexType>
        <xs:sequence>
      <xs:element ref="DATETIME"/>
          <xs:choice minOccurs="0">
      <xs:element ref="VULN_LIST"/>
      <xs:element ref="ID_SET"/>
          </xs:choice>
      <xs:element minOccurs="0" ref="WARNING"/>
        </xs:sequence>
        </xs:complexType>
        </xs:element>
            <!-- DATETIME already defined -->
      <xs:element name="VULN_LIST">
        <xs:complexType>
        <xs:sequence>
      <xs:element minOccurs="0" maxOccurs="unbounded" ref="VULN"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="VULN">
        <xs:complexType>
        <xs:sequence>
      <xs:element ref="QID"/>
      <xs:element ref="VULN_TYPE"/>
      <xs:element ref="SEVERITY_LEVEL"/>
      <xs:element ref="TITLE"/>
      <xs:element minOccurs="0" ref="CATEGORY"/>
      <xs:element minOccurs="0" ref="TECHNOLOGY"/>
      <xs:element minOccurs="0" ref="DETECTION_INFO"/>
      <xs:element minOccurs="0" ref="LAST_CUSTOMIZATION"/>
      <xs:element minOccurs="0" ref="LAST_SERVICE_MODIFICATION_DATETIME"/>
      <xs:element ref="PUBLISHED_DATETIME"/>
      <xs:element minOccurs="0" ref="CODE_MODIFIED_DATETIME"/>
      <xs:element minOccurs="0" ref="BUGTRAQ_LIST"/>
      <xs:element ref="PATCHABLE"/>
      <xs:element minOccurs="0" ref="PATCH_PUBLISHED_DATE"/>
      <xs:element minOccurs="0" ref="SOFTWARE_LIST"/>
      <xs:element minOccurs="0" ref="VENDOR_REFERENCE_LIST"/>
      <xs:element minOccurs="0" ref="CVE_LIST"/>
      <xs:element minOccurs="0" ref="DIAGNOSIS"/>
      <xs:element minOccurs="0" ref="DIAGNOSIS_COMMENT"/>
      <xs:element minOccurs="0" ref="CONSEQUENCE"/>
      <xs:element minOccurs="0" ref="CONSEQUENCE_COMMENT"/>
      <xs:element minOccurs="0" ref="SOLUTION"/>
      <xs:element minOccurs="0" ref="SOLUTION_COMMENT"/>
      <xs:element minOccurs="0" ref="COMPLIANCE_LIST"/>
      <xs:element minOccurs="0" ref="CORRELATION"/>
      <xs:element minOccurs="0" ref="CVSS"/>
      <xs:element minOccurs="0" ref="CVSS_V3"/>
      <xs:element minOccurs="0" ref="PCI_FLAG"/>
      <xs:element minOccurs="0" ref="AUTOMATIC_PCI_FAIL"/>
      <xs:element minOccurs="0" ref="PCI_REASONS"/>
      <xs:element minOccurs="0" ref="THREAT_INTELLIGENCE"/>
      <xs:element minOccurs="0" ref="SUPPORTED_MODULES"/>
      <xs:element ref="DISCOVERY"/>
      <xs:element minOccurs="0" ref="IS_DISABLED"/>
      <xs:element minOccurs="0" ref="CHANGE_LOG_LIST"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="QID" type="xs:string"/>
        
      <xs:element name="VULN_TYPE" type="xs:string"/>
        
      <xs:element name="SEVERITY_LEVEL" type="xs:string"/>
        
      <xs:element name="TITLE" type="xs:string"/>
        
      <xs:element name="CATEGORY" type="xs:string"/>
        
      <xs:element name="TECHNOLOGY" type="xs:string"/>
        
      <xs:element name="DETECTION_INFO" type="xs:string"/>
        
      <xs:element name="LAST_CUSTOMIZATION">
        <xs:complexType>
        <xs:sequence>
      <xs:element ref="DATETIME"/>
      <xs:element minOccurs="0" ref="USER_LOGIN"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
            <!-- USER_LOGIN already defined (no USER_LOGIN for OVAL Vulns) -->
      <xs:element name="LAST_SERVICE_MODIFICATION_DATETIME" type="xs:string"/>
      
      <xs:element name="PUBLISHED_DATETIME" type="xs:string"/>
        
      <xs:element name="CODE_MODIFIED_DATETIME" type="xs:string"/>
        
      <xs:element name="BUGTRAQ_LIST">
        <xs:complexType>
        <xs:sequence>
      <xs:element maxOccurs="unbounded" ref="BUGTRAQ"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="BUGTRAQ">
        <xs:complexType>
        <xs:sequence>
      <xs:element ref="ID"/>
      <xs:element ref="URL"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="ID" type="xs:string"/>
        
      <xs:element name="URL" type="xs:string"/>
        
      <xs:element name="PATCHABLE" type="xs:string"/>
        
      <xs:element name="PATCH_PUBLISHED_DATE" type="xs:string"/>
        
      <xs:element name="SOFTWARE_LIST">
        <xs:complexType>
        <xs:sequence>
      <xs:element maxOccurs="unbounded" ref="SOFTWARE"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="SOFTWARE">
        <xs:complexType>
        <xs:sequence>
      <xs:element ref="PRODUCT"/>
      <xs:element ref="VENDOR"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="PRODUCT" type="xs:string"/>
        
      <xs:element name="VENDOR" type="xs:string"/>
        
      <xs:element name="VENDOR_REFERENCE_LIST">
        <xs:complexType>
        <xs:sequence>
      <xs:element maxOccurs="unbounded" ref="VENDOR_REFERENCE"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="VENDOR_REFERENCE">
        <xs:complexType>
        <xs:sequence>
      <xs:element ref="ID"/>
      <xs:element ref="URL"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="CVE_LIST">
        <xs:complexType>
        <xs:sequence>
      <xs:element maxOccurs="unbounded" ref="CVE"/>
        </xs:sequence>
        </xs:complexType>
        </xs:element>
        
      <xs:element name="CVE">
        <xs:complexType>
        <xs:sequence>
      <xs:element ref="ID"/>
      <xs:element ref="URL"/>
        </xs:sequence>
        </xs:complexType>
        </xs:element>
            <!-- ID, URL already defined -->
      <xs:element name="DIAGNOSIS" type="xs:string"/>
        
      <xs:element name="DIAGNOSIS_COMMENT" type="xs:string"/>
        
      <xs:element name="CONSEQUENCE" type="xs:string"/>
        
      <xs:element name="CONSEQUENCE_COMMENT" type="xs:string"/>
        
      <xs:element name="SOLUTION" type="xs:string"/>
        
      <xs:element name="SOLUTION_COMMENT" type="xs:string"/>
        
      <xs:element name="COMPLIANCE_LIST">
        <xs:complexType>
        <xs:sequence>
          <xs:element maxOccurs="unbounded" ref="COMPLIANCE"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="COMPLIANCE">
        <xs:complexType>
        <xs:sequence>
          <xs:element ref="TYPE"/>
          <xs:element ref="SECTION"/>
          <xs:element ref="DESCRIPTION"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="TYPE" type="xs:string"/>
        
      <xs:element name="SECTION" type="xs:string"/>
        
      <xs:element name="DESCRIPTION" type="xs:string"/>
        
      <xs:element name="CORRELATION">
        <xs:complexType>
        <xs:sequence>
          <xs:element minOccurs="0" ref="EXPLOITS"/>
          <xs:element minOccurs="0" ref="MALWARE"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="EXPLOITS">
        <xs:complexType>
        <xs:sequence>
           <xs:element maxOccurs="unbounded" ref="EXPLT_SRC"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>       
        
      <xs:element name="EXPLT_SRC">
        <xs:complexType>
        <xs:sequence>
          <xs:element ref="SRC_NAME"/>
          <xs:element ref="EXPLT_LIST"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="SRC_NAME" type="xs:string"/>
        
      <xs:element name="EXPLT_LIST">
        <xs:complexType>
        <xs:sequence>
          <xs:element maxOccurs="unbounded" ref="EXPLT"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>
        
      <xs:element name="EXPLT">
        <xs:complexType>
        <xs:sequence>
          <xs:element ref="REF"/>
          <xs:element ref="DESC"/>
          <xs:element minOccurs="0" ref="LINK"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="REF" type="xs:string"/>

      <xs:element name="DESC" type="xs:string"/>

      <xs:element name="LINK" type="xs:string"/>

      <xs:element name="MALWARE">
        <xs:complexType>
        <xs:sequence>
          <xs:element maxOccurs="unbounded" ref="MW_SRC"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="MW_SRC">
        <xs:complexType>
        <xs:sequence>
          <xs:element ref="SRC_NAME"/>
          <xs:element ref="MW_LIST"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="MW_LIST">
        <xs:complexType>
        <xs:sequence>
          <xs:element maxOccurs="unbounded" ref="MW_INFO"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="MW_INFO">
        <xs:complexType>
        <xs:sequence>
          <xs:element ref="MW_ID"/>
          <xs:element minOccurs="0" ref="MW_TYPE"/>
          <xs:element minOccurs="0" ref="MW_PLATFORM"/>
          <xs:element minOccurs="0" ref="MW_ALIAS"/>
          <xs:element minOccurs="0" ref="MW_RATING"/>
          <xs:element minOccurs="0" ref="MW_LINK"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="MW_ID" type="xs:string"/>

      <xs:element name="MW_TYPE" type="xs:string"/>

      <xs:element name="MW_PLATFORM" type="xs:string"/>

      <xs:element name="MW_ALIAS" type="xs:string"/>

      <xs:element name="MW_RATING" type="xs:string"/>

      <xs:element name="MW_LINK" type="xs:string"/>

      <xs:element name="CVSS">
        <xs:complexType>
        <xs:sequence>
          <xs:element minOccurs="0" ref="BASE"/>
          <xs:element minOccurs="0" ref="TEMPORAL"/>
          <xs:element minOccurs="0" ref="VECTOR_STRING"/>
          <xs:element minOccurs="0" ref="ACCESS"/>
          <xs:element minOccurs="0" ref="IMPACT"/>
          <xs:element minOccurs="0" ref="AUTHENTICATION"/>
          <xs:element minOccurs="0" ref="EXPLOITABILITY"/>
          <xs:element minOccurs="0" ref="REMEDIATION_LEVEL"/>
          <xs:element minOccurs="0" ref="REPORT_CONFIDENCE"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="BASE">
        <xs:complexType mixed="true">
          <xs:attribute name="source"/>
        </xs:complexType>
      </xs:element>

      <xs:element name="TEMPORAL" type="xs:string"/>

      <xs:element name="VECTOR_STRING" type="xs:string"/>

      <xs:element name="CVSS3_VERSION" type="xs:string"/>

      <xs:element name="ACCESS">
        <xs:complexType>
        <xs:sequence>
          <xs:element minOccurs="0" ref="VECTOR"/>
          <xs:element minOccurs="0" ref="COMPLEXITY"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="VECTOR" type="xs:string"/>

      <xs:element name="COMPLEXITY" type="xs:string"/>

      <xs:element name="IMPACT">
        <xs:complexType>
        <xs:sequence>
          <xs:element minOccurs="0" ref="CONFIDENTIALITY"/>
          <xs:element minOccurs="0" ref="INTEGRITY"/>
          <xs:element minOccurs="0" ref="AVAILABILITY"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="CONFIDENTIALITY" type="xs:string"/>

      <xs:element name="INTEGRITY" type="xs:string"/>

      <xs:element name="AVAILABILITY" type="xs:string"/>

      <xs:element name="AUTHENTICATION" type="xs:string"/>

      <xs:element name="EXPLOITABILITY" type="xs:string"/>

      <xs:element name="REMEDIATION_LEVEL" type="xs:string"/>

      <xs:element name="REPORT_CONFIDENCE" type="xs:string"/>

      <xs:element name="CVSS_V3">
        <xs:complexType>
        <xs:sequence>
          <xs:element minOccurs="0" ref="BASE"/>
          <xs:element minOccurs="0" ref="TEMPORAL"/>
          <xs:element minOccurs="0" ref="VECTOR_STRING"/>
          <xs:element minOccurs="0" ref="CVSS3_VERSION"/>
          <xs:element minOccurs="0" ref="ATTACK"/>
          <xs:element minOccurs="0" ref="IMPACT"/>
          <xs:element minOccurs="0" ref="PRIVILEGES_REQUIRED"/>
          <xs:element minOccurs="0" ref="USER_INTERACTION"/>
          <xs:element minOccurs="0" ref="SCOPE"/>
          <xs:element minOccurs="0" ref="EXPLOIT_CODE_MATURITY"/>
          <xs:element minOccurs="0" ref="REMEDIATION_LEVEL"/>
          <xs:element minOccurs="0" ref="REPORT_CONFIDENCE"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="ATTACK">
        <xs:complexType>
        <xs:sequence>
          <xs:element minOccurs="0" ref="VECTOR"/>
          <xs:element minOccurs="0" ref="COMPLEXITY"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="PRIVILEGES_REQUIRED" type="xs:string"/>

      <xs:element name="USER_INTERACTION" type="xs:string"/>

      <xs:element name="SCOPE" type="xs:string"/>

      <xs:element name="EXPLOIT_CODE_MATURITY" type="xs:string"/>

      <xs:element name="PCI_FLAG" type="xs:string"/>

      <xs:element name="AUTOMATIC_PCI_FAIL" type="xs:string"/>

      <xs:element name="PCI_REASONS">
        <xs:complexType>
        <xs:sequence>
          <xs:element maxOccurs="unbounded" ref="PCI_REASON"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="PCI_REASON" type="xs:string"/>

      <xs:element name="THREAT_INTELLIGENCE">
        <xs:complexType>
        <xs:sequence>
          <xs:element maxOccurs="unbounded" ref="THREAT_INTEL"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="THREAT_INTEL">
        <xs:complexType mixed="true">
          <xs:attribute name="id" use="required"/>
        </xs:complexType>
      </xs:element>

      <xs:element name="SUPPORTED_MODULES" type="xs:string"/>

      <xs:element name="DISCOVERY">
        <xs:complexType>
        <xs:sequence>
          <xs:element ref="REMOTE"/>
          <xs:element minOccurs="0" ref="AUTH_TYPE_LIST"/>
          <xs:element minOccurs="0" ref="ADDITIONAL_INFO"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="REMOTE" type="xs:string"/>

      <xs:element name="AUTH_TYPE_LIST">
        <xs:complexType>
        <xs:sequence>
          <xs:element maxOccurs="unbounded" ref="AUTH_TYPE"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="AUTH_TYPE" type="xs:string"/>

      <xs:element name="ADDITIONAL_INFO" type="xs:string"/>

      <xs:element name="IS_DISABLED" type="xs:string"/>

      <xs:element name="CHANGE_LOG_LIST">
        <xs:complexType>
        <xs:sequence>
          <xs:element maxOccurs="unbounded" ref="CHANGE_LOG_INFO"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="CHANGE_LOG_INFO">
        <xs:complexType>
        <xs:sequence>
          <xs:element ref="CHANGE_DATE"/>
          <xs:element ref="COMMENTS"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="CHANGE_DATE" type="xs:string"/>

      <xs:element name="COMMENTS" type="xs:string"/>

      <xs:element name="ID_SET">
      <xs:complexType>
          <xs:choice maxOccurs="unbounded">
      <xs:element ref="ID"/>
      <xs:element ref="ID_RANGE"/>
          </xs:choice>
      </xs:complexType>
      </xs:element>
            <!-- ID already defined -->
      <xs:element name="ID_RANGE" type="xs:string"/>

      <xs:element name="WARNING">
        <xs:complexType>
        <xs:sequence>
          <xs:element minOccurs="0" ref="CODE"/>
          <xs:element ref="TEXT"/>
          <xs:element minOccurs="0" ref="URL"/>
        </xs:sequence>
        </xs:complexType>
      </xs:element>

      <xs:element name="CODE" type="xs:string"/>

      <xs:element name="TEXT" type="xs:string"/>

    </xs:schema>
