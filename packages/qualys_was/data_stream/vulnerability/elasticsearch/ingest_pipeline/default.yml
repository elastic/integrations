---
description: Pipeline for processing Tenable Vulnerability Management vulnerability logs.
processors:
  - terminate:
      tag: data_collection_error
      if: ctx.error?.message != null && ctx.message == null && ctx.event?.original == null
  - rename:
      field: message
      target_field: event.original
      if: ctx.event?.original == null
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message.'
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - remove:
      field: message
      ignore_missing: true
      if: ctx.event?.original != null
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
  - set:
      if: ctx['@timestamp'] != null
      field: event.created
      copy_from: '@timestamp'
  - json:
      field: event.original
      target_field: json
  - set:
      field: ecs.version
      value: '8.16.0'
  - terminate:
      tag: data_collection_error
      if: ctx.error?.message != null && ctx.message == null && ctx.event?.original == null
      description: error message set and no data to process.
  - set:
      field: event.kind
      tag: set_event_kind_1
      value: event
  - set:
      field: event.category
      value: [vulnerability]
  - set:
      field: event.type
      value: [info]
  - set:
      field: vulnerability.classification
      value: CVSS
  - set:
      field: vulnerability.enumeration
      value: CWE
  - set:
      field: vulnerability.category
      value: [Web Application]
  - set:
      field: vulnerability.scanner.vendor
      value: Qualys
  - json:
      field: event.original
      target_field: json
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.Finding.detection
      tag: rename_detection
      target_field: json.detection
  - rename:
      field: json.detection.url
      tag: rename_full_url
      target_field: url.full
      ignore_missing: true
  - rename:
      field: json.detection.name
      tag: rename_vul_name
      target_field: qualys_was.vulnerability.name
  - rename:
      field: json.detection.id
      tag: rename_vul_id
      target_field: qualys_was.vulnerability.id
  - rename:
      field: json.detection.qid
      tag: rename_vul_qid
      target_field: qualys_was.vulnerability.qid
  - script:
      if: ctx.qualys_was?.vulnerability?.id != null
      tag: vul_id_is_long
      lang: painless
      source: >
        if (ctx.qualys_was.vulnerability.id instanceof String) {
          ctx.qualys_was.vulnerability.id = Long.parseLong(ctx.qualys_was.vulnerability.id);
        } else {
          ctx.qualys_was.vulnerability.id = (long)ctx.qualys_was.vulnerability.id;
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - script:
      if: ctx.qualys_was?.vulnerability?.qid != null
      tag: vul_id_is_long
      lang: painless
      source: >
        if (ctx.qualys_was.vulnerability.qid instanceof String) {
          ctx.qualys_was.vulnerability.qid = Long.parseLong(ctx.qualys_was.vulnerability.qid);
        } else {
          ctx.qualys_was.vulnerability.qid = (long)ctx.qualys_was.vulnerability.qid;
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.detection.severity
      tag: rename_severity
      target_field: vulnerability.severity
      ignore_missing: true
  - date:
      field: json.detection.lastDetectedDate
      tag: rename_lastDetectedDate
      formats:
        - ISO8601
      target_field: qualys_was.vulnerability.last_found_datetime
      if: ctx.json?.detection?.lastDetectedDate != null && ctx.json.detection.lastDetectedDate != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: json.detection.firstDetectedDate
      tag: rename_firstDetectedDate
      formats:
        - ISO8601
      target_field: qualys_was.vulnerability.first_found_datetime
      if: ctx.json?.detection?.firstDetectedDate != null && ctx.json.detection.firstDetectedDate != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: json.detection.lastTestedDate
      tag: rename_lastTestedDate
      formats:
        - ISO8601
      target_field: qualys_was.vulnerability.last_test_datetime
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: json.detection.updatedDate
      tag: rename_updatedDate
      formats:
        - ISO8601
      target_field: qualys_was.vulnerability.updated_datetime
      if: ctx.json?.detection?.updatedDate != null && ctx.json.detection.updatedDate != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: json.detection.fixedDate
      tag: rename_fixedDate
      formats:
        - ISO8601
      target_field: qualys_was.vulnerability.fixed_datetime
      if: ctx.json?.detection?.fixedDate != null && ctx.json.detection.fixedDate != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: '@timestamp'
      tag: set_event_ingest_to_timestamp
      target_field: event.ingested
      ignore_missing: true
  - set:
      field: '@timestamp'
      tag: set_timestamp_last_test_datetime
      copy_from: qualys_was.vulnerability.last_test_datetime
  - rename:
      field: json.detection.potential
      tag: rename_potential
      target_field:  qualys_was.vulnerability.potential
      ignore_missing: true
  - rename:
      field: json.detection.param
      tag: rename_param
      target_field:  qualys_was.vulnerability.param
      ignore_missing: true
  - script:
      if: ctx.json?.detection?.detectionScore != null
      lang: painless
      source: >
        if (ctx.json.detection.detectionScore instanceof String) {
          ctx.qualys_was.vulnerability.detection_score = Long.parseLong(ctx.json.detection.detectionScore);
        } else {
          ctx.qualys_was.vulnerability.detection_score = (long)ctx.json.detection.detectionScore;
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - script:
      if: ctx.json?.detection?.timesDetected != null
      lang: painless
      source: >
        if (ctx.json.detection.timesDetected instanceof String) {
          ctx.qualys_was.vulnerability.times_detected = Long.parseLong(ctx.json.detection.timesDetected);
        } else {
          ctx.qualys_was.vulnerability.times_detected = (long)ctx.json.detection.timesDetected;
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.detection.webApp.name
      tag: rename_webApp_name
      target_field:  qualys_was.vulnerability.web_app.name
      ignore_missing: true
  - rename:
      field: json.detection.webApp.url
      tag: rename_webApp_url
      target_field:  qualys_was.vulnerability.web_app.url
      ignore_missing: true
  - rename:
      field: json.detection.webApp.id
      tag: rename_webApp_url
      target_field:  qualys_was.vulnerability.web_app.id
      ignore_missing: true
  - script:
      if: ctx.qualys_was?.vulnerability?.web_app?.id != null
      lang: painless
      source: >
        if (ctx.qualys_was.vulnerability.web_app.id instanceof String) {
          ctx.qualys_was.vulnerability.web_app.id = Long.parseLong(ctx.qualys_was.vulnerability.web_app.id);
        } else {
          ctx.qualys_was.vulnerability.web_app.id = (long)ctx.qualys_was.vulnerability.web_app.id;
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - script:
      tag: add_web_app_tags
      description: 'Add web app tags'
      if: ctx.json?.detection?.webApp?.tags?.list != null && ctx.json.detection.webApp.tags.list.size() > 0
      lang: painless
      source: >
        def tagsList = new ArrayList();
        for (tag in ctx.json.detection.webApp.tags.list) {
          if (tag.Tag?.id != null) {
            if (tag.Tag.id instanceof String) {
              tag.Tag.id = Long.parseLong(tag.Tag.id);
            } else {
              tag.Tag.id = (long)tag.Tag.id;
            }
           }     
           tagsList.add(tag.Tag);        
        }
        ctx.qualys_was.vulnerability.web_app.tags = tagsList;
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.detection.type
      tag: rename_type
      target_field:  qualys_was.vulnerability.type
  - rename:
      field: json.detection.status
      tag: rename_status
      target_field: qualys_was.vulnerability.status
      ignore_missing: true
  - rename:
      field: json.detection.uniqueId
      tag: rename_uniqueID
      target_field: qualys_was.vulnerability.unique_vuln_id
  - rename:
      field: json.detection.isIgnored
      tag: rename_isIgnored
      target_field: qualys_was.vulnerability.is_ignored
      ignore_missing: true
  - rename:
      field: json.detection.ignoredBy.name
      tag: rename_ignoredBy_name
      target_field: qualys_was.vulnerability.ignoredBy.name
      ignore_missing: true
  - rename:
      field: json.detection.ignoredBy.username
      tag: rename_ignoredBy_username
      target_field: qualys_was.vulnerability.ignoredBy.username
      ignore_missing: true
  - rename:
      field: json.detection.ignoredBy.id
      tag: rename_ignoredBy_id
      target_field: qualys_was.vulnerability.ignoredBy.id
      ignore_missing: true
  - script:
      if: ctx.qualys_was?.vulnerability?.ignoredBy?.id != null && ctx.qualys_was.vulnerability.ignoredBy.id != ""
      lang: painless
      source: >
        if (ctx.qualys_was.vulnerability.ignoredBy.id instanceof String) {
          ctx.qualys_was.vulnerability.ignoredBy.id = Long.parseLong(ctx.qualys_was.vulnerability.ignoredBy.id);
        } else {
          ctx.qualys_was.vulnerability.ignoredBy.id = (long)ctx.qualys_was.vulnerability.ignoredBy.id;
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.detection.ignoredComment
      tag: rename_ignoredComment
      target_field: qualys_was.vulnerability.ignoredBy.comment
      ignore_missing: true
  - rename:
      field: json.detection.ignoredReason
      tag: rename_ignoredReason
      target_field: qualys_was.vulnerability.ignoredBy.reason
      ignore_missing: true
  - date:
      field: json.detection.ignoredDate
      tag: rename_lignoredDate
      formats:
        - ISO8601
      target_field: qualys_was.vulnerability.ignoredBy.date
      ignore_failure: true
  - convert:
      field: json.detection.resultList.list
      tag: convert_result_list_to_string
      target_field: qualys_was.vulnerability.result_list_text
      type: string
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

  - rename:
      field: json.detection.cvss3.base
      tag: rename_cvss3_base
      target_field: vulnerability.score.base
      ignore_missing: true
  - rename:
      field: json.detection.cvss3.temporal
      tag: rename_cvss3_temporal
      target_field: vulnerability.score.temporal
      ignore_missing: true
  - script:
      tag: append_cwe_ids
      description: 'Append cwe ids to vulnerability.id'
      if: ctx.json?.detection?.cwe?.list != null && ctx.json.detection.cwe.list.size() > 0
      lang: painless
      source: >
        ctx.vulnerability.id = new ArrayList();
        for (cwe in ctx.json.detection.cwe.list) {
          if (cwe instanceof String) {
            ctx.vulnerability.id.add(cwe);
          } else {
            ctx.vulnerability.id.add(((long)cwe).toString());
          } 
          
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - script:
      tag: create_wasc_references
      description: 'Create list of wasc references'
      if: ctx.json?.detection?.wasc?.list != null && ctx.json.detection.wasc.list.size() > 0
      lang: painless
      source: >
        def wascList = new ArrayList();
        for (wasc in ctx.json.detection.wasc.list) {
          if (wasc.WASC?.code != null) {
            if (wasc.WASC.code instanceof String) {
              wasc.WASC.code = Long.parseLong(wasc.WASC.code);
            } else {
              wasc.WASC.code = (long)wasc.WASC.code;
            }
           }     
           wascList.add(wasc.WASC);        
        }
        ctx.qualys_was.vulnerability.wasc_references = wascList;
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - script:
      description: 'Create list of owasp references'
      if: ctx.json?.detection?.owasp?.list != null && ctx.json?.detection?.owasp?.list.size() > 0
      lang: painless
      source: >
        def owaspList = new ArrayList();
        for (owasp in ctx.json.detection.owasp.list) {
          if (owasp.OWASP?.code != null) {
            if (owasp.OWASP.code instanceof String) {
              owasp.OWASP.code = Long.parseLong(owasp.OWASP.code);
            } else {
              owasp.OWASP.code = (long)owasp.OWASP.code;
            }
          }
          owaspList.add(owasp.OWASP);
        }
        ctx.qualys_was.vulnerability.owasp_references = owaspList;
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - remove:
      field: json.detection
      tag: remove_unused_fields
      ignore_missing: true

  # Handle knowledge_base
  - append:
      field: error.message
      if: ctx.json?.Finding.knowledge_base == null || ctx.json.Finding.knowledge_base.size() == 0
      value: 'Qualys QID not found in the Knowledge Base'
  - pipeline:
      name: '{{ IngestPipeline "pipeline_knowledge_base" }}'
      if: ctx.json?.Finding?.knowledge_base != null && ctx.json.Finding.knowledge_base.size() > 0
      tag: pipeline_knowledge_base
      ignore_missing_pipeline: true
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      ignore_failure: true
  - pipeline:
      name: '{{ IngestPipeline "pipeline_knowledge_base" }}'
      if: ctx.Finding != null && ctx.Finding.knowledge_base != null && ctx.Finding.knowledge_base.size() > 0
      tag: pipeline_knowledge_base
      ignore_missing_pipeline: true
  - append:
      field: event.kind
      value: pipeline_error
      tag: append_pipeline_error_to_event_kind
      description: Append pipeline_error for non-terminal errors
      if: ctx.error?.message != null
      allow_duplicates: false
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
      if: ctx.error?.message != null
      description: 'Keep copy of original event if there are errors'
on_failure:
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}}
        in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      value: pipeline_error
      tag: set_pipeline_error_to_event_kind
      description: 'Overwrite event.kind with pipeline_error for terminal failure'
      if: ctx.error?.message != null
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
      if: ctx.error?.message != null
      description: 'Keep copy of original event if there are errors'
