---
description: Pipeline for processing Azure Function logs.
processors:
  - set:
      field: ecs.version
      value: '8.5.0'
  - set:
      field: event.kind
      value: event
  - set:
      field: event.category
      value: [network]
  - set:
      field: event.type
      value: [connection]
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: 'ctx.event?.original == null'
      description: 'Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.'
  - remove:
      field: message
      ignore_missing: true
      if: 'ctx.event?.original != null'
      description: 'The `message` field is no longer required if the document has an `event.original` field.'
    
    # Converts the JSON string in the event.original field into a structured JSON object
  - json:
      field: event.original
      target_field: json
      ignore_failure: true
  - date:
      field: json.time
      target_field: '@timestamp'
      ignore_failure: true
      formats:
        - ISO8601
      if: ctx.json?.time != null
  - rename:
      field: json.timeStamp
      target_field: json.timestamp
      if: ctx.json?.timeStamp != null
      ignore_failure: true
      ignore_missing: true
  - date:
      field: json.timestamp
      target_field: '@timestamp'
      ignore_failure: true
      formats:
        - ISO8601
      if: ctx.json?.timestamp != null
  - set:
      field: network.protocol
      value: http
  - script:
      lang: painless
      if: ctx.event?.duration != null
      params:
        MS_TO_NS: 1000000
      source: >-
        ctx.event.duration *= params.MS_TO_NS;
  - append:
      if: ctx?.source?.ip != null
      field: related.ip
      value: "{{source.ip}}"
      allow_duplicates: false
      ignore_failure: true
  - append:
      if: ctx?.destination?.domain != null
      field: related.hosts
      value: "{{destination.domain}}"
      allow_duplicates: false
      ignore_failure: true
  - append:
      if: ctx?.url?.domain != null
      field: related.hosts
      value: "{{url.domain}}"
      allow_duplicates: false
      ignore_failure: true
  - rename:
      field: json.category
      target_field: azure.functions.category
      ignore_missing: true
  - rename:
      field: json.operationName
      target_field: azure.functions.operation_name
      ignore_missing: true
  - rename:
      field: json.properties.level
      target_field: azure.functions.level
      ignore_missing: true
  - rename:
      field: json.properties.appName
      target_field: azure.functions.app_name
      ignore_missing: true
  - rename:
      field: json.properties.roleInstance
      target_field: azure.functions.role_instance
      ignore_missing: true
  - rename:
      field: json.properties.hostVersion
      target_field: azure.functions.host_version
      ignore_missing: true
  - rename:
      field: json.properties.functionInvocationId
      target_field: azure.functions.function_invocation_id
      ignore_missing: true
  - rename:
      field: json.properties.functionName
      target_field: azure.functions.function_name
      ignore_missing: true
  - rename:
      field: json.properties.hostInstanceId
      target_field: azure.functions.host_instance_id
      ignore_missing: true
  - rename:
      field: json.properties.levelId
      target_field: azure.functions.level_id
      ignore_missing: true
  - rename:
      field: json.properties.processId
      target_field: azure.functions.process_id
      ignore_missing: true
  - rename:
      field: json.properties.eventName
      target_field: event.action
      ignore_missing: true      
  - rename:
      field: json.properties.eventID
      target_field: event.code
      ignore_missing: true      
  - set:
      field: json.event.alert.action
      value: denied
      if: ctx.azure?.firewall?.action == 'Deny'
  - set:
      field: json.event.alert.action
      value: allowed
      if: ctx.azure?.firewall?.action == 'Allow'
  - append:
      field: event.type
      value: "allowed"
      if: 'ctx.event?.action != null && ["Allowed","Matched","Detected"].contains(ctx.event.action)'
  - append:
      field: event.type
      value: "denied"
      if: 'ctx.event?.action != null && ["Blocked"].contains(ctx.event.action)'
  - rename:
      field: json.properties.message
      target_field: message
      ignore_missing: true
  - set:
      field: observer.type
      value: functions
  - set:
      field: observer.vendor
      value: Azure
  - set:
      field: observer.product
      value: "Azure Functions"
  - remove:
      field:
        - json
      ignore_missing: true
  - pipeline:
      name: '{{ IngestPipeline "azure-shared-pipeline" }}'
  - set:
      field: error.message
      copy_from: json.properties.exceptionMessage
      ignore_empty_value: true
  - set:
      field: error.stack_trace
      copy_from: json.properties.exceptionDetails
      ignore_empty_value: true
  - remove:
      field: event.original
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_failure: true
      ignore_missing: true
  - script:
      description: Drops null/empty values recursively.
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);
on_failure:
  - append:
      field: "error.message"
      value: "{{ _ingest.on_failure_message }} {{ _ingest.on_failure_processor_type }}"
  - remove:
      field:
        - json
        - _conf
        - message
      ignore_missing: true
