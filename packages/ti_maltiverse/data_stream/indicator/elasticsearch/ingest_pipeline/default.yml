---
description: Pipeline for processing Maltiverse Indicators
processors:
  - set:
      field: ecs.version
      value: '8.7.0'
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - json:
      field: event.original
      target_field: json
      ignore_failure: true
  - set:
      field: event.kind
      value: enrichment
  - append:
      field: event.category
      value: threat
  - append:
      field: event.type
      value: indicator
# Maltiverse specific
  - set:
      field: threat.indicator.marking.tlp
      value: WHITE
# MV to ECS conversion
  - date:
      field: json.blacklist.last_seen
      target_field: "@timestamp"
      formats: ["yyyy-MM-dd HH:mm:ss"]
## Convert types Maltiverse to ECS types
  - set:
      field: threat.indicator.type
      value: ipv4-addr
      if: 'ctx.json?.type == "ip"'
  - set:
      field: threat.indicator.type
      value: domain-name
      if: 'ctx.json?.type == "hostname"'
  - set:
      field: threat.indicator.type
      value: url
      if: 'ctx.json?.type == "url"'
  - set:
      field: threat.indicator.type
      value: file
      if: 'ctx.json?.type == "sample"'
  - foreach:
      field: json.tag
      ignore_missing: true
      processor:
        append:
          field: tags
          value: "{{{ _ingest._value }}}"
      if: 'ctx.json?.tag != null'
  - set:
      field: threat.feed.reference
      value: "https://maltiverse.com/feed/{{ feed }}"
## blacklist fields
  - date:
      field: json.blacklist.first_seen
      target_field: threat.indicator.first_seen
      formats: ["yyyy-MM-dd HH:mm:ss"]
      if: 'ctx.json?.blacklist?.first_seen != null'
  - date:
      field: json.blacklist.last_seen
      target_field: threat.indicator.last_seen
      formats: ["yyyy-MM-dd HH:mm:ss"]
      if: 'ctx.json?.blacklist?.last_seen != null'
  - rename:
      field: json.blacklist.count
      target_field: threat.indicator.sightings
      ignore_missing: true
      if: 'ctx.json?.blacklist?.count != null'
  - rename:
      field: json.blacklist.description
      target_field: threat.indicator.description
      ignore_missing: true
      if: 'ctx.json?.blacklist?.description != null'
  - rename:
      field: json.blacklist.source
      target_field: threat.indicator.provider
      ignore_missing: true
      if: 'ctx.json?.blacklist?.source != null'
## map classification and confidence to ECS severity
  - set:
      field: event.severity
      value: 6
      if: 'ctx.json?.classification == "suspicious"'
  - set:
      field: threat.indicator.confidence
      value: Medium
      if: 'ctx.json?.classification == "suspicious"'
  - set:
      field: event.severity
      value: 9
      if: 'ctx.json?.classification == "malicious"'
  - set:
      field: threat.indicator.confidence
      value: High
      if: 'ctx.json?.classification == "malicious"'
## IP specifics
  - rename:
      field: json.ip_addr
      target_field: threat.indicator.ip
      ignore_missing: true
      if: 'ctx.json?.type == "ip"'
  - set:
      field: threat.indicator.reference
      value: "https://maltiverse.com/ip/{{ threat.indicator.ip }}"
      if: 'ctx.json?.type == "ip"'
## TODO: match the AS regex
  - rename:
      field: json.city
      target_field: threat.indicator.geo.city_name
      ignore_missing: true
      if: 'ctx.json?.type == "ip" && ctx.json?.city != null'
  - rename:
      field: json.country_code
      target_field: threat.indicator.geo.country_iso_code
      ignore_missing: true
      if: 'ctx.json?.type == "ip" && ctx.json?.country_code != null'
  - rename:
      field: json.country_code
      target_field: threat.indicator.geo.country_iso_code
      ignore_missing: true
      if: 'ctx.json?.type == "ip" && ctx.json?.country_code != null'
  # IP geo fields
  - convert:
      field: json.location.lat
      target_field: threat.indicator.geo.location.lat
      type: double
      if: "ctx.json?.location?.lat != null && ctx.json?.location?.lon != null"
      on_failure:
        - append:
            field: error.message
            value: 'Cannot convert lat field "{{{ json.lat }}}" to double'
  - convert:
      field: json.location.lon
      target_field: threat.indicator.geo.location.lon
      type: double
      if: "ctx.json?.location?.lat != null && ctx.json?.location?.lon != null"
      on_failure:
        - append:
            field: error.message
            value: 'Cannot convert lon field "{{{ json.lon }}}" to double'

## hostname fields
  - rename:
      field: json.hostname
      target_field: threat.indicator.url.domain
      ignore_missing: true
      if: 'ctx.json?.type == "hostname"'
  - rename:
      field: json.domain
      target_field: threat.indicator.url.registered_domain
      ignore_missing: true
      if: 'ctx.json?.type == "hostname"'
  - rename:
      field: json.tld
      target_field: threat.indicator.url.top_level_domain
      ignore_missing: true
      if: 'ctx.json?.type == "hostname"'
  - set:
      field: threat.indicator.reference
      value: "https://maltiverse.com/hostname/{{ threat.indicator.url.domain }}"
      if: 'ctx.json?.type == "hostname"'
## TODO: match the AS regex
## URL fields
  - rename:
      field: json.url
      target_field: threat.indicator.url.full
      ignore_missing: true
      if: 'ctx.json?.type == "url"'
  - rename:
      field: json.url
      target_field: threat.indicator.url.original
      ignore_missing: true
      if: 'ctx.json?.type == "url"'
  - rename:
      field: json.tld
      target_field: threat.indicator.url.top_level_domain
      ignore_missing: true
      if: 'ctx.json?.type == "url" && ctx.json?.tld != null'
  - rename:
      field: json.domain
      target_field: threat.indicator.url.registered_domain
      ignore_missing: true
      if: 'ctx.json?.type == "url" && ctx.json?.domain != null'
  - set:
      field: threat.indicator.reference
      value: "https://maltiverse.com/url/{{ json.urlchecksum }}"
      if: 'ctx.json?.type == "url" && ctx.json?.urlchecksum != null'
## Sample fields
  - rename:
      field: json.sha256
      target_field: threat.indicator.file.hash.sha256
      ignore_missing: true
      if: 'ctx.json?.type == "sample"'
  - rename:
      field: json.md5
      target_field: threat.indicator.file.hash.md5
      ignore_missing: true
      if: 'ctx.json?.type == "sample" && ctx.json?.md5 != null'
  - rename:
      field: json.sha512
      target_field: threat.indicator.file.hash.sha512
      ignore_missing: true
      if: 'ctx.json?.type == "sample" && ctx.json?.sha512 != null'
  - rename:
      field: json.filetype
      target_field: threat.indicator.file.type
      ignore_missing: true
      if: 'ctx.json?.type == "sample" && ctx.json?.filetype != null'
  - rename:
      field: json.size
      target_field: threat.indicator.file.size
      ignore_missing: true
      if: 'ctx.json?.type == "sample" && ctx.json?.size != null'
  - set:
      field: threat.indicator.reference
      value: "https://maltiverse.com/sample/{{ threat.indicator.file.hash.sha256 }}"
      if: 'ctx.json?.type == "sample"'

  - remove:
      field: json

# Generate an event ID based on the original event
  - fingerprint:
      target_field: event.id
      fields: ["threat.indicator.last_seen", "threat.indicator.first_seen", "threat.indicator.provider"]
  - set:
      field: _id
      value: "{{ event.id }}"
      if: 'ctx.event?.id != null'

  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true

on_failure:
  - append:
      field: error.message
      value: "{{ _ingest.on_failure_message }}"
  - set:
      field: event.kind
      value: pipeline_error
