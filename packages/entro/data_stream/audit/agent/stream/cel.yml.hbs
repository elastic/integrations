config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  api_token: {{api_token}}
  initial_interval: {{initial_interval}}
resource.headers:
  Accept:
    - application/json
program: |
    // The Entro audit logs API filters data using "from" and "to" date parameters.
    // The API returns a log event with an empty array even if no secrets were exposed,
    // which can result in a large volume of data over time.
    // This program queries the API day-by-day, starting from an "initial_interval" in the past,
    // until the cursor catches up to the current date.
    // Note: The API's date format is dd/mm/yyyy.
    // TODO: Use time.round when kibana.version is ^8.19.0 instead of the format-based
    // tests that are used here.
    state.?cursor.?last_timestamp.orValue(
      now - duration(state.initial_interval)
    ).as(raw_start_value,
      (
        type(raw_start_value) == string ?
          timestamp(raw_start_value)
        :
          raw_start_value
      ).as(start_time,
        state.with(
          request(
            "GET",
            state.url.trim_right("/") + "/v1/scan/auditLogs" + "?" + {
              "from": [start_time.format("02/01/2006")],
              ?"to": (start_time.format("02/01/2006") == now.format("02/01/2006")) ?
                optional.none()
              :
                optional.of([(start_time + duration("24h")).format("02/01/2006")]),
            }.format_query()
          ).with(
            {
              "Header": {
                "Accept": ["application/json"],
                "Authorization": [state.api_token],
              },
            }
          ).do_request().as(resp,
            resp.StatusCode == 200 ?
              resp.Body.decode_json().as(body,
                {
                  "events": body.map(e,
                    (has(e.results.secrets) && e.results.secrets.size() > 0) ?
                      e.results.secrets.map(s,
                        {
                          "date": e.date,
                          "request_id": e.results.request_id,
                          "secret_type": s.secret_type,
                          "exposed_value": s.exposed_value,
                          "line_number": s.line_number,
                        }
                      )
                    :
                      [
                        {
                          "date": e.date,
                          "request_id": e.results.request_id,
                        },
                      ]
                  ).flatten(),
                  "cursor": {
                    "last_timestamp": start_time + (
                      start_time.format("02/01/2006") != now.format("02/01/2006") ?
                        duration("24h")
                      :
                        duration("0")
                    ),
                  },
                  "want_more": start_time.format("02/01/2006") != now.format("02/01/2006"),
                }
              )
            :
              {
                "events": [
                  {
                    "error": {
                      "code": string(resp.StatusCode),
                      "id": string(resp.Status),
                      "message": "GET: " + (
                        (size(resp.Body) != 0) ?
                          string(resp.Body)
                        :
                          string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                      ),
                    },
                  },
                ],
                "want_more": false,
              }
          )
        )
      )
    )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
