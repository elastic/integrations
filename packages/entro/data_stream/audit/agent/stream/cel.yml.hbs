config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
resource.headers:
  Accept:
    - application/json
  Authorization:
    - {{api_token}}
program: |
    (
    has(state.?cursor.last_timestamp)?
      state.cursor.?last_timestamp
    :
      now - duration("2160h")
    ).as(start_time, state.with(
      request("GET", state.url).with({
          "Header": {
            "Accept": ["application/json"],
            "Authorization": ["Bearer foobar"]
          }
        }).do_request().as(resp,
      (resp.StatusCode == 200) ?
        resp.Body.decode_json().as(body, {
          "events": body.map(e,
            has(e.secrets) && e.secrets.size() > 0 ?
              (e.secrets.map(s,
                {
                  "data": {
                    "date": e.date,
                    "request_id": e.request_id,
                    "secret_type": s.secret_type,
                    "exposed_value": s.exposed_value,
                    "line_number": s.line_number,
                    "timestamp": e.timestamp
                  }
                }
              ))
            :
              [{
                "data": {
                  "date": e.date,
                  "request_id": e.request_id,
                  "timestamp": e.timestamp
                }
              }]
          ).flatten(),
          "cursor": { 
            "time_stamp": start_time.format("02/01/2006") == now.format("02/01/2006") ?
              state.cursor.last_timestamp
            :
              (start_time + duration("24h")).format("02/01/2006")
          }
        })
      :
        {
          "events": [{
            "error": {
              "code": string(resp.StatusCode),
              "id": string(resp.Status),
              "message": "GET:"+(
                size(resp.Body) != 0 ?
                  string(resp.Body)
                :
                  string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
              ),
            },
          }],
          "want_more": false,
        }
      )
    ))