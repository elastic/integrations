config_version: 2
interval: {{interval}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
resource.url: {{hostname}}/api/alerts/v7/orgs/{{org_key}}/alerts/_search
state:
    api_key: '{{custom_api_secret_key}}/{{custom_api_id}}'
    want_more: false
    initial_interval: {{initial_interval}}
    rows_per_page: 100
redact:
    fields:
        - api_key
program: |-
  state.with(
  	request("POST", state.url).with(
  		{
  			"Header": {
  				"Content-Type": ["application/json"],
  				"X-Auth-Token": [state.api_key],
  			},
  			"Body": {
  				// The alert data stream has a 60 second delay to ensure that no
  				// occurrences are missed. It is possible that we may have received
  				// an event that is after this delay for the next evaluation. This
  				// would result in an inverted time range. So clamp the range start
  				// to the last event we received.
  				// See https://developer.carbonblack.com/reference/carbon-black-cloud/guides/alert-bulk-export/
  				"time_range": (now - duration("60s")).as(delayed, {
  					"start": timestamp(state.?cursor.last_backend_update_timestamp.orValue(delayed - duration(state.initial_interval))),
  					"end": delayed,
  				}).as(range, {
  					"start": string(range.start < range.end ? range.start : range.end),
  					"end": string(range.end),
  				}),
          "rows": state.rows_per_page,
  				"sort": [{"field": "backend_update_timestamp", "order": "ASC"}],
  			}.encode_json(),
  		}
  	).do_request().as(resp, (resp.StatusCode == 200) ?
  		bytes(resp.Body).decode_json().as(body,
  			{
  				"events": body.results.map(e,
  					{
  						"message": e.encode_json(),
  					}
  				),
  				"cursor": {
  					?"last_backend_update_timestamp": (has(body.results) && body.results.size() > 0) ?
  						optional.of(
  							body.results.map(e, e.backend_update_timestamp).max().as(last_update,
  								!has(state.?cursor.last_backend_update_timestamp) ?
  									last_update
  								: (last_update < state.cursor.last_backend_update_timestamp) ?
  									state.cursor.last_backend_update_timestamp
  								:
  									last_update
  							)
  						)
  					:
  						state.?cursor.last_backend_update_timestamp,
  				},
  				"want_more": body.num_found > state.rows_per_page,
  			}
  		)
  	:
  		{
  			"events": {
  				"error": {
  					"code": string(resp.StatusCode),
  					"id": string(resp.Status),
  					"message": "POST:" +
  					(
  						(size(resp.Body) != 0) ?
  							string(resp.Body)
  						:
  							string(resp.Status) + " (" + string(resp.StatusCode) + ")"
  					),
  				},
  			},
  			"want_more": false,
  		}
  	)
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
