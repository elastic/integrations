config_version: 2
interval: {{interval}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/httpjson/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url }}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
resource.url: {{hostname}}/vulnerability/assessment/api/v1/orgs/{{org_key}}/devices/vulnerabilities/summary/_search
state:
    api_key: '{{custom_api_secret_key}}/{{custom_api_id}}'
    want_more: false
redact:
    fields:
        - api_key
program: |
    request("POST", state.url).with({
        "Header":{
            "Content-Type": ["application/json"],
            "X-Auth-Token": [state.api_key],
        },
        "Body":{
            "start": state.?cursor.processed_num_rows.orValue(0),
            "rows": 1000,
        }.encode_json(),
    }).do_request().as(resp, bytes(resp.Body).decode_json().as(body, {
        "events": body.results.map(e, {
            "message": e.encode_json(),
        }),
        "cursor": {
            ?"processed_num_rows": (
                has(body.results) && body.results.size() >= 1000 ?
                    optional.of(state.?cursor.processed_num_rows.orValue(0) + 1000)
                :
                    state.?cursor.processed_num_rows
            )
        },
        "want_more": has(body.results) && body.results.size() >= 1000,
        "api_key": state.api_key,
    }))
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
