config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
auth.oauth2:
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{token_url}}
  endpoint_params:
    grant_type: client_credentials
    audience: wiz-api
state:
  initial_interval: {{initial_interval}}
  want_more: false
  batch_size: {{batch_size}}
  query: >-
    query AuditLogTable($first: Int $after: String $filterBy: AuditLogEntryFilters){
       auditLogEntries(first: $first after: $after filterBy: $filterBy) {
         nodes {
           id
           action
           requestId
           status
           timestamp
           actionParameters
           userAgent
           sourceIP
           serviceAccount {
             id
             name
           }
           user {
             id
             name
           }
         }
         pageInfo {
           hasNextPage
           endCursor
         }
       }
     }
program: |
  state.with(
    post_request(
      state.url.trim_right("/") + "/graphql",
      "application/json",
      {
        "query": state.query,
        "variables": {
          "first": state.batch_size,
          "after": state.?end_cursor.value.orValue(null),
          "filterBy": {
            "timestamp": {
              "after": state.want_more ?
                  state.?cursor.first_timestamp.orValue(null)
                :
                  state.?cursor.last_timestamp.orValue(string(now() - duration(state.initial_interval)))
            }
          }
        }
      }.encode_json()
    ).do_request().as(resp, resp.StatusCode == 200 ?
        bytes(resp.Body).decode_json().as(body, {
          "events": body.data.auditLogEntries.nodes.map(e, {
            "message": e.encode_json(),
          }),
          "cursor": {
            ?"last_timestamp": has(body.data.auditLogEntries.nodes) && body.data.auditLogEntries.nodes.size() > 0 ?
                optional.of(body.data.auditLogEntries.nodes.map(e, timestamp(e.timestamp)).max().as(last,
                  has(state.?cursor.last_timestamp) && last < timestamp(state.cursor.last_timestamp) ?
                    state.cursor.last_timestamp
                  :
                    string(last)
                ))
              :
                state.?cursor.last_timestamp,
            ?"first_timestamp": !has(body.data) || state.?cursor.first_timestamp.orValue(null) == null ?
                optional.of(string(now() - duration(state.initial_interval)))
              : body.data.auditLogEntries.pageInfo.hasNextPage ?
                state.?cursor.first_timestamp
              :
                state.?cursor.last_timestamp,
          },
          "end_cursor": {
            ?"value": body.?data.auditLogEntries.pageInfo.hasNextPage.orValue(false) ?
                body.?data.auditLogEntries.pageInfo.endCursor
              :
                optional.none()
          },
          "want_more": body.?data.auditLogEntries.pageInfo.hasNextPage.orValue(false),
        })
      :
        {
          "events": [{
            "error": {
              "code": string(resp.StatusCode),
              "id": string(resp.Status),
              "message": "POST:"+string(resp.Body)
            },
          }],
          "want_more": false,
        }
    )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
