config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
auth.oauth2:
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{token_url}}
  endpoint_params:
    grant_type: client_credentials
    audience: wiz-api
state:
  initial_interval: {{initial_interval}}
  want_more: false
  batch_size: {{batch_size}}
  query: >-
    query IssuesTable($filterBy: IssueFilters $first: Int $after: String $orderBy: IssueOrder){
       issues:issuesV2(filterBy: $filterBy first: $first after: $after orderBy: $orderBy) {
         nodes {
           id
           sourceRule{
             __typename
             ... on Control {
               id
               name
               controlDescription: description
               resolutionRecommendation
               securitySubCategories {
                 title
                 category {
                   name
                   framework {
                     name
                   }
                 }
               }
             }
             ... on CloudEventRule{
               id
               name
               cloudEventRuleDescription: description
               sourceType
               type
             }
             ... on CloudConfigurationRule{
               id
               name
               cloudConfigurationRuleDescription: description
               remediationInstructions
               serviceType
             }
           }
           createdAt
           updatedAt
           dueAt
           resolvedAt
           statusChangedAt
           projects {
             id
             name
             slug
             businessUnit
             riskProfile {
               businessImpact
             }
           }
           status
           severity
           entitySnapshot {
             id
             type
             nativeType
             name
             status
             cloudPlatform
             cloudProviderURL
             providerId
             region
             resourceGroupExternalId
             subscriptionExternalId
             subscriptionName
             subscriptionTags
             tags
             externalId
           }
           serviceTickets {
             externalId
             name
             url
           }
           notes {
             createdAt
             updatedAt
             text
             user {
               name
               email
             }
             serviceAccount {
               name
             }
           }
         }
         pageInfo {
           hasNextPage
           endCursor
         }
       }
     }
program: |
  post_request(
    state.url + "/graphql",
    "application/json",
    {
      "query": state.query,
      "variables": {
          "first": state.batch_size,
          "after": (has(state.end_cursor) && has(state.end_cursor.value) && state.end_cursor.value != null ? state.end_cursor.value : null),
          "filterBy": {
            "statusChangedAt": {
                "after":
                (
                    has(state.want_more) && !state.want_more
                    ?
                     (
                         has(state.cursor) && has(state.cursor.last_timestamp) && state.cursor.last_timestamp != null
                         ?
                         state.cursor.last_timestamp
                         :
                         (now() - duration(state.initial_interval)).format(time_layout.RFC3339)
                     )
                    :
                     (
                       has(state.cursor) && has(state.cursor.first_timestamp) && state.cursor.first_timestamp != null
                       ?
                       state.cursor.first_timestamp
                       :
                       null
                     )
                ) }
                }
            }
      }.encode_json()
    ).do_request().as(resp, bytes(resp.Body).decode_json().as(body, {
   "events": body.data.issues.nodes.map(e, {
   "message": e.encode_json(),
   }),
    "cursor": {
      "last_timestamp": (
        has(body.data.issues.nodes) && body.data.issues.nodes.size() > 0
        ?
         (
          has(state.cursor) && has(state.cursor.last_timestamp) && body.data.issues.nodes.map(e, e.statusChangedAt).max() < state.cursor.last_timestamp
          ?
          state.cursor.last_timestamp
          :
          body.data.issues.nodes.map(e, e.statusChangedAt).max()
          )
        :
          (
          has(state.cursor) && has(state.cursor.last_timestamp)
          ?
          state.cursor.last_timestamp
          :
          null
          )
        ),
        "first_timestamp": (
           has(state.cursor) && has(state.cursor.first_timestamp) && has(body.data) && state.cursor.first_timestamp != null
            ?
            ( body.data.issues.pageInfo.hasNextPage ? state.cursor.first_timestamp : state.cursor.last_timestamp )
            :
            (now() - duration(state.initial_interval)).format(time_layout.RFC3339)
        ),
      },
    "end_cursor": {
      "value": (
      has(body.data) && has(body.data.issues) && has(body.data.issues.pageInfo) && has(body.data.issues.pageInfo.hasNextPage) && body.data.issues.pageInfo.hasNextPage
       ?
       body.data.issues.pageInfo.endCursor
       :
       null
       )
      },
    "query": state.query,
    "url": state.url,
    "want_more": body.data.issues.pageInfo.hasNextPage,
    "batch_size": state.batch_size,
    }))
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
