---
description: Pipeline for setting the categorization fields
processors:
  - set:
      field: event.kind
      value: event
  # Events related to access list activity.
  - set:
      field: event.category
      value: ['configuration', 'iam']
      if: 'ctx.event.code.startsWith("access_list.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "access_list.create"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "access_list.delete"'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "access_list.member.create"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "access_list.member.delete"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "access_list.member.delete_all_members"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "access_list.member.update"'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "access_list.review"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "access_list.update"'
  # Events related to access requests.
  - set:
      field: event.category
      value: ['session', 'iam']
      if: 'ctx.event.code.startsWith("access_request.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "access_request.create"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "access_request.delete"'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "access_request.review"'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "access_request.search"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "access_request.update"'
  # Events related to application activity.
  - set:
      field: event.category
      value: ['process', 'configuration']
      if: 'ctx.event.code.startsWith("app.") && !ctx.event.code.startsWith("app.session.")'
  - set:
      field: event.category
      value: ['session']
      if: 'ctx.event.code.startsWith("app.session.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "app.create"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "app.delete"'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "app.session.chunk" || ctx.event.code == "app.session.dynamodb.request"'
  - set:
      field: event.type
      value: ['end']
      if: 'ctx.event.code == "app.session.end"'
  - set:
      field: event.type
      value: ['start']
      if: 'ctx.event.code == "app.session.start"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "app.update"'
  # Events related to authentication.
  - set:
      field: event.category
      value: ['authentication']
      if: 'ctx.event.code.startsWith("auth")'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "auth"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "auth_preference.update"'
  # Events related to billing information.
  - set:
      field: event.category
      value: ['configuration', 'iam']
      if: 'ctx.event.code.startsWith("billing.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "billing.create_card"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "billing.delete_card"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "billing.update_card" || ctx.event.code == "billing.update_info"'
  # Events related to bot activity.
  - set:
      field: event.category
      value: ['process', 'host']
      if: 'ctx.event.code.startsWith("bot.")'
  - set:
      field: event.type
      value: ['start']
      if: 'ctx.event.code == "bot.create"'
  - set:
      field: event.type
      value: ['end']
      if: 'ctx.event.code == "bot.delete"'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "bot.join" || ctx.event.code == "bot.update"'
  # Events related to certificate issuance.
  - set:
      field: event.category
      value: ['configuration', 'iam']
      if: 'ctx.event.code.startsWith("cert.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "cert.create"'
  # Events related to client disconnection.
  - set:
      field: event.category
      value: ['network']
      if: 'ctx.event.code.startsWith("client.")'
  - set:
      field: event.type
      value: ['end']
      if: 'ctx.event.code == "client.disconnect"'
  # Events related to cluster networking configuration.
  - set:
      field: event.category
      value: ['configuration']
      if: 'ctx.event.code.startsWith("cluster_networking_config.")'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "cluster_networking_config.update"'
  # Events related to database activity.
  - set:
      field: event.category
      value: ['database']
      if: 'ctx.event.code.startsWith("db.")'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "db.create"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "db.delete"'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "db.session.cassandra.batch" || ctx.event.code == "db.session.cassandra.execute" || ctx.event.code == "db.session.cassandra.prepare" || ctx.event.code == "db.session.cassandra.register" || ctx.event.code == "db.session.dynamodb.request" || ctx.event.code == "db.session.elasticsearch.request" || ctx.event.code == "db.session.opensearch.request" || ctx.event.code == "db.session.permissions.update" || ctx.event.code == "db.session.postgres.function" || ctx.event.code == "db.session.postgres.statements.bind" || ctx.event.code == "db.session.postgres.statements.close" || ctx.event.code == "db.session.postgres.statements.execute" || ctx.event.code == "db.session.postgres.statements.parse" || ctx.event.code == "db.session.query" || ctx.event.code == "db.session.spanner.rpc" || ctx.event.code == "db.session.sqlserver.rpc_request" || ctx.event.code == "db.session.start" || ctx.event.code == "db.session.user.create" || ctx.event.code == "db.session.user.deactivate"'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "db.session.end"'
  - set:
      field: event.type
      value: ['error']
      if: 'ctx.event.code == "db.session.malformed_packet" || ctx.event.code == "db.session.query.failed"'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "db.session.start"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "db.update"'
  # Events related to desktop activity.
  - set:
      field: event.category
      value: ['host', 'file']
      if: 'ctx.event.code.startsWith("desktop.")'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "desktop.clipboard.receive" || ctx.event.code == "desktop.clipboard.send"'
  - set:
      field: event.type
      value: ['access']
      if: 'ctx.event.code == "desktop.directory.read" || ctx.event.code == "desktop.directory.share"'
  - set:
      field: event.type
      value: ['creation', 'deletion']
      if: 'ctx.event.code == "desktop.directory.write"'
  # Events related to device management.
  - set:
      field: event.category
      value: ['configuration', 'iam']
      if: 'ctx.event.code.startsWith("device.")'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "device.authenticate.confirm" || ctx.event.code == "device.authenticate"'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "device.create" || ctx.event.code == "device.token.create" || ctx.event.code == "device.webtoken.create"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "device.delete"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "device.enroll" || ctx.event.code == "device.update" || ctx.event.code == "device.token.spent"'
  # Events related to command execution.
  - set:
      field: event.category
      value: ['process', 'host']
      if: 'ctx.event.code.startsWith("exec")'
  - set:
      field: event.type
      value: ['start']
      if: 'ctx.event.code == "exec"'
  # Events related to external audit storage.
  - set:
      field: event.category
      value: ['configuration']
      if: 'ctx.event.code.startsWith("external_audit_storage.")'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "external_audit_storage.disable" || ctx.event.code == "external_audit_storage.enable"'
  # Events related to GitHub auth connectors.
  - set:
      field: event.category
      value: ['authentication', 'iam']
      if: 'ctx.event.code.startsWith("github.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "github.created"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "github.deleted"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "github.updated"'
  # Events related to instance joining.
  - set:
      field: event.category
      value: ['network', 'host']
      if: 'ctx.event.code.startsWith("instance.")'
  - set:
      field: event.type
      value: ['start']
      if: 'ctx.event.code == "instance.join"'
  # Events related to join token creation.
  - set:
      field: event.category
      value: ['session', 'iam']
      if: 'ctx.event.code.startsWith("join_token.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "join_token.create"'
  # Events related to Kubernetes activity.
  - set:
      field: event.category
      value: ['process', 'host']
      if: 'ctx.event.code.startsWith("kube.")'
  - set:
      field: event.type
      value: ['start']
      if: 'ctx.event.code == "kube.create"'
  - set:
      field: event.type
      value: ['end']
      if: 'ctx.event.code == "kube.delete"'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "kube.request"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "kube.update"'
  # Events related to Teleport lock management.
  - set:
      field: event.category
      value: ['configuration', 'iam']
      if: 'ctx.event.code.startsWith("lock.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "lock.created"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "lock.deleted"'
  # Events related to login rules.
  - set:
      field: event.category
      value: ['authentication', 'iam']
      if: 'ctx.event.code.startsWith("login_rule.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "login_rule.create"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "login_rule.delete"'
  # Events related to multi-factor authentication.
  - set:
      field: event.category
      value: ['authentication', 'iam']
      if: 'ctx.event.code.startsWith("mfa.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "mfa.add"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "mfa.delete"'
  - set:
      field: event.type
      value: ['start']
      if: 'ctx.event.code == "mfa_auth_challenge.create"'
  - set:
      field: event.type
      value: ['end']
      if: 'ctx.event.code == "mfa_auth_challenge.validate"'
  # Events related to OIDC auth connectors.
  - set:
      field: event.category
      value: ['authentication', 'iam']
      if: 'ctx.event.code.startsWith("oidc.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "oidc.created"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "oidc.deleted"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "oidc.updated"'
  # Events related to Okta synchronization and assignment.
  - set:
      field: event.category
      value: ['iam']
      if: 'ctx.event.code.startsWith("okta.")'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code.startsWith("okta.assignment") || ctx.event.code.startsWith("okta.") && ctx.event.code.endsWith(".update")'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "okta.sync"'
  # Events related to port forwarding.
  - set:
      field: event.category
      value: ['network']
      if: 'ctx.event.code.startsWith("port")'
  - set:
      field: event.type
      value: ['start']
      if: 'ctx.event.code == "port"'
  # Events related to privilege tokens.
  - set:
      field: event.category
      value: ['session', 'iam']
      if: 'ctx.event.code.startsWith("privilege_token.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "privilege_token.create"'
  # Events related to recovery codes and tokens.
  - set:
      field: event.category
      value: ['session', 'iam']
      if: 'ctx.event.code.startsWith("recovery_") || ctx.event.code.startsWith("reset_password_token.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "recovery_code.generated" || ctx.event.code == "recovery_token.create" || ctx.event.code == "reset_password_token.create"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "recovery_code.used"'
  # Events related to terminal resizing.
  - set:
      field: event.category
      value: ['process']
      if: 'ctx.event.code == "resize"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "resize"'
  # Events related to roles.
  - set:
      field: event.category
      value: ['iam']
      if: 'ctx.event.code.startsWith("role.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "role.created"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "role.deleted"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "role.updated"'
  # Events related to SAML connectors.
  - set:
      field: event.category
      value: ['authentication', 'iam']
      if: 'ctx.event.code.startsWith("saml.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "saml.created" || ctx.event.code == "saml.idp.service.provider.created"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "saml.deleted" || ctx.event.code == "saml.idp.service.provider.deleted" || ctx.event.code == "saml.idp.service.provider.delete_all"'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "saml.updated" || ctx.event.code == "saml.idp.service.provider.updated"'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "saml.idp.auth"'
  # Events related to SCP file transfers.
  - set:
      field: event.category
      value: ['file']
      if: 'ctx.event.code.startsWith("scp.")'
  # Events related to security reports.
  - set:
      field: event.category
      value: ['threat']
      if: 'ctx.event.code.startsWith("secreports.")'
  - set:
      field: event.type
      value: ['indicator']
      if: 'ctx.event.code == "secreports.audit.query.run" || ctx.event.code == "secreports.report.run"'
  # Events related to sessions.
  - set:
      field: event.category
      value: ['session']
      if: 'ctx.event.code.startsWith("session.")'
  - set:
      field: event.type
      value: ['start']
      if: 'ctx.event.code == "session.start"'
  - set:
      field: event.type
      value: ['end']
      if: 'ctx.event.code == "session.end"'
  - set:
      field: event.type
      value: ['info']
      if: 'ctx.event.code == "session.connect" || ctx.event.code == "session.command" || ctx.event.code == "session.data" || ctx.event.code == "session.disk" || ctx.event.code == "session.join" || ctx.event.code == "session.network" || ctx.event.code == "session.leave" || ctx.event.code == "session.process_exit" || ctx.event.code == "session.recording.access" || ctx.event.code == "session.upload"'
  - set:
      field: event.type
      value: ['denied']
      if: 'ctx.event.code == "session.rejected"'
  # Events related to session recording configuration.
  - set:
      field: event.category
      value: ['configuration']
      if: 'ctx.event.code.startsWith("session_recording_config.")'
  - set:
      field: event.type
      value: ['change']
      if: 'ctx.event.code == "session_recording_config.update"'
  # Events related to SFTP file transfers.
  - set:
      field: event.category
      value: ['file', 'network']
      if: 'ctx.event.code.startsWith("sftp")'
  # Events related to SPIFFE SVID issuance.
  - set:
      field: event.category
      value: ['iam', 'process']
      if: 'ctx.event.code.startsWith("spiffe.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "spiffe.svid.issued"'
  # Events related to SSM command execution.
  - set:
      field: event.category
      value: ['process']
      if: 'ctx.event.code.startsWith("ssm.")'
  - set:
      field: event.type
      value: ['start']
      if: 'ctx.event.code == "ssm.run"'
  # Events related to subsystem requests.
  - set:
      field: event.category
      value: ['process']
      if: 'ctx.event.code == "subsystem"'
  - set:
      field: event.type
      value: ['start']
      if: 'ctx.event.code == "subsystem"'
  # Events related to trusted clusters.
  - set:
      field: event.category
      value: ['network', 'host']
      if: 'ctx.event.code.startsWith("trusted_cluster.")'
  - set:
      field: event.type
      value: ['creation']
      if: 'ctx.event.code == "trusted_cluster.create" || ctx.event.code == "trusted_cluster_token.create"'
  - set:
      field: event.type
      value: ['deletion']
      if: 'ctx.event.code == "trusted_cluster.delete"'
  # Events related to users.
  - set:
      field: event.category
      value: ['iam']
      if: 'ctx.event.code.startsWith("user.") && ctx.event.code != "user.login"'
  - set:
      field: event.category
      value: ['authentication']
      if: 'ctx.event.code == "user.login"'
  - set:
      field: event.type
      value: ['creation', 'user']
      if: 'ctx.event.code == "user.create"'
  - set:
      field: event.type
      value: ['deletion', 'user']
      if: 'ctx.event.code == "user.delete"'
  - set:
      field: event.type
      value: ['change', 'user']
      if: 'ctx.event.code == "user.password_change" || ctx.event.code == "user.update"'
  - set:
      field: event.type
      value: ['start']
      if: 'ctx.event.code == "user.login"'
  # Events related to Windows desktop sessions.
  - set:
      field: event.category
      value: ['host', 'session']
      if: 'ctx.event.code.startsWith("windows.")'
  - set:
      field: event.type
      value: ['start']
      if: 'ctx.event.code == "windows.desktop.session.start"'
  - set:
      field: event.type
      value: ['end']
      if: 'ctx.event.code == "windows.desktop.session.end"'
  # Events related to X11 forwarding.
  - set:
      field: event.category
      value: ['network']
      if: 'ctx.event.code == "x11-forward"'
  - set:
      field: event.type
      value: ['start']
      if: 'ctx.event.code == "x11-forward"'
