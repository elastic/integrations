config_version: "2"
interval: {{interval}}
{{#if enable_request_tracer}}
request.tracer.filename: "../../logs/httpjson/http-request-trace-*.ndjson"
{{/if}}
request.method: "GET"
request.url: {{api_url}}/audit/v1/logs
{{#if ssl}}
request.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
request.timeout: {{http_client_timeout}}
{{/if}}
{{#if proxy_url }}
request.proxy_url: {{proxy_url}}
{{/if}}

request.transforms:
  - set:
      target: header.Authorization
      value: "Bearer {{oauth_token}}"

  - set:
      target: url.params.cursor
      value: '[[.cursor.next_cursor]]'
      # An empty value omits this param from being set on the request.
      # This should be omitted if it is a new request or a request after pagination is complete.
      default: ''

  - set:
      target: url.params.oldest
      # If last pagination cycle was finished successfully
      # we move the oldest pointer forward
      # else we continue processing using cursor
      # If none of the values are in the cursor it means is a fresh start
      # and we pick the default value.
      value: |-
        [[- if .cursor.pagination_finished -]]
          [[- .cursor.next_oldest_date -]]
        [[- end -]]
      default: '[[(now (parseDuration "-{{initial_interval}}")).Unix]]'

  - set:
      target: url.params.limit
      value: '[[{{limit}}]]'

request.rate_limit.reset: '[[ add (toInt (.last_response.header.Get "Retry-After")) ((now).Unix) ]]'
request.rate_limit.remaining: '0' # hardcoded to 0 since slack doesn't return remaining header only reset

response.split:
  target: body.entries
response.pagination:
  - set:
      target: url.params.cursor
      value: '[[.last_response.body.response_metadata.next_cursor]]'
      fail_on_template_error: true
          
cursor:
  pagination_finished:
    # Use this flag to identify if an execution was interrupted in the middle
    # of a pagination cycle.
    # For completed pagination next_cursor is "" and if the response is not paginated
    # then the blob response_metadata does not exist
    value: '[[and (not (index .last_response.body "response_metadata")) (eq (.last_response.body.response_metadata.Get "next_cursor") "")]]'
  next_cursor:
    # Use this value to be able to resume from an interrupted pagination cycle.
    value: '[[.last_response.body.response_metadata.Get "next_cursor"]]'
  next_oldest_date:
    # In order to pick the next startDate we keep the first event (newest) date.
    value: '[[toInt .first_event.date_create]]'

{{#if tags.length}}
tags:
{{else if preserve_original_event}}
tags:
{{/if}}
{{#each tags as |tag i|}}
  - {{tag}}
{{/each}}
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}

{{#if processors}}
processors:
{{processors}}
{{/if}}