---
description: Pipeline to process filestream_cockroachdb log logs
processors:
  - set:
      tag: set_ecs_version
      field: ecs.version
      value: 8.11.0
  - set:
      tag: copy_original_message
      field: originalMessage
      copy_from: message
  - rename:
      ignore_missing: true
      if: ctx.event?.original == null
      tag: rename_message
      field: originalMessage
      target_field: event.original
  - remove:
      ignore_missing: true
      if: ctx.event?.original != null
      tag: remove_copied_message
      field: originalMessage
  - remove:
      ignore_missing: true
      tag: remove_message
      field: message
  - json:
      tag: json_original
      field: event.original
      target_field: cockroachdb
  - date:
      if: ctx.cockroachdb?.datetime != null
      tag: date_processor_cockroachdb.datetime
      field: cockroachdb.datetime
      target_field: '@timestamp'
      formats:
        - ISO8601
  - date:
      if: ctx.cockroachdb?.timestamp != null
      tag: date_processor_cockroachdb.timestamp
      field: cockroachdb.timestamp
      target_field: '@timestamp'
      formats:
        - UNIX
  - remove:
        ignore_missing: true
        tag: remove_cockroachdb_datetime
        field: [cockroachdb.datetime, cockroachdb.timestamp]
  - rename:
      ignore_missing: true
      field: cockroachdb.file
      target_field: log.origin.file.name
  - rename:
      ignore_missing: true
      field: cockroachdb.line
      target_field: log.origin.file.line
  - rename:
      ignore_missing: true
      field: cockroachdb.message
      target_field: message
  - rename:
      ignore_missing: true
      field: cockroachdb.channel
      target_field: event.provider
  - rename:
      ignore_missing: true
      field: cockroachdb.severity
      target_field: log.level
  - script:
      tag: convert_cockroachdb_redactable
      if: ctx?.cockroachdb?.redactable != null
      source: |
        ctx.cockroachdb.redactable = ctx.cockroachdb.redactable == 1? true : false;
  - script:
      tag: script_drop_null_empty_values
      description: Drops null/empty values recursively.
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);
  - geoip:
      ignore_missing: true
      tag: geoip_source_ip
      field: source.ip
      target_field: source.geo
  - geoip:
      ignore_missing: true
      tag: geoip_source_asn
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
  - rename:
      ignore_missing: true
      tag: rename_source_as_asn
      field: source.as.asn
      target_field: source.as.number
  - rename:
      ignore_missing: true
      tag: rename_source_as_organization_name
      field: source.as.organization_name
      target_field: source.as.organization.name
  - geoip:
      ignore_missing: true
      tag: geoip_destination_ip
      field: destination.ip
      target_field: destination.geo
  - geoip:
      ignore_missing: true
      tag: geoip_destination_asn
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
  - rename:
      ignore_missing: true
      tag: rename_destination_as_asn
      field: destination.as.asn
      target_field: destination.as.number
  - rename:
      ignore_missing: true
      tag: rename_destination_as_organization_name
      field: destination.as.organization_name
      target_field: destination.as.organization.name

  - pipeline:
      name: '{{ IngestPipeline "experimental_conversion" }}'
      if: ctx?.tags != null && ctx.tags instanceof List && ctx.tags.contains('experimental_ecs_conversion')
on_failure:
  - append:
      field: error.message
      value: >-
        Processor {{{_ingest.on_failure_processor_type}}} with tag
        {{{_ingest.on_failure_processor_tag}}} in pipeline
        {{{_ingest.on_failure_pipeline}}} failed with message:
        {{{_ingest.on_failure_message}}}
  - set:
      field: event.kind
      value: pipeline_error