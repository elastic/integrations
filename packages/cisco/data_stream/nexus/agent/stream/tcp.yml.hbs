tcp:
host: "{{tcp_host}}:{{tcp_port}}"
tags:
{{#each tags as |tag i|}}
 - {{tag}}
{{/each}}
fields_under_root: true
fields:
    observer:
        vendor: "Cisco"
        product: "Nexus"
        type: "Switches"
{{#contains tags "forwarded"}}
publisher_pipeline.disable_host: true
{{/contains}}

processors:
- script:
    lang: javascript
    params:
      ecs: true
      rsa: {{rsa_fields}}
      tz_offset: {{tz_offset}}
      keep_raw: {{keep_raw_fields}}
      debug: {{debug}}
    source: |
      // Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
      // or more contributor license agreements. Licensed under the Elastic License;
      // you may not use this file except in compliance with the Elastic License.
      
      /* jshint -W014,-W016,-W097,-W116 */
      
      var processor = require("processor");
      var console = require("console");
      
      var FLAG_FIELD = "log.flags";
      var FIELDS_OBJECT = "nwparser";
      var FIELDS_PREFIX = FIELDS_OBJECT + ".";
      
      var defaults = {
          debug: false,
          ecs: true,
          rsa: false,
          keep_raw: false,
          tz_offset: "local",
          strip_priority: true
      };
      
      var saved_flags = null;
      var debug;
      var map_ecs;
      var map_rsa;
      var keep_raw;
      var device;
      var tz_offset;
      var strip_priority;
      
      // Register params from configuration.
      function register(params) {
          debug = params.debug !== undefined ? params.debug : defaults.debug;
          map_ecs = params.ecs !== undefined ? params.ecs : defaults.ecs;
          map_rsa = params.rsa !== undefined ? params.rsa : defaults.rsa;
          keep_raw = params.keep_raw !== undefined ? params.keep_raw : defaults.keep_raw;
          tz_offset = parse_tz_offset(params.tz_offset !== undefined? params.tz_offset : defaults.tz_offset);
          strip_priority = params.strip_priority !== undefined? params.strip_priority : defaults.strip_priority;
          device = new DeviceProcessor();
      }
      
      function parse_tz_offset(offset) {
          var date;
          var m;
          switch(offset) {
              // local uses the tz offset from the JS VM.
              case "local":
                  date = new Date();
                  // Reversing the sign as we the offset from UTC, not to UTC.
                  return parse_local_tz_offset(-date.getTimezoneOffset());
              // event uses the tz offset from event.timezone (add_locale processor).
              case "event":
                  return offset;
              // Otherwise a tz offset in the form "[+-][0-9]{4}" is required.
              default:
                  m = offset.match(/^([+\-])([0-9]{2}):?([0-9]{2})?$/);
                  if (m === null || m.length !== 4) {
                      throw("bad timezone offset: '" + offset + "'. Must have the form +HH:MM");
                  }
                  return m[1] + m[2] + ":" + (m[3]!==undefined? m[3] : "00");
          }
      }
      
      function parse_local_tz_offset(minutes) {
          var neg = minutes < 0;
          minutes = Math.abs(minutes);
          var min = minutes % 60;
          var hours = Math.floor(minutes / 60);
          var pad2digit = function(n) {
              if (n < 10) { return "0" + n;}
              return "" + n;
          };
          return (neg? "-" : "+") + pad2digit(hours) + ":" + pad2digit(min);
      }
      
      function process(evt) {
          // Function register is only called by the processor when `params` are set
          // in the processor config.
          if (device === undefined) {
              register(defaults);
          }
          return device.process(evt);
      }
      
      function processor_chain(subprocessors) {
          var builder = new processor.Chain();
          subprocessors.forEach(builder.Add);
          return builder.Build().Run;
      }
      
      function linear_select(subprocessors) {
          return function (evt) {
              var flags = evt.Get(FLAG_FIELD);
              var i;
              for (i = 0; i < subprocessors.length; i++) {
                  evt.Delete(FLAG_FIELD);
                  if (debug) console.warn("linear_select trying entry " + i);
                  subprocessors[i](evt);
                  // Dissect processor succeeded?
                  if (evt.Get(FLAG_FIELD) == null) break;
                  if (debug) console.warn("linear_select failed entry " + i);
              }
              if (flags !== null) {
                  evt.Put(FLAG_FIELD, flags);
              }
              if (debug) {
                  if (i < subprocessors.length) {
                      console.warn("linear_select matched entry " + i);
                  } else {
                      console.warn("linear_select didn't match");
                  }
              }
          };
      }
      
      function conditional(opt) {
          return function(evt) {
              if (opt.if(evt)) {
                  opt.then(evt);
              } else if (opt.else) {
                  opt.else(evt);
              }
          };
      }
      
      var strip_syslog_priority = (function() {
          var isEnabled = function() { return strip_priority === true; };
          var fetchPRI = field("_pri");
          var fetchPayload = field("payload");
          var removePayload = remove(["payload"]);
          var cleanup = remove(["_pri", "payload"]);
          var onMatch = function(evt) {
              var pri, priStr = fetchPRI(evt);
              if (priStr != null
                  && 0 < priStr.length && priStr.length < 4
                  && !isNaN((pri = Number(priStr)))
                  && 0 <= pri && pri < 192) {
                  var severity = pri & 7,
                      facility = pri >> 3;
                  setc("_severity", "" + severity)(evt);
                  setc("_facility", "" + facility)(evt);
                  // Replace message with priority stripped.
                  evt.Put("message", fetchPayload(evt));
                  removePayload(evt);
              } else {
                  // not a valid syslog PRI, cleanup.
                  cleanup(evt);
              }
          };
          return conditional({
              if: isEnabled,
              then: cleanup_flags(match(
                  "STRIP_PRI",
                  "message",
                  "<%{_pri}>%{payload}",
                  onMatch
              ))
          });
      })();
      
      function match(id, src, pattern, on_success) {
          var dissect = new processor.Dissect({
              field: src,
              tokenizer: pattern,
              target_prefix: FIELDS_OBJECT,
              ignore_failure: true,
              overwrite_keys: true,
              trim_values: "right"
          });
          return function (evt) {
              var msg = evt.Get(src);
              dissect.Run(evt);
              var failed = evt.Get(FLAG_FIELD) != null;
              if (debug) {
                  if (failed) {
                      console.debug("dissect fail: " + id + " field:" + src);
                  } else {
                      console.debug("dissect   OK: " + id + " field:" + src);
                  }
                  console.debug("        expr: <<" + pattern + ">>");
                  console.debug("       input: <<" + msg + ">>");
              }
              if (on_success != null && !failed) {
                  on_success(evt);
              }
          };
      }
      
      function match_copy(id, src, dst, on_success) {
          dst = FIELDS_PREFIX + dst;
          if (dst === FIELDS_PREFIX || dst === src) {
              return function (evt) {
                  if (debug) {
                      console.debug("noop      OK: " + id + " field:" + src);
                      console.debug("       input: <<" + evt.Get(src) + ">>");
                  }
                  if (on_success != null) on_success(evt);
              }
          }
          return function (evt) {
              var msg = evt.Get(src);
              evt.Put(dst, msg);
              if (debug) {
                  console.debug("copy      OK: " + id + " field:" + src);
                  console.debug("      target: '" + dst + "'");
                  console.debug("       input: <<" + msg + ">>");
              }
              if (on_success != null) on_success(evt);
          }
      }
      
      function cleanup_flags(processor) {
          return function(evt) {
              processor(evt);
              evt.Delete(FLAG_FIELD);
          };
      }
      
      function all_match(opts) {
          return function (evt) {
              var i;
              for (i = 0; i < opts.processors.length; i++) {
                  evt.Delete(FLAG_FIELD);
                  opts.processors[i](evt);
                  // Dissect processor succeeded?
                  if (evt.Get(FLAG_FIELD) != null) {
                      if (debug) console.warn("all_match failure at " + i);
                      if (opts.on_failure != null) opts.on_failure(evt);
                      return;
                  }
                  if (debug) console.warn("all_match success at " + i);
              }
              if (opts.on_success != null) opts.on_success(evt);
          };
      }
      
      function msgid_select(mapping) {
          return function (evt) {
              var msgid = evt.Get(FIELDS_PREFIX + "messageid");
              if (msgid == null) {
                  if (debug) console.warn("msgid_select: no messageid captured!");
                  return;
              }
              var next = mapping[msgid];
              if (next === undefined) {
                  if (debug) console.warn("msgid_select: no mapping for messageid:" + msgid);
                  return;
              }
              if (debug) console.info("msgid_select: matched key=" + msgid);
              return next(evt);
          };
      }
      
      function msg(msg_id, match) {
          return function (evt) {
              match(evt);
              if (evt.Get(FLAG_FIELD) == null) {
                  evt.Put(FIELDS_PREFIX + "msg_id1", msg_id);
              }
          };
      }
      
      var start;
      
      function save_flags(evt) {
          saved_flags = evt.Get(FLAG_FIELD);
          evt.Put("event.original", evt.Get("message"));
      }
      
      function restore_flags(evt) {
          if (saved_flags !== null) {
              evt.Put(FLAG_FIELD, saved_flags);
          }
          evt.Delete("message");
      }
      
      function constant(value) {
          return function (evt) {
              return value;
          };
      }
      
      function field(name) {
          var fullname = FIELDS_PREFIX + name;
          return function (evt) {
              return evt.Get(fullname);
          };
      }
      
      function STRCAT(args) {
          var s = "";
          var i;
          for (i = 0; i < args.length; i++) {
              s += args[i];
          }
          return s;
      }
      
      // TODO: Implement
      function DIRCHK(args) {
          unimplemented("DIRCHK");
      }
      
      function strictToInt(str) {
          return str * 1;
      }
      
      function CALC(args) {
          if (args.length !== 3) {
              console.warn("skipped call to CALC with " + args.length + " arguments.");
              return;
          }
          var a = strictToInt(args[0]);
          var b = strictToInt(args[2]);
          if (isNaN(a) || isNaN(b)) {
              console.warn("failed evaluating CALC arguments a='" + args[0] + "' b='" + args[2] + "'.");
              return;
          }
          var result;
          switch (args[1]) {
              case "+":
                  result = a + b;
                  break;
              case "-":
                  result = a - b;
                  break;
              case "*":
                  result = a * b;
                  break;
              default:
                  // Only * and + seen in the parsers.
                  console.warn("unknown CALC operation '" + args[1] + "'.");
                  return;
          }
          // Always return a string
          return result !== undefined ? "" + result : result;
      }
      
      var quoteChars = "\"'`";
      function RMQ(args) {
          if(args.length !== 1) {
              console.warn("RMQ: only one argument expected");
              return;
          }
          var value = args[0].trim();
          var n = value.length;
          var char;
          return n > 1
              && (char=value.charAt(0)) === value.charAt(n-1)
              && quoteChars.indexOf(char) !== -1?
                  value.substr(1, n-2)
                  : value;
      }
      
      function call(opts) {
          var args = new Array(opts.args.length);
          return function (evt) {
              for (var i = 0; i < opts.args.length; i++)
                  if ((args[i] = opts.args[i](evt)) == null) return;
              var result = opts.fn(args);
              if (result != null) {
                  evt.Put(opts.dest, result);
              }
          };
      }
      
      function nop(evt) {
      }
      
      function appendErrorMsg(evt, msg) {
          var value = evt.Get("error.message");
          if (value == null) {
              value = [msg];
          } else if (msg instanceof Array) {
              value.push(msg);
          } else {
              value = [value, msg];
          }
          evt.Put("error.message", value);
      }
      
      function unimplemented(name) {
          appendErrorMsg("unimplemented feature: " + name);
      }
      
      function lookup(opts) {
          return function (evt) {
              var key = opts.key(evt);
              if (key == null) return;
              var value = opts.map.keyvaluepairs[key];
              if (value === undefined) {
                  value = opts.map.default;
              }
              if (value !== undefined) {
                  evt.Put(opts.dest, value(evt));
              }
          };
      }
      
      function set(fields) {
          return new processor.AddFields({
              target: FIELDS_OBJECT,
              fields: fields,
          });
      }
      
      function setf(dst, src) {
          return function (evt) {
              var val = evt.Get(FIELDS_PREFIX + src);
              if (val != null) evt.Put(FIELDS_PREFIX + dst, val);
          };
      }
      
      function setc(dst, value) {
          return function (evt) {
              evt.Put(FIELDS_PREFIX + dst, value);
          };
      }
      
      function set_field(opts) {
          return function (evt) {
              var val = opts.value(evt);
              if (val != null) evt.Put(opts.dest, val);
          };
      }
      
      function dump(label) {
          return function (evt) {
              console.log("Dump of event at " + label + ": " + JSON.stringify(evt, null, "\t"));
          };
      }
      
      function date_time_join_args(evt, arglist) {
          var str = "";
          for (var i = 0; i < arglist.length; i++) {
              var fname = FIELDS_PREFIX + arglist[i];
              var val = evt.Get(fname);
              if (val != null) {
                  if (str !== "") str += " ";
                  str += val;
              } else {
                  if (debug) console.warn("in date_time: input arg " + fname + " is not set");
              }
          }
          return str;
      }
      
      function to2Digit(num) {
          return num? (num < 10? "0" + num : num) : "00";
      }
      
      // Make two-digit dates 00-69 interpreted as 2000-2069
      // and dates 70-99 translated to 1970-1999.
      var twoDigitYearEpoch = 70;
      var twoDigitYearCentury = 2000;
      
      // This is to accept dates up to 2 days in the future, only used when
      // no year is specified in a date. 2 days should be enough to account for
      // time differences between systems and different tz offsets.
      var maxFutureDelta = 2*24*60*60*1000;
      
      // DateContainer stores date fields and then converts those fields into
      // a Date. Necessary because building a Date using its set() methods gives
      // different results depending on the order of components.
      function DateContainer(tzOffset) {
          this.offset = tzOffset === undefined? "Z" : tzOffset;
      }
      
      DateContainer.prototype = {
          setYear: function(v) {this.year = v;},
          setMonth: function(v) {this.month = v;},
          setDay: function(v) {this.day = v;},
          setHours: function(v) {this.hours = v;},
          setMinutes: function(v) {this.minutes = v;},
          setSeconds: function(v) {this.seconds = v;},
      
          setUNIX: function(v) {this.unix = v;},
      
          set2DigitYear: function(v) {
              this.year = v < twoDigitYearEpoch? twoDigitYearCentury + v : twoDigitYearCentury + v - 100;
          },
      
          toDate: function() {
              if (this.unix !== undefined) {
                  return new Date(this.unix * 1000);
              }
              if (this.day === undefined || this.month === undefined) {
                  // Can't make a date from this.
                  return undefined;
              }
              if (this.year === undefined) {
                  // A date without a year. Set current year, or previous year
                  // if date would be in the future.
                  var now = new Date();
                  this.year = now.getFullYear();
                  var date = this.toDate();
                  if (date.getTime() - now.getTime() > maxFutureDelta) {
                      date.setFullYear(now.getFullYear() - 1);
                  }
                  return date;
              }
              var MM = to2Digit(this.month);
              var DD = to2Digit(this.day);
              var hh = to2Digit(this.hours);
              var mm = to2Digit(this.minutes);
              var ss = to2Digit(this.seconds);
              return new Date(this.year + "-" + MM + "-" + DD + "T" + hh + ":" + mm + ":" + ss + this.offset);
          }
      }
      
      function date_time_try_pattern(fmt, str, tzOffset) {
          var date = new DateContainer(tzOffset);
          var pos = date_time_try_pattern_at_pos(fmt, str, 0, date);
          return pos !== undefined? date.toDate() : undefined;
      }
      
      function date_time_try_pattern_at_pos(fmt, str, pos, date) {
          var len = str.length;
          for (var proc = 0; pos !== undefined && pos < len && proc < fmt.length; proc++) {
              pos = fmt[proc](str, pos, date);
          }
          return pos;
      }
      
      function date_time(opts) {
          return function (evt) {
              var tzOffset = opts.tz || tz_offset;
              if (tzOffset === "event") {
                  tzOffset = evt.Get("event.timezone");
              }
              var str = date_time_join_args(evt, opts.args);
              for (var i = 0; i < opts.fmts.length; i++) {
                  var date = date_time_try_pattern(opts.fmts[i], str, tzOffset);
                  if (date !== undefined) {
                      evt.Put(FIELDS_PREFIX + opts.dest, date);
                      return;
                  }
              }
              if (debug) console.warn("in date_time: id=" + opts.id + " FAILED: " + str);
          };
      }
      
      var uA = 60 * 60 * 24;
      var uD = 60 * 60 * 24;
      var uF = 60 * 60;
      var uG = 60 * 60 * 24 * 30;
      var uH = 60 * 60;
      var uI = 60 * 60;
      var uJ = 60 * 60 * 24;
      var uM = 60 * 60 * 24 * 30;
      var uN = 60 * 60;
      var uO = 1;
      var uS = 1;
      var uT = 60;
      var uU = 60;
      var uc = dc;
      
      function duration(opts) {
          return function(evt) {
              var str = date_time_join_args(evt, opts.args);
              for (var i = 0; i < opts.fmts.length; i++) {
                  var seconds = duration_try_pattern(opts.fmts[i], str);
                  if (seconds !== undefined) {
                      evt.Put(FIELDS_PREFIX + opts.dest, seconds);
                      return;
                  }
              }
              if (debug) console.warn("in duration: id=" + opts.id + " (s) FAILED: " + str);
          };
      }
      
      function duration_try_pattern(fmt, str) {
          var secs = 0;
          var pos = 0;
          for (var i=0; i<fmt.length; i++) {
              if (fmt[i] instanceof Function) {
                  if ((pos = fmt[i](str, pos)) === undefined) return;
                  continue;
              }
              var start = skipws(str, pos);
              var end = skipdigits(str, start);
              if (end === start) return;
              var s = str.substr(start, end - start);
              var value = parseInt(s, 10);
              if (isNaN(value)) return;
              secs += value * fmt[i];
              pos = end;
          }
          return secs;
      }
      
      function remove(fields) {
          return function (evt) {
              for (var i = 0; i < fields.length; i++) {
                  evt.Delete(FIELDS_PREFIX + fields[i]);
              }
          };
      }
      
      function dc(ct) {
          var match = function (ct, str, pos) {
              var n = str.length;
              if (n - pos < ct.length) return;
              var part = str.substr(pos, ct.length);
              if (part !== ct) {
                  return;
              }
              return pos + ct.length;
          };
          return function (str, pos, date) {
              var outPos = match(ct, str, pos);
              if (outPos === undefined) {
                  // Try again, trimming leading space at str[pos:] and ct
                  outPos = match(ct.substr(skipws(ct, 0)), str, skipws(str, pos));
              }
              return outPos;
          };
      }
      
      
      var shortMonths = {
          // mon => [ month_id , how many chars to skip if month in long form ]
          "Jan": [0, 4],
          "Feb": [1, 5],
          "Mar": [2, 2],
          "Apr": [3, 2],
          "May": [4, 0],
          "Jun": [5, 1],
          "Jul": [6, 1],
          "Aug": [7, 3],
          "Sep": [8, 6],
          "Oct": [9, 4],
          "Nov": [10, 5],
          "Dec": [11, 4],
          "jan": [0, 4],
          "feb": [1, 5],
          "mar": [2, 2],
          "apr": [3, 2],
          "may": [4, 0],
          "jun": [5, 1],
          "jul": [6, 1],
          "aug": [7, 3],
          "sep": [8, 6],
          "oct": [9, 4],
          "nov": [10, 5],
          "dec": [11, 4],
      };
      
      // var dC = undefined;
      var dR = dateMonthName(true);
      var dB = dateMonthName(false);
      var dM = dateFixedWidthNumber("M", 2, 1, 12, DateContainer.prototype.setMonth);
      var dG = dateVariableWidthNumber("G", 1, 12,  DateContainer.prototype.setMonth);
      var dD = dateFixedWidthNumber("D", 2, 1, 31, DateContainer.prototype.setDay);
      var dF = dateVariableWidthNumber("F", 1, 31, DateContainer.prototype.setDay);
      var dH = dateFixedWidthNumber("H", 2, 0, 24, DateContainer.prototype.setHours);
      var dI = dateVariableWidthNumber("I", 0, 24, DateContainer.prototype.setHours); // Accept hours >12
      var dN = dateVariableWidthNumber("N", 0, 24, DateContainer.prototype.setHours);
      var dT = dateFixedWidthNumber("T", 2, 0, 59, DateContainer.prototype.setMinutes);
      var dU = dateVariableWidthNumber("U", 0, 59, DateContainer.prototype.setMinutes);
      var dP = parseAMPM; // AM|PM
      var dQ = parseAMPM; // A.M.|P.M
      var dS = dateFixedWidthNumber("S", 2, 0, 60, DateContainer.prototype.setSeconds);
      var dO = dateVariableWidthNumber("O", 0, 60, DateContainer.prototype.setSeconds);
      var dY = dateFixedWidthNumber("Y", 2, 0, 99, DateContainer.prototype.set2DigitYear);
      var dW = dateFixedWidthNumber("W", 4, 1000, 9999, DateContainer.prototype.setYear);
      var dZ = parseHMS;
      var dX = dateVariableWidthNumber("X", 0, 0x10000000000, DateContainer.prototype.setUNIX);
      
      // parseAMPM parses "A.M", "AM", "P.M", "PM" from logs.
      // Only works if this modifier appears after the hour has been read from logs
      // which is always the case in the 300 devices.
      function parseAMPM(str, pos, date) {
          var n = str.length;
          var start = skipws(str, pos);
          if (start + 2 > n) return;
          var head = str.substr(start, 2).toUpperCase();
          var isPM = false;
          var skip = false;
          switch (head) {
              case "A.":
                  skip = true;
              /* falls through */
              case "AM":
                  break;
              case "P.":
                  skip = true;
              /* falls through */
              case "PM":
                  isPM = true;
                  break;
              default:
                  if (debug) console.warn("can't parse pos " + start + " as AM/PM: " + str + "(head:" + head + ")");
                  return;
          }
          pos = start + 2;
          if (skip) {
              if (pos+2 > n || str.substr(pos, 2).toUpperCase() !== "M.") {
                  if (debug) console.warn("can't parse pos " + start + " as AM/PM: " + str + "(tail)");
                  return;
              }
              pos += 2;
          }
          var hh = date.hours;
          if (isPM) {
              // Accept existing hour in 24h format.
              if (hh < 12) hh += 12;
          } else {
              if (hh === 12) hh = 0;
          }
          date.setHours(hh);
          return pos;
      }
      
      function parseHMS(str, pos, date) {
          return date_time_try_pattern_at_pos([dN, dc(":"), dU, dc(":"), dO], str, pos, date);
      }
      
      function skipws(str, pos) {
          for ( var n = str.length;
                pos < n && str.charAt(pos) === " ";
                pos++)
              ;
          return pos;
      }
      
      function skipdigits(str, pos) {
          var c;
          for (var n = str.length;
               pos < n && (c = str.charAt(pos)) >= "0" && c <= "9";
               pos++)
              ;
          return pos;
      }
      
      function dSkip(str, pos, date) {
          var chr;
          for (;pos < str.length && (chr=str[pos])<'0' || chr>'9'; pos++) {}
          return pos < str.length? pos : undefined;
      }
      
      function dateVariableWidthNumber(fmtChar, min, max, setter) {
          return function (str, pos, date) {
              var start = skipws(str, pos);
              pos = skipdigits(str, start);
              var s = str.substr(start, pos - start);
              var value = parseInt(s, 10);
              if (value >= min && value <= max) {
                  setter.call(date, value);
                  return pos;
              }
              return;
          };
      }
      
      function dateFixedWidthNumber(fmtChar, width, min, max, setter) {
          return function (str, pos, date) {
              pos = skipws(str, pos);
              var n = str.length;
              if (pos + width > n) return;
              var s = str.substr(pos, width);
              var value = parseInt(s, 10);
              if (value >= min && value <= max) {
                  setter.call(date, value);
                  return pos + width;
              }
              return;
          };
      }
      
      // Short month name (Jan..Dec).
      function dateMonthName(long) {
          return function (str, pos, date) {
              pos = skipws(str, pos);
              var n = str.length;
              if (pos + 3 > n) return;
              var mon = str.substr(pos, 3);
              var idx = shortMonths[mon];
              if (idx === undefined) {
                  idx = shortMonths[mon.toLowerCase()];
              }
              if (idx === undefined) {
                  //console.warn("parsing date_time: '" + mon + "' is not a valid short month (%B)");
                  return;
              }
              date.setMonth(idx[0]+1);
              return pos + 3 + (long ? idx[1] : 0);
          };
      }
      
      function url_wrapper(dst, src, fn) {
          return function(evt) {
              var value = evt.Get(FIELDS_PREFIX + src), result;
              if (value != null && (result = fn(value))!== undefined) {
                  evt.Put(FIELDS_PREFIX + dst, result);
              } else {
                  console.error(fn.name + " failed for '" + value + "'");
              }
          };
      }
      
      // The following regular expression for parsing URLs from:
      // https://github.com/wizard04wsu/URI_Parsing
      //
      // The MIT License (MIT)
      //
      // Copyright (c) 2014 Andrew Harrison
      //
      // Permission is hereby granted, free of charge, to any person obtaining a copy of
      // this software and associated documentation files (the "Software"), to deal in
      // the Software without restriction, including without limitation the rights to
      // use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
      // the Software, and to permit persons to whom the Software is furnished to do so,
      // subject to the following conditions:
      //
      // The above copyright notice and this permission notice shall be included in all
      // copies or substantial portions of the Software.
      //
      // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
      // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
      // FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
      // COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
      // IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
      // CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
      var uriRegExp = /^([a-z][a-z0-9+.\-]*):(?:\/\/((?:(?=((?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9A-F]{2})*))(\3)@)?(?=(\[[0-9A-F:.]{2,}\]|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9A-F]{2})*))\5(?::(?=(\d*))\6)?)(\/(?=((?:[a-z0-9-._~!$&'()*+,;=:@\/]|%[0-9A-F]{2})*))\8)?|(\/?(?!\/)(?=((?:[a-z0-9-._~!$&'()*+,;=:@\/]|%[0-9A-F]{2})*))\10)?)(?:\?(?=((?:[a-z0-9-._~!$&'()*+,;=:@\/?]|%[0-9A-F]{2})*))\11)?(?:#(?=((?:[a-z0-9-._~!$&'()*+,;=:@\/?]|%[0-9A-F]{2})*))\12)?$/i;
      
      var uriScheme = 1;
      var uriDomain = 5;
      var uriPort = 6;
      var uriPath = 7;
      var uriPathAlt = 9;
      var uriQuery = 11;
      
      function domain(dst, src) {
          return url_wrapper(dst, src, extract_domain);
      }
      
      function split_url(value) {
          var m = value.match(uriRegExp);
          if (m && m[uriDomain]) return m;
          // Support input in the form "www.example.net/path", but not "/path".
          m = ("null://" + value).match(uriRegExp);
          if (m) return m;
      }
      
      function extract_domain(value) {
          var m = split_url(value);
          if (m && m[uriDomain]) return m[uriDomain];
      }
      
      var extFromPage = /\.[^.]+$/;
      function extract_ext(value) {
          var page = extract_page(value);
          if (page) {
              var m = page.match(extFromPage);
              if (m) return m[0];
          }
      }
      
      function ext(dst, src) {
          return url_wrapper(dst, src, extract_ext);
      }
      
      function fqdn(dst, src) {
          // TODO: fqdn and domain(eTLD+1) are currently the same.
          return domain(dst, src);
      }
      
      var pageFromPathRegExp = /\/([^\/]+)$/;
      var pageName = 1;
      
      function extract_page(value) {
          value = extract_path(value);
          if (!value) return undefined;
          var m = value.match(pageFromPathRegExp);
          if (m) return m[pageName];
      }
      
      function page(dst, src) {
          return url_wrapper(dst, src, extract_page);
      }
      
      function extract_path(value) {
          var m = split_url(value);
          return m? m[uriPath] || m[uriPathAlt] : undefined;
      }
      
      function path(dst, src) {
          return url_wrapper(dst, src, extract_path);
      }
      
      // Map common schemes to their default port.
      // port has to be a string (will be converted at a later stage).
      var schemePort = {
          "ftp": "21",
          "ssh": "22",
          "http": "80",
          "https": "443",
      };
      
      function extract_port(value) {
          var m = split_url(value);
          if (!m) return undefined;
          if (m[uriPort]) return m[uriPort];
          if (m[uriScheme]) {
              return schemePort[m[uriScheme]];
          }
      }
      
      function port(dst, src) {
          return url_wrapper(dst, src, extract_port);
      }
      
      function extract_query(value) {
          var m = split_url(value);
          if (m && m[uriQuery]) return m[uriQuery];
      }
      
      function query(dst, src) {
          return url_wrapper(dst, src, extract_query);
      }
      
      function extract_root(value) {
          var m = split_url(value);
          if (m && m[uriDomain] && m[uriDomain]) {
              var scheme = m[uriScheme] && m[uriScheme] !== "null"?
                  m[uriScheme] + "://" : "";
              var port = m[uriPort]? ":" + m[uriPort] : "";
              return scheme + m[uriDomain] + port;
          }
      }
      
      function root(dst, src) {
          return url_wrapper(dst, src, extract_root);
      }
      
      function tagval(id, src, cfg, keys, on_success) {
          var fail = function(evt) {
              evt.Put(FLAG_FIELD, "tagval_parsing_error");
          }
          if (cfg.kv_separator.length !== 1) {
              throw("Invalid TAGVALMAP ValueDelimiter (must have 1 character)");
          }
          var quotes_len = cfg.open_quote.length > 0 && cfg.close_quote.length > 0?
              cfg.open_quote.length + cfg.close_quote.length : 0;
          var kv_regex = new RegExp('^*([^' + cfg.kv_separator + ']*)*' + cfg.kv_separator + '*(.*)*$');
          return function(evt) {
              var msg = evt.Get(src);
              if (msg === undefined) {
                  console.warn("tagval: input field is missing");
                  return fail(evt);
              }
              var pairs = msg.split(cfg.pair_separator);
              var i;
              var success = false;
              var prev = "";
              for (i=0; i<pairs.length; i++) {
                  var m = pairs[i].match(kv_regex);
                  var field;
                  if (m === null || m.length !== 3 || m[1] === undefined || m[2] === undefined) {
                      prev += pairs[i] + cfg.pair_separator;
                      continue;
                  }
                  var key = prev + m[1];
                  prev = "";
                  if ( (field=keys[key]) === undefined && (field=keys[key.trim()])===undefined ) {
                      continue;
                  }
                  var value = m[2].trim();
                  if (quotes_len > 0 &&
                      value.length >= cfg.open_quote.length + cfg.close_quote.length &&
                      value.substr(0, cfg.open_quote.length) === cfg.open_quote &&
                      value.substr(value.length - cfg.close_quote.length) === cfg.close_quote) {
                      value = value.substr(cfg.open_quote.length, value.length - quotes_len);
                  }
                  evt.Put(FIELDS_PREFIX + field, value);
                  success = true;
              }
              if (!success) {
                  return fail(evt);
              }
              if (on_success != null) {
                  on_success(evt);
              }
          }
      }
      
      var ecs_mappings = {
          "_facility": {convert: to_long, to:[{field: "log.syslog.facility.code", setter: fld_set}]},
          "_pri": {convert: to_long, to:[{field: "log.syslog.priority", setter: fld_set}]},
          "_severity": {convert: to_long, to:[{field: "log.syslog.severity.code", setter: fld_set}]},
          "action": {to:[{field: "event.action", setter: fld_prio, prio: 0}]},
          "administrator": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 4}]},
          "alias.ip": {convert: to_ip, to:[{field: "host.ip", setter: fld_prio, prio: 3},{field: "related.ip", setter: fld_append}]},
          "alias.ipv6": {convert: to_ip, to:[{field: "host.ip", setter: fld_prio, prio: 4},{field: "related.ip", setter: fld_append}]},
          "alias.mac": {convert: to_mac, to:[{field: "host.mac", setter: fld_prio, prio: 1}]},
          "application": {to:[{field: "network.application", setter: fld_set}]},
          "bytes": {convert: to_long, to:[{field: "network.bytes", setter: fld_set}]},
          "c_domain": {to:[{field: "source.domain", setter: fld_prio, prio: 1}]},
          "c_logon_id": {to:[{field: "user.id", setter: fld_prio, prio: 2}]},
          "c_user_name": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 8}]},
          "c_username": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 2}]},
          "cctld": {to:[{field: "url.top_level_domain", setter: fld_prio, prio: 1}]},
          "child_pid": {convert: to_long, to:[{field: "process.pid", setter: fld_prio, prio: 1}]},
          "child_pid_val": {to:[{field: "process.title", setter: fld_set}]},
          "child_process": {to:[{field: "process.name", setter: fld_prio, prio: 1}]},
          "city.dst": {to:[{field: "destination.geo.city_name", setter: fld_set}]},
          "city.src": {to:[{field: "source.geo.city_name", setter: fld_set}]},
          "daddr": {convert: to_ip, to:[{field: "destination.ip", setter: fld_append},{field: "related.ip", setter: fld_append}]},
          "daddr_v6": {convert: to_ip, to:[{field: "destination.ip", setter: fld_append},{field: "related.ip", setter: fld_append}]},
          "ddomain": {to:[{field: "destination.domain", setter: fld_prio, prio: 0}]},
          "devicehostip": {convert: to_ip, to:[{field: "host.ip", setter: fld_prio, prio: 2},{field: "related.ip", setter: fld_append}]},
          "devicehostmac": {convert: to_mac, to:[{field: "host.mac", setter: fld_prio, prio: 0}]},
          "dhost": {to:[{field: "destination.address", setter: fld_set},{field: "related.hosts", setter: fld_append}]},
          "dinterface": {to:[{field: "observer.egress.interface.name", setter: fld_set}]},
          "direction": {to:[{field: "network.direction", setter: fld_set}]},
          "directory": {to:[{field: "file.directory", setter: fld_set}]},
          "dmacaddr": {convert: to_mac, to:[{field: "destination.mac", setter: fld_set}]},
          "dns.responsetype": {to:[{field: "dns.answers.type", setter: fld_set}]},
          "dns.resptext": {to:[{field: "dns.answers.name", setter: fld_set}]},
          "dns_querytype": {to:[{field: "dns.question.type", setter: fld_set}]},
          "domain": {to:[{field: "server.domain", setter: fld_prio, prio: 0},{field: "related.hosts", setter: fld_append}]},
          "domain.dst": {to:[{field: "destination.domain", setter: fld_prio, prio: 1}]},
          "domain.src": {to:[{field: "source.domain", setter: fld_prio, prio: 2}]},
          "domain_id": {to:[{field: "user.domain", setter: fld_set}]},
          "domainname": {to:[{field: "server.domain", setter: fld_prio, prio: 1}]},
          "dport": {convert: to_long, to:[{field: "destination.port", setter: fld_prio, prio: 0}]},
          "dtransaddr": {convert: to_ip, to:[{field: "destination.nat.ip", setter: fld_prio, prio: 0},{field: "related.ip", setter: fld_append}]},
          "dtransport": {convert: to_long, to:[{field: "destination.nat.port", setter: fld_prio, prio: 0}]},
          "ec_outcome": {to:[{field: "event.outcome", setter: fld_ecs_outcome}]},
          "event_description": {to:[{field: "message", setter: fld_prio, prio: 0}]},
          "event_source": {to:[{field: "related.hosts", setter: fld_append}]},
          "event_time": {convert: to_date, to:[{field: "@timestamp", setter: fld_set}]},
          "event_type": {to:[{field: "event.action", setter: fld_prio, prio: 1}]},
          "extension": {to:[{field: "file.extension", setter: fld_prio, prio: 1}]},
          "file.attributes": {to:[{field: "file.attributes", setter: fld_set}]},
          "filename": {to:[{field: "file.name", setter: fld_prio, prio: 0}]},
          "filename_size": {convert: to_long, to:[{field: "file.size", setter: fld_set}]},
          "filepath": {to:[{field: "file.path", setter: fld_set}]},
          "filetype": {to:[{field: "file.type", setter: fld_set}]},
          "fqdn": {to:[{field: "related.hosts", setter: fld_append}]},
          "group": {to:[{field: "group.name", setter: fld_set}]},
          "groupid": {to:[{field: "group.id", setter: fld_set}]},
          "host": {to:[{field: "host.name", setter: fld_prio, prio: 1},{field: "related.hosts", setter: fld_append}]},
          "hostip": {convert: to_ip, to:[{field: "host.ip", setter: fld_prio, prio: 0},{field: "related.ip", setter: fld_append}]},
          "hostip_v6": {convert: to_ip, to:[{field: "host.ip", setter: fld_prio, prio: 1},{field: "related.ip", setter: fld_append}]},
          "hostname": {to:[{field: "host.name", setter: fld_prio, prio: 0}]},
          "id": {to:[{field: "event.code", setter: fld_prio, prio: 0}]},
          "interface": {to:[{field: "network.interface.name", setter: fld_set}]},
          "ip.orig": {convert: to_ip, to:[{field: "network.forwarded_ip", setter: fld_prio, prio: 0},{field: "related.ip", setter: fld_append}]},
          "ip.trans.dst": {convert: to_ip, to:[{field: "destination.nat.ip", setter: fld_prio, prio: 1},{field: "related.ip", setter: fld_append}]},
          "ip.trans.src": {convert: to_ip, to:[{field: "source.nat.ip", setter: fld_prio, prio: 1},{field: "related.ip", setter: fld_append}]},
          "ipv6.orig": {convert: to_ip, to:[{field: "network.forwarded_ip", setter: fld_prio, prio: 2},{field: "related.ip", setter: fld_append}]},
          "latdec_dst": {convert: to_double, to:[{field: "destination.geo.location.lat", setter: fld_set}]},
          "latdec_src": {convert: to_double, to:[{field: "source.geo.location.lat", setter: fld_set}]},
          "location_city": {to:[{field: "geo.city_name", setter: fld_set}]},
          "location_country": {to:[{field: "geo.country_name", setter: fld_set}]},
          "location_desc": {to:[{field: "geo.name", setter: fld_set}]},
          "location_dst": {to:[{field: "destination.geo.country_name", setter: fld_set}]},
          "location_src": {to:[{field: "source.geo.country_name", setter: fld_set}]},
          "location_state": {to:[{field: "geo.region_name", setter: fld_set}]},
          "logon_id": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 5}]},
          "longdec_dst": {convert: to_double, to:[{field: "destination.geo.location.lon", setter: fld_set}]},
          "longdec_src": {convert: to_double, to:[{field: "source.geo.location.lon", setter: fld_set}]},
          "macaddr": {convert: to_mac, to:[{field: "host.mac", setter: fld_prio, prio: 2}]},
          "messageid": {to:[{field: "event.code", setter: fld_prio, prio: 1}]},
          "method": {to:[{field: "http.request.method", setter: fld_set}]},
          "msg": {to:[{field: "log.original", setter: fld_set}]},
          "orig_ip": {convert: to_ip, to:[{field: "network.forwarded_ip", setter: fld_prio, prio: 1},{field: "related.ip", setter: fld_append}]},
          "owner": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 6}]},
          "packets": {convert: to_long, to:[{field: "network.packets", setter: fld_set}]},
          "parent_pid": {convert: to_long, to:[{field: "process.ppid", setter: fld_prio, prio: 0}]},
          "parent_pid_val": {to:[{field: "process.parent.title", setter: fld_set}]},
          "parent_process": {to:[{field: "process.parent.name", setter: fld_prio, prio: 0}]},
          "patient_fullname": {to:[{field: "user.full_name", setter: fld_prio, prio: 1}]},
          "port.dst": {convert: to_long, to:[{field: "destination.port", setter: fld_prio, prio: 1}]},
          "port.src": {convert: to_long, to:[{field: "source.port", setter: fld_prio, prio: 1}]},
          "port.trans.dst": {convert: to_long, to:[{field: "destination.nat.port", setter: fld_prio, prio: 1}]},
          "port.trans.src": {convert: to_long, to:[{field: "source.nat.port", setter: fld_prio, prio: 1}]},
          "process": {to:[{field: "process.name", setter: fld_prio, prio: 0}]},
          "process_id": {convert: to_long, to:[{field: "process.pid", setter: fld_prio, prio: 0}]},
          "process_id_src": {convert: to_long, to:[{field: "process.ppid", setter: fld_prio, prio: 1}]},
          "process_src": {to:[{field: "process.parent.name", setter: fld_prio, prio: 1}]},
          "product": {to:[{field: "observer.product", setter: fld_set}]},
          "protocol": {to:[{field: "network.protocol", setter: fld_set}]},
          "query": {to:[{field: "url.query", setter: fld_prio, prio: 2}]},
          "rbytes": {convert: to_long, to:[{field: "destination.bytes", setter: fld_set}]},
          "referer": {to:[{field: "http.request.referrer", setter: fld_prio, prio: 1}]},
          "rulename": {to:[{field: "rule.name", setter: fld_set}]},
          "saddr": {convert: to_ip, to:[{field: "source.ip", setter: fld_append},{field: "related.ip", setter: fld_append}]},
          "saddr_v6": {convert: to_ip, to:[{field: "source.ip", setter: fld_append},{field: "related.ip", setter: fld_append}]},
          "sbytes": {convert: to_long, to:[{field: "source.bytes", setter: fld_set}]},
          "sdomain": {to:[{field: "source.domain", setter: fld_prio, prio: 0}]},
          "service": {to:[{field: "service.name", setter: fld_prio, prio: 1}]},
          "service.name": {to:[{field: "service.name", setter: fld_prio, prio: 0}]},
          "service_account": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 7}]},
          "severity": {to:[{field: "log.level", setter: fld_set}]},
          "shost": {to:[{field: "host.hostname", setter: fld_set},{field: "source.address", setter: fld_set},{field: "related.hosts", setter: fld_append}]},
          "sinterface": {to:[{field: "observer.ingress.interface.name", setter: fld_set}]},
          "sld": {to:[{field: "url.registered_domain", setter: fld_set}]},
          "smacaddr": {convert: to_mac, to:[{field: "source.mac", setter: fld_set}]},
          "sport": {convert: to_long, to:[{field: "source.port", setter: fld_prio, prio: 0}]},
          "stransaddr": {convert: to_ip, to:[{field: "source.nat.ip", setter: fld_prio, prio: 0},{field: "related.ip", setter: fld_append}]},
          "stransport": {convert: to_long, to:[{field: "source.nat.port", setter: fld_prio, prio: 0}]},
          "tcp.dstport": {convert: to_long, to:[{field: "destination.port", setter: fld_prio, prio: 2}]},
          "tcp.srcport": {convert: to_long, to:[{field: "source.port", setter: fld_prio, prio: 2}]},
          "timezone": {to:[{field: "event.timezone", setter: fld_set}]},
          "tld": {to:[{field: "url.top_level_domain", setter: fld_prio, prio: 0}]},
          "udp.dstport": {convert: to_long, to:[{field: "destination.port", setter: fld_prio, prio: 3}]},
          "udp.srcport": {convert: to_long, to:[{field: "source.port", setter: fld_prio, prio: 3}]},
          "uid": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 3}]},
          "url": {to:[{field: "url.original", setter: fld_prio, prio: 1}]},
          "url_raw": {to:[{field: "url.original", setter: fld_prio, prio: 0}]},
          "urldomain": {to:[{field: "url.domain", setter: fld_prio, prio: 0}]},
          "urlquery": {to:[{field: "url.query", setter: fld_prio, prio: 0}]},
          "user": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 0}]},
          "user.id": {to:[{field: "user.id", setter: fld_prio, prio: 1}]},
          "user_agent": {to:[{field: "user_agent.original", setter: fld_set}]},
          "user_fullname": {to:[{field: "user.full_name", setter: fld_prio, prio: 0}]},
          "user_id": {to:[{field: "user.id", setter: fld_prio, prio: 0}]},
          "username": {to:[{field: "related.user", setter: fld_append},{field: "user.name", setter: fld_prio, prio: 1}]},
          "version": {to:[{field: "observer.version", setter: fld_set}]},
          "web_domain": {to:[{field: "url.domain", setter: fld_prio, prio: 1},{field: "related.hosts", setter: fld_append}]},
          "web_extension": {to:[{field: "file.extension", setter: fld_prio, prio: 0}]},
          "web_query": {to:[{field: "url.query", setter: fld_prio, prio: 1}]},
          "web_ref_domain": {to:[{field: "related.hosts", setter: fld_append}]},
          "web_referer": {to:[{field: "http.request.referrer", setter: fld_prio, prio: 0}]},
          "web_root": {to:[{field: "url.path", setter: fld_set}]},
          "webpage": {to:[{field: "file.name", setter: fld_prio, prio: 1}]},
      };
      
      var rsa_mappings = {
          "access_point": {to:[{field: "rsa.wireless.access_point", setter: fld_set}]},
          "accesses": {to:[{field: "rsa.identity.accesses", setter: fld_set}]},
          "acl_id": {to:[{field: "rsa.misc.acl_id", setter: fld_set}]},
          "acl_op": {to:[{field: "rsa.misc.acl_op", setter: fld_set}]},
          "acl_pos": {to:[{field: "rsa.misc.acl_pos", setter: fld_set}]},
          "acl_table": {to:[{field: "rsa.misc.acl_table", setter: fld_set}]},
          "action": {to:[{field: "rsa.misc.action", setter: fld_append}]},
          "ad_computer_dst": {to:[{field: "rsa.network.ad_computer_dst", setter: fld_set}]},
          "addr": {to:[{field: "rsa.network.addr", setter: fld_set}]},
          "admin": {to:[{field: "rsa.misc.admin", setter: fld_set}]},
          "agent": {to:[{field: "rsa.misc.client", setter: fld_prio, prio: 0}]},
          "agent.id": {to:[{field: "rsa.misc.agent_id", setter: fld_set}]},
          "alarm_id": {to:[{field: "rsa.misc.alarm_id", setter: fld_set}]},
          "alarmname": {to:[{field: "rsa.misc.alarmname", setter: fld_set}]},
          "alert": {to:[{field: "rsa.threat.alert", setter: fld_set}]},
          "alert_id": {to:[{field: "rsa.misc.alert_id", setter: fld_set}]},
          "alias.host": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "analysis.file": {to:[{field: "rsa.investigations.analysis_file", setter: fld_set}]},
          "analysis.service": {to:[{field: "rsa.investigations.analysis_service", setter: fld_set}]},
          "analysis.session": {to:[{field: "rsa.investigations.analysis_session", setter: fld_set}]},
          "app_id": {to:[{field: "rsa.misc.app_id", setter: fld_set}]},
          "attachment": {to:[{field: "rsa.file.attachment", setter: fld_set}]},
          "audit": {to:[{field: "rsa.misc.audit", setter: fld_set}]},
          "audit_class": {to:[{field: "rsa.internal.audit_class", setter: fld_set}]},
          "audit_object": {to:[{field: "rsa.misc.audit_object", setter: fld_set}]},
          "auditdata": {to:[{field: "rsa.misc.auditdata", setter: fld_set}]},
          "authmethod": {to:[{field: "rsa.identity.auth_method", setter: fld_set}]},
          "autorun_type": {to:[{field: "rsa.misc.autorun_type", setter: fld_set}]},
          "bcc": {to:[{field: "rsa.email.email", setter: fld_append}]},
          "benchmark": {to:[{field: "rsa.misc.benchmark", setter: fld_set}]},
          "binary": {to:[{field: "rsa.file.binary", setter: fld_set}]},
          "boc": {to:[{field: "rsa.investigations.boc", setter: fld_set}]},
          "bssid": {to:[{field: "rsa.wireless.wlan_ssid", setter: fld_prio, prio: 1}]},
          "bypass": {to:[{field: "rsa.misc.bypass", setter: fld_set}]},
          "c_sid": {to:[{field: "rsa.identity.user_sid_src", setter: fld_set}]},
          "cache": {to:[{field: "rsa.misc.cache", setter: fld_set}]},
          "cache_hit": {to:[{field: "rsa.misc.cache_hit", setter: fld_set}]},
          "calling_from": {to:[{field: "rsa.misc.phone", setter: fld_prio, prio: 1}]},
          "calling_to": {to:[{field: "rsa.misc.phone", setter: fld_prio, prio: 0}]},
          "category": {to:[{field: "rsa.misc.category", setter: fld_set}]},
          "cc": {to:[{field: "rsa.email.email", setter: fld_append}]},
          "cc.number": {convert: to_long, to:[{field: "rsa.misc.cc_number", setter: fld_set}]},
          "cefversion": {to:[{field: "rsa.misc.cefversion", setter: fld_set}]},
          "cert.serial": {to:[{field: "rsa.crypto.cert_serial", setter: fld_set}]},
          "cert_ca": {to:[{field: "rsa.crypto.cert_ca", setter: fld_set}]},
          "cert_checksum": {to:[{field: "rsa.crypto.cert_checksum", setter: fld_set}]},
          "cert_common": {to:[{field: "rsa.crypto.cert_common", setter: fld_set}]},
          "cert_error": {to:[{field: "rsa.crypto.cert_error", setter: fld_set}]},
          "cert_hostname": {to:[{field: "rsa.crypto.cert_host_name", setter: fld_set}]},
          "cert_hostname_cat": {to:[{field: "rsa.crypto.cert_host_cat", setter: fld_set}]},
          "cert_issuer": {to:[{field: "rsa.crypto.cert_issuer", setter: fld_set}]},
          "cert_keysize": {to:[{field: "rsa.crypto.cert_keysize", setter: fld_set}]},
          "cert_status": {to:[{field: "rsa.crypto.cert_status", setter: fld_set}]},
          "cert_subject": {to:[{field: "rsa.crypto.cert_subject", setter: fld_set}]},
          "cert_username": {to:[{field: "rsa.crypto.cert_username", setter: fld_set}]},
          "cfg.attr": {to:[{field: "rsa.misc.cfg_attr", setter: fld_set}]},
          "cfg.obj": {to:[{field: "rsa.misc.cfg_obj", setter: fld_set}]},
          "cfg.path": {to:[{field: "rsa.misc.cfg_path", setter: fld_set}]},
          "change_attribute": {to:[{field: "rsa.misc.change_attrib", setter: fld_set}]},
          "change_new": {to:[{field: "rsa.misc.change_new", setter: fld_set}]},
          "change_old": {to:[{field: "rsa.misc.change_old", setter: fld_set}]},
          "changes": {to:[{field: "rsa.misc.changes", setter: fld_set}]},
          "checksum": {to:[{field: "rsa.misc.checksum", setter: fld_set}]},
          "checksum.dst": {to:[{field: "rsa.misc.checksum_dst", setter: fld_set}]},
          "checksum.src": {to:[{field: "rsa.misc.checksum_src", setter: fld_set}]},
          "cid": {to:[{field: "rsa.internal.cid", setter: fld_set}]},
          "client": {to:[{field: "rsa.misc.client", setter: fld_prio, prio: 1}]},
          "client_ip": {to:[{field: "rsa.misc.client_ip", setter: fld_set}]},
          "clustermembers": {to:[{field: "rsa.misc.clustermembers", setter: fld_set}]},
          "cmd": {to:[{field: "rsa.misc.cmd", setter: fld_set}]},
          "cn_acttimeout": {to:[{field: "rsa.misc.cn_acttimeout", setter: fld_set}]},
          "cn_asn_dst": {to:[{field: "rsa.web.cn_asn_dst", setter: fld_set}]},
          "cn_asn_src": {to:[{field: "rsa.misc.cn_asn_src", setter: fld_set}]},
          "cn_bgpv4nxthop": {to:[{field: "rsa.misc.cn_bgpv4nxthop", setter: fld_set}]},
          "cn_ctr_dst_code": {to:[{field: "rsa.misc.cn_ctr_dst_code", setter: fld_set}]},
          "cn_dst_tos": {to:[{field: "rsa.misc.cn_dst_tos", setter: fld_set}]},
          "cn_dst_vlan": {to:[{field: "rsa.misc.cn_dst_vlan", setter: fld_set}]},
          "cn_engine_id": {to:[{field: "rsa.misc.cn_engine_id", setter: fld_set}]},
          "cn_engine_type": {to:[{field: "rsa.misc.cn_engine_type", setter: fld_set}]},
          "cn_f_switch": {to:[{field: "rsa.misc.cn_f_switch", setter: fld_set}]},
          "cn_flowsampid": {to:[{field: "rsa.misc.cn_flowsampid", setter: fld_set}]},
          "cn_flowsampintv": {to:[{field: "rsa.misc.cn_flowsampintv", setter: fld_set}]},
          "cn_flowsampmode": {to:[{field: "rsa.misc.cn_flowsampmode", setter: fld_set}]},
          "cn_inacttimeout": {to:[{field: "rsa.misc.cn_inacttimeout", setter: fld_set}]},
          "cn_inpermbyts": {to:[{field: "rsa.misc.cn_inpermbyts", setter: fld_set}]},
          "cn_inpermpckts": {to:[{field: "rsa.misc.cn_inpermpckts", setter: fld_set}]},
          "cn_invalid": {to:[{field: "rsa.misc.cn_invalid", setter: fld_set}]},
          "cn_ip_proto_ver": {to:[{field: "rsa.misc.cn_ip_proto_ver", setter: fld_set}]},
          "cn_ipv4_ident": {to:[{field: "rsa.misc.cn_ipv4_ident", setter: fld_set}]},
          "cn_l_switch": {to:[{field: "rsa.misc.cn_l_switch", setter: fld_set}]},
          "cn_log_did": {to:[{field: "rsa.misc.cn_log_did", setter: fld_set}]},
          "cn_log_rid": {to:[{field: "rsa.misc.cn_log_rid", setter: fld_set}]},
          "cn_max_ttl": {to:[{field: "rsa.misc.cn_max_ttl", setter: fld_set}]},
          "cn_maxpcktlen": {to:[{field: "rsa.misc.cn_maxpcktlen", setter: fld_set}]},
          "cn_min_ttl": {to:[{field: "rsa.misc.cn_min_ttl", setter: fld_set}]},
          "cn_minpcktlen": {to:[{field: "rsa.misc.cn_minpcktlen", setter: fld_set}]},
          "cn_mpls_lbl_1": {to:[{field: "rsa.misc.cn_mpls_lbl_1", setter: fld_set}]},
          "cn_mpls_lbl_10": {to:[{field: "rsa.misc.cn_mpls_lbl_10", setter: fld_set}]},
          "cn_mpls_lbl_2": {to:[{field: "rsa.misc.cn_mpls_lbl_2", setter: fld_set}]},
          "cn_mpls_lbl_3": {to:[{field: "rsa.misc.cn_mpls_lbl_3", setter: fld_set}]},
          "cn_mpls_lbl_4": {to:[{field: "rsa.misc.cn_mpls_lbl_4", setter: fld_set}]},
          "cn_mpls_lbl_5": {to:[{field: "rsa.misc.cn_mpls_lbl_5", setter: fld_set}]},
          "cn_mpls_lbl_6": {to:[{field: "rsa.misc.cn_mpls_lbl_6", setter: fld_set}]},
          "cn_mpls_lbl_7": {to:[{field: "rsa.misc.cn_mpls_lbl_7", setter: fld_set}]},
          "cn_mpls_lbl_8": {to:[{field: "rsa.misc.cn_mpls_lbl_8", setter: fld_set}]},
          "cn_mpls_lbl_9": {to:[{field: "rsa.misc.cn_mpls_lbl_9", setter: fld_set}]},
          "cn_mplstoplabel": {to:[{field: "rsa.misc.cn_mplstoplabel", setter: fld_set}]},
          "cn_mplstoplabip": {to:[{field: "rsa.misc.cn_mplstoplabip", setter: fld_set}]},
          "cn_mul_dst_byt": {to:[{field: "rsa.misc.cn_mul_dst_byt", setter: fld_set}]},
          "cn_mul_dst_pks": {to:[{field: "rsa.misc.cn_mul_dst_pks", setter: fld_set}]},
          "cn_muligmptype": {to:[{field: "rsa.misc.cn_muligmptype", setter: fld_set}]},
          "cn_rpackets": {to:[{field: "rsa.web.cn_rpackets", setter: fld_set}]},
          "cn_sampalgo": {to:[{field: "rsa.misc.cn_sampalgo", setter: fld_set}]},
          "cn_sampint": {to:[{field: "rsa.misc.cn_sampint", setter: fld_set}]},
          "cn_seqctr": {to:[{field: "rsa.misc.cn_seqctr", setter: fld_set}]},
          "cn_spackets": {to:[{field: "rsa.misc.cn_spackets", setter: fld_set}]},
          "cn_src_tos": {to:[{field: "rsa.misc.cn_src_tos", setter: fld_set}]},
          "cn_src_vlan": {to:[{field: "rsa.misc.cn_src_vlan", setter: fld_set}]},
          "cn_sysuptime": {to:[{field: "rsa.misc.cn_sysuptime", setter: fld_set}]},
          "cn_template_id": {to:[{field: "rsa.misc.cn_template_id", setter: fld_set}]},
          "cn_totbytsexp": {to:[{field: "rsa.misc.cn_totbytsexp", setter: fld_set}]},
          "cn_totflowexp": {to:[{field: "rsa.misc.cn_totflowexp", setter: fld_set}]},
          "cn_totpcktsexp": {to:[{field: "rsa.misc.cn_totpcktsexp", setter: fld_set}]},
          "cn_unixnanosecs": {to:[{field: "rsa.misc.cn_unixnanosecs", setter: fld_set}]},
          "cn_v6flowlabel": {to:[{field: "rsa.misc.cn_v6flowlabel", setter: fld_set}]},
          "cn_v6optheaders": {to:[{field: "rsa.misc.cn_v6optheaders", setter: fld_set}]},
          "code": {to:[{field: "rsa.misc.code", setter: fld_set}]},
          "command": {to:[{field: "rsa.misc.command", setter: fld_set}]},
          "comments": {to:[{field: "rsa.misc.comments", setter: fld_set}]},
          "comp_class": {to:[{field: "rsa.misc.comp_class", setter: fld_set}]},
          "comp_name": {to:[{field: "rsa.misc.comp_name", setter: fld_set}]},
          "comp_rbytes": {to:[{field: "rsa.misc.comp_rbytes", setter: fld_set}]},
          "comp_sbytes": {to:[{field: "rsa.misc.comp_sbytes", setter: fld_set}]},
          "component_version": {to:[{field: "rsa.misc.comp_version", setter: fld_set}]},
          "connection_id": {to:[{field: "rsa.misc.connection_id", setter: fld_prio, prio: 1}]},
          "connectionid": {to:[{field: "rsa.misc.connection_id", setter: fld_prio, prio: 0}]},
          "content": {to:[{field: "rsa.misc.content", setter: fld_set}]},
          "content_type": {to:[{field: "rsa.misc.content_type", setter: fld_set}]},
          "content_version": {to:[{field: "rsa.misc.content_version", setter: fld_set}]},
          "context": {to:[{field: "rsa.misc.context", setter: fld_set}]},
          "count": {to:[{field: "rsa.misc.count", setter: fld_set}]},
          "cpu": {convert: to_long, to:[{field: "rsa.misc.cpu", setter: fld_set}]},
          "cpu_data": {to:[{field: "rsa.misc.cpu_data", setter: fld_set}]},
          "criticality": {to:[{field: "rsa.misc.criticality", setter: fld_set}]},
          "cs_agency_dst": {to:[{field: "rsa.misc.cs_agency_dst", setter: fld_set}]},
          "cs_analyzedby": {to:[{field: "rsa.misc.cs_analyzedby", setter: fld_set}]},
          "cs_av_other": {to:[{field: "rsa.misc.cs_av_other", setter: fld_set}]},
          "cs_av_primary": {to:[{field: "rsa.misc.cs_av_primary", setter: fld_set}]},
          "cs_av_secondary": {to:[{field: "rsa.misc.cs_av_secondary", setter: fld_set}]},
          "cs_bgpv6nxthop": {to:[{field: "rsa.misc.cs_bgpv6nxthop", setter: fld_set}]},
          "cs_bit9status": {to:[{field: "rsa.misc.cs_bit9status", setter: fld_set}]},
          "cs_context": {to:[{field: "rsa.misc.cs_context", setter: fld_set}]},
          "cs_control": {to:[{field: "rsa.misc.cs_control", setter: fld_set}]},
          "cs_data": {to:[{field: "rsa.misc.cs_data", setter: fld_set}]},
          "cs_datecret": {to:[{field: "rsa.misc.cs_datecret", setter: fld_set}]},
          "cs_dst_tld": {to:[{field: "rsa.misc.cs_dst_tld", setter: fld_set}]},
          "cs_eth_dst_ven": {to:[{field: "rsa.misc.cs_eth_dst_ven", setter: fld_set}]},
          "cs_eth_src_ven": {to:[{field: "rsa.misc.cs_eth_src_ven", setter: fld_set}]},
          "cs_event_uuid": {to:[{field: "rsa.misc.cs_event_uuid", setter: fld_set}]},
          "cs_filetype": {to:[{field: "rsa.misc.cs_filetype", setter: fld_set}]},
          "cs_fld": {to:[{field: "rsa.misc.cs_fld", setter: fld_set}]},
          "cs_if_desc": {to:[{field: "rsa.misc.cs_if_desc", setter: fld_set}]},
          "cs_if_name": {to:[{field: "rsa.misc.cs_if_name", setter: fld_set}]},
          "cs_ip_next_hop": {to:[{field: "rsa.misc.cs_ip_next_hop", setter: fld_set}]},
          "cs_ipv4dstpre": {to:[{field: "rsa.misc.cs_ipv4dstpre", setter: fld_set}]},
          "cs_ipv4srcpre": {to:[{field: "rsa.misc.cs_ipv4srcpre", setter: fld_set}]},
          "cs_lifetime": {to:[{field: "rsa.misc.cs_lifetime", setter: fld_set}]},
          "cs_log_medium": {to:[{field: "rsa.misc.cs_log_medium", setter: fld_set}]},
          "cs_loginname": {to:[{field: "rsa.misc.cs_loginname", setter: fld_set}]},
          "cs_modulescore": {to:[{field: "rsa.misc.cs_modulescore", setter: fld_set}]},
          "cs_modulesign": {to:[{field: "rsa.misc.cs_modulesign", setter: fld_set}]},
          "cs_opswatresult": {to:[{field: "rsa.misc.cs_opswatresult", setter: fld_set}]},
          "cs_payload": {to:[{field: "rsa.misc.cs_payload", setter: fld_set}]},
          "cs_registrant": {to:[{field: "rsa.misc.cs_registrant", setter: fld_set}]},
          "cs_registrar": {to:[{field: "rsa.misc.cs_registrar", setter: fld_set}]},
          "cs_represult": {to:[{field: "rsa.misc.cs_represult", setter: fld_set}]},
          "cs_rpayload": {to:[{field: "rsa.misc.cs_rpayload", setter: fld_set}]},
          "cs_sampler_name": {to:[{field: "rsa.misc.cs_sampler_name", setter: fld_set}]},
          "cs_sourcemodule": {to:[{field: "rsa.misc.cs_sourcemodule", setter: fld_set}]},
          "cs_streams": {to:[{field: "rsa.misc.cs_streams", setter: fld_set}]},
          "cs_targetmodule": {to:[{field: "rsa.misc.cs_targetmodule", setter: fld_set}]},
          "cs_v6nxthop": {to:[{field: "rsa.misc.cs_v6nxthop", setter: fld_set}]},
          "cs_whois_server": {to:[{field: "rsa.misc.cs_whois_server", setter: fld_set}]},
          "cs_yararesult": {to:[{field: "rsa.misc.cs_yararesult", setter: fld_set}]},
          "cve": {to:[{field: "rsa.misc.cve", setter: fld_set}]},
          "d_certauth": {to:[{field: "rsa.crypto.d_certauth", setter: fld_set}]},
          "d_cipher": {to:[{field: "rsa.crypto.cipher_dst", setter: fld_set}]},
          "d_ciphersize": {convert: to_long, to:[{field: "rsa.crypto.cipher_size_dst", setter: fld_set}]},
          "d_sslver": {to:[{field: "rsa.crypto.ssl_ver_dst", setter: fld_set}]},
          "data": {to:[{field: "rsa.internal.data", setter: fld_set}]},
          "data_type": {to:[{field: "rsa.misc.data_type", setter: fld_set}]},
          "date": {to:[{field: "rsa.time.date", setter: fld_set}]},
          "datetime": {to:[{field: "rsa.time.datetime", setter: fld_set}]},
          "day": {to:[{field: "rsa.time.day", setter: fld_set}]},
          "db_id": {to:[{field: "rsa.db.db_id", setter: fld_set}]},
          "db_name": {to:[{field: "rsa.db.database", setter: fld_set}]},
          "db_pid": {convert: to_long, to:[{field: "rsa.db.db_pid", setter: fld_set}]},
          "dclass_counter1": {convert: to_long, to:[{field: "rsa.counters.dclass_c1", setter: fld_set}]},
          "dclass_counter1_string": {to:[{field: "rsa.counters.dclass_c1_str", setter: fld_set}]},
          "dclass_counter2": {convert: to_long, to:[{field: "rsa.counters.dclass_c2", setter: fld_set}]},
          "dclass_counter2_string": {to:[{field: "rsa.counters.dclass_c2_str", setter: fld_set}]},
          "dclass_counter3": {convert: to_long, to:[{field: "rsa.counters.dclass_c3", setter: fld_set}]},
          "dclass_counter3_string": {to:[{field: "rsa.counters.dclass_c3_str", setter: fld_set}]},
          "dclass_ratio1": {to:[{field: "rsa.counters.dclass_r1", setter: fld_set}]},
          "dclass_ratio1_string": {to:[{field: "rsa.counters.dclass_r1_str", setter: fld_set}]},
          "dclass_ratio2": {to:[{field: "rsa.counters.dclass_r2", setter: fld_set}]},
          "dclass_ratio2_string": {to:[{field: "rsa.counters.dclass_r2_str", setter: fld_set}]},
          "dclass_ratio3": {to:[{field: "rsa.counters.dclass_r3", setter: fld_set}]},
          "dclass_ratio3_string": {to:[{field: "rsa.counters.dclass_r3_str", setter: fld_set}]},
          "dead": {convert: to_long, to:[{field: "rsa.internal.dead", setter: fld_set}]},
          "description": {to:[{field: "rsa.misc.description", setter: fld_set}]},
          "detail": {to:[{field: "rsa.misc.event_desc", setter: fld_set}]},
          "device": {to:[{field: "rsa.misc.device_name", setter: fld_set}]},
          "device.class": {to:[{field: "rsa.internal.device_class", setter: fld_set}]},
          "device.group": {to:[{field: "rsa.internal.device_group", setter: fld_set}]},
          "device.host": {to:[{field: "rsa.internal.device_host", setter: fld_set}]},
          "device.ip": {convert: to_ip, to:[{field: "rsa.internal.device_ip", setter: fld_set}]},
          "device.ipv6": {convert: to_ip, to:[{field: "rsa.internal.device_ipv6", setter: fld_set}]},
          "device.type": {to:[{field: "rsa.internal.device_type", setter: fld_set}]},
          "device.type.id": {convert: to_long, to:[{field: "rsa.internal.device_type_id", setter: fld_set}]},
          "devicehostname": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "devvendor": {to:[{field: "rsa.misc.devvendor", setter: fld_set}]},
          "dhost": {to:[{field: "rsa.network.host_dst", setter: fld_set}]},
          "did": {to:[{field: "rsa.internal.did", setter: fld_set}]},
          "dinterface": {to:[{field: "rsa.network.dinterface", setter: fld_set}]},
          "directory.dst": {to:[{field: "rsa.file.directory_dst", setter: fld_set}]},
          "directory.src": {to:[{field: "rsa.file.directory_src", setter: fld_set}]},
          "disk_volume": {to:[{field: "rsa.storage.disk_volume", setter: fld_set}]},
          "disposition": {to:[{field: "rsa.misc.disposition", setter: fld_set}]},
          "distance": {to:[{field: "rsa.misc.distance", setter: fld_set}]},
          "dmask": {to:[{field: "rsa.network.dmask", setter: fld_set}]},
          "dn": {to:[{field: "rsa.identity.dn", setter: fld_set}]},
          "dns_a_record": {to:[{field: "rsa.network.dns_a_record", setter: fld_set}]},
          "dns_cname_record": {to:[{field: "rsa.network.dns_cname_record", setter: fld_set}]},
          "dns_id": {to:[{field: "rsa.network.dns_id", setter: fld_set}]},
          "dns_opcode": {to:[{field: "rsa.network.dns_opcode", setter: fld_set}]},
          "dns_ptr_record": {to:[{field: "rsa.network.dns_ptr_record", setter: fld_set}]},
          "dns_resp": {to:[{field: "rsa.network.dns_resp", setter: fld_set}]},
          "dns_type": {to:[{field: "rsa.network.dns_type", setter: fld_set}]},
          "doc_number": {convert: to_long, to:[{field: "rsa.misc.doc_number", setter: fld_set}]},
          "domain": {to:[{field: "rsa.network.domain", setter: fld_set}]},
          "domain1": {to:[{field: "rsa.network.domain1", setter: fld_set}]},
          "dst_dn": {to:[{field: "rsa.identity.dn_dst", setter: fld_set}]},
          "dst_payload": {to:[{field: "rsa.misc.payload_dst", setter: fld_set}]},
          "dst_spi": {to:[{field: "rsa.misc.spi_dst", setter: fld_set}]},
          "dst_zone": {to:[{field: "rsa.network.zone_dst", setter: fld_set}]},
          "dstburb": {to:[{field: "rsa.misc.dstburb", setter: fld_set}]},
          "duration": {convert: to_double, to:[{field: "rsa.time.duration_time", setter: fld_set}]},
          "duration_string": {to:[{field: "rsa.time.duration_str", setter: fld_set}]},
          "ec_activity": {to:[{field: "rsa.investigations.ec_activity", setter: fld_set}]},
          "ec_outcome": {to:[{field: "rsa.investigations.ec_outcome", setter: fld_set}]},
          "ec_subject": {to:[{field: "rsa.investigations.ec_subject", setter: fld_set}]},
          "ec_theme": {to:[{field: "rsa.investigations.ec_theme", setter: fld_set}]},
          "edomain": {to:[{field: "rsa.misc.edomain", setter: fld_set}]},
          "edomaub": {to:[{field: "rsa.misc.edomaub", setter: fld_set}]},
          "effective_time": {convert: to_date, to:[{field: "rsa.time.effective_time", setter: fld_set}]},
          "ein.number": {convert: to_long, to:[{field: "rsa.misc.ein_number", setter: fld_set}]},
          "email": {to:[{field: "rsa.email.email", setter: fld_append}]},
          "encryption_type": {to:[{field: "rsa.crypto.crypto", setter: fld_set}]},
          "endtime": {convert: to_date, to:[{field: "rsa.time.endtime", setter: fld_set}]},
          "entropy.req": {convert: to_long, to:[{field: "rsa.internal.entropy_req", setter: fld_set}]},
          "entropy.res": {convert: to_long, to:[{field: "rsa.internal.entropy_res", setter: fld_set}]},
          "entry": {to:[{field: "rsa.internal.entry", setter: fld_set}]},
          "eoc": {to:[{field: "rsa.investigations.eoc", setter: fld_set}]},
          "error": {to:[{field: "rsa.misc.error", setter: fld_set}]},
          "eth_type": {convert: to_long, to:[{field: "rsa.network.eth_type", setter: fld_set}]},
          "euid": {to:[{field: "rsa.misc.euid", setter: fld_set}]},
          "event.cat": {convert: to_long, to:[{field: "rsa.investigations.event_cat", setter: fld_prio, prio: 1}]},
          "event.cat.name": {to:[{field: "rsa.investigations.event_cat_name", setter: fld_prio, prio: 1}]},
          "event_cat": {convert: to_long, to:[{field: "rsa.investigations.event_cat", setter: fld_prio, prio: 0}]},
          "event_cat_name": {to:[{field: "rsa.investigations.event_cat_name", setter: fld_prio, prio: 0}]},
          "event_category": {to:[{field: "rsa.misc.event_category", setter: fld_set}]},
          "event_computer": {to:[{field: "rsa.misc.event_computer", setter: fld_set}]},
          "event_counter": {convert: to_long, to:[{field: "rsa.counters.event_counter", setter: fld_set}]},
          "event_description": {to:[{field: "rsa.internal.event_desc", setter: fld_set}]},
          "event_id": {to:[{field: "rsa.misc.event_id", setter: fld_set}]},
          "event_log": {to:[{field: "rsa.misc.event_log", setter: fld_set}]},
          "event_name": {to:[{field: "rsa.internal.event_name", setter: fld_set}]},
          "event_queue_time": {convert: to_date, to:[{field: "rsa.time.event_queue_time", setter: fld_set}]},
          "event_source": {to:[{field: "rsa.misc.event_source", setter: fld_set}]},
          "event_state": {to:[{field: "rsa.misc.event_state", setter: fld_set}]},
          "event_time": {convert: to_date, to:[{field: "rsa.time.event_time", setter: fld_set}]},
          "event_time_str": {to:[{field: "rsa.time.event_time_str", setter: fld_prio, prio: 1}]},
          "event_time_string": {to:[{field: "rsa.time.event_time_str", setter: fld_prio, prio: 0}]},
          "event_type": {to:[{field: "rsa.misc.event_type", setter: fld_set}]},
          "event_user": {to:[{field: "rsa.misc.event_user", setter: fld_set}]},
          "eventtime": {to:[{field: "rsa.time.eventtime", setter: fld_set}]},
          "expected_val": {to:[{field: "rsa.misc.expected_val", setter: fld_set}]},
          "expiration_time": {convert: to_date, to:[{field: "rsa.time.expire_time", setter: fld_set}]},
          "expiration_time_string": {to:[{field: "rsa.time.expire_time_str", setter: fld_set}]},
          "facility": {to:[{field: "rsa.misc.facility", setter: fld_set}]},
          "facilityname": {to:[{field: "rsa.misc.facilityname", setter: fld_set}]},
          "faddr": {to:[{field: "rsa.network.faddr", setter: fld_set}]},
          "fcatnum": {to:[{field: "rsa.misc.fcatnum", setter: fld_set}]},
          "federated_idp": {to:[{field: "rsa.identity.federated_idp", setter: fld_set}]},
          "federated_sp": {to:[{field: "rsa.identity.federated_sp", setter: fld_set}]},
          "feed.category": {to:[{field: "rsa.internal.feed_category", setter: fld_set}]},
          "feed_desc": {to:[{field: "rsa.internal.feed_desc", setter: fld_set}]},
          "feed_name": {to:[{field: "rsa.internal.feed_name", setter: fld_set}]},
          "fhost": {to:[{field: "rsa.network.fhost", setter: fld_set}]},
          "file_entropy": {convert: to_double, to:[{field: "rsa.file.file_entropy", setter: fld_set}]},
          "file_vendor": {to:[{field: "rsa.file.file_vendor", setter: fld_set}]},
          "filename_dst": {to:[{field: "rsa.file.filename_dst", setter: fld_set}]},
          "filename_src": {to:[{field: "rsa.file.filename_src", setter: fld_set}]},
          "filename_tmp": {to:[{field: "rsa.file.filename_tmp", setter: fld_set}]},
          "filesystem": {to:[{field: "rsa.file.filesystem", setter: fld_set}]},
          "filter": {to:[{field: "rsa.misc.filter", setter: fld_set}]},
          "finterface": {to:[{field: "rsa.misc.finterface", setter: fld_set}]},
          "flags": {to:[{field: "rsa.misc.flags", setter: fld_set}]},
          "forensic_info": {to:[{field: "rsa.misc.forensic_info", setter: fld_set}]},
          "forward.ip": {convert: to_ip, to:[{field: "rsa.internal.forward_ip", setter: fld_set}]},
          "forward.ipv6": {convert: to_ip, to:[{field: "rsa.internal.forward_ipv6", setter: fld_set}]},
          "found": {to:[{field: "rsa.misc.found", setter: fld_set}]},
          "fport": {to:[{field: "rsa.network.fport", setter: fld_set}]},
          "fqdn": {to:[{field: "rsa.web.fqdn", setter: fld_set}]},
          "fresult": {convert: to_long, to:[{field: "rsa.misc.fresult", setter: fld_set}]},
          "from": {to:[{field: "rsa.email.email_src", setter: fld_set}]},
          "gaddr": {to:[{field: "rsa.misc.gaddr", setter: fld_set}]},
          "gateway": {to:[{field: "rsa.network.gateway", setter: fld_set}]},
          "gmtdate": {to:[{field: "rsa.time.gmtdate", setter: fld_set}]},
          "gmttime": {to:[{field: "rsa.time.gmttime", setter: fld_set}]},
          "group": {to:[{field: "rsa.misc.group", setter: fld_set}]},
          "group_object": {to:[{field: "rsa.misc.group_object", setter: fld_set}]},
          "groupid": {to:[{field: "rsa.misc.group_id", setter: fld_set}]},
          "h_code": {to:[{field: "rsa.internal.hcode", setter: fld_set}]},
          "hardware_id": {to:[{field: "rsa.misc.hardware_id", setter: fld_set}]},
          "header.id": {to:[{field: "rsa.internal.header_id", setter: fld_set}]},
          "host.orig": {to:[{field: "rsa.network.host_orig", setter: fld_set}]},
          "host.state": {to:[{field: "rsa.endpoint.host_state", setter: fld_set}]},
          "host.type": {to:[{field: "rsa.network.host_type", setter: fld_set}]},
          "host_role": {to:[{field: "rsa.identity.host_role", setter: fld_set}]},
          "hostid": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "hostname": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "hour": {to:[{field: "rsa.time.hour", setter: fld_set}]},
          "https.insact": {to:[{field: "rsa.crypto.https_insact", setter: fld_set}]},
          "https.valid": {to:[{field: "rsa.crypto.https_valid", setter: fld_set}]},
          "icmpcode": {convert: to_long, to:[{field: "rsa.network.icmp_code", setter: fld_set}]},
          "icmptype": {convert: to_long, to:[{field: "rsa.network.icmp_type", setter: fld_set}]},
          "id": {to:[{field: "rsa.misc.reference_id", setter: fld_set}]},
          "id1": {to:[{field: "rsa.misc.reference_id1", setter: fld_set}]},
          "id2": {to:[{field: "rsa.misc.reference_id2", setter: fld_set}]},
          "id3": {to:[{field: "rsa.misc.id3", setter: fld_set}]},
          "ike": {to:[{field: "rsa.crypto.ike", setter: fld_set}]},
          "ike_cookie1": {to:[{field: "rsa.crypto.ike_cookie1", setter: fld_set}]},
          "ike_cookie2": {to:[{field: "rsa.crypto.ike_cookie2", setter: fld_set}]},
          "im_buddyid": {to:[{field: "rsa.misc.im_buddyid", setter: fld_set}]},
          "im_buddyname": {to:[{field: "rsa.misc.im_buddyname", setter: fld_set}]},
          "im_client": {to:[{field: "rsa.misc.im_client", setter: fld_set}]},
          "im_croomid": {to:[{field: "rsa.misc.im_croomid", setter: fld_set}]},
          "im_croomtype": {to:[{field: "rsa.misc.im_croomtype", setter: fld_set}]},
          "im_members": {to:[{field: "rsa.misc.im_members", setter: fld_set}]},
          "im_userid": {to:[{field: "rsa.misc.im_userid", setter: fld_set}]},
          "im_username": {to:[{field: "rsa.misc.im_username", setter: fld_set}]},
          "index": {to:[{field: "rsa.misc.index", setter: fld_set}]},
          "info": {to:[{field: "rsa.db.index", setter: fld_set}]},
          "inode": {convert: to_long, to:[{field: "rsa.internal.inode", setter: fld_set}]},
          "inout": {to:[{field: "rsa.misc.inout", setter: fld_set}]},
          "instance": {to:[{field: "rsa.db.instance", setter: fld_set}]},
          "interface": {to:[{field: "rsa.network.interface", setter: fld_set}]},
          "inv.category": {to:[{field: "rsa.investigations.inv_category", setter: fld_set}]},
          "inv.context": {to:[{field: "rsa.investigations.inv_context", setter: fld_set}]},
          "ioc": {to:[{field: "rsa.investigations.ioc", setter: fld_set}]},
          "ip_proto": {convert: to_long, to:[{field: "rsa.network.ip_proto", setter: fld_set}]},
          "ipkt": {to:[{field: "rsa.misc.ipkt", setter: fld_set}]},
          "ipscat": {to:[{field: "rsa.misc.ipscat", setter: fld_set}]},
          "ipspri": {to:[{field: "rsa.misc.ipspri", setter: fld_set}]},
          "jobname": {to:[{field: "rsa.misc.jobname", setter: fld_set}]},
          "jobnum": {to:[{field: "rsa.misc.job_num", setter: fld_set}]},
          "laddr": {to:[{field: "rsa.network.laddr", setter: fld_set}]},
          "language": {to:[{field: "rsa.misc.language", setter: fld_set}]},
          "latitude": {to:[{field: "rsa.misc.latitude", setter: fld_set}]},
          "lc.cid": {to:[{field: "rsa.internal.lc_cid", setter: fld_set}]},
          "lc.ctime": {convert: to_date, to:[{field: "rsa.internal.lc_ctime", setter: fld_set}]},
          "ldap": {to:[{field: "rsa.identity.ldap", setter: fld_set}]},
          "ldap.query": {to:[{field: "rsa.identity.ldap_query", setter: fld_set}]},
          "ldap.response": {to:[{field: "rsa.identity.ldap_response", setter: fld_set}]},
          "level": {convert: to_long, to:[{field: "rsa.internal.level", setter: fld_set}]},
          "lhost": {to:[{field: "rsa.network.lhost", setter: fld_set}]},
          "library": {to:[{field: "rsa.misc.library", setter: fld_set}]},
          "lifetime": {convert: to_long, to:[{field: "rsa.misc.lifetime", setter: fld_set}]},
          "linenum": {to:[{field: "rsa.misc.linenum", setter: fld_set}]},
          "link": {to:[{field: "rsa.misc.link", setter: fld_set}]},
          "linterface": {to:[{field: "rsa.network.linterface", setter: fld_set}]},
          "list_name": {to:[{field: "rsa.misc.list_name", setter: fld_set}]},
          "listnum": {to:[{field: "rsa.misc.listnum", setter: fld_set}]},
          "load_data": {to:[{field: "rsa.misc.load_data", setter: fld_set}]},
          "location_floor": {to:[{field: "rsa.misc.location_floor", setter: fld_set}]},
          "location_mark": {to:[{field: "rsa.misc.location_mark", setter: fld_set}]},
          "log_id": {to:[{field: "rsa.misc.log_id", setter: fld_set}]},
          "log_type": {to:[{field: "rsa.misc.log_type", setter: fld_set}]},
          "logid": {to:[{field: "rsa.misc.logid", setter: fld_set}]},
          "logip": {to:[{field: "rsa.misc.logip", setter: fld_set}]},
          "logname": {to:[{field: "rsa.misc.logname", setter: fld_set}]},
          "logon_type": {to:[{field: "rsa.identity.logon_type", setter: fld_set}]},
          "logon_type_desc": {to:[{field: "rsa.identity.logon_type_desc", setter: fld_set}]},
          "longitude": {to:[{field: "rsa.misc.longitude", setter: fld_set}]},
          "lport": {to:[{field: "rsa.misc.lport", setter: fld_set}]},
          "lread": {convert: to_long, to:[{field: "rsa.db.lread", setter: fld_set}]},
          "lun": {to:[{field: "rsa.storage.lun", setter: fld_set}]},
          "lwrite": {convert: to_long, to:[{field: "rsa.db.lwrite", setter: fld_set}]},
          "macaddr": {convert: to_mac, to:[{field: "rsa.network.eth_host", setter: fld_set}]},
          "mail_id": {to:[{field: "rsa.misc.mail_id", setter: fld_set}]},
          "mask": {to:[{field: "rsa.network.mask", setter: fld_set}]},
          "match": {to:[{field: "rsa.misc.match", setter: fld_set}]},
          "mbug_data": {to:[{field: "rsa.misc.mbug_data", setter: fld_set}]},
          "mcb.req": {convert: to_long, to:[{field: "rsa.internal.mcb_req", setter: fld_set}]},
          "mcb.res": {convert: to_long, to:[{field: "rsa.internal.mcb_res", setter: fld_set}]},
          "mcbc.req": {convert: to_long, to:[{field: "rsa.internal.mcbc_req", setter: fld_set}]},
          "mcbc.res": {convert: to_long, to:[{field: "rsa.internal.mcbc_res", setter: fld_set}]},
          "medium": {convert: to_long, to:[{field: "rsa.internal.medium", setter: fld_set}]},
          "message": {to:[{field: "rsa.internal.message", setter: fld_set}]},
          "message_body": {to:[{field: "rsa.misc.message_body", setter: fld_set}]},
          "messageid": {to:[{field: "rsa.internal.messageid", setter: fld_set}]},
          "min": {to:[{field: "rsa.time.min", setter: fld_set}]},
          "misc": {to:[{field: "rsa.misc.misc", setter: fld_set}]},
          "misc_name": {to:[{field: "rsa.misc.misc_name", setter: fld_set}]},
          "mode": {to:[{field: "rsa.misc.mode", setter: fld_set}]},
          "month": {to:[{field: "rsa.time.month", setter: fld_set}]},
          "msg": {to:[{field: "rsa.internal.msg", setter: fld_set}]},
          "msgIdPart1": {to:[{field: "rsa.misc.msgIdPart1", setter: fld_set}]},
          "msgIdPart2": {to:[{field: "rsa.misc.msgIdPart2", setter: fld_set}]},
          "msgIdPart3": {to:[{field: "rsa.misc.msgIdPart3", setter: fld_set}]},
          "msgIdPart4": {to:[{field: "rsa.misc.msgIdPart4", setter: fld_set}]},
          "msg_id": {to:[{field: "rsa.internal.msg_id", setter: fld_set}]},
          "msg_type": {to:[{field: "rsa.misc.msg_type", setter: fld_set}]},
          "msgid": {to:[{field: "rsa.misc.msgid", setter: fld_set}]},
          "name": {to:[{field: "rsa.misc.name", setter: fld_set}]},
          "netname": {to:[{field: "rsa.network.netname", setter: fld_set}]},
          "netsessid": {to:[{field: "rsa.misc.netsessid", setter: fld_set}]},
          "network_port": {convert: to_long, to:[{field: "rsa.network.network_port", setter: fld_set}]},
          "network_service": {to:[{field: "rsa.network.network_service", setter: fld_set}]},
          "node": {to:[{field: "rsa.misc.node", setter: fld_set}]},
          "nodename": {to:[{field: "rsa.internal.node_name", setter: fld_set}]},
          "ntype": {to:[{field: "rsa.misc.ntype", setter: fld_set}]},
          "num": {to:[{field: "rsa.misc.num", setter: fld_set}]},
          "number": {to:[{field: "rsa.misc.number", setter: fld_set}]},
          "number1": {to:[{field: "rsa.misc.number1", setter: fld_set}]},
          "number2": {to:[{field: "rsa.misc.number2", setter: fld_set}]},
          "nwe.callback_id": {to:[{field: "rsa.internal.nwe_callback_id", setter: fld_set}]},
          "nwwn": {to:[{field: "rsa.misc.nwwn", setter: fld_set}]},
          "obj_id": {to:[{field: "rsa.internal.obj_id", setter: fld_set}]},
          "obj_name": {to:[{field: "rsa.misc.obj_name", setter: fld_set}]},
          "obj_server": {to:[{field: "rsa.internal.obj_server", setter: fld_set}]},
          "obj_type": {to:[{field: "rsa.misc.obj_type", setter: fld_set}]},
          "obj_value": {to:[{field: "rsa.internal.obj_val", setter: fld_set}]},
          "object": {to:[{field: "rsa.misc.object", setter: fld_set}]},
          "observed_val": {to:[{field: "rsa.misc.observed_val", setter: fld_set}]},
          "operation": {to:[{field: "rsa.misc.operation", setter: fld_set}]},
          "operation_id": {to:[{field: "rsa.misc.operation_id", setter: fld_set}]},
          "opkt": {to:[{field: "rsa.misc.opkt", setter: fld_set}]},
          "org.dst": {to:[{field: "rsa.physical.org_dst", setter: fld_prio, prio: 1}]},
          "org.src": {to:[{field: "rsa.physical.org_src", setter: fld_set}]},
          "org_dst": {to:[{field: "rsa.physical.org_dst", setter: fld_prio, prio: 0}]},
          "orig_from": {to:[{field: "rsa.misc.orig_from", setter: fld_set}]},
          "origin": {to:[{field: "rsa.network.origin", setter: fld_set}]},
          "original_owner": {to:[{field: "rsa.identity.owner", setter: fld_set}]},
          "os": {to:[{field: "rsa.misc.OS", setter: fld_set}]},
          "owner_id": {to:[{field: "rsa.misc.owner_id", setter: fld_set}]},
          "p_action": {to:[{field: "rsa.misc.p_action", setter: fld_set}]},
          "p_date": {to:[{field: "rsa.time.p_date", setter: fld_set}]},
          "p_filter": {to:[{field: "rsa.misc.p_filter", setter: fld_set}]},
          "p_group_object": {to:[{field: "rsa.misc.p_group_object", setter: fld_set}]},
          "p_id": {to:[{field: "rsa.misc.p_id", setter: fld_set}]},
          "p_month": {to:[{field: "rsa.time.p_month", setter: fld_set}]},
          "p_msgid": {to:[{field: "rsa.misc.p_msgid", setter: fld_set}]},
          "p_msgid1": {to:[{field: "rsa.misc.p_msgid1", setter: fld_set}]},
          "p_msgid2": {to:[{field: "rsa.misc.p_msgid2", setter: fld_set}]},
          "p_result1": {to:[{field: "rsa.misc.p_result1", setter: fld_set}]},
          "p_time": {to:[{field: "rsa.time.p_time", setter: fld_set}]},
          "p_time1": {to:[{field: "rsa.time.p_time1", setter: fld_set}]},
          "p_time2": {to:[{field: "rsa.time.p_time2", setter: fld_set}]},
          "p_url": {to:[{field: "rsa.web.p_url", setter: fld_set}]},
          "p_user_agent": {to:[{field: "rsa.web.p_user_agent", setter: fld_set}]},
          "p_web_cookie": {to:[{field: "rsa.web.p_web_cookie", setter: fld_set}]},
          "p_web_method": {to:[{field: "rsa.web.p_web_method", setter: fld_set}]},
          "p_web_referer": {to:[{field: "rsa.web.p_web_referer", setter: fld_set}]},
          "p_year": {to:[{field: "rsa.time.p_year", setter: fld_set}]},
          "packet_length": {to:[{field: "rsa.network.packet_length", setter: fld_set}]},
          "paddr": {convert: to_ip, to:[{field: "rsa.network.paddr", setter: fld_set}]},
          "param": {to:[{field: "rsa.misc.param", setter: fld_set}]},
          "param.dst": {to:[{field: "rsa.misc.param_dst", setter: fld_set}]},
          "param.src": {to:[{field: "rsa.misc.param_src", setter: fld_set}]},
          "parent_node": {to:[{field: "rsa.misc.parent_node", setter: fld_set}]},
          "parse.error": {to:[{field: "rsa.internal.parse_error", setter: fld_set}]},
          "password": {to:[{field: "rsa.identity.password", setter: fld_set}]},
          "password_chg": {to:[{field: "rsa.misc.password_chg", setter: fld_set}]},
          "password_expire": {to:[{field: "rsa.misc.password_expire", setter: fld_set}]},
          "patient_fname": {to:[{field: "rsa.healthcare.patient_fname", setter: fld_set}]},
          "patient_id": {to:[{field: "rsa.healthcare.patient_id", setter: fld_set}]},
          "patient_lname": {to:[{field: "rsa.healthcare.patient_lname", setter: fld_set}]},
          "patient_mname": {to:[{field: "rsa.healthcare.patient_mname", setter: fld_set}]},
          "payload.req": {convert: to_long, to:[{field: "rsa.internal.payload_req", setter: fld_set}]},
          "payload.res": {convert: to_long, to:[{field: "rsa.internal.payload_res", setter: fld_set}]},
          "peer": {to:[{field: "rsa.crypto.peer", setter: fld_set}]},
          "peer_id": {to:[{field: "rsa.crypto.peer_id", setter: fld_set}]},
          "permgranted": {to:[{field: "rsa.misc.permgranted", setter: fld_set}]},
          "permissions": {to:[{field: "rsa.db.permissions", setter: fld_set}]},
          "permwanted": {to:[{field: "rsa.misc.permwanted", setter: fld_set}]},
          "pgid": {to:[{field: "rsa.misc.pgid", setter: fld_set}]},
          "phone_number": {to:[{field: "rsa.misc.phone", setter: fld_prio, prio: 2}]},
          "phost": {to:[{field: "rsa.network.phost", setter: fld_set}]},
          "pid": {to:[{field: "rsa.misc.pid", setter: fld_set}]},
          "policy": {to:[{field: "rsa.misc.policy", setter: fld_set}]},
          "policyUUID": {to:[{field: "rsa.misc.policyUUID", setter: fld_set}]},
          "policy_id": {to:[{field: "rsa.misc.policy_id", setter: fld_set}]},
          "policy_value": {to:[{field: "rsa.misc.policy_value", setter: fld_set}]},
          "policy_waiver": {to:[{field: "rsa.misc.policy_waiver", setter: fld_set}]},
          "policyname": {to:[{field: "rsa.misc.policy_name", setter: fld_prio, prio: 0}]},
          "pool_id": {to:[{field: "rsa.misc.pool_id", setter: fld_set}]},
          "pool_name": {to:[{field: "rsa.misc.pool_name", setter: fld_set}]},
          "port": {convert: to_long, to:[{field: "rsa.network.port", setter: fld_set}]},
          "portname": {to:[{field: "rsa.misc.port_name", setter: fld_set}]},
          "pread": {convert: to_long, to:[{field: "rsa.db.pread", setter: fld_set}]},
          "priority": {to:[{field: "rsa.misc.priority", setter: fld_set}]},
          "privilege": {to:[{field: "rsa.file.privilege", setter: fld_set}]},
          "process.vid.dst": {to:[{field: "rsa.internal.process_vid_dst", setter: fld_set}]},
          "process.vid.src": {to:[{field: "rsa.internal.process_vid_src", setter: fld_set}]},
          "process_id_val": {to:[{field: "rsa.misc.process_id_val", setter: fld_set}]},
          "processing_time": {to:[{field: "rsa.time.process_time", setter: fld_set}]},
          "profile": {to:[{field: "rsa.identity.profile", setter: fld_set}]},
          "prog_asp_num": {to:[{field: "rsa.misc.prog_asp_num", setter: fld_set}]},
          "program": {to:[{field: "rsa.misc.program", setter: fld_set}]},
          "protocol_detail": {to:[{field: "rsa.network.protocol_detail", setter: fld_set}]},
          "pwwn": {to:[{field: "rsa.storage.pwwn", setter: fld_set}]},
          "r_hostid": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "real_data": {to:[{field: "rsa.misc.real_data", setter: fld_set}]},
          "realm": {to:[{field: "rsa.identity.realm", setter: fld_set}]},
          "reason": {to:[{field: "rsa.misc.reason", setter: fld_set}]},
          "rec_asp_device": {to:[{field: "rsa.misc.rec_asp_device", setter: fld_set}]},
          "rec_asp_num": {to:[{field: "rsa.misc.rec_asp_num", setter: fld_set}]},
          "rec_library": {to:[{field: "rsa.misc.rec_library", setter: fld_set}]},
          "recorded_time": {convert: to_date, to:[{field: "rsa.time.recorded_time", setter: fld_set}]},
          "recordnum": {to:[{field: "rsa.misc.recordnum", setter: fld_set}]},
          "registry.key": {to:[{field: "rsa.endpoint.registry_key", setter: fld_set}]},
          "registry.value": {to:[{field: "rsa.endpoint.registry_value", setter: fld_set}]},
          "remote_domain": {to:[{field: "rsa.web.remote_domain", setter: fld_set}]},
          "remote_domain_id": {to:[{field: "rsa.network.remote_domain_id", setter: fld_set}]},
          "reputation_num": {convert: to_double, to:[{field: "rsa.web.reputation_num", setter: fld_set}]},
          "resource": {to:[{field: "rsa.internal.resource", setter: fld_set}]},
          "resource_class": {to:[{field: "rsa.internal.resource_class", setter: fld_set}]},
          "result": {to:[{field: "rsa.misc.result", setter: fld_set}]},
          "result_code": {to:[{field: "rsa.misc.result_code", setter: fld_prio, prio: 1}]},
          "resultcode": {to:[{field: "rsa.misc.result_code", setter: fld_prio, prio: 0}]},
          "rid": {convert: to_long, to:[{field: "rsa.internal.rid", setter: fld_set}]},
          "risk": {to:[{field: "rsa.misc.risk", setter: fld_set}]},
          "risk_info": {to:[{field: "rsa.misc.risk_info", setter: fld_set}]},
          "risk_num": {convert: to_double, to:[{field: "rsa.misc.risk_num", setter: fld_set}]},
          "risk_num_comm": {convert: to_double, to:[{field: "rsa.misc.risk_num_comm", setter: fld_set}]},
          "risk_num_next": {convert: to_double, to:[{field: "rsa.misc.risk_num_next", setter: fld_set}]},
          "risk_num_sand": {convert: to_double, to:[{field: "rsa.misc.risk_num_sand", setter: fld_set}]},
          "risk_num_static": {convert: to_double, to:[{field: "rsa.misc.risk_num_static", setter: fld_set}]},
          "risk_suspicious": {to:[{field: "rsa.misc.risk_suspicious", setter: fld_set}]},
          "risk_warning": {to:[{field: "rsa.misc.risk_warning", setter: fld_set}]},
          "rpayload": {to:[{field: "rsa.network.rpayload", setter: fld_set}]},
          "ruid": {to:[{field: "rsa.misc.ruid", setter: fld_set}]},
          "rule": {to:[{field: "rsa.misc.rule", setter: fld_set}]},
          "rule_group": {to:[{field: "rsa.misc.rule_group", setter: fld_set}]},
          "rule_template": {to:[{field: "rsa.misc.rule_template", setter: fld_set}]},
          "rule_uid": {to:[{field: "rsa.misc.rule_uid", setter: fld_set}]},
          "rulename": {to:[{field: "rsa.misc.rule_name", setter: fld_set}]},
          "s_certauth": {to:[{field: "rsa.crypto.s_certauth", setter: fld_set}]},
          "s_cipher": {to:[{field: "rsa.crypto.cipher_src", setter: fld_set}]},
          "s_ciphersize": {convert: to_long, to:[{field: "rsa.crypto.cipher_size_src", setter: fld_set}]},
          "s_context": {to:[{field: "rsa.misc.context_subject", setter: fld_set}]},
          "s_sslver": {to:[{field: "rsa.crypto.ssl_ver_src", setter: fld_set}]},
          "sburb": {to:[{field: "rsa.misc.sburb", setter: fld_set}]},
          "scheme": {to:[{field: "rsa.crypto.scheme", setter: fld_set}]},
          "sdomain_fld": {to:[{field: "rsa.misc.sdomain_fld", setter: fld_set}]},
          "search.text": {to:[{field: "rsa.misc.search_text", setter: fld_set}]},
          "sec": {to:[{field: "rsa.misc.sec", setter: fld_set}]},
          "second": {to:[{field: "rsa.misc.second", setter: fld_set}]},
          "sensor": {to:[{field: "rsa.misc.sensor", setter: fld_set}]},
          "sensorname": {to:[{field: "rsa.misc.sensorname", setter: fld_set}]},
          "seqnum": {to:[{field: "rsa.misc.seqnum", setter: fld_set}]},
          "serial_number": {to:[{field: "rsa.misc.serial_number", setter: fld_set}]},
          "service.account": {to:[{field: "rsa.identity.service_account", setter: fld_set}]},
          "session": {to:[{field: "rsa.misc.session", setter: fld_set}]},
          "session.split": {to:[{field: "rsa.internal.session_split", setter: fld_set}]},
          "sessionid": {to:[{field: "rsa.misc.log_session_id", setter: fld_set}]},
          "sessionid1": {to:[{field: "rsa.misc.log_session_id1", setter: fld_set}]},
          "sessiontype": {to:[{field: "rsa.misc.sessiontype", setter: fld_set}]},
          "severity": {to:[{field: "rsa.misc.severity", setter: fld_set}]},
          "sid": {to:[{field: "rsa.identity.user_sid_dst", setter: fld_set}]},
          "sig.name": {to:[{field: "rsa.misc.sig_name", setter: fld_set}]},
          "sigUUID": {to:[{field: "rsa.misc.sigUUID", setter: fld_set}]},
          "sigcat": {to:[{field: "rsa.misc.sigcat", setter: fld_set}]},
          "sigid": {convert: to_long, to:[{field: "rsa.misc.sig_id", setter: fld_set}]},
          "sigid1": {convert: to_long, to:[{field: "rsa.misc.sig_id1", setter: fld_set}]},
          "sigid_string": {to:[{field: "rsa.misc.sig_id_str", setter: fld_set}]},
          "signame": {to:[{field: "rsa.misc.policy_name", setter: fld_prio, prio: 1}]},
          "sigtype": {to:[{field: "rsa.crypto.sig_type", setter: fld_set}]},
          "sinterface": {to:[{field: "rsa.network.sinterface", setter: fld_set}]},
          "site": {to:[{field: "rsa.internal.site", setter: fld_set}]},
          "size": {convert: to_long, to:[{field: "rsa.internal.size", setter: fld_set}]},
          "smask": {to:[{field: "rsa.network.smask", setter: fld_set}]},
          "snmp.oid": {to:[{field: "rsa.misc.snmp_oid", setter: fld_set}]},
          "snmp.value": {to:[{field: "rsa.misc.snmp_value", setter: fld_set}]},
          "sourcefile": {to:[{field: "rsa.internal.sourcefile", setter: fld_set}]},
          "space": {to:[{field: "rsa.misc.space", setter: fld_set}]},
          "space1": {to:[{field: "rsa.misc.space1", setter: fld_set}]},
          "spi": {to:[{field: "rsa.misc.spi", setter: fld_set}]},
          "sql": {to:[{field: "rsa.misc.sql", setter: fld_set}]},
          "src_dn": {to:[{field: "rsa.identity.dn_src", setter: fld_set}]},
          "src_payload": {to:[{field: "rsa.misc.payload_src", setter: fld_set}]},
          "src_spi": {to:[{field: "rsa.misc.spi_src", setter: fld_set}]},
          "src_zone": {to:[{field: "rsa.network.zone_src", setter: fld_set}]},
          "srcburb": {to:[{field: "rsa.misc.srcburb", setter: fld_set}]},
          "srcdom": {to:[{field: "rsa.misc.srcdom", setter: fld_set}]},
          "srcservice": {to:[{field: "rsa.misc.srcservice", setter: fld_set}]},
          "ssid": {to:[{field: "rsa.wireless.wlan_ssid", setter: fld_prio, prio: 0}]},
          "stamp": {convert: to_date, to:[{field: "rsa.time.stamp", setter: fld_set}]},
          "starttime": {convert: to_date, to:[{field: "rsa.time.starttime", setter: fld_set}]},
          "state": {to:[{field: "rsa.misc.state", setter: fld_set}]},
          "statement": {to:[{field: "rsa.internal.statement", setter: fld_set}]},
          "status": {to:[{field: "rsa.misc.status", setter: fld_set}]},
          "status1": {to:[{field: "rsa.misc.status1", setter: fld_set}]},
          "streams": {convert: to_long, to:[{field: "rsa.misc.streams", setter: fld_set}]},
          "subcategory": {to:[{field: "rsa.misc.subcategory", setter: fld_set}]},
          "subject": {to:[{field: "rsa.email.subject", setter: fld_set}]},
          "svcno": {to:[{field: "rsa.misc.svcno", setter: fld_set}]},
          "system": {to:[{field: "rsa.misc.system", setter: fld_set}]},
          "t_context": {to:[{field: "rsa.misc.context_target", setter: fld_set}]},
          "task_name": {to:[{field: "rsa.file.task_name", setter: fld_set}]},
          "tbdstr1": {to:[{field: "rsa.misc.tbdstr1", setter: fld_set}]},
          "tbdstr2": {to:[{field: "rsa.misc.tbdstr2", setter: fld_set}]},
          "tbl_name": {to:[{field: "rsa.db.table_name", setter: fld_set}]},
          "tcp_flags": {convert: to_long, to:[{field: "rsa.misc.tcp_flags", setter: fld_set}]},
          "terminal": {to:[{field: "rsa.misc.terminal", setter: fld_set}]},
          "tgtdom": {to:[{field: "rsa.misc.tgtdom", setter: fld_set}]},
          "tgtdomain": {to:[{field: "rsa.misc.tgtdomain", setter: fld_set}]},
          "threat_name": {to:[{field: "rsa.threat.threat_category", setter: fld_set}]},
          "threat_source": {to:[{field: "rsa.threat.threat_source", setter: fld_set}]},
          "threat_val": {to:[{field: "rsa.threat.threat_desc", setter: fld_set}]},
          "threshold": {to:[{field: "rsa.misc.threshold", setter: fld_set}]},
          "time": {convert: to_date, to:[{field: "rsa.internal.time", setter: fld_set}]},
          "timestamp": {to:[{field: "rsa.time.timestamp", setter: fld_set}]},
          "timezone": {to:[{field: "rsa.time.timezone", setter: fld_set}]},
          "to": {to:[{field: "rsa.email.email_dst", setter: fld_set}]},
          "tos": {convert: to_long, to:[{field: "rsa.misc.tos", setter: fld_set}]},
          "trans_from": {to:[{field: "rsa.email.trans_from", setter: fld_set}]},
          "trans_id": {to:[{field: "rsa.db.transact_id", setter: fld_set}]},
          "trans_to": {to:[{field: "rsa.email.trans_to", setter: fld_set}]},
          "trigger_desc": {to:[{field: "rsa.misc.trigger_desc", setter: fld_set}]},
          "trigger_val": {to:[{field: "rsa.misc.trigger_val", setter: fld_set}]},
          "type": {to:[{field: "rsa.misc.type", setter: fld_set}]},
          "type1": {to:[{field: "rsa.misc.type1", setter: fld_set}]},
          "tzone": {to:[{field: "rsa.time.tzone", setter: fld_set}]},
          "ubc.req": {convert: to_long, to:[{field: "rsa.internal.ubc_req", setter: fld_set}]},
          "ubc.res": {convert: to_long, to:[{field: "rsa.internal.ubc_res", setter: fld_set}]},
          "udb_class": {to:[{field: "rsa.misc.udb_class", setter: fld_set}]},
          "url_fld": {to:[{field: "rsa.misc.url_fld", setter: fld_set}]},
          "urlpage": {to:[{field: "rsa.web.urlpage", setter: fld_set}]},
          "urlroot": {to:[{field: "rsa.web.urlroot", setter: fld_set}]},
          "user_address": {to:[{field: "rsa.email.email", setter: fld_append}]},
          "user_dept": {to:[{field: "rsa.identity.user_dept", setter: fld_set}]},
          "user_div": {to:[{field: "rsa.misc.user_div", setter: fld_set}]},
          "user_fname": {to:[{field: "rsa.identity.firstname", setter: fld_set}]},
          "user_lname": {to:[{field: "rsa.identity.lastname", setter: fld_set}]},
          "user_mname": {to:[{field: "rsa.identity.middlename", setter: fld_set}]},
          "user_org": {to:[{field: "rsa.identity.org", setter: fld_set}]},
          "user_role": {to:[{field: "rsa.identity.user_role", setter: fld_set}]},
          "userid": {to:[{field: "rsa.misc.userid", setter: fld_set}]},
          "username_fld": {to:[{field: "rsa.misc.username_fld", setter: fld_set}]},
          "utcstamp": {to:[{field: "rsa.misc.utcstamp", setter: fld_set}]},
          "v_instafname": {to:[{field: "rsa.misc.v_instafname", setter: fld_set}]},
          "vendor_event_cat": {to:[{field: "rsa.investigations.event_vcat", setter: fld_set}]},
          "version": {to:[{field: "rsa.misc.version", setter: fld_set}]},
          "vid": {to:[{field: "rsa.internal.msg_vid", setter: fld_set}]},
          "virt_data": {to:[{field: "rsa.misc.virt_data", setter: fld_set}]},
          "virusname": {to:[{field: "rsa.misc.virusname", setter: fld_set}]},
          "vlan": {convert: to_long, to:[{field: "rsa.network.vlan", setter: fld_set}]},
          "vlan.name": {to:[{field: "rsa.network.vlan_name", setter: fld_set}]},
          "vm_target": {to:[{field: "rsa.misc.vm_target", setter: fld_set}]},
          "vpnid": {to:[{field: "rsa.misc.vpnid", setter: fld_set}]},
          "vsys": {to:[{field: "rsa.misc.vsys", setter: fld_set}]},
          "vuln_ref": {to:[{field: "rsa.misc.vuln_ref", setter: fld_set}]},
          "web_cookie": {to:[{field: "rsa.web.web_cookie", setter: fld_set}]},
          "web_extension_tmp": {to:[{field: "rsa.web.web_extension_tmp", setter: fld_set}]},
          "web_host": {to:[{field: "rsa.web.alias_host", setter: fld_set}]},
          "web_method": {to:[{field: "rsa.misc.action", setter: fld_append}]},
          "web_page": {to:[{field: "rsa.web.web_page", setter: fld_set}]},
          "web_ref_domain": {to:[{field: "rsa.web.web_ref_domain", setter: fld_set}]},
          "web_ref_host": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "web_ref_page": {to:[{field: "rsa.web.web_ref_page", setter: fld_set}]},
          "web_ref_query": {to:[{field: "rsa.web.web_ref_query", setter: fld_set}]},
          "web_ref_root": {to:[{field: "rsa.web.web_ref_root", setter: fld_set}]},
          "wifi_channel": {convert: to_long, to:[{field: "rsa.wireless.wlan_channel", setter: fld_set}]},
          "wlan": {to:[{field: "rsa.wireless.wlan_name", setter: fld_set}]},
          "word": {to:[{field: "rsa.internal.word", setter: fld_set}]},
          "workspace_desc": {to:[{field: "rsa.misc.workspace", setter: fld_set}]},
          "workstation": {to:[{field: "rsa.network.alias_host", setter: fld_append}]},
          "year": {to:[{field: "rsa.time.year", setter: fld_set}]},
          "zone": {to:[{field: "rsa.network.zone", setter: fld_set}]},
      };
      
      function to_date(value) {
          switch (typeof (value)) {
              case "object":
                  // This is a Date. But as it was obtained from evt.Get(), the VM
                  // doesn't see it as a JS Date anymore, thus value instanceof Date === false.
                  // Have to trust that any object here is a valid Date for Go.
                  return value;
              case "string":
                  var asDate = new Date(value);
                  if (!isNaN(asDate)) return asDate;
          }
      }
      
      // ECMAScript 5.1 doesn't have Object.MAX_SAFE_INTEGER / Object.MIN_SAFE_INTEGER.
      var maxSafeInt = Math.pow(2, 53) - 1;
      var minSafeInt = -maxSafeInt;
      
      function to_long(value) {
          var num = parseInt(value);
          // Better not to index a number if it's not safe (above 53 bits).
          return !isNaN(num) && minSafeInt <= num && num <= maxSafeInt ? num : undefined;
      }
      
      function to_ip(value) {
          if (value.indexOf(":") === -1)
              return to_ipv4(value);
          return to_ipv6(value);
      }
      
      var ipv4_regex = /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/;
      var ipv6_hex_regex = /^[0-9A-Fa-f]{1,4}$/;
      
      function to_ipv4(value) {
          var result = ipv4_regex.exec(value);
          if (result == null || result.length !== 5) return;
          for (var i = 1; i < 5; i++) {
              var num = strictToInt(result[i]);
              if (isNaN(num) || num < 0 || num > 255) return;
          }
          return value;
      }
      
      function to_ipv6(value) {
          var sqEnd = value.indexOf("]");
          if (sqEnd > -1) {
              if (value.charAt(0) !== "[") return;
              value = value.substr(1, sqEnd - 1);
          }
          var zoneOffset = value.indexOf("%");
          if (zoneOffset > -1) {
              value = value.substr(0, zoneOffset);
          }
          var parts = value.split(":");
          if (parts == null || parts.length < 3 || parts.length > 8) return;
          var numEmpty = 0;
          var innerEmpty = 0;
          for (var i = 0; i < parts.length; i++) {
              if (parts[i].length === 0) {
                  numEmpty++;
                  if (i > 0 && i + 1 < parts.length) innerEmpty++;
              } else if (!parts[i].match(ipv6_hex_regex) &&
                  // Accept an IPv6 with a valid IPv4 at the end.
                  ((i + 1 < parts.length) || !to_ipv4(parts[i]))) {
                  return;
              }
          }
          return innerEmpty === 0 && parts.length === 8 || innerEmpty === 1 ? value : undefined;
      }
      
      function to_double(value) {
          return parseFloat(value);
      }
      
      function to_mac(value) {
          // ES doesn't have a mac datatype so it's safe to ingest whatever was captured.
          return value;
      }
      
      function to_lowercase(value) {
          // to_lowercase is used against keyword fields, which can accept
          // any other type (numbers, dates).
          return typeof(value) === "string"? value.toLowerCase() : value;
      }
      
      function fld_set(dst, value) {
          dst[this.field] = { v: value };
      }
      
      function fld_append(dst, value) {
          if (dst[this.field] === undefined) {
              dst[this.field] = { v: [value] };
          } else {
              var base = dst[this.field];
              if (base.v.indexOf(value)===-1) base.v.push(value);
          }
      }
      
      function fld_prio(dst, value) {
          if (dst[this.field] === undefined) {
              dst[this.field] = { v: value, prio: this.prio};
          } else if(this.prio < dst[this.field].prio) {
              dst[this.field].v = value;
              dst[this.field].prio = this.prio;
          }
      }
      
      var valid_ecs_outcome = {
          'failure': true,
          'success': true,
          'unknown': true
      };
      
      function fld_ecs_outcome(dst, value) {
          value = value.toLowerCase();
          if (valid_ecs_outcome[value] === undefined) {
              value = 'unknown';
          }
          if (dst[this.field] === undefined) {
              dst[this.field] = { v: value };
          } else if (dst[this.field].v === 'unknown') {
              dst[this.field] = { v: value };
          }
      }
      
      function map_all(evt, targets, value) {
          for (var i = 0; i < targets.length; i++) {
              evt.Put(targets[i], value);
          }
      }
      
      function populate_fields(evt) {
          var base = evt.Get(FIELDS_OBJECT);
          if (base === null) return;
          alternate_datetime(evt);
          if (map_ecs) {
              do_populate(evt, base, ecs_mappings);
          }
          if (map_rsa) {
              do_populate(evt, base, rsa_mappings);
          }
          if (keep_raw) {
              evt.Put("rsa.raw", base);
          }
          evt.Delete(FIELDS_OBJECT);
      }
      
      var datetime_alt_components = [
          {field: "day", fmts: [[dF]]},
          {field: "year", fmts: [[dW]]},
          {field: "month", fmts: [[dB],[dG]]},
          {field: "date", fmts: [[dW,dSkip,dG,dSkip,dF],[dW,dSkip,dB,dSkip,dF],[dW,dSkip,dR,dSkip,dF]]},
          {field: "hour", fmts: [[dN]]},
          {field: "min", fmts: [[dU]]},
          {field: "secs", fmts: [[dO]]},
          {field: "time", fmts: [[dN, dSkip, dU, dSkip, dO]]},
      ];
      
      function alternate_datetime(evt) {
          if (evt.Get(FIELDS_PREFIX + "event_time") != null) {
              return;
          }
          var tzOffset = tz_offset;
          if (tzOffset === "event") {
              tzOffset = evt.Get("event.timezone");
          }
          var container = new DateContainer(tzOffset);
          for (var i=0; i<datetime_alt_components.length; i++) {
              var dtc = datetime_alt_components[i];
              var value = evt.Get(FIELDS_PREFIX + dtc.field) || evt.Get(FIELDS_PREFIX + "h" + dtc.field);
              if (value == null) continue;
              for (var f=0; f<dtc.fmts.length; f++) {
                  var pos = date_time_try_pattern_at_pos(dtc.fmts[f], value, 0, container);
                  if (pos !== undefined) {
                      break;
                  }
              }
          }
          var date = container.toDate();
          if (date !== undefined) {
              evt.Put(FIELDS_PREFIX + "event_time", date);
          }
      }
      
      function do_populate(evt, base, targets) {
          var result = {};
          var key;
          for (key in base) {
              if (!base.hasOwnProperty(key)) continue;
              var mapping = targets[key];
              if (mapping === undefined) continue;
              var value = base[key];
              if (value === "") continue;
              if (mapping.convert !== undefined) {
                  value = mapping.convert(value);
                  if (value === undefined) {
                      if (debug) {
                          console.debug("Failed to convert field '" + key + "' = '" + base[key] + "' with " + mapping.convert.name);
                      }
                      continue;
                  }
              }
              for (var i=0; i<mapping.to.length; i++) {
                  var tgt = mapping.to[i];
                  tgt.setter(result, value);
              }
          }
          for (key in result) {
              if (!result.hasOwnProperty(key)) continue;
              evt.Put(key, result[key].v);
          }
      }
      
      function test() {
          // Silence console output during test.
          var saved = console;
          console = {
              debug: function() {},
              warn: function() {},
              error: function() {},
          };
          test_date_times();
          test_tz();
          test_conversions();
          test_mappings();
          test_url();
          test_calls();
          test_assumptions();
          test_tvm();
          console = saved;
      }
      
      function pass_test(input, output) {
          return {input: input, expected: output !== undefined ? output : input};
      }
      
      function fail_test(input) {
          return {input: input};
      }
      
      function test_date_times() {
          var date_time = function(input) {
              var res = date_time_try_pattern(input.fmt, input.str, input.tz);
              return res !== undefined? res.toISOString() : res;
          };
          test_fn_call(date_time, [
              pass_test(
                  {
                      fmt: [dW,dc("-"),dM,dc("-"),dD,dc("T"),dH,dc(":"),dT,dc(":"),dS],
                      str: "2017-10-16T15:23:42"
                  },
                  "2017-10-16T15:23:42.000Z"),
              pass_test(
                  {
                      fmt: [dW,dc("-"),dM,dc("-"),dD,dc("T"),dH,dc(":"),dT,dc(":"),dS],
                      str: "2017-10-16T15:23:42",
                      tz: "-02:00",
                  },
                  "2017-10-16T17:23:42.000Z"),
              pass_test(
                  {
                      fmt: [dR, dF, dc("th"), dY, dc(","), dI, dQ, dU, dc("min"), dO, dc("secs")],
                      str: "October 7th 22, 3 P.M. 5 min 12 secs"
                  },
                  "2022-10-07T15:05:12.000Z"),
              pass_test(
                  {
                      fmt: [dF, dc("/"), dB, dY, dc(","), dI, dP],
                      str: "31/OCT 70, 12am"
                  },
                  "1970-10-31T00:00:00.000Z"),
              pass_test(
                  {
                      fmt: [dX],
                      str: "1592241213",
                      tz: "+00:00"
                  },
                  "2020-06-15T17:13:33.000Z"),
              pass_test(
                  {
                      fmt: [dW, dG, dF, dZ],
                      str: "20314 12 3:5:42",
                      tz: "+02:00"
                  }, "2031-04-12T01:05:42.000Z"),
              pass_test(
                  {
                      fmt: [dW, dG, dF, dZ],
                      str: "20314 12 3:5:42",
                      tz: "-07:30",
                  }, "2031-04-12T10:35:42.000Z"),
              pass_test(
                  {
                      fmt: [dW, dG, dF, dZ],
                      str: "20314 12 3:5:42",
                      tz: "+0500",
                  }, "2031-04-11T22:05:42.000Z")
          ]);
      }
      
      function test_tz() {
          test_fn_call(parse_local_tz_offset, [
              pass_test(0, "+00:00"),
              pass_test(59, "+00:59"),
              pass_test(60, "+01:00"),
              pass_test(61, "+01:01"),
              pass_test(-1, "-00:01"),
              pass_test(-59, "-00:59"),
              pass_test(-60, "-01:00"),
              pass_test(705, "+11:45"),
              pass_test(-705, "-11:45"),
          ]);
          var date = new Date();
          var localOff = parse_local_tz_offset(-date.getTimezoneOffset());
          test_fn_call(parse_tz_offset, [
              pass_test("local", localOff),
              pass_test("event", "event"),
              pass_test("-07:00", "-07:00"),
              pass_test("-1145", "-11:45"),
              pass_test("+02", "+02:00"),
          ]);
      }
      
      function test_conversions() {
          test_fn_call(to_ip, [
              pass_test("127.0.0.1"),
              pass_test("255.255.255.255"),
              pass_test("008.189.239.199"),
              fail_test(""),
              fail_test("not an IP"),
              fail_test("42"),
              fail_test("127.0.0.1."),
              fail_test("127.0.0."),
              fail_test("10.100.1000.1"),
              pass_test("fd00:1111:2222:3333:4444:5555:6666:7777"),
              pass_test("fd00::7777%eth0", "fd00::7777"),
              pass_test("[fd00::7777]", "fd00::7777"),
              pass_test("[fd00::7777%enp0s3]", "fd00::7777"),
              pass_test("::1"),
              pass_test("::"),
              fail_test(":::"),
              fail_test("fff::1::3"),
              pass_test("ffff::ffff"),
              fail_test("::1ffff"),
              fail_test(":1234:"),
              fail_test("::1234z"),
              pass_test("1::3:4:5:6:7:8"),
              pass_test("::255.255.255.255"),
              pass_test("64:ff9b::192.0.2.33"),
              fail_test("::255.255.255.255:8"),
          ]);
          test_fn_call(to_long, [
              pass_test("1234", 1234),
              pass_test("0x2a", 42),
              fail_test("9007199254740992"),
              fail_test("9223372036854775808"),
              fail_test("NaN"),
              pass_test("-0x1fffffffffffff", -9007199254740991),
              pass_test("+9007199254740991", 9007199254740991),
              fail_test("-0x20000000000000"),
              fail_test("+9007199254740992"),
              pass_test(42),
          ]);
          test_fn_call(to_date, [
              {
                  input: new Date("2017-10-16T08:30:42Z"),
                  expected: "2017-10-16T08:30:42.000Z",
                  convert: Date.prototype.toISOString,
              },
              {
                  input: "2017-10-16T08:30:42Z",
                  expected: new Date("2017-10-16T08:30:42Z").toISOString(),
                  convert: Date.prototype.toISOString,
              },
              fail_test("Not really a date."),
          ]);
          test_fn_call(to_lowercase, [
              pass_test("Hello", "hello"),
              pass_test(45),
              pass_test(Date.now()),
          ]);
      }
      
      function test_fn_call(fn, cases) {
          cases.forEach(function (test, idx) {
              var result = fn(test.input);
              if (test.convert !== undefined) {
                  result = test.convert.call(result);
              }
              if (result !== test.expected) {
                  throw "test " + fn.name + "#" + idx + " failed."
                      + " Input:" + JSON.stringify(test.input)
                      + " Expected:" + JSON.stringify(test.expected)
                      + " Got:" + JSON.stringify(result);
              }
          });
          if (debug) console.debug("test " + fn.name + " PASS.");
      }
      
      function test_mappings() {
          var test_mappings = {
              "a": {to: [{field: "raw.a", setter: fld_set}, {field: "list", setter: fld_append}]},
              "b": {to: [{field: "list", setter: fld_append}]},
              "c": {to: [{field: "raw.c", setter: fld_set}, {field: "list", setter: fld_append}]},
              "d": {to: [{field: "unique", setter: fld_prio, prio: 2}]},
              "e": {to: [{field: "unique", setter: fld_prio, prio: 1}]},
              "f": {to: [{field: "unique", setter: fld_prio, prio: 3}]}
          };
          var values = {
              "a": "value1",
              "b": "value2",
              "c": "value1",
              "d": "value3",
              "e": "value4",
              "f": "value5"
          };
          var expected = {
              "raw.a": "value1",
              "raw.c": "value1",
              "list": ["value1", "value2"],
              "unique": "value4"
          };
          var evt = new Event({});
          do_populate(evt, values, test_mappings);
          var key;
          for (key in expected) {
              var got = JSON.stringify(evt.Get(key));
              var exp = JSON.stringify(expected[key]);
              if (got !== exp) {
                  throw "test test_mappings failed for key " + key
                      + ". Expected:" + exp
                      + " Got:" + got;
              }
          }
      }
      
      function copy_name(dst, src) {
          Object.defineProperty(dst, "name", { value: src.name });
          return dst;
      }
      
      function test_url() {
          function test(fn) {
              return copy_name(function (input) {
                  var evt = new Event({});
                  evt.Put(FIELDS_PREFIX + "src", input);
                  fn("dst", "src")(evt);
                  var result = evt.Get(FIELDS_PREFIX + "dst");
                  return result? result : undefined;
              }, fn);
          }
          test_fn_call(test(domain), [
              pass_test("http://example.com", "example.com"),
              pass_test("http://example.com/", "example.com"),
              pass_test("ftp+ssh://example.com/path", "example.com"),
              pass_test("https://example.com:4443/path", "example.com"),
              pass_test("www.example.net/foo/bar", "www.example.net"),
              pass_test("http://127.0.0.1:8080", "127.0.0.1"),
              pass_test("http://[::1]", "[::1]"),
              pass_test("http://[::1]:8080", "[::1]"),
              pass_test("https://root:pass@example.org:80/foo/bar", "example.org"),
              pass_test("root:pass@example.org:80/foo/bar", "example.org"),
              fail_test("/my/path"),
              fail_test(""),
          ]);
          test_fn_call(test(path), [
              pass_test("http://example.net/a/b/d?x=z", "/a/b/d"),
              pass_test("root:pass@www.example.net:80/a/b/d?x=z", "/a/b/d"),
              pass_test("/a/b/d?x=z#frag", "/a/b/d"),
              pass_test("localhost/", "/"),
              fail_test("domain"),
              fail_test(""),
              fail_test(" "),
          ]);
          test_fn_call(test(page), [
             pass_test("http://example.net/index.html", "index.html"),
              pass_test("http://localhost/index.html", "index.html"),
              pass_test("example.com/a/b/c", "c"),
              fail_test("ftp://example.com/"),
              pass_test("ftp://example.com/main#fragment", "main"),
              pass_test("ftp://example.com/0#fragment", "0"),
              fail_test(""),
          ]);
          test_fn_call(test(port), [
              pass_test("http://0.0.0.0:1234", "1234"),
              pass_test("https://0.0.0.0", "443"),
              pass_test("https://[::abcd:1234]:4443/a?b#c", "4443"),
              fail_test("www.example.net"),
              fail_test(""),
          ]);
          test_fn_call(test(query), [
              pass_test("http://localhost/post?request=1234&user=root", "request=1234&user=root"),
              pass_test("http://localhost/post?request=1234&user=root#m1234", "request=1234&user=root"),
              fail_test("http://localhost/post"),
              fail_test("http://localhost/post?"),
              fail_test(""),
          ]);
          test_fn_call(test(root), [
              pass_test("http://localhost/post?request=1234&user=root", "http://localhost"),
              pass_test("https://[::abcd:1234]:4443/a?b#c", "https://[::abcd:1234]:4443"),
              pass_test("localhost"),
              fail_test("/a/b/c"),
              fail_test(""),
              pass_test("http://user:pass@example.net", "http://example.net"),
          ]);
          test_fn_call(test(ext), [
              pass_test("http://example.net/index.html", ".html"),
              pass_test("http://localhost/index.html?a=b#c", ".html"),
              fail_test("example.com/a/b/c"),
              fail_test("ftp://example.com/"),
              pass_test("ftp://example.com/main.txt#fragment", ".txt"),
              fail_test("ftp://example.com/0#fragment"),
              fail_test(""),
          ]);
      }
      
      function test_calls() {
          test_fn_call(RMQ, [
              fail_test(["a", "b"]),
              fail_test([]),
              pass_test(["unquoted"], "unquoted"),
              pass_test([""], ""),
              pass_test(["''"], ""),
              pass_test(["'hello'"], "hello"),
              pass_test([" 'world'  "], "world"),
              pass_test(['" "'], " "),
              pass_test(["``"], ""),
              pass_test(["`woot'"], "`woot'"),
          ]);
          test_fn_call(CALC, [
              fail_test([]),
              fail_test(["1"]),
              fail_test(["01", "+"]),
              pass_test(["2","+","2"], "4"),
              pass_test(["012","*","2"], "24"),
              pass_test(["0x10","+","1"], "17"),
              pass_test(["0","-","1"], "-1"),
              fail_test(["15","/","3"]),
          ]);
          test_fn_call(STRCAT, [
              pass_test([], ""),
              pass_test(["1"], "1"),
              pass_test(["01", "+"], "01+"),
              pass_test(["hell", "oW", "ORLD"], "helloWORLD"),
          ]);
          var evt = new Event({});
          evt.Put(FIELDS_PREFIX + "a", "7");
          evt.Put(FIELDS_PREFIX + "b", "'hello'");
          evt.Put(FIELDS_PREFIX + "c", "11");
          var call_test = function(fn) {
              return function(input) {
                  call({
                      args: input,
                      "fn": fn,
                      dest: FIELDS_PREFIX+"z",
                  })(evt);
                  var result = evt.Get(FIELDS_PREFIX + "z");
                  evt.Delete(FIELDS_PREFIX + "z");
                  return result != null? result : undefined;
              }
          }
          test_fn_call(call_test(RMQ), [
              pass_test([field("b")], "hello"),
              pass_test([constant("'world'")], "world"),
          ]);
          test_fn_call(call_test(CALC), [
              pass_test([field("a"), constant("-"), field("c")], "-4"),
              pass_test([field("a"), constant("*"), constant("7")], "49"),
              fail_test([field("a"), constant("*"), constant("7a")]),
          ]);
          test_fn_call(call_test(STRCAT), [
              pass_test([field("a"), constant("-"), field("c")], "7-11"),
          ]);
      }
      
      function test_assumptions() {
          var str = "011";
          if (strictToInt(str) !== 11) {
              throw("string conversion interprets leading zeros as octal");
          }
          if (parseInt(str) !== 11) {
              throw("parseInt interprets leading zeros as octal");
          }
          if (Number(str) !== 11) {
              throw("Number conversion interprets leading zeros as octal");
          }
          str = "17a";
          if (!isNaN(strictToInt(str))) {
              throw("string conversion accepts extra chars");
          }
          if (isNaN(parseInt(str))) {
              throw("parseInt doesn't accept extra chars");
          }
          if (!isNaN(Number(str))) {
              throw("Number conversion accepts extra chars");
          }
      }
      
      // Tests the TAGVALMAP feature.
      function test_tvm() {
          var tests = [
              {
                  config: {
                      pair_separator: ',',
                      kv_separator: '=',
                      open_quote: '[',
                      close_quote: ']'
                  },
                  mappings: {
                      "key a": "url",
                      "key_b": "b",
                      "Operation": "operation",
                  },
                  on_success: processor_chain([
                                      setf("d","b")
                                  ]),
                  message: "key_b=value for=B, key a = [http://example.com/] ,Operation=[COPY],other stuff=null,,ignore",
                  expected: {
                      "nwparser.url": "http://example.com/",
                      "nwparser.b": "value for=B",
                      "nwparser.operation": "COPY",
                      "nwparser.d": "value for=B",
                      "log.flags": null,
                  }
              },
              {
                  config: {
                      pair_separator: ',',
                      kv_separator: '=',
                      open_quote: '[',
                      close_quote: ']'
                  },
                  mappings: {
                      "key a": "url",
                      "key_b": "b",
                      "Operation": "operation"
                  },
                  on_success: processor_chain([
                      setf("d","b")
                  ]),
                  message: "nothing to see here",
                  expected: {
                      "nwparser.url": null,
                      "nwparser.d": null,
                      "log.flags": "tagval_parsing_error",
                  }
              },
              {
                  config: {
                      pair_separator: ' ',
                      kv_separator: ':',
                      open_quote: '"',
                      close_quote: '"'
                  },
                  mappings: {
                      "ICMP Type": "icmp_type",
                      "ICMP Code": "icmp_code",
                      "Operation": "operation",
                  },
                  on_success: processor_chain([
                      setc("success","true")
                  ]),
                  message: "Operation:drop ICMP Type:5 ICMP Code:1 ",
                  expected: {
                      "nwparser.icmp_code": "1",
                      "nwparser.icmp_type": "5",
                      "nwparser.operation": "drop",
                      "nwparser.success": "true",
                      "log.flags": null,
                  }
              },
          ];
          var assertEqual = function(evt, key, expected) {
              var value = evt.Get(key);
              if (value !== expected)
                  throw("failed for " + key + ": expected:'" + expected + "' got:'" + value + "'");
          };
          tests.forEach(function (test, idx) {
              var processor = tagval("test", "message", test.config, test.mappings, test.on_success);
              var evt = new Event({
                  "message": test.message,
              });
              processor(evt);
              for (var key in test.expected) {
                  assertEqual(evt, key, test.expected[key]);
              }
          });
      }
      
      //  Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
      //  or more contributor license agreements. Licensed under the Elastic License;
      //  you may not use this file except in compliance with the Elastic License.
      
      function DeviceProcessor() {
      	var builder = new processor.Chain();
      	builder.Add(save_flags);
      	builder.Add(strip_syslog_priority);
      	builder.Add(chain1);
      	builder.Add(populate_fields);
      	builder.Add(restore_flags);
      	var chain = builder.Build();
      	return {
      		process: chain.Run,
      	}
      }
      
      var dup1 = setc("eventcategory","1603000000");
      
      var dup2 = setf("msg","$MSG");
      
      var dup3 = setf("event_source","hfld19");
      
      var dup4 = date_time({
      	dest: "event_time",
      	args: ["hfld14","hfld15","hfld16","hfld17"],
      	fmts: [
      		[dW,dB,dF,dN,dc(":"),dU,dc(":"),dO],
      	],
      });
      
      var dup5 = setc("eventcategory","1401030000");
      
      var dup6 = setc("event_description","Authentication failure for illegal user");
      
      var dup7 = setc("event_description","Authentication failure for user");
      
      var dup8 = setc("eventcategory","1605000000");
      
      var dup9 = setc("eventcategory","1601000000");
      
      var dup10 = setc("eventcategory","1304000000");
      
      var dup11 = setc("ec_subject","User");
      
      var dup12 = setc("ec_theme","Authentication");
      
      var dup13 = setc("ec_activity","Logon");
      
      var dup14 = setc("ec_outcome","Failure");
      
      var dup15 = setc("eventcategory","1605020000");
      
      var dup16 = setc("ec_activity","Modify");
      
      var dup17 = setc("ec_outcome","Success");
      
      var dup18 = setc("eventcategory","1402020200");
      
      var dup19 = setc("eventcategory","1402020100");
      
      var dup20 = setc("ec_activity","Delete");
      
      var dup21 = match_copy("MESSAGE#24:SYSTEM_MSG:08/0_1", "nwparser.payload", "event_description");
      
      var dup22 = setc("eventcategory","1701060000");
      
      var dup23 = setc("eventcategory","1603030000");
      
      var dup24 = setc("eventcategory","1701030000");
      
      var dup25 = setc("event_description","Interface is down");
      
      var dup26 = match("MESSAGE#44:IF_RX_FLOW_CONTROL/1_0", "nwparser.p0", "rol%{p0}");
      
      var dup27 = match("MESSAGE#44:IF_RX_FLOW_CONTROL/1_1", "nwparser.p0", "ol%{p0}");
      
      var dup28 = match("MESSAGE#44:IF_RX_FLOW_CONTROL/2", "nwparser.p0", "%{}state changed to %{result}");
      
      var dup29 = setc("eventcategory","1701010000");
      
      var dup30 = setc("eventcategory","1701000000");
      
      var dup31 = setc("eventcategory","1603040000");
      
      var dup32 = setc("eventcategory","1603010000");
      
      var dup33 = setc("eventcategory","1603110000");
      
      var dup34 = setc("ec_subject","NetworkComm");
      
      var dup35 = setc("ec_theme","Communication");
      
      var dup36 = setc("eventcategory","1801020000");
      
      var dup37 = setc("ec_activity","Enable");
      
      var dup38 = setc("ec_theme","Configuration");
      
      var dup39 = setc("action","update");
      
      var dup40 = setc("event_description","enabled telnet");
      
      var dup41 = setc("event_description","program update");
      
      var dup42 = match("MESSAGE#171:AAA_ACCOUNTING_MESSAGE:27/0", "nwparser.payload", "update:%{saddr}@%{terminal}:%{username}:%{p0}");
      
      var dup43 = match("MESSAGE#171:AAA_ACCOUNTING_MESSAGE:27/2", "nwparser.p0", "%{result})");
      
      var dup44 = setc("action","Update");
      
      var dup45 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/0", "nwparser.payload", "S%{p0}");
      
      var dup46 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/1_0", "nwparser.p0", "ource%{p0}");
      
      var dup47 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/1_1", "nwparser.p0", "rc%{p0}");
      
      var dup48 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/2", "nwparser.p0", "%{}IP: %{saddr}, D%{p0}");
      
      var dup49 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/3_0", "nwparser.p0", "estination%{p0}");
      
      var dup50 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/3_1", "nwparser.p0", "st%{p0}");
      
      var dup51 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/4", "nwparser.p0", "%{}IP: %{daddr}, S%{p0}");
      
      var dup52 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/6", "nwparser.p0", "%{}Port: %{sport}, D%{p0}");
      
      var dup53 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/8", "nwparser.p0", "%{}Port: %{dport}, S%{p0}");
      
      var dup54 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/9_0", "nwparser.p0", "ource Interface%{p0}");
      
      var dup55 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/9_1", "nwparser.p0", "rc Intf%{p0}");
      
      var dup56 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/10", "nwparser.p0", ": %{sinterface}, %{p0}");
      
      var dup57 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/11_0", "nwparser.p0", "Protocol: %{p0}");
      
      var dup58 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/11_1", "nwparser.p0", "protocol: %{p0}");
      
      var dup59 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/12", "nwparser.p0", "\"%{protocol}\"(%{protocol_detail}),%{space->} Hit-count = %{dclass_counter1}");
      
      var dup60 = setc("dclass_counter1_string","Hit Count");
      
      var dup61 = setc("eventcategory","1603100000");
      
      var dup62 = setc("eventcategory","1701020000");
      
      var dup63 = setc("eventcategory","1801000000");
      
      var dup64 = match("MESSAGE#372:TACACS_ACCOUNTING_MESSAGE:09/0", "nwparser.payload", "%{action}: %{p0}");
      
      var dup65 = match("MESSAGE#372:TACACS_ACCOUNTING_MESSAGE:09/1_0", "nwparser.p0", "%{saddr}@%{terminal}: %{p0}");
      
      var dup66 = match("MESSAGE#372:TACACS_ACCOUNTING_MESSAGE:09/1_1", "nwparser.p0", "%{fld1->} %{p0}");
      
      var dup67 = match("MESSAGE#372:TACACS_ACCOUNTING_MESSAGE:09/3_0", "nwparser.p0", "(%{result})%{info}");
      
      var dup68 = match_copy("MESSAGE#372:TACACS_ACCOUNTING_MESSAGE:09/3_1", "nwparser.p0", "info");
      
      var dup69 = match("MESSAGE#238:IF_XCVR_WARNING/0", "nwparser.payload", "Interface %{interface}, %{p0}");
      
      var dup70 = match("MESSAGE#238:IF_XCVR_WARNING/1_0", "nwparser.p0", "Low %{p0}");
      
      var dup71 = match("MESSAGE#238:IF_XCVR_WARNING/1_1", "nwparser.p0", "High %{p0}");
      
      var dup72 = setc("ec_outcome","Error");
      
      var dup73 = setc("eventcategory","1703000000");
      
      var dup74 = setc("obj_type","vPC");
      
      var dup75 = setc("ec_subject","OS");
      
      var dup76 = setc("ec_activity","Start");
      
      var dup77 = setc("eventcategory","1801010000");
      
      var dup78 = setc("ec_activity","Receive");
      
      var dup79 = setc("ec_activity","Send");
      
      var dup80 = setc("ec_activity","Create");
      
      var dup81 = setc("event_description","Switchover completed.");
      
      var dup82 = setc("event_description","Invalid user");
      
      var dup83 = setc("eventcategory","1401000000");
      
      var dup84 = setc("ec_subject","Service");
      
      var dup85 = setc("event_description","Duplicate address Detected.");
      
      var dup86 = match_copy("MESSAGE#0:LOG-7-SYSTEM_MSG", "nwparser.payload", "event_description", processor_chain([
      	dup1,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup87 = match_copy("MESSAGE#32:NEIGHBOR_UPDATE_AUTOCOPY", "nwparser.payload", "event_description", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup88 = match("MESSAGE#35:IF_DOWN_ADMIN_DOWN", "nwparser.payload", "Interface %{interface->} is down (%{result})", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup89 = match("MESSAGE#36:IF_DOWN_ADMIN_DOWN:01", "nwparser.payload", "%{fld43->} Interface %{interface->} is down (%{result})", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup90 = match("MESSAGE#37:IF_DOWN_CHANNEL_MEMBERSHIP_UPDATE_IN_PROGRESS", "nwparser.payload", "Interface %{interface->} is down (%{result})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup91 = match("MESSAGE#38:IF_DOWN_INTERFACE_REMOVED", "nwparser.payload", "Interface %{interface->} is down (%{result})", processor_chain([
      	dup24,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup92 = linear_select([
      	dup26,
      	dup27,
      ]);
      
      var dup93 = match_copy("MESSAGE#58:IM_SEQ_ERROR", "nwparser.payload", "result", processor_chain([
      	dup1,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup94 = match_copy("MESSAGE#88:PFM_VEM_REMOVE_NO_HB", "nwparser.payload", "event_description", processor_chain([
      	dup24,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup95 = match("MESSAGE#108:IF_DOWN_INITIALIZING:01", "nwparser.payload", "%{fld43->} Interface %{interface->} is down (%{result})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup96 = match("MESSAGE#110:IF_DOWN_NONE:01", "nwparser.payload", "%{fld52->} Interface %{interface->} is down (%{result})", processor_chain([
      	dup23,
      	dup34,
      	dup35,
      	dup14,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup97 = match_copy("MESSAGE#123:PORT_PROFILE_CHANGE_VERIFY_REQ_FAILURE", "nwparser.payload", "event_description", processor_chain([
      	dup33,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup98 = linear_select([
      	dup46,
      	dup47,
      ]);
      
      var dup99 = linear_select([
      	dup49,
      	dup50,
      ]);
      
      var dup100 = linear_select([
      	dup54,
      	dup55,
      ]);
      
      var dup101 = linear_select([
      	dup57,
      	dup58,
      ]);
      
      var dup102 = match_copy("MESSAGE#214:NOHMS_DIAG_ERR_PS_FAIL", "nwparser.payload", "event_description", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup103 = linear_select([
      	dup65,
      	dup66,
      ]);
      
      var dup104 = linear_select([
      	dup67,
      	dup68,
      ]);
      
      var dup105 = match("MESSAGE#224:IF_SFP_WARNING", "nwparser.payload", "Interface %{interface}, %{event_description}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup106 = match("MESSAGE#225:IF_DOWN_TCP_MAX_RETRANSMIT", "nwparser.payload", "%{fld43->} Interface %{interface->} is down%{info}", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var dup107 = linear_select([
      	dup70,
      	dup71,
      ]);
      
      var dup108 = match("MESSAGE#239:IF_XCVR_WARNING:01", "nwparser.payload", "Interface %{interface}, %{event_description}", processor_chain([
      	dup61,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var hdr1 = match("HEADER#0:0001", "message", ": %{hfld14->} %{hfld15->} %{hfld16->} %{hfld17->} %{hfld18}: %%{hfld19}-%{hfld20}-%{severity}-%{messageid}:%{payload}", processor_chain([
      	setc("header_id","0001"),
      ]));
      
      var hdr2 = match("HEADER#1:0007", "message", "%{hfld14->} %{hfld15->} %{hfld16->} %{hfld17->} %{hfld18}: %%{hfld19}-%{hfld20}-%{severity}-%{messageid}:%{payload}", processor_chain([
      	setc("header_id","0007"),
      ]));
      
      var hdr3 = match("HEADER#2:0005", "message", "%{hfld4->} %{hfld5->} %{hfld6->} %{hfld7->} : %{hfld14->} %{hfld15->} %{hfld16->} %{hfld17->} %{timezone}: %%{hfld19}-%{severity}-%{messageid}:%{payload}", processor_chain([
      	setc("header_id","0005"),
      ]));
      
      var hdr4 = match("HEADER#3:0002", "message", ": %{hfld14->} %{hfld15->} %{hfld16->} %{hfld17->} %{timezone}: %%{hfld19}-%{severity}-%{messageid}:%{payload}", processor_chain([
      	setc("header_id","0002"),
      ]));
      
      var hdr5 = match("HEADER#4:0012", "message", "%{fld13}: %{hfld14->} %{hfld15->} %{hfld16->} %{hfld17->} %{timezone}: %%{hfld19}-%{severity}-%{messageid}:%{payload}", processor_chain([
      	setc("header_id","0012"),
      ]));
      
      var hdr6 = match("HEADER#5:0008", "message", "%{hfld14->} %{hfld15->} %{hfld16->} %{hfld17->} %{timezone}: %%{hfld19}-%{severity}-%{messageid}:%{payload}", processor_chain([
      	setc("header_id","0008"),
      ]));
      
      var hdr7 = match("HEADER#6:0011", "message", ": %{hfld14->} %{hfld15->} %{hfld16->} %{hfld17->} %{timezone}: %{messageid}[%{hfld18}]:%{payload}", processor_chain([
      	setc("header_id","0011"),
      ]));
      
      var hdr8 = match("HEADER#7:0003", "message", ": %{hfld14->} %{hfld15->} %{hfld16->} %{hfld17->} %{timezone}: %{messageid}:%{payload}", processor_chain([
      	setc("header_id","0003"),
      ]));
      
      var hdr9 = match("HEADER#8:0004", "message", ": %{hfld14->} %{hfld15->} %{hfld16->} %{hfld17->} %{timezone}: %{messageid->} %{payload}", processor_chain([
      	setc("header_id","0004"),
      ]));
      
      var hdr10 = match("HEADER#9:0009", "message", "%{hfld14->} %{hfld15->} %{hfld16->} %{hfld17->} %{timezone}: %{messageid}:%{payload}", processor_chain([
      	setc("header_id","0009"),
      ]));
      
      var hdr11 = match("HEADER#10:0013", "message", "%{fld13}: %{hfld14->} %{hfld15->} %{hfld16->} %{hfld17->} %{timezone}: %{messageid->} %{payload}", processor_chain([
      	setc("header_id","0013"),
      ]));
      
      var hdr12 = match("HEADER#11:0010", "message", "%{hfld14->} %{hfld15->} %{hfld16->} %{hfld17->} %{timezone}: %{messageid->} %{payload}", processor_chain([
      	setc("header_id","0010"),
      ]));
      
      var select1 = linear_select([
      	hdr1,
      	hdr2,
      	hdr3,
      	hdr4,
      	hdr5,
      	hdr6,
      	hdr7,
      	hdr8,
      	hdr9,
      	hdr10,
      	hdr11,
      	hdr12,
      ]);
      
      var msg1 = msg("LOG-7-SYSTEM_MSG", dup86);
      
      var part1 = match("MESSAGE#1:SYSTEM_MSG", "nwparser.payload", "error: PAM: Authentication failure for illegal user %{username->} from %{saddr->} - %{agent}[%{process_id}]", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      	dup6,
      ]));
      
      var msg2 = msg("SYSTEM_MSG", part1);
      
      var part2 = match("MESSAGE#2:SYSTEM_MSG:12", "nwparser.payload", "error: PAM: Authentication failure for illegal user %{username->} from %{shost}", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      	dup6,
      ]));
      
      var msg3 = msg("SYSTEM_MSG:12", part2);
      
      var part3 = match("MESSAGE#3:SYSTEM_MSG:01", "nwparser.payload", "error: PAM: Authentication failure for %{username->} from %{saddr->} - %{agent}[%{process_id}]", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      	dup7,
      ]));
      
      var msg4 = msg("SYSTEM_MSG:01", part3);
      
      var part4 = match("MESSAGE#4:SYSTEM_MSG:11", "nwparser.payload", "error: PAM: Authentication failure for %{username->} from %{shost}", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      	dup7,
      ]));
      
      var msg5 = msg("SYSTEM_MSG:11", part4);
      
      var part5 = match("MESSAGE#5:SYSTEM_MSG:19/0", "nwparser.payload", "error: maximum authentication attempts exceeded for %{p0}");
      
      var part6 = match("MESSAGE#5:SYSTEM_MSG:19/1_0", "nwparser.p0", "invalid user %{username->} from %{p0}");
      
      var part7 = match("MESSAGE#5:SYSTEM_MSG:19/1_1", "nwparser.p0", "%{username->} from %{p0}");
      
      var select2 = linear_select([
      	part6,
      	part7,
      ]);
      
      var part8 = match("MESSAGE#5:SYSTEM_MSG:19/2", "nwparser.p0", "%{saddr->} port %{sport->} %{protocol->} - %{agent}[%{process_id}]");
      
      var all1 = all_match({
      	processors: [
      		part5,
      		select2,
      		part8,
      	],
      	on_success: processor_chain([
      		dup1,
      		dup2,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg6 = msg("SYSTEM_MSG:19", all1);
      
      var part9 = match("MESSAGE#6:SYSTEM_MSG:02", "nwparser.payload", "error:%{result}", processor_chain([
      	dup1,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg7 = msg("SYSTEM_MSG:02", part9);
      
      var part10 = match("MESSAGE#7:SYSTEM_MSG:03/0_0", "nwparser.payload", "(pam_unix)%{p0}");
      
      var part11 = match("MESSAGE#7:SYSTEM_MSG:03/0_1", "nwparser.payload", "pam_unix(%{fld1}:%{fld2}):%{p0}");
      
      var select3 = linear_select([
      	part10,
      	part11,
      ]);
      
      var part12 = match("MESSAGE#7:SYSTEM_MSG:03/1", "nwparser.p0", "%{}authentication failure; logname=%{fld20->} uid=%{fld21->} euid=%{fld22->} tty=%{terminal->} ruser=%{fld24->} rhost=%{p0}");
      
      var part13 = match("MESSAGE#7:SYSTEM_MSG:03/2_0", "nwparser.p0", "%{fld25->} user=%{username->} - %{p0}");
      
      var part14 = match("MESSAGE#7:SYSTEM_MSG:03/2_1", "nwparser.p0", "%{fld25->} - %{p0}");
      
      var select4 = linear_select([
      	part13,
      	part14,
      ]);
      
      var part15 = match_copy("MESSAGE#7:SYSTEM_MSG:03/3", "nwparser.p0", "agent");
      
      var all2 = all_match({
      	processors: [
      		select3,
      		part12,
      		select4,
      		part15,
      	],
      	on_success: processor_chain([
      		dup5,
      		dup2,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg8 = msg("SYSTEM_MSG:03", all2);
      
      var part16 = match("MESSAGE#8:SYSTEM_MSG:04", "nwparser.payload", "(pam_unix) %{event_description}", processor_chain([
      	dup8,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg9 = msg("SYSTEM_MSG:04", part16);
      
      var part17 = match("MESSAGE#9:SYSTEM_MSG:05/0", "nwparser.payload", "pam_aaa:Authentication failed f%{p0}");
      
      var part18 = match("MESSAGE#9:SYSTEM_MSG:05/1_0", "nwparser.p0", "or user %{username->} from%{p0}");
      
      var part19 = match("MESSAGE#9:SYSTEM_MSG:05/1_1", "nwparser.p0", "rom%{p0}");
      
      var select5 = linear_select([
      	part18,
      	part19,
      ]);
      
      var part20 = match("MESSAGE#9:SYSTEM_MSG:05/2", "nwparser.p0", "%{} %{saddr->} - %{agent}[%{process_id}]");
      
      var all3 = all_match({
      	processors: [
      		part17,
      		select5,
      		part20,
      	],
      	on_success: processor_chain([
      		dup5,
      		dup2,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg10 = msg("SYSTEM_MSG:05", all3);
      
      var part21 = match("MESSAGE#10:SYSTEM_MSG:06", "nwparser.payload", "FAILED LOGIN (%{fld20}) on %{fld21->} FOR %{username}, Authentication failure - login[%{process_id}]", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg11 = msg("SYSTEM_MSG:06", part21);
      
      var part22 = match("MESSAGE#11:SYSTEM_MSG:07", "nwparser.payload", "fatal:%{event_description}", processor_chain([
      	dup9,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg12 = msg("SYSTEM_MSG:07", part22);
      
      var part23 = match("MESSAGE#12:SYSTEM_MSG:09", "nwparser.payload", "%{fld1}: Host name is set %{hostname->} - kernel", processor_chain([
      	dup9,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg13 = msg("SYSTEM_MSG:09", part23);
      
      var part24 = match("MESSAGE#13:SYSTEM_MSG:10", "nwparser.payload", "Unauthorized access by NFS client %{saddr}.", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg14 = msg("SYSTEM_MSG:10", part24);
      
      var part25 = match("MESSAGE#14:SYSTEM_MSG:13", "nwparser.payload", "%{fld43->} : SNMP UDP authentication failed for %{saddr}.", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg15 = msg("SYSTEM_MSG:13", part25);
      
      var part26 = match("MESSAGE#15:SYSTEM_MSG:14", "nwparser.payload", "%{fld43->} : Subsequent authentication success for user (%{username}) failed.", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg16 = msg("SYSTEM_MSG:14", part26);
      
      var part27 = match("MESSAGE#16:SYSTEM_MSG:15", "nwparser.payload", "%{fld1->} : TTY=%{terminal->} ; PWD=%{directory->} ; USER=%{username->} ; COMMAND=%{param}", processor_chain([
      	dup10,
      	dup2,
      	dup3,
      	dup4,
      	dup11,
      	dup12,
      ]));
      
      var msg17 = msg("SYSTEM_MSG:15", part27);
      
      var part28 = match("MESSAGE#17:SYSTEM_MSG:16", "nwparser.payload", "Login failed for user %{username->} - %{agent}[%{process_id}]", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      	dup11,
      	dup13,
      	dup12,
      	dup14,
      ]));
      
      var msg18 = msg("SYSTEM_MSG:16", part28);
      
      var part29 = match("MESSAGE#18:SYSTEM_MSG:17/0", "nwparser.payload", "NTP: Peer %{hostip->} %{p0}");
      
      var part30 = match("MESSAGE#18:SYSTEM_MSG:17/1_0", "nwparser.p0", "with stratum %{fld1->} selected - %{p0}");
      
      var part31 = match("MESSAGE#18:SYSTEM_MSG:17/1_1", "nwparser.p0", "is %{disposition->} - %{p0}");
      
      var select6 = linear_select([
      	part30,
      	part31,
      ]);
      
      var part32 = match("MESSAGE#18:SYSTEM_MSG:17/2", "nwparser.p0", "%{agent}[%{process_id}]");
      
      var all4 = all_match({
      	processors: [
      		part29,
      		select6,
      		part32,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg19 = msg("SYSTEM_MSG:17", all4);
      
      var part33 = match("MESSAGE#19:SYSTEM_MSG:20", "nwparser.payload", "New user added with username %{username->} - %{agent}", processor_chain([
      	dup10,
      	dup2,
      	dup3,
      	dup4,
      	dup12,
      ]));
      
      var msg20 = msg("SYSTEM_MSG:20", part33);
      
      var part34 = match("MESSAGE#20:SYSTEM_MSG:21", "nwparser.payload", "pam_unix(%{fld1}:%{fld2}): password changed for %{username->} - %{agent}", processor_chain([
      	dup10,
      	dup2,
      	dup3,
      	dup4,
      	setc("ec_subject","Password"),
      	dup16,
      	dup12,
      	dup17,
      ]));
      
      var msg21 = msg("SYSTEM_MSG:21", part34);
      
      var part35 = match("MESSAGE#21:SYSTEM_MSG:22", "nwparser.payload", "pam_unix(%{fld1}:%{fld2}): check pass; user %{username->} - %{agent}", processor_chain([
      	dup10,
      	dup2,
      	dup3,
      	dup4,
      	dup12,
      ]));
      
      var msg22 = msg("SYSTEM_MSG:22", part35);
      
      var part36 = match("MESSAGE#22:SYSTEM_MSG:23", "nwparser.payload", "new user: name=%{username}, uid=%{uid}, gid=%{fld1}, home=%{directory}, shell=%{fld2->} - %{agent}[%{process_id}]", processor_chain([
      	dup18,
      	dup2,
      	dup3,
      	dup4,
      	dup11,
      ]));
      
      var msg23 = msg("SYSTEM_MSG:23", part36);
      
      var part37 = match("MESSAGE#23:SYSTEM_MSG:24/0", "nwparser.payload", "delete user %{p0}");
      
      var part38 = match("MESSAGE#23:SYSTEM_MSG:24/1_0", "nwparser.p0", "`%{p0}");
      
      var part39 = match("MESSAGE#23:SYSTEM_MSG:24/1_1", "nwparser.p0", "'%{p0}");
      
      var select7 = linear_select([
      	part38,
      	part39,
      ]);
      
      var part40 = match("MESSAGE#23:SYSTEM_MSG:24/2", "nwparser.p0", "'%{username->} - %{agent}[%{process_id}]");
      
      var all5 = all_match({
      	processors: [
      		part37,
      		select7,
      		part40,
      	],
      	on_success: processor_chain([
      		dup19,
      		dup2,
      		dup3,
      		dup4,
      		dup11,
      		dup20,
      		dup17,
      	]),
      });
      
      var msg24 = msg("SYSTEM_MSG:24", all5);
      
      var part41 = match("MESSAGE#24:SYSTEM_MSG:08/0_0", "nwparser.payload", "%{event_description->} - %{agent}");
      
      var select8 = linear_select([
      	part41,
      	dup21,
      ]);
      
      var all6 = all_match({
      	processors: [
      		select8,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg25 = msg("SYSTEM_MSG:08", all6);
      
      var select9 = linear_select([
      	msg2,
      	msg3,
      	msg4,
      	msg5,
      	msg6,
      	msg7,
      	msg8,
      	msg9,
      	msg10,
      	msg11,
      	msg12,
      	msg13,
      	msg14,
      	msg15,
      	msg16,
      	msg17,
      	msg18,
      	msg19,
      	msg20,
      	msg21,
      	msg22,
      	msg23,
      	msg24,
      	msg25,
      ]);
      
      var part42 = match("MESSAGE#25:VDC_HOSTNAME_CHANGE", "nwparser.payload", "%{fld1->} hostname changed to %{hostname}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg26 = msg("VDC_HOSTNAME_CHANGE", part42);
      
      var part43 = match("MESSAGE#26:POLICY_ACTIVATE_EVENT", "nwparser.payload", "Policy %{policyname->} is activated by profile %{username}", processor_chain([
      	dup22,
      	dup2,
      	dup3,
      	dup4,
      	setc("action","activated"),
      	setc("event_description","Policy is activated by profile"),
      ]));
      
      var msg27 = msg("POLICY_ACTIVATE_EVENT", part43);
      
      var part44 = match("MESSAGE#27:POLICY_COMMIT_EVENT", "nwparser.payload", "Commit operation %{disposition}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg28 = msg("POLICY_COMMIT_EVENT", part44);
      
      var part45 = match("MESSAGE#28:POLICY_DEACTIVATE_EVENT", "nwparser.payload", "Policy %{policyname->} is de-activated by last referring profile %{username}", processor_chain([
      	setc("eventcategory","1701070000"),
      	dup2,
      	dup3,
      	dup4,
      	setc("action","de-activated"),
      	setc("event_description","Policy is de-activated by last referring profile"),
      ]));
      
      var msg29 = msg("POLICY_DEACTIVATE_EVENT", part45);
      
      var part46 = match("MESSAGE#29:POLICY_LOOKUP_EVENT:01", "nwparser.payload", "policy=%{policyname->} rule=%{rulename->} action=%{action->} direction=%{direction->} src.net.ip-address=%{saddr->} src.net.port=%{sport->} dst.net.ip-address=%{daddr->} dst.net.port=%{dport->} net.protocol=%{protocol->} net.ethertype=%{fld2->} dst.zone.name=%{dst_zone->} src.zone.name=%{src_zone}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg30 = msg("POLICY_LOOKUP_EVENT:01", part46);
      
      var part47 = match("MESSAGE#30:POLICY_LOOKUP_EVENT", "nwparser.payload", "policy=%{policyname->} rule=%{rulename->} action=%{action->} direction=%{direction->} src.net.ip-address=%{saddr->} src.net.port=%{sport->} dst.net.ip-address=%{daddr->} dst.net.port=%{dport->} net.protocol=%{protocol->} net.ethertype=%{fld2}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg31 = msg("POLICY_LOOKUP_EVENT", part47);
      
      var part48 = match("MESSAGE#31:POLICY_LOOKUP_EVENT:02", "nwparser.payload", "policy=%{policyname->} rule=%{rulename->} action=%{action->} direction=%{direction->} net.ethertype=%{fld2}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg32 = msg("POLICY_LOOKUP_EVENT:02", part48);
      
      var select10 = linear_select([
      	msg30,
      	msg31,
      	msg32,
      ]);
      
      var msg33 = msg("NEIGHBOR_UPDATE_AUTOCOPY", dup87);
      
      var msg34 = msg("MTSERROR", dup86);
      
      var part49 = match("MESSAGE#34:IF_DOWN_ERROR_DISABLED", "nwparser.payload", "Interface %{interface->} is down (Error disabled. Reason:%{result})", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg35 = msg("IF_DOWN_ERROR_DISABLED", part49);
      
      var msg36 = msg("IF_DOWN_ADMIN_DOWN", dup88);
      
      var msg37 = msg("IF_DOWN_ADMIN_DOWN:01", dup89);
      
      var select11 = linear_select([
      	msg36,
      	msg37,
      ]);
      
      var msg38 = msg("IF_DOWN_CHANNEL_MEMBERSHIP_UPDATE_IN_PROGRESS", dup90);
      
      var msg39 = msg("IF_DOWN_INTERFACE_REMOVED", dup91);
      
      var part50 = match("MESSAGE#39:IF_DOWN_LINK_FAILURE", "nwparser.payload", "Interface %{interface->} is down (%{result})", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      	dup25,
      ]));
      
      var msg40 = msg("IF_DOWN_LINK_FAILURE", part50);
      
      var msg41 = msg("IF_DOWN_LINK_FAILURE:01", dup89);
      
      var select12 = linear_select([
      	msg40,
      	msg41,
      ]);
      
      var msg42 = msg("IF_DOWN_MODULE_REMOVED", dup91);
      
      var msg43 = msg("IF_DOWN_PORT_CHANNEL_MEMBERS_DOWN", dup88);
      
      var part51 = match("MESSAGE#43:IF_DUPLEX", "nwparser.payload", "Interface %{interface}, operational duplex mode changed to %{result}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Interface duplex mode changed"),
      ]));
      
      var msg44 = msg("IF_DUPLEX", part51);
      
      var part52 = match("MESSAGE#44:IF_RX_FLOW_CONTROL/0", "nwparser.payload", "Interface %{interface}, operational Receive Flow Cont%{p0}");
      
      var all7 = all_match({
      	processors: [
      		part52,
      		dup92,
      		dup28,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      		setc("event_description","Interface operational Receive Flow Control state changed"),
      	]),
      });
      
      var msg45 = msg("IF_RX_FLOW_CONTROL", all7);
      
      var part53 = match_copy("MESSAGE#45:IF_SEQ_ERROR", "nwparser.payload", "result", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg46 = msg("IF_SEQ_ERROR", part53);
      
      var part54 = match("MESSAGE#46:IF_TX_FLOW_CONTROL/0", "nwparser.payload", "Interface %{interface}, operational Transmit Flow Cont%{p0}");
      
      var all8 = all_match({
      	processors: [
      		part54,
      		dup92,
      		dup28,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      		setc("event_description","Interface operational Transmit Flow Control state changed"),
      	]),
      });
      
      var msg47 = msg("IF_TX_FLOW_CONTROL", all8);
      
      var part55 = match("MESSAGE#47:IF_UP", "nwparser.payload", "%{fld43->} Interface %{sinterface->} is up in mode %{result}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Interface is up in mode"),
      ]));
      
      var msg48 = msg("IF_UP", part55);
      
      var part56 = match("MESSAGE#48:IF_UP:01", "nwparser.payload", "Interface %{sinterface->} is up", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Interface is up"),
      ]));
      
      var msg49 = msg("IF_UP:01", part56);
      
      var select13 = linear_select([
      	msg48,
      	msg49,
      ]);
      
      var part57 = match("MESSAGE#49:SPEED", "nwparser.payload", "Interface %{interface}, operational speed changed to %{result}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Interface operational speed changed"),
      ]));
      
      var msg50 = msg("SPEED", part57);
      
      var part58 = match("MESSAGE#50:CREATED", "nwparser.payload", "%{group_object->} created", processor_chain([
      	dup29,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg51 = msg("CREATED", part58);
      
      var part59 = match("MESSAGE#51:FOP_CHANGED", "nwparser.payload", "%{group_object}: first operational port changed from %{change_old->} to %{change_new}", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg52 = msg("FOP_CHANGED", part59);
      
      var part60 = match("MESSAGE#52:PORT_DOWN", "nwparser.payload", "%{group_object}: %{interface->} is down", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg53 = msg("PORT_DOWN", part60);
      
      var part61 = match("MESSAGE#53:PORT_UP", "nwparser.payload", "%{group_object}: %{interface->} is up", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg54 = msg("PORT_UP", part61);
      
      var part62 = match("MESSAGE#54:SUBGROUP_ID_PORT_ADDED", "nwparser.payload", "Interface %{interface->} is added to %{group_object->} with subgroup id %{fld20}", processor_chain([
      	dup29,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg55 = msg("SUBGROUP_ID_PORT_ADDED", part62);
      
      var part63 = match("MESSAGE#55:SUBGROUP_ID_PORT_REMOVED", "nwparser.payload", "Interface %{interface->} is removed from %{group_object->} with subgroup id %{fld20}", processor_chain([
      	dup24,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg56 = msg("SUBGROUP_ID_PORT_REMOVED", part63);
      
      var msg57 = msg("MTS_DROP", dup87);
      
      var msg58 = msg("SYSLOG_LOG_WARNING", dup87);
      
      var msg59 = msg("IM_SEQ_ERROR", dup93);
      
      var msg60 = msg("ADDON_IMG_DNLD_COMPLETE", dup87);
      
      var msg61 = msg("ADDON_IMG_DNLD_STARTED", dup87);
      
      var msg62 = msg("ADDON_IMG_DNLD_SUCCESSFUL", dup87);
      
      var msg63 = msg("IMG_DNLD_COMPLETE", dup87);
      
      var msg64 = msg("IMG_DNLD_STARTED", dup87);
      
      var part64 = match_copy("MESSAGE#64:PORT_SOFTWARE_FAILURE", "nwparser.payload", "result", processor_chain([
      	dup31,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg65 = msg("PORT_SOFTWARE_FAILURE", part64);
      
      var msg66 = msg("MSM_CRIT", dup93);
      
      var part65 = match("MESSAGE#66:LOG_CMP_AAA_FAILURE", "nwparser.payload", "Authentication failed for a login from %{shost->} (%{result})", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      	dup7,
      ]));
      
      var msg67 = msg("LOG_CMP_AAA_FAILURE", part65);
      
      var msg68 = msg("LOG_LIC_N1K_EXPIRY_WARNING", dup87);
      
      var part66 = match("MESSAGE#68:MOD_FAIL", "nwparser.payload", "Initialization of module %{fld20->} (serial: %{serial_number}) failed", processor_chain([
      	dup32,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg69 = msg("MOD_FAIL", part66);
      
      var part67 = match("MESSAGE#69:MOD_MAJORSWFAIL", "nwparser.payload", "Module %{fld20->} (serial: %{serial_number}) reported a critical failure in service %{fld22}", processor_chain([
      	dup33,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg70 = msg("MOD_MAJORSWFAIL", part67);
      
      var part68 = match("MESSAGE#70:MOD_SRG_NOT_COMPATIBLE", "nwparser.payload", "Module %{fld20->} (serial: %{serial_number}) firmware is not compatible with supervisor, downloading new image", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg71 = msg("MOD_SRG_NOT_COMPATIBLE", part68);
      
      var part69 = match("MESSAGE#71:MOD_WARNING:01", "nwparser.payload", "Module %{fld20->} (serial: %{serial_number}) reported warnings on %{info->} due to %{result->} in device %{fld23->} (device error %{fld22})", processor_chain([
      	dup32,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg72 = msg("MOD_WARNING:01", part69);
      
      var part70 = match("MESSAGE#72:MOD_WARNING", "nwparser.payload", "Module %{fld20->} (serial: %{serial_number}) reported warning %{info->} due to %{result->} in device %{fld23->} (device error %{fld22})", processor_chain([
      	dup32,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg73 = msg("MOD_WARNING", part70);
      
      var select14 = linear_select([
      	msg72,
      	msg73,
      ]);
      
      var part71 = match("MESSAGE#73:ACTIVE_SUP_OK", "nwparser.payload", "Supervisor %{fld20->} is active (serial: %{serial_number})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg74 = msg("ACTIVE_SUP_OK", part71);
      
      var part72 = match("MESSAGE#74:MOD_OK", "nwparser.payload", "Module %{fld20->} is online (serial: %{serial_number})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg75 = msg("MOD_OK", part72);
      
      var part73 = match("MESSAGE#75:MOD_RESTART", "nwparser.payload", "Module %{fld20->} is restarting after image download", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg76 = msg("MOD_RESTART", part73);
      
      var part74 = match("MESSAGE#76:DISPUTE_CLEARED", "nwparser.payload", "Dispute resolved for port %{portname->} on %{vlan}", processor_chain([
      	dup8,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Dispute resolved for port on VLAN"),
      ]));
      
      var msg77 = msg("DISPUTE_CLEARED", part74);
      
      var part75 = match("MESSAGE#77:DISPUTE_DETECTED", "nwparser.payload", "Dispute detected on port %{portname->} on %{vlan}", processor_chain([
      	dup8,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Dispute detected on port on VLAN"),
      ]));
      
      var msg78 = msg("DISPUTE_DETECTED", part75);
      
      var msg79 = msg("DOMAIN_CFG_SYNC_DONE", dup87);
      
      var msg80 = msg("CHASSIS_CLKMODOK", dup87);
      
      var msg81 = msg("CHASSIS_CLKSRC", dup87);
      
      var msg82 = msg("FAN_OK", dup87);
      
      var part76 = match("MESSAGE#82:MOD_DETECT", "nwparser.payload", "Module %{fld19->} detected (Serial number %{serial_number}) Module-Type %{fld20->} Model %{fld21}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg83 = msg("MOD_DETECT", part76);
      
      var part77 = match("MESSAGE#83:MOD_PWRDN", "nwparser.payload", "Module %{fld19->} powered down (Serial number %{serial_number})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg84 = msg("MOD_PWRDN", part77);
      
      var part78 = match("MESSAGE#84:MOD_PWRUP", "nwparser.payload", "Module %{fld19->} powered up (Serial number %{serial_number})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg85 = msg("MOD_PWRUP", part78);
      
      var part79 = match("MESSAGE#85:MOD_REMOVE", "nwparser.payload", "Module %{fld19->} removed (Serial number %{serial_number})", processor_chain([
      	dup24,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg86 = msg("MOD_REMOVE", part79);
      
      var msg87 = msg("PFM_MODULE_POWER_ON", dup87);
      
      var msg88 = msg("PFM_SYSTEM_RESET", dup87);
      
      var msg89 = msg("PFM_VEM_REMOVE_NO_HB", dup94);
      
      var msg90 = msg("PFM_VEM_REMOVE_RESET", dup94);
      
      var msg91 = msg("PFM_VEM_REMOVE_STATE_CONFLICT", dup94);
      
      var msg92 = msg("PFM_VEM_REMOVE_TWO_ACT_VSM", dup94);
      
      var msg93 = msg("PFM_VEM_UNLICENSED", dup87);
      
      var msg94 = msg("PS_FANOK", dup87);
      
      var part80 = match("MESSAGE#94:PS_OK", "nwparser.payload", "Power supply %{fld19->} ok (Serial number %{serial_number})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg95 = msg("PS_OK", part80);
      
      var part81 = match_copy("MESSAGE#95:MOD_BRINGUP_MULTI_LIMIT", "nwparser.payload", "event_description", processor_chain([
      	dup31,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg96 = msg("MOD_BRINGUP_MULTI_LIMIT", part81);
      
      var part82 = match("MESSAGE#96:FAN_DETECT", "nwparser.payload", "Fan module %{fld19->} (Serial number %{serial_number}) %{fld20->} detected", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg97 = msg("FAN_DETECT", part82);
      
      var msg98 = msg("MOD_STATUS", dup87);
      
      var part83 = match("MESSAGE#98:PEER_VPC_CFGD_VLANS_CHANGED", "nwparser.payload", "Peer vPC %{obj_name->} configured vlans changed", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Peer vPC configured vlans changed"),
      ]));
      
      var msg99 = msg("PEER_VPC_CFGD_VLANS_CHANGED", part83);
      
      var part84 = match("MESSAGE#99:PEER_VPC_DELETED", "nwparser.payload", "Peer vPC %{obj_name->} deleted", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg100 = msg("PEER_VPC_DELETED", part84);
      
      var msg101 = msg("PFM_VEM_DETECTED", dup87);
      
      var part85 = match("MESSAGE#101:PS_FOUND", "nwparser.payload", "Power supply %{fld19->} found (Serial number %{serial_number})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg102 = msg("PS_FOUND", part85);
      
      var part86 = match("MESSAGE#102:PS_STATUS/0_0", "nwparser.payload", "PowerSupply %{fld1->} current-status is %{disposition}");
      
      var select15 = linear_select([
      	part86,
      	dup21,
      ]);
      
      var all9 = all_match({
      	processors: [
      		select15,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg103 = msg("PS_STATUS", all9);
      
      var part87 = match("MESSAGE#103:PS_CAPACITY_CHANGE:01", "nwparser.payload", "Power supply %{fld1->} changed its capacity. possibly due to On/Off or power cable removal/insertion (Serial number %{serial_number})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg104 = msg("PS_CAPACITY_CHANGE:01", part87);
      
      var msg105 = msg("PS_CAPACITY_CHANGE", dup87);
      
      var select16 = linear_select([
      	msg104,
      	msg105,
      ]);
      
      var msg106 = msg("IF_DOWN_FCOT_NOT_PRESENT", dup88);
      
      var msg107 = msg("IF_DOWN_FCOT_NOT_PRESENT:01", dup89);
      
      var select17 = linear_select([
      	msg106,
      	msg107,
      ]);
      
      var msg108 = msg("IF_DOWN_INITIALIZING", dup90);
      
      var msg109 = msg("IF_DOWN_INITIALIZING:01", dup95);
      
      var select18 = linear_select([
      	msg108,
      	msg109,
      ]);
      
      var part88 = match("MESSAGE#109:IF_DOWN_NONE", "nwparser.payload", "Interface %{interface->} is down (%{result})", processor_chain([
      	dup23,
      	dup34,
      	dup35,
      	dup14,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg110 = msg("IF_DOWN_NONE", part88);
      
      var msg111 = msg("IF_DOWN_NONE:01", dup96);
      
      var select19 = linear_select([
      	msg110,
      	msg111,
      ]);
      
      var msg112 = msg("IF_DOWN_NOS_RCVD", dup88);
      
      var msg113 = msg("IF_DOWN_NOS_RCVD:01", dup89);
      
      var select20 = linear_select([
      	msg112,
      	msg113,
      ]);
      
      var msg114 = msg("IF_DOWN_OFFLINE", dup88);
      
      var msg115 = msg("IF_DOWN_OLS_RCVD", dup88);
      
      var part89 = match("MESSAGE#115:IF_DOWN_SOFTWARE_FAILURE", "nwparser.payload", "Interface %{interface->} is down (%{result})", processor_chain([
      	dup31,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg116 = msg("IF_DOWN_SOFTWARE_FAILURE", part89);
      
      var msg117 = msg("IF_DOWN_SRC_PORT_NOT_BOUND", dup90);
      
      var part90 = match("MESSAGE#117:IF_TRUNK_DOWN", "nwparser.payload", "Interface %{interface}, vsan %{fld20->} is down (%{info})", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg118 = msg("IF_TRUNK_DOWN", part90);
      
      var part91 = match("MESSAGE#118:IF_TRUNK_DOWN:01", "nwparser.payload", "Interface %{interface}, vlan %{vlan->} down", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg119 = msg("IF_TRUNK_DOWN:01", part91);
      
      var part92 = match("MESSAGE#119:IF_TRUNK_DOWN:02", "nwparser.payload", "%{fld43->} Interface %{interface}, vsan %{vlan->} is down %{info}", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg120 = msg("IF_TRUNK_DOWN:02", part92);
      
      var select21 = linear_select([
      	msg118,
      	msg119,
      	msg120,
      ]);
      
      var part93 = match("MESSAGE#120:IF_TRUNK_UP", "nwparser.payload", "Interface %{interface}, vsan %{fld20->} is up", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg121 = msg("IF_TRUNK_UP", part93);
      
      var part94 = match("MESSAGE#121:IF_TRUNK_UP:01", "nwparser.payload", "Interface %{interface}, vlan %{vlan->} up", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg122 = msg("IF_TRUNK_UP:01", part94);
      
      var part95 = match("MESSAGE#122:IF_TRUNK_UP:02", "nwparser.payload", "%{fld43->} Interface %{interface}, vsan %{vlan->} is up %{info}", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg123 = msg("IF_TRUNK_UP:02", part95);
      
      var select22 = linear_select([
      	msg121,
      	msg122,
      	msg123,
      ]);
      
      var msg124 = msg("PORT_PROFILE_CHANGE_VERIFY_REQ_FAILURE", dup97);
      
      var part96 = match("MESSAGE#124:IF_PORTPROFILE_ATTACHED", "nwparser.payload", "Interface %{interface->} is inheriting port-profile %{fld20}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg125 = msg("IF_PORTPROFILE_ATTACHED", part96);
      
      var msg126 = msg("STANDBY_SUP_OK", dup87);
      
      var part97 = match("MESSAGE#126:STM_LOOP_DETECT", "nwparser.payload", "Loops detected in the network among ports %{portname->} and %{info->} vlan %{vlan->} - %{result}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Loops detected in the network among ports"),
      ]));
      
      var msg127 = msg("STM_LOOP_DETECT", part97);
      
      var part98 = match("MESSAGE#127:SYNC_COMPLETE", "nwparser.payload", "Sync completed.%{}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg128 = msg("SYNC_COMPLETE", part98);
      
      var msg129 = msg("PVLAN_PPM_PORT_CONFIG_FAILED", dup97);
      
      var msg130 = msg("MESG", dup87);
      
      var part99 = match("MESSAGE#130:ERR_MSG", "nwparser.payload", "ERROR:%{result}", processor_chain([
      	dup33,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg131 = msg("ERR_MSG", part99);
      
      var msg132 = msg("RM_VICPP_RECREATE_ERROR", dup97);
      
      var part100 = match("MESSAGE#132:CFGWRITE_ABORTED_LOCK", "nwparser.payload", "Unable to lock the configuration (error-id %{resultcode}). Aborting configuration copy.", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg133 = msg("CFGWRITE_ABORTED_LOCK", part100);
      
      var part101 = match("MESSAGE#133:CFGWRITE_FAILED", "nwparser.payload", "Configuration copy failed (error-id %{resultcode}).", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg134 = msg("CFGWRITE_FAILED", part101);
      
      var msg135 = msg("CFGWRITE_ABORTED", dup87);
      
      var msg136 = msg("CFGWRITE_DONE", dup87);
      
      var part102 = match("MESSAGE#136:CFGWRITE_STARTED/0_0", "nwparser.payload", "%{event_description->} (PID %{process_id}).");
      
      var select23 = linear_select([
      	part102,
      	dup21,
      ]);
      
      var all10 = all_match({
      	processors: [
      		select23,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg137 = msg("CFGWRITE_STARTED", all10);
      
      var msg138 = msg("IF_ATTACHED", dup87);
      
      var msg139 = msg("IF_DELETE_AUTO", dup94);
      
      var part103 = match("MESSAGE#139:IF_DETACHED", "nwparser.payload", "Interface %{interface->} is detached", processor_chain([
      	dup24,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg140 = msg("IF_DETACHED", part103);
      
      var msg141 = msg("IF_DETACHED_MODULE_REMOVED", dup94);
      
      var msg142 = msg("IF_DOWN_INACTIVE", dup88);
      
      var msg143 = msg("IF_DOWN_NON_PARTICIPATING", dup88);
      
      var part104 = match("MESSAGE#143:IF_DOWN_VEM_UNLICENSED", "nwparser.payload", "Interface %{interface->} is down", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg144 = msg("IF_DOWN_VEM_UNLICENSED", part104);
      
      var part105 = match("MESSAGE#144:CONN_CONNECT", "nwparser.payload", "Connection %{hostname->} connected to the vCenter Server.", processor_chain([
      	dup36,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg145 = msg("CONN_CONNECT", part105);
      
      var part106 = match("MESSAGE#145:CONN_DISCONNECT", "nwparser.payload", "Connection %{hostname->} disconnected from the vCenter Server.", processor_chain([
      	setc("eventcategory","1801030000"),
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg146 = msg("CONN_DISCONNECT", part106);
      
      var part107 = match("MESSAGE#146:DVPG_CREATE", "nwparser.payload", "created port-group %{info->} on the vCenter Server.", processor_chain([
      	dup29,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg147 = msg("DVPG_CREATE", part107);
      
      var part108 = match("MESSAGE#147:DVPG_DELETE", "nwparser.payload", "deleted port-group %{info->} from the vCenter Server.", processor_chain([
      	dup24,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg148 = msg("DVPG_DELETE", part108);
      
      var msg149 = msg("DVS_HOSTMEMBER_INFO", dup87);
      
      var part109 = match("MESSAGE#149:DVS_NAME_CHANGE", "nwparser.payload", "Changed dvswitch name to %{info->} on the vCenter Server.", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg150 = msg("DVS_NAME_CHANGE", part109);
      
      var msg151 = msg("VMS_PPM_SYNC_COMPLETE", dup87);
      
      var part110 = match("MESSAGE#151:VPC_DELETED", "nwparser.payload", "vPC %{obj_name->} is deleted", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg152 = msg("VPC_DELETED", part110);
      
      var part111 = match("MESSAGE#152:VPC_UP", "nwparser.payload", "vPC %{obj_name->} is up", processor_chain([
      	dup8,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","VPC is up"),
      ]));
      
      var msg153 = msg("VPC_UP", part111);
      
      var part112 = match("MESSAGE#153:VSHD_SYSLOG_CONFIG_I/0", "nwparser.payload", "Configured from vty by %{username->} on %{p0}");
      
      var part113 = match("MESSAGE#153:VSHD_SYSLOG_CONFIG_I/1_0", "nwparser.p0", "%{saddr}@%{terminal}");
      
      var part114 = match_copy("MESSAGE#153:VSHD_SYSLOG_CONFIG_I/1_1", "nwparser.p0", "saddr");
      
      var select24 = linear_select([
      	part113,
      	part114,
      ]);
      
      var all11 = all_match({
      	processors: [
      		part112,
      		select24,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg154 = msg("VSHD_SYSLOG_CONFIG_I", all11);
      
      var part115 = match("MESSAGE#154:VSHD_SYSLOG_CONFIG_I:01", "nwparser.payload", "Configuring console from %{fld43->} %{saddr}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg155 = msg("VSHD_SYSLOG_CONFIG_I:01", part115);
      
      var select25 = linear_select([
      	msg154,
      	msg155,
      ]);
      
      var part116 = match("MESSAGE#155:AAA_ACCOUNTING_MESSAGE:18", "nwparser.payload", "update:%{saddr}@%{terminal}:%{username}:%{event_description}; feature %{protocol->} (%{result})", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg156 = msg("AAA_ACCOUNTING_MESSAGE:18", part116);
      
      var part117 = match("MESSAGE#156:AAA_ACCOUNTING_MESSAGE:17", "nwparser.payload", "update:%{saddr}@%{terminal}:%{username}:enabled telnet", processor_chain([
      	dup22,
      	dup37,
      	dup38,
      	dup17,
      	dup2,
      	dup3,
      	dup4,
      	dup39,
      	dup40,
      ]));
      
      var msg157 = msg("AAA_ACCOUNTING_MESSAGE:17", part117);
      
      var part118 = match("MESSAGE#157:AAA_ACCOUNTING_MESSAGE", "nwparser.payload", "start:%{saddr}@%{application}:%{username}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","program start"),
      ]));
      
      var msg158 = msg("AAA_ACCOUNTING_MESSAGE", part118);
      
      var part119 = match("MESSAGE#158:AAA_ACCOUNTING_MESSAGE:08", "nwparser.payload", "start:snmp_%{fld43}_%{saddr}:%{username}:", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg159 = msg("AAA_ACCOUNTING_MESSAGE:08", part119);
      
      var part120 = match("MESSAGE#159:AAA_ACCOUNTING_MESSAGE:03", "nwparser.payload", "start:%{saddr}(%{terminal}):%{username}:", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg160 = msg("AAA_ACCOUNTING_MESSAGE:03", part120);
      
      var part121 = match("MESSAGE#160:AAA_ACCOUNTING_MESSAGE:19", "nwparser.payload", "start:%{fld40}:%{username}:", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg161 = msg("AAA_ACCOUNTING_MESSAGE:19", part121);
      
      var part122 = match("MESSAGE#161:AAA_ACCOUNTING_MESSAGE:22", "nwparser.payload", "update:::added user %{username}", processor_chain([
      	dup19,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg162 = msg("AAA_ACCOUNTING_MESSAGE:22", part122);
      
      var part123 = match("MESSAGE#162:AAA_ACCOUNTING_MESSAGE:23", "nwparser.payload", "update:::%{event_description}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg163 = msg("AAA_ACCOUNTING_MESSAGE:23", part123);
      
      var part124 = match("MESSAGE#163:AAA_ACCOUNTING_MESSAGE:11", "nwparser.payload", "update:snmp_%{fld43}_%{saddr}:%{username}:target (name:%{dhost->} address:%{daddr}:%{dport}) deleted", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg164 = msg("AAA_ACCOUNTING_MESSAGE:11", part124);
      
      var part125 = match("MESSAGE#164:AAA_ACCOUNTING_MESSAGE:12", "nwparser.payload", "update:snmp_%{fld43}_%{saddr}:%{username}:target (name:%{dhost->} address:%{daddr}:%{dport->} timeout:%{fld44->} retry:%{fld45->} tagList:trap params:%{fld46}) added", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg165 = msg("AAA_ACCOUNTING_MESSAGE:12", part125);
      
      var part126 = match("MESSAGE#165:AAA_ACCOUNTING_MESSAGE:13", "nwparser.payload", "update:snmp_%{fld43}_%{saddr}:%{username}:Interface %{interface->} state updated to up", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg166 = msg("AAA_ACCOUNTING_MESSAGE:13", part126);
      
      var part127 = match("MESSAGE#166:AAA_ACCOUNTING_MESSAGE:14", "nwparser.payload", "update:snmp_%{fld43}_%{saddr}:%{username}:Interface %{interface->} state updated to down", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg167 = msg("AAA_ACCOUNTING_MESSAGE:14", part127);
      
      var part128 = match("MESSAGE#167:AAA_ACCOUNTING_MESSAGE:15", "nwparser.payload", "update:snmp_%{fld43}_%{saddr}:%{username}:Performing configuration copy.", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg168 = msg("AAA_ACCOUNTING_MESSAGE:15", part128);
      
      var part129 = match("MESSAGE#168:AAA_ACCOUNTING_MESSAGE:16", "nwparser.payload", "update:%{saddr}@%{application}:%{username}:terminal length %{dclass_counter1->} (%{result})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	dup41,
      ]));
      
      var msg169 = msg("AAA_ACCOUNTING_MESSAGE:16", part129);
      
      var part130 = match("MESSAGE#169:AAA_ACCOUNTING_MESSAGE:04", "nwparser.payload", "update:%{saddr}(%{fld3}):%{username}:terminal length %{fld5}:%{result}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg170 = msg("AAA_ACCOUNTING_MESSAGE:04", part130);
      
      var part131 = match("MESSAGE#170:AAA_ACCOUNTING_MESSAGE:01", "nwparser.payload", "update:%{saddr}@%{terminal}:%{application}:terminal width %{dclass_counter1->} (%{result})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	dup41,
      ]));
      
      var msg171 = msg("AAA_ACCOUNTING_MESSAGE:01", part131);
      
      var part132 = match("MESSAGE#171:AAA_ACCOUNTING_MESSAGE:27/1_0", "nwparser.p0", "configure terminal ; ntp source-interface %{sinterface->} (%{p0}");
      
      var part133 = match("MESSAGE#171:AAA_ACCOUNTING_MESSAGE:27/1_1", "nwparser.p0", "show ntp statistics peer ipaddr %{hostip->} (%{p0}");
      
      var select26 = linear_select([
      	part132,
      	part133,
      ]);
      
      var all12 = all_match({
      	processors: [
      		dup42,
      		select26,
      		dup43,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      		dup44,
      	]),
      });
      
      var msg172 = msg("AAA_ACCOUNTING_MESSAGE:27", all12);
      
      var part134 = match("MESSAGE#172:AAA_ACCOUNTING_MESSAGE:28/1_0", "nwparser.p0", "clock set %{event_time_string->} (%{p0}");
      
      var part135 = match("MESSAGE#172:AAA_ACCOUNTING_MESSAGE:28/1_1", "nwparser.p0", "show logging last %{fld1->} (%{p0}");
      
      var select27 = linear_select([
      	part134,
      	part135,
      ]);
      
      var all13 = all_match({
      	processors: [
      		dup42,
      		select27,
      		dup43,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      		dup44,
      	]),
      });
      
      var msg173 = msg("AAA_ACCOUNTING_MESSAGE:28", all13);
      
      var part136 = match("MESSAGE#173:AAA_ACCOUNTING_MESSAGE:20", "nwparser.payload", "update:%{saddr}@%{terminal}:%{username}:%{info->} (%{result})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg174 = msg("AAA_ACCOUNTING_MESSAGE:20", part136);
      
      var part137 = match("MESSAGE#174:AAA_ACCOUNTING_MESSAGE:30", "nwparser.payload", "update:%{saddr}@%{terminal}:%{username}:added user %{c_username}", processor_chain([
      	dup18,
      	dup2,
      	dup3,
      	dup4,
      	dup11,
      	dup17,
      	setc("event_description","Added user"),
      	dup44,
      ]));
      
      var msg175 = msg("AAA_ACCOUNTING_MESSAGE:30", part137);
      
      var part138 = match("MESSAGE#175:AAA_ACCOUNTING_MESSAGE:29", "nwparser.payload", "update:%{saddr}@%{terminal}:%{username}:deleted user %{c_username}", processor_chain([
      	dup19,
      	dup2,
      	dup3,
      	dup4,
      	dup11,
      	dup17,
      	setc("event_description","Deleted user"),
      	dup44,
      ]));
      
      var msg176 = msg("AAA_ACCOUNTING_MESSAGE:29", part138);
      
      var part139 = match("MESSAGE#176:AAA_ACCOUNTING_MESSAGE:21", "nwparser.payload", "update:%{saddr}@%{terminal}:%{username}:%{info}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg177 = msg("AAA_ACCOUNTING_MESSAGE:21", part139);
      
      var part140 = match("MESSAGE#177:AAA_ACCOUNTING_MESSAGE:07", "nwparser.payload", "update:%{saddr}(%{fld3}):%{username}:terminal width %{dclass_counter1}:%{result}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg178 = msg("AAA_ACCOUNTING_MESSAGE:07", part140);
      
      var part141 = match("MESSAGE#178:AAA_ACCOUNTING_MESSAGE:05", "nwparser.payload", "update:%{saddr}(%{fld3}):%{username}:terminal session-timeout %{fld5}:%{result}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg179 = msg("AAA_ACCOUNTING_MESSAGE:05", part141);
      
      var part142 = match("MESSAGE#179:AAA_ACCOUNTING_MESSAGE:10", "nwparser.payload", "update:%{saddr}(%{fld3}):%{username}:copy %{event_description}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg180 = msg("AAA_ACCOUNTING_MESSAGE:10", part142);
      
      var part143 = match("MESSAGE#180:AAA_ACCOUNTING_MESSAGE:24", "nwparser.payload", "update:%{terminal}:%{username}: %{event_description}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg181 = msg("AAA_ACCOUNTING_MESSAGE:24", part143);
      
      var part144 = match("MESSAGE#181:AAA_ACCOUNTING_MESSAGE:06", "nwparser.payload", "stop:%{saddr}(%{fld3}):%{username}:shell terminated", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg182 = msg("AAA_ACCOUNTING_MESSAGE:06", part144);
      
      var part145 = match("MESSAGE#182:AAA_ACCOUNTING_MESSAGE:02", "nwparser.payload", "stop:%{saddr}@%{terminal}:%{username}:shell %{result}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","shell terminated"),
      ]));
      
      var msg183 = msg("AAA_ACCOUNTING_MESSAGE:02", part145);
      
      var part146 = match("MESSAGE#183:AAA_ACCOUNTING_MESSAGE:25", "nwparser.payload", "stop:%{saddr}@%{terminal}:%{username}:%{fld40}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg184 = msg("AAA_ACCOUNTING_MESSAGE:25", part146);
      
      var part147 = match("MESSAGE#184:AAA_ACCOUNTING_MESSAGE:09", "nwparser.payload", "stop:snmp_%{fld43}_%{saddr}:%{username}:", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg185 = msg("AAA_ACCOUNTING_MESSAGE:09", part147);
      
      var part148 = match("MESSAGE#185:AAA_ACCOUNTING_MESSAGE:26", "nwparser.payload", "stop:%{terminal}:%{username}:", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg186 = msg("AAA_ACCOUNTING_MESSAGE:26", part148);
      
      var select28 = linear_select([
      	msg156,
      	msg157,
      	msg158,
      	msg159,
      	msg160,
      	msg161,
      	msg162,
      	msg163,
      	msg164,
      	msg165,
      	msg166,
      	msg167,
      	msg168,
      	msg169,
      	msg170,
      	msg171,
      	msg172,
      	msg173,
      	msg174,
      	msg175,
      	msg176,
      	msg177,
      	msg178,
      	msg179,
      	msg180,
      	msg181,
      	msg182,
      	msg183,
      	msg184,
      	msg185,
      	msg186,
      ]);
      
      var all14 = all_match({
      	processors: [
      		dup45,
      		dup98,
      		dup48,
      		dup99,
      		dup51,
      		dup98,
      		dup52,
      		dup99,
      		dup53,
      		dup100,
      		dup56,
      		dup101,
      		dup59,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      		setc("event_description","ACL Log Flow Interval"),
      		dup60,
      	]),
      });
      
      var msg187 = msg("ACLLOG_FLOW_INTERVAL", all14);
      
      var part149 = match("MESSAGE#187:ACLLOG_MAXFLOW_REACHED", "nwparser.payload", "Maximum limit %{fld3->} reached for number of flows", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg188 = msg("ACLLOG_MAXFLOW_REACHED", part149);
      
      var all15 = all_match({
      	processors: [
      		dup45,
      		dup98,
      		dup48,
      		dup99,
      		dup51,
      		dup98,
      		dup52,
      		dup99,
      		dup53,
      		dup100,
      		dup56,
      		dup101,
      		dup59,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      		setc("event_description","ACL Lof New Flow"),
      		dup60,
      	]),
      });
      
      var msg189 = msg("ACLLOG_NEW_FLOW", all15);
      
      var part150 = match("MESSAGE#189:DUP_VADDR_SRC_IP", "nwparser.payload", "%{process->} [%{process_id}] Source address of packet received from %{smacaddr->} on %{vlan}(%{interface}) is duplicate of local virtual ip, %{saddr}", processor_chain([
      	dup1,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Source address of packet received on vlan is duplicate of local virtual ip"),
      ]));
      
      var msg190 = msg("DUP_VADDR_SRC_IP", part150);
      
      var part151 = match("MESSAGE#190:IF_ERROR_VLANS_REMOVED", "nwparser.payload", "VLANs %{vlan->} on Interface %{sinterface->} are removed from suspended state.", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg191 = msg("IF_ERROR_VLANS_REMOVED", part151);
      
      var part152 = match("MESSAGE#191:IF_ERROR_VLANS_SUSPENDED", "nwparser.payload", "VLANs %{vlan->} on Interface %{sinterface->} are being suspended. (Reason: %{info})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg192 = msg("IF_ERROR_VLANS_SUSPENDED", part152);
      
      var part153 = match("MESSAGE#192:IF_DOWN_CFG_CHANGE", "nwparser.payload", "Interface %{sinterface->} is down(%{result})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg193 = msg("IF_DOWN_CFG_CHANGE", part153);
      
      var part154 = match("MESSAGE#193:PFM_CLOCK_CHANGE", "nwparser.payload", "Clock setting has been changed on the system. Please be aware that clock changes will force a recheckout of all existing VEM licenses. During this recheckout procedure, licensed VEMs which are offline will lose their licenses.%{}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg194 = msg("PFM_CLOCK_CHANGE", part154);
      
      var part155 = match("MESSAGE#194:SYNC_FAILURE_STANDBY_RESET", "nwparser.payload", "Failure in syncing messages to standby for vdc %{fld3->} causing standby to reset.", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg195 = msg("SYNC_FAILURE_STANDBY_RESET", part155);
      
      var part156 = match("MESSAGE#195:snmpd", "nwparser.payload", "snmp_pss_snapshot : Copying local engine DB PSS file to url%{}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg196 = msg("snmpd", part156);
      
      var part157 = match("MESSAGE#196:snmpd:01", "nwparser.payload", "SNMPD_SYSLOG_CONFIG_I: Configuration update from %{fld43}_%{saddr->} %{info}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg197 = msg("snmpd:01", part157);
      
      var select29 = linear_select([
      	msg196,
      	msg197,
      ]);
      
      var part158 = match("MESSAGE#197:CFGWRITE_USER_ABORT", "nwparser.payload", "Configuration copy aborted by the user.%{}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg198 = msg("CFGWRITE_USER_ABORT", part158);
      
      var msg199 = msg("IF_DOWN_BIT_ERR_RT_THRES_EXCEEDED", dup95);
      
      var part159 = match("MESSAGE#199:last", "nwparser.payload", "message repeated %{dclass_counter1->} time", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","last message repeated number of times."),
      	setc("dclass_counter1_string","Number of times repeated"),
      ]));
      
      var msg200 = msg("last", part159);
      
      var part160 = match("MESSAGE#200:SERVICE_CRASHED", "nwparser.payload", "Service %{service->} (PID %{parent_pid}) hasn't caught signal %{fld43->} (%{result}).", processor_chain([
      	dup32,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg201 = msg("SERVICE_CRASHED", part160);
      
      var part161 = match("MESSAGE#201:SERVICELOST", "nwparser.payload", "Service %{service->} lost on WCCP Client %{saddr}", processor_chain([
      	dup61,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Service lost on WCCP Client"),
      ]));
      
      var msg202 = msg("SERVICELOST", part161);
      
      var part162 = match("MESSAGE#202:IF_BRINGUP_ALLOWED_FCOT_CHECKSUM_ERR", "nwparser.payload", "Interface %{interface->} is allowed to come up even with SFP checksum error", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg203 = msg("IF_BRINGUP_ALLOWED_FCOT_CHECKSUM_ERR", part162);
      
      var part163 = match("MESSAGE#203:PS_FAIL/0", "nwparser.payload", "Power supply %{fld43->} failed or shut%{p0}");
      
      var part164 = match("MESSAGE#203:PS_FAIL/1_0", "nwparser.p0", " down %{p0}");
      
      var part165 = match("MESSAGE#203:PS_FAIL/1_1", "nwparser.p0", "down %{p0}");
      
      var select30 = linear_select([
      	part164,
      	part165,
      ]);
      
      var part166 = match("MESSAGE#203:PS_FAIL/2", "nwparser.p0", "(Serial number %{serial_number})");
      
      var all16 = all_match({
      	processors: [
      		part163,
      		select30,
      		part166,
      	],
      	on_success: processor_chain([
      		dup23,
      		dup2,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg204 = msg("PS_FAIL", all16);
      
      var msg205 = msg("INFORMATION", dup87);
      
      var msg206 = msg("EVENT", dup87);
      
      var part167 = match("MESSAGE#206:NATIVE_VLAN_MISMATCH", "nwparser.payload", "Native VLAN mismatch discovered on %{interface}, with %{fld23}", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg207 = msg("NATIVE_VLAN_MISMATCH", part167);
      
      var part168 = match("MESSAGE#207:NEIGHBOR_ADDED", "nwparser.payload", "Device %{fld22->} discovered of type %{fld23->} with port %{fld24->} on incoming port %{interface->} with ip addr %{fld25->} and mgmt ip %{hostip}", processor_chain([
      	dup29,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg208 = msg("NEIGHBOR_ADDED", part168);
      
      var part169 = match("MESSAGE#208:NEIGHBOR_REMOVED", "nwparser.payload", "CDP Neighbor %{fld22->} on port %{interface->} has been removed", processor_chain([
      	dup24,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg209 = msg("NEIGHBOR_REMOVED", part169);
      
      var part170 = match("MESSAGE#209:IF_BANDWIDTH_CHANGE", "nwparser.payload", "Interface %{interface},%{event_description}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg210 = msg("IF_BANDWIDTH_CHANGE", part170);
      
      var part171 = match("MESSAGE#210:IF_DOWN_PARENT_ADMIN_DOWN", "nwparser.payload", "Interface %{interface->} is down (Parent interface down)", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg211 = msg("IF_DOWN_PARENT_ADMIN_DOWN", part171);
      
      var part172 = match("MESSAGE#211:PORT_INDIVIDUAL_DOWN", "nwparser.payload", "individual port %{interface->} is down", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg212 = msg("PORT_INDIVIDUAL_DOWN", part172);
      
      var part173 = match("MESSAGE#212:PORT_SUSPENDED", "nwparser.payload", "%{fld22}: %{interface->} is suspended", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg213 = msg("PORT_SUSPENDED", part173);
      
      var part174 = match("MESSAGE#213:FEX_PORT_STATUS_NOTI", "nwparser.payload", "Uplink-ID %{fld22->} of Fex %{fld23->} that is connected with %{interface->} changed its status from %{change_old->} to %{change_new}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("change_attribute","status"),
      ]));
      
      var msg214 = msg("FEX_PORT_STATUS_NOTI", part174);
      
      var msg215 = msg("NOHMS_DIAG_ERR_PS_FAIL", dup102);
      
      var msg216 = msg("NOHMS_DIAG_ERR_PS_RECOVERED", dup87);
      
      var msg217 = msg("ADJCHANGE", dup87);
      
      var part175 = match("MESSAGE#217:PORT_ADDED", "nwparser.payload", "Interface %{interface}, added to VLAN%{vlan->} with role %{fld22}, state %{disposition}, %{info}", processor_chain([
      	dup29,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg218 = msg("PORT_ADDED", part175);
      
      var part176 = match("MESSAGE#218:PORT_DELETED", "nwparser.payload", "Interface %{interface}, removed from VLAN%{vlan}", processor_chain([
      	dup24,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg219 = msg("PORT_DELETED", part176);
      
      var part177 = match("MESSAGE#219:PORT_ROLE", "nwparser.payload", "Port %{interface->} instance VLAN%{vlan->} role changed to %{fld22}", processor_chain([
      	dup62,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg220 = msg("PORT_ROLE", part177);
      
      var part178 = match("MESSAGE#220:PORT_STATE", "nwparser.payload", "Port %{interface->} instance VLAN%{vlan->} moving from %{change_old->} to %{change_new}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("change_attribute","Port state"),
      ]));
      
      var msg221 = msg("PORT_STATE", part178);
      
      var part179 = match("MESSAGE#221:TACACS_ACCOUNTING_MESSAGE", "nwparser.payload", "update: %{saddr}@%{terminal}: %{username}: %{event_description}; feature %{protocol->} (%{result}) %{info}", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg222 = msg("TACACS_ACCOUNTING_MESSAGE", part179);
      
      var part180 = match("MESSAGE#222:TACACS_ACCOUNTING_MESSAGE:01", "nwparser.payload", "update:%{saddr}@%{terminal}:%{username}: enabled telnet", processor_chain([
      	dup22,
      	dup37,
      	dup38,
      	dup17,
      	dup2,
      	dup3,
      	dup4,
      	dup39,
      	dup40,
      ]));
      
      var msg223 = msg("TACACS_ACCOUNTING_MESSAGE:01", part180);
      
      var part181 = match("MESSAGE#368:TACACS_ACCOUNTING_MESSAGE:04", "nwparser.payload", "%{action}: %{saddr}@%{terminal}: %{username}: configure terminal ; ntp source-interface %{sinterface->} (%{result})%{info}", processor_chain([
      	dup63,
      	dup2,
      	dup4,
      ]));
      
      var msg224 = msg("TACACS_ACCOUNTING_MESSAGE:04", part181);
      
      var part182 = match("MESSAGE#369:TACACS_ACCOUNTING_MESSAGE:05/0", "nwparser.payload", "%{action}: %{saddr}@%{terminal}: %{username}: show %{p0}");
      
      var part183 = match("MESSAGE#369:TACACS_ACCOUNTING_MESSAGE:05/1_0", "nwparser.p0", "ntp statistics peer ipaddr %{hostip->} (%{p0}");
      
      var part184 = match("MESSAGE#369:TACACS_ACCOUNTING_MESSAGE:05/1_1", "nwparser.p0", "logging last %{fld3->} (%{p0}");
      
      var select31 = linear_select([
      	part183,
      	part184,
      ]);
      
      var part185 = match("MESSAGE#369:TACACS_ACCOUNTING_MESSAGE:05/2", "nwparser.p0", "%{result})%{info}");
      
      var all17 = all_match({
      	processors: [
      		part182,
      		select31,
      		part185,
      	],
      	on_success: processor_chain([
      		dup63,
      		dup2,
      		dup4,
      	]),
      });
      
      var msg225 = msg("TACACS_ACCOUNTING_MESSAGE:05", all17);
      
      var part186 = match("MESSAGE#370:TACACS_ACCOUNTING_MESSAGE:06", "nwparser.payload", "%{action}: %{saddr}@%{terminal}: %{username}: clock set %{event_time_string->} (%{result})%{info}", processor_chain([
      	dup63,
      	dup2,
      	dup4,
      ]));
      
      var msg226 = msg("TACACS_ACCOUNTING_MESSAGE:06", part186);
      
      var part187 = match("MESSAGE#371:TACACS_ACCOUNTING_MESSAGE:08", "nwparser.payload", "%{action}: %{saddr}@%{terminal}: %{username}: Performing configuration copy. %{info}", processor_chain([
      	dup63,
      	dup2,
      	dup4,
      	setc("event_description","Performing configuration copy"),
      ]));
      
      var msg227 = msg("TACACS_ACCOUNTING_MESSAGE:08", part187);
      
      var part188 = match("MESSAGE#372:TACACS_ACCOUNTING_MESSAGE:09/2", "nwparser.p0", "%{username}: shell terminated because of session timeout %{p0}");
      
      var all18 = all_match({
      	processors: [
      		dup64,
      		dup103,
      		part188,
      		dup104,
      	],
      	on_success: processor_chain([
      		dup63,
      		dup2,
      		dup4,
      		setc("event_description","shell terminated because of session timeout"),
      	]),
      });
      
      var msg228 = msg("TACACS_ACCOUNTING_MESSAGE:09", all18);
      
      var part189 = match("MESSAGE#373:TACACS_ACCOUNTING_MESSAGE:07/2", "nwparser.p0", "%{username}: %{event_description->} %{p0}");
      
      var all19 = all_match({
      	processors: [
      		dup64,
      		dup103,
      		part189,
      		dup104,
      	],
      	on_success: processor_chain([
      		dup63,
      		dup2,
      		dup4,
      	]),
      });
      
      var msg229 = msg("TACACS_ACCOUNTING_MESSAGE:07", all19);
      
      var select32 = linear_select([
      	msg222,
      	msg223,
      	msg224,
      	msg225,
      	msg226,
      	msg227,
      	msg228,
      	msg229,
      ]);
      
      var msg230 = msg("TACACS_ERROR_MESSAGE", dup102);
      
      var msg231 = msg("IF_SFP_WARNING", dup105);
      
      var msg232 = msg("IF_DOWN_TCP_MAX_RETRANSMIT", dup106);
      
      var msg233 = msg("FCIP_PEER_CAVIUM", dup87);
      
      var msg234 = msg("IF_DOWN_PEER_CLOSE", dup106);
      
      var msg235 = msg("IF_DOWN_PEER_RESET", dup106);
      
      var part190 = match("MESSAGE#229:INTF_CONSISTENCY_FAILED", "nwparser.payload", "In domain %{domain}, VPC %{obj_name->} configuration is not consistent (%{result})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","configuration is not consistent in domain"),
      ]));
      
      var msg236 = msg("INTF_CONSISTENCY_FAILED", part190);
      
      var part191 = match("MESSAGE#230:INTF_CONSISTENCY_SUCCESS", "nwparser.payload", "In domain %{domain}, vPC %{obj_name->} configuration is consistent", processor_chain([
      	dup8,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","configuration is consistent in domain"),
      ]));
      
      var msg237 = msg("INTF_CONSISTENCY_SUCCESS", part191);
      
      var msg238 = msg("INTF_COUNTERS_CLEARED", dup105);
      
      var msg239 = msg("IF_HARDWARE", dup105);
      
      var part192 = match_copy("MESSAGE#233:HEARTBEAT_FAILURE", "nwparser.payload", "event_description", processor_chain([
      	setc("eventcategory","1604010000"),
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg240 = msg("HEARTBEAT_FAILURE", part192);
      
      var msg241 = msg("SYSMGR_AUTOCOLLECT_TECH_SUPPORT_LOG", dup87);
      
      var msg242 = msg("PFM_FAN_FLTR_STATUS", dup87);
      
      var msg243 = msg("MOUNT", dup87);
      
      var msg244 = msg("LOG_CMP_UP", dup87);
      
      var part193 = match("MESSAGE#238:IF_XCVR_WARNING/2", "nwparser.p0", "Temperature Warning cleared%{}");
      
      var all20 = all_match({
      	processors: [
      		dup69,
      		dup107,
      		part193,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg245 = msg("IF_XCVR_WARNING", all20);
      
      var msg246 = msg("IF_XCVR_WARNING:01", dup108);
      
      var select33 = linear_select([
      	msg245,
      	msg246,
      ]);
      
      var part194 = match("MESSAGE#240:IF_XCVR_ALARM/2", "nwparser.p0", "Temperature Alarm cleared%{}");
      
      var all21 = all_match({
      	processors: [
      		dup69,
      		dup107,
      		part194,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg247 = msg("IF_XCVR_ALARM", all21);
      
      var msg248 = msg("IF_XCVR_ALARM:01", dup108);
      
      var select34 = linear_select([
      	msg247,
      	msg248,
      ]);
      
      var msg249 = msg("MEMORY_ALERT", dup87);
      
      var msg250 = msg("MEMORY_ALERT_RECOVERED", dup87);
      
      var part195 = match("MESSAGE#244:IF_SFP_ALARM/2", "nwparser.p0", "Rx Power Alarm cleared%{}");
      
      var all22 = all_match({
      	processors: [
      		dup69,
      		dup107,
      		part195,
      	],
      	on_success: processor_chain([
      		dup15,
      		dup2,
      		dup3,
      		dup4,
      	]),
      });
      
      var msg251 = msg("IF_SFP_ALARM", all22);
      
      var msg252 = msg("IF_SFP_ALARM:01", dup108);
      
      var select35 = linear_select([
      	msg251,
      	msg252,
      ]);
      
      var part196 = match_copy("MESSAGE#246:NBRCHANGE_DUAL", "nwparser.payload", "event_description", processor_chain([
      	dup61,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg253 = msg("NBRCHANGE_DUAL", part196);
      
      var part197 = match("MESSAGE#247:SOHMS_DIAG_ERROR/0", "nwparser.payload", "%{} %{device->} %{p0}");
      
      var part198 = match("MESSAGE#247:SOHMS_DIAG_ERROR/1_0", "nwparser.p0", "%{action}: System %{p0}");
      
      var part199 = match("MESSAGE#247:SOHMS_DIAG_ERROR/1_1", "nwparser.p0", "System %{p0}");
      
      var select36 = linear_select([
      	part198,
      	part199,
      ]);
      
      var part200 = match("MESSAGE#247:SOHMS_DIAG_ERROR/2", "nwparser.p0", "minor alarm on fans in fan tray %{dclass_counter1}");
      
      var all23 = all_match({
      	processors: [
      		part197,
      		select36,
      		part200,
      	],
      	on_success: processor_chain([
      		dup61,
      		dup38,
      		dup72,
      		dup2,
      		dup3,
      		dup4,
      		setc("event_description","System minor alarm on fans in fan tray"),
      	]),
      });
      
      var msg254 = msg("SOHMS_DIAG_ERROR", all23);
      
      var part201 = match("MESSAGE#248:SOHMS_DIAG_ERROR:01", "nwparser.payload", "%{device->} System minor alarm on power supply %{fld42}: %{result}", processor_chain([
      	dup61,
      	dup38,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","FEX-System minor alarm on power supply."),
      ]));
      
      var msg255 = msg("SOHMS_DIAG_ERROR:01", part201);
      
      var part202 = match("MESSAGE#249:SOHMS_DIAG_ERROR:02", "nwparser.payload", "%{device}: %{event_description}", processor_chain([
      	dup61,
      	dup38,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg256 = msg("SOHMS_DIAG_ERROR:02", part202);
      
      var select37 = linear_select([
      	msg254,
      	msg255,
      	msg256,
      ]);
      
      var part203 = match("MESSAGE#250:M2FIB_MAC_TBL_PRGMING", "nwparser.payload", "Failed to program the mac table on %{device->} for group: %{fld1}, (%{fld2->} (%{fld3}), %{fld4}, %{hostip}). Error: %{result}. %{info}", processor_chain([
      	dup73,
      	dup34,
      	dup38,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Failed to program the mac table"),
      ]));
      
      var msg257 = msg("M2FIB_MAC_TBL_PRGMING", part203);
      
      var part204 = match("MESSAGE#251:DELETE_STALE_USER_ACCOUNT", "nwparser.payload", "deleting expired user account:%{username}", processor_chain([
      	dup19,
      	dup11,
      	dup20,
      	setc("ec_theme","UserGroup"),
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","deleting expired user account"),
      ]));
      
      var msg258 = msg("DELETE_STALE_USER_ACCOUNT", part204);
      
      var part205 = match("MESSAGE#252:IF_ADMIN_UP", "nwparser.payload", "Interface %{interface->} is admin up", processor_chain([
      	dup30,
      	dup34,
      	dup38,
      	dup17,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Interface is admin up."),
      ]));
      
      var msg259 = msg("IF_ADMIN_UP", part205);
      
      var part206 = match("MESSAGE#253:VPC_CFGD", "nwparser.payload", "vPC %{obj_name->} is configured", processor_chain([
      	dup30,
      	dup34,
      	dup38,
      	dup17,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","vPC is configured"),
      	dup74,
      ]));
      
      var msg260 = msg("VPC_CFGD", part206);
      
      var part207 = match("MESSAGE#254:MODULE_ONLINE", "nwparser.payload", "System Manager has received notification of %{info}", processor_chain([
      	dup30,
      	dup38,
      	dup17,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","System Manager has received notification of local module becoming online."),
      ]));
      
      var msg261 = msg("MODULE_ONLINE", part207);
      
      var part208 = match("MESSAGE#255:BIOS_DAEMON_LC_PRI_BOOT", "nwparser.payload", "System booted from Primary BIOS Flash%{}", processor_chain([
      	dup30,
      	dup75,
      	dup76,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","System booted from Primary BIOS Flash"),
      ]));
      
      var msg262 = msg("BIOS_DAEMON_LC_PRI_BOOT", part208);
      
      var part209 = match("MESSAGE#256:PEER_VPC_DOWN", "nwparser.payload", "Peer %{obj_name->} is down ()", processor_chain([
      	dup77,
      	dup34,
      	dup38,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Peer vPC is down"),
      	dup74,
      ]));
      
      var msg263 = msg("PEER_VPC_DOWN", part209);
      
      var part210 = match("MESSAGE#257:PEER_KEEP_ALIVE_RECV_INT_LATEST/0", "nwparser.payload", "In domain %{domain}, %{p0}");
      
      var part211 = match("MESSAGE#257:PEER_KEEP_ALIVE_RECV_INT_LATEST/1_0", "nwparser.p0", "VPC%{p0}");
      
      var part212 = match("MESSAGE#257:PEER_KEEP_ALIVE_RECV_INT_LATEST/1_1", "nwparser.p0", "vPC%{p0}");
      
      var select38 = linear_select([
      	part211,
      	part212,
      ]);
      
      var part213 = match("MESSAGE#257:PEER_KEEP_ALIVE_RECV_INT_LATEST/2", "nwparser.p0", "%{}peer%{p0}");
      
      var part214 = match("MESSAGE#257:PEER_KEEP_ALIVE_RECV_INT_LATEST/3_0", "nwparser.p0", "-keepalive%{p0}");
      
      var part215 = match("MESSAGE#257:PEER_KEEP_ALIVE_RECV_INT_LATEST/3_1", "nwparser.p0", " keep-alive%{p0}");
      
      var select39 = linear_select([
      	part214,
      	part215,
      ]);
      
      var part216 = match("MESSAGE#257:PEER_KEEP_ALIVE_RECV_INT_LATEST/4", "nwparser.p0", "%{}received on interface %{interface}");
      
      var all24 = all_match({
      	processors: [
      		part210,
      		select38,
      		part213,
      		select39,
      		part216,
      	],
      	on_success: processor_chain([
      		dup36,
      		dup2,
      		dup3,
      		dup4,
      		setc("event_description","In domain, VPC peer-keepalive received on interface"),
      	]),
      });
      
      var msg264 = msg("PEER_KEEP_ALIVE_RECV_INT_LATEST", all24);
      
      var part217 = match("MESSAGE#258:PEER_KEEP_ALIVE_RECV_SUCCESS", "nwparser.payload", "In domain %{domain}, vPC peer keep-alive receive is successful", processor_chain([
      	dup36,
      	dup34,
      	dup78,
      	dup35,
      	dup17,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","In domain, vPC peer keep-alive receive is successful"),
      ]));
      
      var msg265 = msg("PEER_KEEP_ALIVE_RECV_SUCCESS", part217);
      
      var part218 = match("MESSAGE#259:PEER_KEEP_ALIVE_RECV_FAIL", "nwparser.payload", "In domain %{domain}, VPC peer keep-alive receive has failed", processor_chain([
      	dup77,
      	dup34,
      	dup78,
      	dup35,
      	dup14,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","In domain, VPC peer keep-alive receive has failed"),
      ]));
      
      var msg266 = msg("PEER_KEEP_ALIVE_RECV_FAIL", part218);
      
      var part219 = match("MESSAGE#260:PEER_KEEP_ALIVE_SEND_INT_LATEST", "nwparser.payload", "In domain %{domain}, VPC peer-keepalive sent on interface %{interface}", processor_chain([
      	dup36,
      	dup34,
      	dup79,
      	dup35,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","In domain, VPC peer-keepalive sent on interface"),
      ]));
      
      var msg267 = msg("PEER_KEEP_ALIVE_SEND_INT_LATEST", part219);
      
      var part220 = match("MESSAGE#261:PEER_KEEP_ALIVE_SEND_SUCCESS", "nwparser.payload", "In domain %{domain}, vPC peer keep-alive send is successful", processor_chain([
      	dup36,
      	dup34,
      	dup79,
      	dup35,
      	dup17,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","In domain, vPC peer keep-alive send is successful"),
      ]));
      
      var msg268 = msg("PEER_KEEP_ALIVE_SEND_SUCCESS", part220);
      
      var part221 = match("MESSAGE#262:PEER_KEEP_ALIVE_STATUS", "nwparser.payload", "In domain %{domain}, peer keep-alive status changed to %{change_new}", processor_chain([
      	dup30,
      	dup34,
      	dup16,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Peer keep-alive status changed."),
      	setc("change_attribute","peer keep-alive status"),
      ]));
      
      var msg269 = msg("PEER_KEEP_ALIVE_STATUS", part221);
      
      var part222 = match("MESSAGE#263:EJECTOR_STAT_CHANGED", "nwparser.payload", "Ejectors' status in slot %{fld47->} has changed, %{info}", processor_chain([
      	dup30,
      	dup16,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Ejectors' status in slot has changed."),
      ]));
      
      var msg270 = msg("EJECTOR_STAT_CHANGED", part222);
      
      var part223 = match("MESSAGE#264:XBAR_DETECT", "nwparser.payload", "Xbar %{fld41->} detected (Serial number %{fld42})", processor_chain([
      	dup29,
      	setc("ec_activity","Detect"),
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Xbar detected"),
      ]));
      
      var msg271 = msg("XBAR_DETECT", part223);
      
      var part224 = match("MESSAGE#265:XBAR_PWRUP", "nwparser.payload", "Xbar %{fld41->} powered up (Serial number %{fld42})", processor_chain([
      	dup15,
      	dup75,
      	dup76,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Xbar powered up"),
      ]));
      
      var msg272 = msg("XBAR_PWRUP", part224);
      
      var part225 = match("MESSAGE#266:XBAR_PWRDN", "nwparser.payload", "Xbar %{fld41->} powered down (Serial number %{fld42})", processor_chain([
      	dup15,
      	dup75,
      	setc("ec_activity","Stop"),
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Xbar powered down"),
      ]));
      
      var msg273 = msg("XBAR_PWRDN", part225);
      
      var part226 = match("MESSAGE#267:XBAR_OK", "nwparser.payload", "Xbar %{fld41->} is online (serial: %{fld42})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Xbar is online"),
      ]));
      
      var msg274 = msg("XBAR_OK", part226);
      
      var part227 = match("MESSAGE#268:VPC_ISSU_START", "nwparser.payload", "Peer vPC switch ISSU start, locking configuration%{}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Peer vPC switch ISSU start, locking configuration"),
      ]));
      
      var msg275 = msg("VPC_ISSU_START", part227);
      
      var part228 = match("MESSAGE#269:VPC_ISSU_END", "nwparser.payload", "Peer vPC switch ISSU end, unlocking configuration%{}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Peer vPC switch ISSU end, unlocking configuration"),
      ]));
      
      var msg276 = msg("VPC_ISSU_END", part228);
      
      var part229 = match("MESSAGE#270:PORT_RANGE_ROLE", "nwparser.payload", "new_role=%{obj_name->} interface=%{interface->} mst=%{fld42}", processor_chain([
      	dup62,
      	dup2,
      	dup3,
      	dup4,
      	setc("obj_type","new_role"),
      ]));
      
      var msg277 = msg("PORT_RANGE_ROLE", part229);
      
      var part230 = match("MESSAGE#271:PORT_RANGE_STATE", "nwparser.payload", "new_state=%{obj_name->} interface=%{interface->} mst=%{fld42}", processor_chain([
      	dup62,
      	dup2,
      	dup3,
      	dup4,
      	setc("obj_type","new_state"),
      ]));
      
      var msg278 = msg("PORT_RANGE_STATE", part230);
      
      var part231 = match("MESSAGE#272:PORT_RANGE_DELETED", "nwparser.payload", "Interface %{interface->} removed from mst=%{fld42}", processor_chain([
      	dup24,
      	dup34,
      	dup20,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Interface removed from MST."),
      ]));
      
      var msg279 = msg("PORT_RANGE_DELETED", part231);
      
      var part232 = match("MESSAGE#273:PORT_RANGE_ADDED", "nwparser.payload", "Interface %{interface->} added to mst=%{fld42->} with %{info}", processor_chain([
      	dup29,
      	dup34,
      	dup80,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Interface added to MST."),
      ]));
      
      var msg280 = msg("PORT_RANGE_ADDED", part232);
      
      var part233 = match("MESSAGE#274:MST_PORT_BOUNDARY", "nwparser.payload", "Port %{portname->} removed as MST Boundary port", processor_chain([
      	dup24,
      	dup34,
      	dup20,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Port removed as MST Boundary port"),
      ]));
      
      var msg281 = msg("MST_PORT_BOUNDARY", part233);
      
      var part234 = match("MESSAGE#275:PIXM_SYSLOG_MESSAGE_TYPE_CRIT", "nwparser.payload", "Non-transactional PIXM Error. Error Type: %{result}.%{info}", processor_chain([
      	dup1,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Non-transactional PIXM Error"),
      ]));
      
      var msg282 = msg("PIXM_SYSLOG_MESSAGE_TYPE_CRIT", part234);
      
      var part235 = match("MESSAGE#276:IM_INTF_STATE", "nwparser.payload", "%{interface->} is %{obj_name->} in vdc %{fld43}", processor_chain([
      	dup8,
      	dup2,
      	dup3,
      	dup4,
      	setc("obj_type"," Interface state"),
      ]));
      
      var msg283 = msg("IM_INTF_STATE", part235);
      
      var part236 = match("MESSAGE#277:VDC_STATE_CHANGE", "nwparser.payload", "vdc %{fld43->} state changed to %{obj_name}", processor_chain([
      	dup62,
      	dup34,
      	dup16,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","VDC state changed."),
      	setc("obj_type"," VDC state"),
      ]));
      
      var msg284 = msg("VDC_STATE_CHANGE", part236);
      
      var part237 = match("MESSAGE#278:SWITCHOVER_OVER", "nwparser.payload", "Switchover completed.%{}", processor_chain([
      	dup8,
      	dup2,
      	dup3,
      	dup4,
      	dup81,
      ]));
      
      var msg285 = msg("SWITCHOVER_OVER", part237);
      
      var part238 = match("MESSAGE#279:VDC_MODULETYPE", "nwparser.payload", "%{process}: Module type changed to %{obj_name}", processor_chain([
      	dup62,
      	dup16,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	dup81,
      	setc("obj_type"," New Module type"),
      ]));
      
      var msg286 = msg("VDC_MODULETYPE", part238);
      
      var part239 = match("MESSAGE#280:HASEQNO_SYNC_FAILED", "nwparser.payload", "Unable to sync HA sequence number %{fld44->} for service \"%{service}\" (PID %{process_id}): %{result}.", processor_chain([
      	dup77,
      	dup34,
      	dup35,
      	dup14,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Unable to sync HA sequence number for service"),
      ]));
      
      var msg287 = msg("HASEQNO_SYNC_FAILED", part239);
      
      var part240 = match("MESSAGE#281:MSG_SEND_FAILURE_STANDBY_RESET", "nwparser.payload", "Failure in sending message to standby causing standby to reset.%{}", processor_chain([
      	dup1,
      	dup34,
      	dup79,
      	dup35,
      	dup14,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Failure in sending message to standby causing standby to reset."),
      ]));
      
      var msg288 = msg("MSG_SEND_FAILURE_STANDBY_RESET", part240);
      
      var part241 = match("MESSAGE#282:MODULE_LOCK_FAILED", "nwparser.payload", "Failed to lock the local module to avoid reset (error-id %{resultcode}).", processor_chain([
      	dup1,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Failed to lock the local module to avoid reset"),
      ]));
      
      var msg289 = msg("MODULE_LOCK_FAILED", part241);
      
      var part242 = match("MESSAGE#283:L2FMC_NL_MTS_SEND_FAILURE", "nwparser.payload", "Failed to send Mac New Learns/Mac moves due to mts send failure errno %{resultcode}", processor_chain([
      	dup1,
      	dup34,
      	dup79,
      	dup35,
      	dup14,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Failed to send Mac New Learns/Mac moves due to mts send failure."),
      ]));
      
      var msg290 = msg("L2FMC_NL_MTS_SEND_FAILURE", part242);
      
      var part243 = match("MESSAGE#284:SERVER_ADDED", "nwparser.payload", "Server with Chassis ID %{id->} Port ID %{fld45->} management address %{fld46->} discovered on local port %{portname->} in vlan %{vlan->} %{info}", processor_chain([
      	dup29,
      	dup80,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Server discovered on local in vlan 0 with enabled capability Station"),
      ]));
      
      var msg291 = msg("SERVER_ADDED", part243);
      
      var part244 = match("MESSAGE#285:SERVER_REMOVED", "nwparser.payload", "Server with Chassis ID %{id->} Port ID %{fld45->} on local port %{portname->} has been removed", processor_chain([
      	dup24,
      	dup20,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Server on local port has been removed"),
      ]));
      
      var msg292 = msg("SERVER_REMOVED", part244);
      
      var part245 = match("MESSAGE#286:IF_DOWN_SUSPENDED_BY_SPEED", "nwparser.payload", "Interface %{interface->} is down %{info}", processor_chain([
      	dup23,
      	dup34,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      	dup25,
      ]));
      
      var msg293 = msg("IF_DOWN_SUSPENDED_BY_SPEED", part245);
      
      var part246 = match("MESSAGE#287:PORT_INDIVIDUAL", "nwparser.payload", "port %{portname->} is operationally individual", processor_chain([
      	dup8,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","port is operationally individual"),
      ]));
      
      var msg294 = msg("PORT_INDIVIDUAL", part246);
      
      var part247 = match("MESSAGE#288:IF_DOWN_CHANNEL_ADMIN_DOWN", "nwparser.payload", "Interface %{interface->} is down %{info}", processor_chain([
      	dup23,
      	dup34,
      	dup38,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      	dup25,
      ]));
      
      var msg295 = msg("IF_DOWN_CHANNEL_ADMIN_DOWN", part247);
      
      var part248 = match("MESSAGE#289:IF_ERRDIS_RECOVERY", "nwparser.payload", "Interface %{interface->} is being recovered from error disabled state %{info}", processor_chain([
      	dup22,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Interface is being recovered from error disabled state"),
      ]));
      
      var msg296 = msg("IF_ERRDIS_RECOVERY", part248);
      
      var part249 = match("MESSAGE#290:IF_NON_CISCO_TRANSCEIVER", "nwparser.payload", "Non-Cisco transceiver on interface %{interface->} is detected", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Non-Cisco transceiver on interface is detected"),
      ]));
      
      var msg297 = msg("IF_NON_CISCO_TRANSCEIVER", part249);
      
      var part250 = match("MESSAGE#291:ACTIVE_LOWER_MEM_THAN_STANDBY", "nwparser.payload", "Active supervisor in slot %{fld47->} is running with less memory than standby supervisor in slot %{fld48}.", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Active supervisor is running with less memory than standby supervisor."),
      ]));
      
      var msg298 = msg("ACTIVE_LOWER_MEM_THAN_STANDBY", part250);
      
      var part251 = match("MESSAGE#292:READCONF_STARTED", "nwparser.payload", "Configuration update started (PID %{process_id}).", processor_chain([
      	dup30,
      	dup16,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Configuration update started."),
      ]));
      
      var msg299 = msg("READCONF_STARTED", part251);
      
      var part252 = match("MESSAGE#293:SUP_POWERDOWN", "nwparser.payload", "Supervisor in slot %{fld47->} is running with less memory than active supervisor in slot %{fld48}", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Supervisor is running with less memory than active supervisor."),
      ]));
      
      var msg300 = msg("SUP_POWERDOWN", part252);
      
      var part253 = match("MESSAGE#294:LC_UPGRADE_START", "nwparser.payload", "Starting linecard upgrade%{}", processor_chain([
      	dup30,
      	dup16,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Starting linecard upgrade"),
      ]));
      
      var msg301 = msg("LC_UPGRADE_START", part253);
      
      var part254 = match("MESSAGE#295:LC_UPGRADE_REBOOT", "nwparser.payload", "Rebooting linecard as a part of upgrade%{}", processor_chain([
      	dup30,
      	dup16,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Rebooting linecard as a part of upgrade"),
      ]));
      
      var msg302 = msg("LC_UPGRADE_REBOOT", part254);
      
      var part255 = match("MESSAGE#296:RUNTIME_DB_RESTORE_STARTED", "nwparser.payload", "Runtime database controller started (PID %{process_id}).", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Runtime database controller started."),
      ]));
      
      var msg303 = msg("RUNTIME_DB_RESTORE_STARTED", part255);
      
      var part256 = match("MESSAGE#297:RUNTIME_DB_RESTORE_SUCCESS", "nwparser.payload", "Runtime database successfully restored.%{}", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Runtime database successfully restored."),
      ]));
      
      var msg304 = msg("RUNTIME_DB_RESTORE_SUCCESS", part256);
      
      var part257 = match("MESSAGE#298:LCM_MODULE_UPGRADE_START", "nwparser.payload", "Upgrade of module %{fld49->} started", processor_chain([
      	dup30,
      	dup16,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Upgrade of module started"),
      ]));
      
      var msg305 = msg("LCM_MODULE_UPGRADE_START", part257);
      
      var part258 = match("MESSAGE#299:LCM_MODULE_UPGRADE_END", "nwparser.payload", "Upgrade of module %{fld49->} ended", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Upgrade of module ended"),
      ]));
      
      var msg306 = msg("LCM_MODULE_UPGRADE_END", part258);
      
      var part259 = match("MESSAGE#300:FIPS_POST_INFO_MSG", "nwparser.payload", "Recieved insert for %{fld50}", processor_chain([
      	dup63,
      	dup34,
      	dup78,
      	dup35,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Recieved insert for lc mod"),
      ]));
      
      var msg307 = msg("FIPS_POST_INFO_MSG", part259);
      
      var part260 = match("MESSAGE#301:PEER_VPC_CFGD", "nwparser.payload", "peer vPC %{obj_name->} is configured", processor_chain([
      	dup30,
      	dup34,
      	dup38,
      	dup17,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","peer vPC is configured"),
      	dup74,
      ]));
      
      var msg308 = msg("PEER_VPC_CFGD", part260);
      
      var part261 = match("MESSAGE#302:SYN_COLL_DIS_EN", "nwparser.payload", "%{info}: Potential Interop issue on [%{interface}]: %{result}", processor_chain([
      	dup73,
      	dup34,
      	dup38,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Potential Interop issue on interface."),
      ]));
      
      var msg309 = msg("SYN_COLL_DIS_EN", part261);
      
      var part262 = match("MESSAGE#303:NOHMS_ENV_FEX_OFFLINE", "nwparser.payload", "%{device->} Off-line (Serial Number %{fld42})", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","FEX OFFLINE"),
      ]));
      
      var msg310 = msg("NOHMS_ENV_FEX_OFFLINE", part262);
      
      var part263 = match("MESSAGE#304:NOHMS_ENV_FEX_ONLINE", "nwparser.payload", "%{device->} On-line", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","FEX ONLINE"),
      ]));
      
      var msg311 = msg("NOHMS_ENV_FEX_ONLINE", part263);
      
      var part264 = match("MESSAGE#305:FEX_STATUS_online", "nwparser.payload", "%{device->} is online", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Fex is online"),
      ]));
      
      var msg312 = msg("FEX_STATUS_online", part264);
      
      var part265 = match("MESSAGE#306:FEX_STATUS_offline", "nwparser.payload", "%{device->} is offline", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Fex is offline"),
      ]));
      
      var msg313 = msg("FEX_STATUS_offline", part265);
      
      var select40 = linear_select([
      	msg312,
      	msg313,
      ]);
      
      var part266 = match("MESSAGE#307:PS_PWR_INPUT_MISSING", "nwparser.payload", "Power supply %{fld41->} present but all AC/DC inputs are not connected, power redundancy might be affected", processor_chain([
      	dup73,
      	dup38,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Power supply present but all AC/DC inputs are not connected, power redundancy might be affected"),
      ]));
      
      var msg314 = msg("PS_PWR_INPUT_MISSING", part266);
      
      var part267 = match("MESSAGE#308:PS_RED_MODE_RESTORED", "nwparser.payload", "Power redundancy operational mode changed to %{change_new}", processor_chain([
      	dup30,
      	dup16,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Power redundancy operational mode changed."),
      	setc("change_attribute","operational mode"),
      ]));
      
      var msg315 = msg("PS_RED_MODE_RESTORED", part267);
      
      var part268 = match("MESSAGE#309:MOD_PWRFAIL_EJECTORS_OPEN", "nwparser.payload", "All ejectors open, Module %{fld41->} will not be powered up (Serial number %{fld42})", processor_chain([
      	dup1,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","All ejectors open, Module will not be powered up."),
      ]));
      
      var msg316 = msg("MOD_PWRFAIL_EJECTORS_OPEN", part268);
      
      var part269 = match("MESSAGE#310:PINNING_CHANGED", "nwparser.payload", "%{device->} pinning information is changed", processor_chain([
      	dup30,
      	dup16,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Fex pinning information is changed"),
      ]));
      
      var msg317 = msg("PINNING_CHANGED", part269);
      
      var part270 = match("MESSAGE#311:SATCTRL", "nwparser.payload", "%{device->} Module %{fld41}: Cold boot", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","FEX-100 Module -Cold boot"),
      ]));
      
      var msg318 = msg("SATCTRL", part270);
      
      var part271 = match("MESSAGE#312:DUP_REGISTER", "nwparser.payload", "%{fld51->} [%{fld52}] Client %{fld43->} register more than once with same pid%{info}", processor_chain([
      	dup1,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Client register more than once with same pid"),
      ]));
      
      var msg319 = msg("DUP_REGISTER", part271);
      
      var part272 = match("MESSAGE#313:UNKNOWN_MTYPE", "nwparser.payload", "%{fld51->} [%{fld52}] Unknown mtype: %{info}", processor_chain([
      	dup1,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Unknown mtype"),
      ]));
      
      var msg320 = msg("UNKNOWN_MTYPE", part272);
      
      var part273 = match("MESSAGE#314:SATCTRL_IMAGE", "nwparser.payload", "%{fld51->} %{event_description}", processor_chain([
      	dup30,
      	dup16,
      	dup38,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg321 = msg("SATCTRL_IMAGE", part273);
      
      var part274 = match("MESSAGE#315:API_FAILED", "nwparser.payload", "%{fld51->} [%{fld52}] %{event_description}", processor_chain([
      	dup1,
      	setc("ec_subject","Process"),
      	dup14,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg322 = msg("API_FAILED", part274);
      
      var part275 = match_copy("MESSAGE#316:SENSOR_MSG1", "nwparser.payload", "event_description", processor_chain([
      	dup8,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg323 = msg("SENSOR_MSG1", part275);
      
      var part276 = match("MESSAGE#317:API_INIT_SEM_CLEAR", "nwparser.payload", "%{fld51->} [%{fld52}] %{event_description}", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg324 = msg("API_INIT_SEM_CLEAR", part276);
      
      var part277 = match("MESSAGE#318:VDC_ONLINE", "nwparser.payload", "vdc %{fld51->} has come online", processor_chain([
      	dup30,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","vdc has come online"),
      ]));
      
      var msg325 = msg("VDC_ONLINE", part277);
      
      var part278 = match("MESSAGE#319:LACP_SUSPEND_INDIVIDUAL", "nwparser.payload", "LACP port %{portname->} of port-channel %{interface->} not receiving any LACP BPDUs %{result}", processor_chain([
      	dup77,
      	dup34,
      	dup78,
      	dup35,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","LACP port of port-channel not receiving any LACP BPDUs."),
      ]));
      
      var msg326 = msg("LACP_SUSPEND_INDIVIDUAL", part278);
      
      var part279 = match("MESSAGE#320:dstats", "nwparser.payload", "%{process}: %{info}", processor_chain([
      	dup8,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg327 = msg("dstats", part279);
      
      var part280 = match("MESSAGE#321:MSG_PORT_LOGGED_OUT", "nwparser.payload", "%{fld52->} [VSAN %{fld51}, Interface %{interface}: %{fld53->} Nx Port %{portname->} logged OUT.", processor_chain([
      	dup77,
      	dup34,
      	setc("ec_activity","Logoff"),
      	dup35,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg328 = msg("MSG_PORT_LOGGED_OUT", part280);
      
      var part281 = match("MESSAGE#322:MSG_PORT_LOGGED_IN", "nwparser.payload", "%{fld52->} [VSAN %{fld51}, Interface %{interface}: %{fld53->} Nx Port %{portname->} with FCID %{fld54->} logged IN.", processor_chain([
      	dup77,
      	dup34,
      	dup13,
      	dup35,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg329 = msg("MSG_PORT_LOGGED_IN", part281);
      
      var msg330 = msg("IF_DOWN_ELP_FAILURE_ISOLATION", dup96);
      
      var part282 = match("MESSAGE#324:ZS_MERGE_FAILED", "nwparser.payload", "%{fld52->} Zone merge failure, isolating interface %{interface->} reason: %{result}:[%{resultcode}]", processor_chain([
      	dup23,
      	dup34,
      	dup35,
      	dup14,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg331 = msg("ZS_MERGE_FAILED", part282);
      
      var msg332 = msg("IF_DOWN_ZONE_MERGE_FAILURE_ISOLATION", dup96);
      
      var part283 = match("MESSAGE#326:MAC_MOVE_NOTIFICATION", "nwparser.payload", "Host %{hostname->} in vlan %{vlan->} is flapping between port %{change_old->} and port %{change_new}", processor_chain([
      	dup23,
      	dup34,
      	dup35,
      	dup2,
      	dup3,
      	dup4,
      	setc("change_attribute","Port"),
      ]));
      
      var msg333 = msg("MAC_MOVE_NOTIFICATION", part283);
      
      var part284 = match("MESSAGE#327:zone", "nwparser.payload", "num_tlv greater than 1, %{result}", processor_chain([
      	dup8,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg334 = msg("zone", part284);
      
      var part285 = match("MESSAGE#328:ERROR", "nwparser.payload", "%{event_description}: %{info}", processor_chain([
      	dup1,
      	dup34,
      	dup35,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg335 = msg("ERROR", part285);
      
      var part286 = match("MESSAGE#329:INVAL_IP", "nwparser.payload", "%{agent->} [%{process_id}] Received packet with invalid destination IP address (%{daddr}) from %{smacaddr->} on %{interface}", processor_chain([
      	dup77,
      	dup34,
      	dup78,
      	dup35,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg336 = msg("INVAL_IP", part286);
      
      var part287 = match("MESSAGE#330:SYSLOG_SL_MSG_WARNING", "nwparser.payload", "%{process}: message repeated %{dclass_counter1->} times in last %{duration}", processor_chain([
      	dup1,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg337 = msg("SYSLOG_SL_MSG_WARNING", part287);
      
      var part288 = match("MESSAGE#331:DUPLEX_MISMATCH", "nwparser.payload", "Duplex mismatch discovered on %{interface}, with %{fld55}", processor_chain([
      	dup77,
      	dup34,
      	dup35,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg338 = msg("DUPLEX_MISMATCH", part288);
      
      var part289 = match("MESSAGE#332:NOHMS_DIAG_ERROR", "nwparser.payload", "Module %{fld20}: Runtime diag detected major event: Fabric port failure %{interface}", processor_chain([
      	dup77,
      	dup34,
      	dup35,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg339 = msg("NOHMS_DIAG_ERROR", part289);
      
      var part290 = match("MESSAGE#333:STM_LEARNING_RE_ENABLE", "nwparser.payload", "Re enabling dynamic learning on all interfaces%{}", processor_chain([
      	dup15,
      	dup34,
      	dup35,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg340 = msg("STM_LEARNING_RE_ENABLE", part290);
      
      var part291 = match("MESSAGE#334:UDLD_PORT_DISABLED", "nwparser.payload", "UDLD disabled interface %{interface}, %{result}", processor_chain([
      	dup77,
      	dup34,
      	dup35,
      	dup72,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg341 = msg("UDLD_PORT_DISABLED", part291);
      
      var part292 = match("MESSAGE#335:ntpd", "nwparser.payload", "ntp:no servers reachable%{}", processor_chain([
      	dup15,
      	dup2,
      	dup4,
      ]));
      
      var msg342 = msg("ntpd", part292);
      
      var part293 = match("MESSAGE#336:ntpd:01", "nwparser.payload", "ntp:event EVNT_UNREACH %{saddr}", processor_chain([
      	dup15,
      	dup2,
      	dup4,
      ]));
      
      var msg343 = msg("ntpd:01", part293);
      
      var part294 = match("MESSAGE#337:ntpd:02", "nwparser.payload", "ntp:event EVNT_REACH %{saddr}", processor_chain([
      	dup15,
      	dup2,
      	dup4,
      ]));
      
      var msg344 = msg("ntpd:02", part294);
      
      var part295 = match("MESSAGE#338:ntpd:03", "nwparser.payload", "ntp:synchronized to %{saddr}, stratum %{fld9}", processor_chain([
      	dup15,
      	dup2,
      	dup4,
      ]));
      
      var msg345 = msg("ntpd:03", part295);
      
      var part296 = match("MESSAGE#339:ntpd:04", "nwparser.payload", "ntp:%{event_description}", processor_chain([
      	dup15,
      	dup2,
      	dup4,
      ]));
      
      var msg346 = msg("ntpd:04", part296);
      
      var select41 = linear_select([
      	msg342,
      	msg343,
      	msg344,
      	msg345,
      	msg346,
      ]);
      
      var part297 = match_copy("MESSAGE#340:PFM_ALERT", "nwparser.payload", "event_description", processor_chain([
      	dup9,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg347 = msg("PFM_ALERT", part297);
      
      var part298 = match("MESSAGE#341:SERVICEFOUND", "nwparser.payload", "Service %{service->} acquired on WCCP Client %{saddr}", processor_chain([
      	dup61,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Service acquired on WCCP Client"),
      ]));
      
      var msg348 = msg("SERVICEFOUND", part298);
      
      var part299 = match("MESSAGE#342:ROUTERFOUND", "nwparser.payload", "Service %{service->} acquired on WCCP Router %{saddr}", processor_chain([
      	dup61,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Service acquired on WCCP Router"),
      ]));
      
      var msg349 = msg("ROUTERFOUND", part299);
      
      var part300 = match("MESSAGE#343:%AUTHPRIV-3-SYSTEM_MSG", "nwparser.payload", "pam_aaa:Authentication failed from %{shost->} - %{agent}", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Authentication failed"),
      ]));
      
      var msg350 = msg("%AUTHPRIV-3-SYSTEM_MSG", part300);
      
      var part301 = match("MESSAGE#344:%AUTHPRIV-5-SYSTEM_MSG", "nwparser.payload", "New user added with username %{username->} - %{agent}", processor_chain([
      	dup18,
      	dup2,
      	dup12,
      	dup3,
      	dup4,
      	setc("event_description","New user added"),
      ]));
      
      var msg351 = msg("%AUTHPRIV-5-SYSTEM_MSG", part301);
      
      var part302 = match("MESSAGE#345:%AUTHPRIV-6-SYSTEM_MSG:01", "nwparser.payload", "%{action}: %{service->} pid=%{process_id->} from=::ffff:%{saddr->} - %{agent}", processor_chain([
      	dup10,
      	dup2,
      	dup12,
      	dup3,
      	dup4,
      ]));
      
      var msg352 = msg("%AUTHPRIV-6-SYSTEM_MSG:01", part302);
      
      var part303 = match("MESSAGE#346:%AUTHPRIV-6-SYSTEM_MSG", "nwparser.payload", "pam_unix(%{fld1}:session): session opened for user %{username->} by (uid=%{uid}) - %{agent}", processor_chain([
      	dup10,
      	dup2,
      	dup12,
      	dup3,
      	dup4,
      	setc("event_description","session opened for user"),
      ]));
      
      var msg353 = msg("%AUTHPRIV-6-SYSTEM_MSG", part303);
      
      var select42 = linear_select([
      	msg352,
      	msg353,
      ]);
      
      var part304 = match("MESSAGE#347:%USER-3-SYSTEM_MSG", "nwparser.payload", "error: %{result}", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg354 = msg("%USER-3-SYSTEM_MSG", part304);
      
      var part305 = match("MESSAGE#348:%USER-6-SYSTEM_MSG", "nwparser.payload", "Invalid user %{username->} from %{saddr->} - %{agent}", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      	dup82,
      ]));
      
      var msg355 = msg("%USER-6-SYSTEM_MSG", part305);
      
      var part306 = match("MESSAGE#349:%USER-6-SYSTEM_MSG:01", "nwparser.payload", "input_userauth_request: invalid user %{username->} - %{agent}", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      	dup82,
      ]));
      
      var msg356 = msg("%USER-6-SYSTEM_MSG:01", part306);
      
      var part307 = match("MESSAGE#350:%USER-6-SYSTEM_MSG:02", "nwparser.payload", "Failed none for invalid user %{username->} from %{saddr->} port %{sport->} %{protocol->} - %{agent}", processor_chain([
      	dup5,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Failed none for invalid user"),
      ]));
      
      var msg357 = msg("%USER-6-SYSTEM_MSG:02", part307);
      
      var part308 = match("MESSAGE#351:%USER-6-SYSTEM_MSG:03", "nwparser.payload", "Accepted password for %{username->} from %{saddr->} port %{sport->} %{protocol->} - %{agent}", processor_chain([
      	dup83,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Accepted password for user"),
      ]));
      
      var msg358 = msg("%USER-6-SYSTEM_MSG:03", part308);
      
      var part309 = match("MESSAGE#352:%USER-6-SYSTEM_MSG:04", "nwparser.payload", "lastlog_openseek: Couldn't stat %{directory}: No such file or directory - %{agent}", processor_chain([
      	dup83,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","No such file or directory"),
      ]));
      
      var msg359 = msg("%USER-6-SYSTEM_MSG:04", part309);
      
      var part310 = match("MESSAGE#353:%USER-6-SYSTEM_MSG:05", "nwparser.payload", "Could not load host key: %{encryption_type->} - %{agent}", processor_chain([
      	dup83,
      	dup2,
      	dup3,
      	dup4,
      	setc("event_description","Could not load host key"),
      ]));
      
      var msg360 = msg("%USER-6-SYSTEM_MSG:05", part310);
      
      var part311 = match("MESSAGE#354:%USER-6-SYSTEM_MSG:06", "nwparser.payload", "%{event_description->} - %{agent}", processor_chain([
      	dup83,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var msg361 = msg("%USER-6-SYSTEM_MSG:06", part311);
      
      var select43 = linear_select([
      	msg355,
      	msg356,
      	msg357,
      	msg358,
      	msg359,
      	msg360,
      	msg361,
      ]);
      
      var part312 = match("MESSAGE#355:L2FM_MAC_FLAP_DISABLE_LEARN", "nwparser.payload", "Disabling learning in vlan %{vlan->} for %{duration}s due to too many mac moves", processor_chain([
      	dup30,
      	dup2,
      	dup4,
      	setc("ec_activity","Disable"),
      ]));
      
      var msg362 = msg("L2FM_MAC_FLAP_DISABLE_LEARN", part312);
      
      var part313 = match("MESSAGE#356:L2FM_MAC_FLAP_RE_ENABLE_LEARN", "nwparser.payload", "Re-enabling learning in vlan %{vlan}", processor_chain([
      	dup30,
      	dup2,
      	dup4,
      	dup37,
      ]));
      
      var msg363 = msg("L2FM_MAC_FLAP_RE_ENABLE_LEARN", part313);
      
      var part314 = match("MESSAGE#357:PS_ABSENT", "nwparser.payload", "Power supply %{fld1->} is %{disposition}, ps-redundancy might be affected", processor_chain([
      	dup1,
      	dup2,
      	dup4,
      ]));
      
      var msg364 = msg("PS_ABSENT", part314);
      
      var part315 = match("MESSAGE#358:PS_DETECT", "nwparser.payload", "Power supply %{fld1->} detected but %{disposition->} (Serial number %{serial_number})", processor_chain([
      	dup1,
      	dup2,
      	dup4,
      ]));
      
      var msg365 = msg("PS_DETECT", part315);
      
      var part316 = match("MESSAGE#359:SUBPROC_TERMINATED", "nwparser.payload", "\"System Manager (configuration controller)\" (PID %{process_id}) has finished with error code %{result->} (%{resultcode}).", processor_chain([
      	dup1,
      	dup2,
      	dup4,
      ]));
      
      var msg366 = msg("SUBPROC_TERMINATED", part316);
      
      var part317 = match("MESSAGE#360:SUBPROC_SUCCESS_EXIT", "nwparser.payload", "\"%{service}\" (PID %{process_id}) has successfully exited with exit code %{result->} (%{resultcode}).", processor_chain([
      	dup15,
      	dup2,
      	dup4,
      	dup84,
      	dup17,
      ]));
      
      var msg367 = msg("SUBPROC_SUCCESS_EXIT", part317);
      
      var part318 = match("MESSAGE#361:UPDOWN", "nwparser.payload", "Line Protocol on Interface vlan %{vlan}, changed state to %{disposition}", processor_chain([
      	dup30,
      	dup2,
      	dup4,
      ]));
      
      var msg368 = msg("UPDOWN", part318);
      
      var part319 = match("MESSAGE#362:L2FM_MAC_MOVE2", "nwparser.payload", "Mac %{smacaddr->} in vlan %{vlan->} has moved between %{change_old->} to %{change_new}", processor_chain([
      	dup30,
      	dup2,
      	dup4,
      	setc("change_attribute","Interface"),
      ]));
      
      var msg369 = msg("L2FM_MAC_MOVE2", part319);
      
      var part320 = match("MESSAGE#363:PFM_PS_RED_MODE_CHG", "nwparser.payload", "Power redundancy configured mode changed to %{event_state}", processor_chain([
      	dup30,
      	dup2,
      	dup4,
      	dup38,
      ]));
      
      var msg370 = msg("PFM_PS_RED_MODE_CHG", part320);
      
      var part321 = match("MESSAGE#364:PS_RED_MODE_CHG", "nwparser.payload", "Power supply operational redundancy mode changed to %{event_state}", processor_chain([
      	dup30,
      	dup2,
      	dup4,
      	dup38,
      ]));
      
      var msg371 = msg("PS_RED_MODE_CHG", part321);
      
      var part322 = match("MESSAGE#365:INVAL_MAC", "nwparser.payload", "%{agent->} [%{process_id}] Received packet with invalid source MAC address (%{smacaddr}) from %{saddr->} on %{vlan}", processor_chain([
      	dup63,
      	dup2,
      	dup4,
      ]));
      
      var msg372 = msg("INVAL_MAC", part322);
      
      var part323 = match("MESSAGE#366:SRVSTATE_CHANGED", "nwparser.payload", "State for service \"%{service}\" changed from %{change_old->} to %{change_new->} in vdc %{fld1}.", processor_chain([
      	dup15,
      	dup2,
      	dup4,
      	setc("change_attribute","Service status"),
      ]));
      
      var msg373 = msg("SRVSTATE_CHANGED", part323);
      
      var part324 = match_copy("MESSAGE#367:INFO", "nwparser.payload", "event_description", processor_chain([
      	dup63,
      	dup2,
      	dup4,
      ]));
      
      var msg374 = msg("INFO", part324);
      
      var part325 = match("MESSAGE#374:SERVICE_STARTED", "nwparser.payload", "Service \"%{service}\" in vdc %{fld1->} started with PID(%{process_id}).", processor_chain([
      	dup15,
      	dup2,
      	dup4,
      	dup84,
      	dup76,
      	dup17,
      ]));
      
      var msg375 = msg("SERVICE_STARTED", part325);
      
      var part326 = match("MESSAGE#375:DUP_VADDR_SRCIP_PROBE", "nwparser.payload", "%{process->} [%{process_id}] Duplicate address Detected. Probe packet received from %{smacaddr->} on %{vlan->} with destination set to our local Virtual ip, %{saddr}", processor_chain([
      	dup8,
      	dup2,
      	dup3,
      	dup4,
      	dup85,
      ]));
      
      var msg376 = msg("DUP_VADDR_SRCIP_PROBE", part326);
      
      var part327 = match("MESSAGE#376:DUP_SRCIP_PROBE", "nwparser.payload", "%{process->} [%{process_id}] Duplicate address Detected. Probe packet received from %{smacaddr->} on %{vlan->} with destination set to our local ip, %{saddr}", processor_chain([
      	dup8,
      	dup2,
      	dup3,
      	dup4,
      	dup85,
      ]));
      
      var msg377 = msg("DUP_SRCIP_PROBE", part327);
      
      var chain1 = processor_chain([
      	select1,
      	msgid_select({
      		"%AUTHPRIV-3-SYSTEM_MSG": msg350,
      		"%AUTHPRIV-5-SYSTEM_MSG": msg351,
      		"%AUTHPRIV-6-SYSTEM_MSG": select42,
      		"%USER-3-SYSTEM_MSG": msg354,
      		"%USER-6-SYSTEM_MSG": select43,
      		"AAA_ACCOUNTING_MESSAGE": select28,
      		"ACLLOG_FLOW_INTERVAL": msg187,
      		"ACLLOG_MAXFLOW_REACHED": msg188,
      		"ACLLOG_NEW_FLOW": msg189,
      		"ACTIVE_LOWER_MEM_THAN_STANDBY": msg298,
      		"ACTIVE_SUP_OK": msg74,
      		"ADDON_IMG_DNLD_COMPLETE": msg60,
      		"ADDON_IMG_DNLD_STARTED": msg61,
      		"ADDON_IMG_DNLD_SUCCESSFUL": msg62,
      		"ADJCHANGE": msg217,
      		"API_FAILED": msg322,
      		"API_INIT_SEM_CLEAR": msg324,
      		"BIOS_DAEMON_LC_PRI_BOOT": msg262,
      		"CFGWRITE_ABORTED": msg135,
      		"CFGWRITE_ABORTED_LOCK": msg133,
      		"CFGWRITE_DONE": msg136,
      		"CFGWRITE_FAILED": msg134,
      		"CFGWRITE_STARTED": msg137,
      		"CFGWRITE_USER_ABORT": msg198,
      		"CHASSIS_CLKMODOK": msg80,
      		"CHASSIS_CLKSRC": msg81,
      		"CONN_CONNECT": msg145,
      		"CONN_DISCONNECT": msg146,
      		"CREATED": msg51,
      		"DELETE_STALE_USER_ACCOUNT": msg258,
      		"DISPUTE_CLEARED": msg77,
      		"DISPUTE_DETECTED": msg78,
      		"DOMAIN_CFG_SYNC_DONE": msg79,
      		"DUPLEX_MISMATCH": msg338,
      		"DUP_REGISTER": msg319,
      		"DUP_SRCIP_PROBE": msg377,
      		"DUP_VADDR_SRCIP_PROBE": msg376,
      		"DUP_VADDR_SRC_IP": msg190,
      		"DVPG_CREATE": msg147,
      		"DVPG_DELETE": msg148,
      		"DVS_HOSTMEMBER_INFO": msg149,
      		"DVS_NAME_CHANGE": msg150,
      		"EJECTOR_STAT_CHANGED": msg270,
      		"ERROR": msg335,
      		"ERR_MSG": msg131,
      		"EVENT": msg206,
      		"FAN_DETECT": msg97,
      		"FAN_OK": msg82,
      		"FCIP_PEER_CAVIUM": msg233,
      		"FEX_PORT_STATUS_NOTI": msg214,
      		"FEX_STATUS": select40,
      		"FIPS_POST_INFO_MSG": msg307,
      		"FOP_CHANGED": msg52,
      		"HASEQNO_SYNC_FAILED": msg287,
      		"HEARTBEAT_FAILURE": msg240,
      		"IF_ADMIN_UP": msg259,
      		"IF_ATTACHED": msg138,
      		"IF_BANDWIDTH_CHANGE": msg210,
      		"IF_BRINGUP_ALLOWED_FCOT_CHECKSUM_ERR": msg203,
      		"IF_DELETE_AUTO": msg139,
      		"IF_DETACHED": msg140,
      		"IF_DETACHED_MODULE_REMOVED": msg141,
      		"IF_DOWN_ADMIN_DOWN": select11,
      		"IF_DOWN_BIT_ERR_RT_THRES_EXCEEDED": msg199,
      		"IF_DOWN_CFG_CHANGE": msg193,
      		"IF_DOWN_CHANNEL_ADMIN_DOWN": msg295,
      		"IF_DOWN_CHANNEL_MEMBERSHIP_UPDATE_IN_PROGRESS": msg38,
      		"IF_DOWN_ELP_FAILURE_ISOLATION": msg330,
      		"IF_DOWN_ERROR_DISABLED": msg35,
      		"IF_DOWN_FCOT_NOT_PRESENT": select17,
      		"IF_DOWN_INACTIVE": msg142,
      		"IF_DOWN_INITIALIZING": select18,
      		"IF_DOWN_INTERFACE_REMOVED": msg39,
      		"IF_DOWN_LINK_FAILURE": select12,
      		"IF_DOWN_MODULE_REMOVED": msg42,
      		"IF_DOWN_NONE": select19,
      		"IF_DOWN_NON_PARTICIPATING": msg143,
      		"IF_DOWN_NOS_RCVD": select20,
      		"IF_DOWN_OFFLINE": msg114,
      		"IF_DOWN_OLS_RCVD": msg115,
      		"IF_DOWN_PARENT_ADMIN_DOWN": msg211,
      		"IF_DOWN_PEER_CLOSE": msg234,
      		"IF_DOWN_PEER_RESET": msg235,
      		"IF_DOWN_PORT_CHANNEL_MEMBERS_DOWN": msg43,
      		"IF_DOWN_SOFTWARE_FAILURE": msg116,
      		"IF_DOWN_SRC_PORT_NOT_BOUND": msg117,
      		"IF_DOWN_SUSPENDED_BY_SPEED": msg293,
      		"IF_DOWN_TCP_MAX_RETRANSMIT": msg232,
      		"IF_DOWN_VEM_UNLICENSED": msg144,
      		"IF_DOWN_ZONE_MERGE_FAILURE_ISOLATION": msg332,
      		"IF_DUPLEX": msg44,
      		"IF_ERRDIS_RECOVERY": msg296,
      		"IF_ERROR_VLANS_REMOVED": msg191,
      		"IF_ERROR_VLANS_SUSPENDED": msg192,
      		"IF_HARDWARE": msg239,
      		"IF_NON_CISCO_TRANSCEIVER": msg297,
      		"IF_PORTPROFILE_ATTACHED": msg125,
      		"IF_RX_FLOW_CONTROL": msg45,
      		"IF_SEQ_ERROR": msg46,
      		"IF_SFP_ALARM": select35,
      		"IF_SFP_WARNING": msg231,
      		"IF_TRUNK_DOWN": select21,
      		"IF_TRUNK_UP": select22,
      		"IF_TX_FLOW_CONTROL": msg47,
      		"IF_UP": select13,
      		"IF_XCVR_ALARM": select34,
      		"IF_XCVR_WARNING": select33,
      		"IMG_DNLD_COMPLETE": msg63,
      		"IMG_DNLD_STARTED": msg64,
      		"IM_INTF_STATE": msg283,
      		"IM_SEQ_ERROR": msg59,
      		"INFO": msg374,
      		"INFORMATION": msg205,
      		"INTF_CONSISTENCY_FAILED": msg236,
      		"INTF_CONSISTENCY_SUCCESS": msg237,
      		"INTF_COUNTERS_CLEARED": msg238,
      		"INVAL_IP": msg336,
      		"INVAL_MAC": msg372,
      		"L2FMC_NL_MTS_SEND_FAILURE": msg290,
      		"L2FM_MAC_FLAP_DISABLE_LEARN": msg362,
      		"L2FM_MAC_FLAP_RE_ENABLE_LEARN": msg363,
      		"L2FM_MAC_MOVE2": msg369,
      		"LACP_SUSPEND_INDIVIDUAL": msg326,
      		"LCM_MODULE_UPGRADE_END": msg306,
      		"LCM_MODULE_UPGRADE_START": msg305,
      		"LC_UPGRADE_REBOOT": msg302,
      		"LC_UPGRADE_START": msg301,
      		"LOG-7-SYSTEM_MSG": msg1,
      		"LOG_CMP_AAA_FAILURE": msg67,
      		"LOG_CMP_UP": msg244,
      		"LOG_LIC_N1K_EXPIRY_WARNING": msg68,
      		"M2FIB_MAC_TBL_PRGMING": msg257,
      		"MAC_MOVE_NOTIFICATION": msg333,
      		"MEMORY_ALERT": msg249,
      		"MEMORY_ALERT_RECOVERED": msg250,
      		"MESG": msg130,
      		"MODULE_LOCK_FAILED": msg289,
      		"MODULE_ONLINE": msg261,
      		"MOD_BRINGUP_MULTI_LIMIT": msg96,
      		"MOD_DETECT": msg83,
      		"MOD_FAIL": msg69,
      		"MOD_MAJORSWFAIL": msg70,
      		"MOD_OK": msg75,
      		"MOD_PWRDN": msg84,
      		"MOD_PWRFAIL_EJECTORS_OPEN": msg316,
      		"MOD_PWRUP": msg85,
      		"MOD_REMOVE": msg86,
      		"MOD_RESTART": msg76,
      		"MOD_SRG_NOT_COMPATIBLE": msg71,
      		"MOD_STATUS": msg98,
      		"MOD_WARNING": select14,
      		"MOUNT": msg243,
      		"MSG_PORT_LOGGED_IN": msg329,
      		"MSG_PORT_LOGGED_OUT": msg328,
      		"MSG_SEND_FAILURE_STANDBY_RESET": msg288,
      		"MSM_CRIT": msg66,
      		"MST_PORT_BOUNDARY": msg281,
      		"MTSERROR": msg34,
      		"MTS_DROP": msg57,
      		"NATIVE_VLAN_MISMATCH": msg207,
      		"NBRCHANGE_DUAL": msg253,
      		"NEIGHBOR_ADDED": msg208,
      		"NEIGHBOR_REMOVED": msg209,
      		"NEIGHBOR_UPDATE_AUTOCOPY": msg33,
      		"NOHMS_DIAG_ERROR": msg339,
      		"NOHMS_DIAG_ERR_PS_FAIL": msg215,
      		"NOHMS_DIAG_ERR_PS_RECOVERED": msg216,
      		"NOHMS_ENV_FEX_OFFLINE": msg310,
      		"NOHMS_ENV_FEX_ONLINE": msg311,
      		"PEER_KEEP_ALIVE_RECV_FAIL": msg266,
      		"PEER_KEEP_ALIVE_RECV_INT_LATEST": msg264,
      		"PEER_KEEP_ALIVE_RECV_SUCCESS": msg265,
      		"PEER_KEEP_ALIVE_SEND_INT_LATEST": msg267,
      		"PEER_KEEP_ALIVE_SEND_SUCCESS": msg268,
      		"PEER_KEEP_ALIVE_STATUS": msg269,
      		"PEER_VPC_CFGD": msg308,
      		"PEER_VPC_CFGD_VLANS_CHANGED": msg99,
      		"PEER_VPC_DELETED": msg100,
      		"PEER_VPC_DOWN": msg263,
      		"PFM_ALERT": msg347,
      		"PFM_CLOCK_CHANGE": msg194,
      		"PFM_FAN_FLTR_STATUS": msg242,
      		"PFM_MODULE_POWER_ON": msg87,
      		"PFM_PS_RED_MODE_CHG": msg370,
      		"PFM_SYSTEM_RESET": msg88,
      		"PFM_VEM_DETECTED": msg101,
      		"PFM_VEM_REMOVE_NO_HB": msg89,
      		"PFM_VEM_REMOVE_RESET": msg90,
      		"PFM_VEM_REMOVE_STATE_CONFLICT": msg91,
      		"PFM_VEM_REMOVE_TWO_ACT_VSM": msg92,
      		"PFM_VEM_UNLICENSED": msg93,
      		"PINNING_CHANGED": msg317,
      		"PIXM_SYSLOG_MESSAGE_TYPE_CRIT": msg282,
      		"POLICY_ACTIVATE_EVENT": msg27,
      		"POLICY_COMMIT_EVENT": msg28,
      		"POLICY_DEACTIVATE_EVENT": msg29,
      		"POLICY_LOOKUP_EVENT": select10,
      		"PORT_ADDED": msg218,
      		"PORT_DELETED": msg219,
      		"PORT_DOWN": msg53,
      		"PORT_INDIVIDUAL": msg294,
      		"PORT_INDIVIDUAL_DOWN": msg212,
      		"PORT_PROFILE_CHANGE_VERIFY_REQ_FAILURE": msg124,
      		"PORT_RANGE_ADDED": msg280,
      		"PORT_RANGE_DELETED": msg279,
      		"PORT_RANGE_ROLE": msg277,
      		"PORT_RANGE_STATE": msg278,
      		"PORT_ROLE": msg220,
      		"PORT_SOFTWARE_FAILURE": msg65,
      		"PORT_STATE": msg221,
      		"PORT_SUSPENDED": msg213,
      		"PORT_UP": msg54,
      		"PS_ABSENT": msg364,
      		"PS_CAPACITY_CHANGE": select16,
      		"PS_DETECT": msg365,
      		"PS_FAIL": msg204,
      		"PS_FANOK": msg94,
      		"PS_FOUND": msg102,
      		"PS_OK": msg95,
      		"PS_PWR_INPUT_MISSING": msg314,
      		"PS_RED_MODE_CHG": msg371,
      		"PS_RED_MODE_RESTORED": msg315,
      		"PS_STATUS": msg103,
      		"PVLAN_PPM_PORT_CONFIG_FAILED": msg129,
      		"READCONF_STARTED": msg299,
      		"RM_VICPP_RECREATE_ERROR": msg132,
      		"ROUTERFOUND": msg349,
      		"RUNTIME_DB_RESTORE_STARTED": msg303,
      		"RUNTIME_DB_RESTORE_SUCCESS": msg304,
      		"SATCTRL": msg318,
      		"SATCTRL_IMAGE": msg321,
      		"SENSOR_MSG1": msg323,
      		"SERVER_ADDED": msg291,
      		"SERVER_REMOVED": msg292,
      		"SERVICEFOUND": msg348,
      		"SERVICELOST": msg202,
      		"SERVICE_CRASHED": msg201,
      		"SERVICE_STARTED": msg375,
      		"SOHMS_DIAG_ERROR": select37,
      		"SPEED": msg50,
      		"SRVSTATE_CHANGED": msg373,
      		"STANDBY_SUP_OK": msg126,
      		"STM_LEARNING_RE_ENABLE": msg340,
      		"STM_LOOP_DETECT": msg127,
      		"SUBGROUP_ID_PORT_ADDED": msg55,
      		"SUBGROUP_ID_PORT_REMOVED": msg56,
      		"SUBPROC_SUCCESS_EXIT": msg367,
      		"SUBPROC_TERMINATED": msg366,
      		"SUP_POWERDOWN": msg300,
      		"SWITCHOVER_OVER": msg285,
      		"SYNC_COMPLETE": msg128,
      		"SYNC_FAILURE_STANDBY_RESET": msg195,
      		"SYN_COLL_DIS_EN": msg309,
      		"SYSLOG_LOG_WARNING": msg58,
      		"SYSLOG_SL_MSG_WARNING": msg337,
      		"SYSMGR_AUTOCOLLECT_TECH_SUPPORT_LOG": msg241,
      		"SYSTEM_MSG": select9,
      		"TACACS_ACCOUNTING_MESSAGE": select32,
      		"TACACS_ERROR_MESSAGE": msg230,
      		"UDLD_PORT_DISABLED": msg341,
      		"UNKNOWN_MTYPE": msg320,
      		"UPDOWN": msg368,
      		"VDC_HOSTNAME_CHANGE": msg26,
      		"VDC_MODULETYPE": msg286,
      		"VDC_ONLINE": msg325,
      		"VDC_STATE_CHANGE": msg284,
      		"VMS_PPM_SYNC_COMPLETE": msg151,
      		"VPC_CFGD": msg260,
      		"VPC_DELETED": msg152,
      		"VPC_ISSU_END": msg276,
      		"VPC_ISSU_START": msg275,
      		"VPC_UP": msg153,
      		"VSHD_SYSLOG_CONFIG_I": select25,
      		"XBAR_DETECT": msg271,
      		"XBAR_OK": msg274,
      		"XBAR_PWRDN": msg273,
      		"XBAR_PWRUP": msg272,
      		"ZS_MERGE_FAILED": msg331,
      		"dstats": msg327,
      		"last": msg200,
      		"ntpd": select41,
      		"snmpd": select29,
      		"zone": msg334,
      	}),
      ]);
      
      var part328 = match_copy("MESSAGE#24:SYSTEM_MSG:08/0_1", "nwparser.payload", "event_description");
      
      var part329 = match("MESSAGE#44:IF_RX_FLOW_CONTROL/1_0", "nwparser.p0", "rol%{p0}");
      
      var part330 = match("MESSAGE#44:IF_RX_FLOW_CONTROL/1_1", "nwparser.p0", "ol%{p0}");
      
      var part331 = match("MESSAGE#44:IF_RX_FLOW_CONTROL/2", "nwparser.p0", "%{}state changed to %{result}");
      
      var part332 = match("MESSAGE#171:AAA_ACCOUNTING_MESSAGE:27/0", "nwparser.payload", "update:%{saddr}@%{terminal}:%{username}:%{p0}");
      
      var part333 = match("MESSAGE#171:AAA_ACCOUNTING_MESSAGE:27/2", "nwparser.p0", "%{result})");
      
      var part334 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/0", "nwparser.payload", "S%{p0}");
      
      var part335 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/1_0", "nwparser.p0", "ource%{p0}");
      
      var part336 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/1_1", "nwparser.p0", "rc%{p0}");
      
      var part337 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/2", "nwparser.p0", "%{}IP: %{saddr}, D%{p0}");
      
      var part338 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/3_0", "nwparser.p0", "estination%{p0}");
      
      var part339 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/3_1", "nwparser.p0", "st%{p0}");
      
      var part340 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/4", "nwparser.p0", "%{}IP: %{daddr}, S%{p0}");
      
      var part341 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/6", "nwparser.p0", "%{}Port: %{sport}, D%{p0}");
      
      var part342 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/8", "nwparser.p0", "%{}Port: %{dport}, S%{p0}");
      
      var part343 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/9_0", "nwparser.p0", "ource Interface%{p0}");
      
      var part344 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/9_1", "nwparser.p0", "rc Intf%{p0}");
      
      var part345 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/10", "nwparser.p0", ": %{sinterface}, %{p0}");
      
      var part346 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/11_0", "nwparser.p0", "Protocol: %{p0}");
      
      var part347 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/11_1", "nwparser.p0", "protocol: %{p0}");
      
      var part348 = match("MESSAGE#186:ACLLOG_FLOW_INTERVAL/12", "nwparser.p0", "\"%{protocol}\"(%{protocol_detail}),%{space->} Hit-count = %{dclass_counter1}");
      
      var part349 = match("MESSAGE#372:TACACS_ACCOUNTING_MESSAGE:09/0", "nwparser.payload", "%{action}: %{p0}");
      
      var part350 = match("MESSAGE#372:TACACS_ACCOUNTING_MESSAGE:09/1_0", "nwparser.p0", "%{saddr}@%{terminal}: %{p0}");
      
      var part351 = match("MESSAGE#372:TACACS_ACCOUNTING_MESSAGE:09/1_1", "nwparser.p0", "%{fld1->} %{p0}");
      
      var part352 = match("MESSAGE#372:TACACS_ACCOUNTING_MESSAGE:09/3_0", "nwparser.p0", "(%{result})%{info}");
      
      var part353 = match_copy("MESSAGE#372:TACACS_ACCOUNTING_MESSAGE:09/3_1", "nwparser.p0", "info");
      
      var part354 = match("MESSAGE#238:IF_XCVR_WARNING/0", "nwparser.payload", "Interface %{interface}, %{p0}");
      
      var part355 = match("MESSAGE#238:IF_XCVR_WARNING/1_0", "nwparser.p0", "Low %{p0}");
      
      var part356 = match("MESSAGE#238:IF_XCVR_WARNING/1_1", "nwparser.p0", "High %{p0}");
      
      var part357 = match_copy("MESSAGE#0:LOG-7-SYSTEM_MSG", "nwparser.payload", "event_description", processor_chain([
      	dup1,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var part358 = match_copy("MESSAGE#32:NEIGHBOR_UPDATE_AUTOCOPY", "nwparser.payload", "event_description", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var part359 = match("MESSAGE#35:IF_DOWN_ADMIN_DOWN", "nwparser.payload", "Interface %{interface->} is down (%{result})", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var part360 = match("MESSAGE#36:IF_DOWN_ADMIN_DOWN:01", "nwparser.payload", "%{fld43->} Interface %{interface->} is down (%{result})", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var part361 = match("MESSAGE#37:IF_DOWN_CHANNEL_MEMBERSHIP_UPDATE_IN_PROGRESS", "nwparser.payload", "Interface %{interface->} is down (%{result})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var part362 = match("MESSAGE#38:IF_DOWN_INTERFACE_REMOVED", "nwparser.payload", "Interface %{interface->} is down (%{result})", processor_chain([
      	dup24,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var select44 = linear_select([
      	dup26,
      	dup27,
      ]);
      
      var part363 = match_copy("MESSAGE#58:IM_SEQ_ERROR", "nwparser.payload", "result", processor_chain([
      	dup1,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var part364 = match_copy("MESSAGE#88:PFM_VEM_REMOVE_NO_HB", "nwparser.payload", "event_description", processor_chain([
      	dup24,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var part365 = match("MESSAGE#108:IF_DOWN_INITIALIZING:01", "nwparser.payload", "%{fld43->} Interface %{interface->} is down (%{result})", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var part366 = match("MESSAGE#110:IF_DOWN_NONE:01", "nwparser.payload", "%{fld52->} Interface %{interface->} is down (%{result})", processor_chain([
      	dup23,
      	dup34,
      	dup35,
      	dup14,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var part367 = match_copy("MESSAGE#123:PORT_PROFILE_CHANGE_VERIFY_REQ_FAILURE", "nwparser.payload", "event_description", processor_chain([
      	dup33,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var select45 = linear_select([
      	dup46,
      	dup47,
      ]);
      
      var select46 = linear_select([
      	dup49,
      	dup50,
      ]);
      
      var select47 = linear_select([
      	dup54,
      	dup55,
      ]);
      
      var select48 = linear_select([
      	dup57,
      	dup58,
      ]);
      
      var part368 = match_copy("MESSAGE#214:NOHMS_DIAG_ERR_PS_FAIL", "nwparser.payload", "event_description", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var select49 = linear_select([
      	dup65,
      	dup66,
      ]);
      
      var select50 = linear_select([
      	dup67,
      	dup68,
      ]);
      
      var part369 = match("MESSAGE#224:IF_SFP_WARNING", "nwparser.payload", "Interface %{interface}, %{event_description}", processor_chain([
      	dup15,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var part370 = match("MESSAGE#225:IF_DOWN_TCP_MAX_RETRANSMIT", "nwparser.payload", "%{fld43->} Interface %{interface->} is down%{info}", processor_chain([
      	dup23,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
      var select51 = linear_select([
      	dup70,
      	dup71,
      ]);
      
      var part371 = match("MESSAGE#239:IF_XCVR_WARNING:01", "nwparser.payload", "Interface %{interface}, %{event_description}", processor_chain([
      	dup61,
      	dup2,
      	dup3,
      	dup4,
      ]));
      
- community_id:
- registered_domain:
    ignore_missing: true
    ignore_failure: true
    field: dns.question.name
    target_field: dns.question.registered_domain
    target_subdomain_field: dns.question.subdomain
    target_etld_field: dns.question.top_level_domain
- registered_domain:
    ignore_missing: true
    ignore_failure: true
    field: client.domain
    target_field: client.registered_domain
    target_subdomain_field: client.subdomain
    target_etld_field: client.top_level_domain
- registered_domain:
    ignore_missing: true
    ignore_failure: true
    field: server.domain
    target_field: server.registered_domain
    target_subdomain_field: server.subdomain
    target_etld_field: server.top_level_domain
- registered_domain:
    ignore_missing: true
    ignore_failure: true
    field: destination.domain
    target_field: destination.registered_domain
    target_subdomain_field: destination.subdomain
    target_etld_field: destination.top_level_domain
- registered_domain:
    ignore_missing: true
    ignore_failure: true
    field: source.domain
    target_field: source.registered_domain
    target_subdomain_field: source.subdomain
    target_etld_field: source.top_level_domain
- registered_domain:
    ignore_missing: true
    ignore_failure: true
    field: url.domain
    target_field: url.registered_domain
    target_subdomain_field: url.subdomain
    target_etld_field: url.top_level_domain
- add_locale: ~
- add_fields:
    target: ''
    fields:
        ecs.version: 1.7.0
