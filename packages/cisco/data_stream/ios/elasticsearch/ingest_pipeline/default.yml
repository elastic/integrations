---
description: Pipeline for Cisco IOS logs.

processors:
  - set:
      field: event.ingested
      value: '{{_ingest.timestamp}}'
  - set:
      field: ecs.version
      value: '1.9.0'
  - set:
      field: event.category
      value: network_traffic
  - set:
      field: event.type
      value: firewall
  - dissect:
      field: message
      pattern: "%{_temp_.ts->} %{+_temp_.ts} %{+_temp_.ts->} %{log.source.address} %{event.sequence}: %{_temp_.timestamp}: %{_temp_.message}"
  - remove:
      field: message
      ignore_missing: true
  - dissect:
      field: _temp_.message
      pattern: "%{cisco.ios.facility}-%{event.severity}-%{event.code}: %{message}"
  - convert:
      field: event.severity
      type: long
      ignore_missing: true
  - dissect:
      field: message
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.outcome} %{network.transport} %{source.address}(%{source.port}) %{} %{destination.address}(%{destination.port}), %{source.packets} packet"
      if: "['IPACCESSLOGP', 'ACCESSLOGP'].contains(ctx?.event?.code)"
  - dissect:
      field: message
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.outcome} %{network.transport} %{source.address} %{} %{destination.address} (%{icmp.type}/%{icmp.code}), %{source.packets} packet"
      if: "['IPACCESSLOGDP', 'ACCESSLOGDP'].contains(ctx?.event?.code)"
  - dissect:
      field: message
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.outcome} %{network.transport} %{source.address} %{} %{destination.address}, %{source.packets} packet"
      if: "ctx?.event?.code == 'IPACCESSLOGRP'"
  - dissect:
      field: message
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.outcome} %{network.transport} %{source.address} %{} %{destination.address} (%{igmp.type}), %{source.packets} packet"
      if: "['IPACCESSLOGSP', 'ACCESSLOGSP'].contains(ctx?.event?.code)"
  - dissect:
      field: message
      pattern: "list %{cisco.ios.access_list} %{_temp_.event.outcome} %{network.iana_number} %{source.address} %{} %{destination.address}, %{source.packets} packet"
      if: "['IPACCESSLOGNP', 'ACCESSLOGNP'].contains(ctx?.event?.code)"

  - set:
      field: destination.ip
      value: '{{ destination.address }}'
      if: ctx?.destination?.address != null
  - set:
      field: source.ip
      value: '{{ source.address }}'
      if: ctx?.source?.address != null
  - convert:
      field: source.port
      type: long
      ignore_missing: true
  - convert:
      field: source.packets
      type: long
      ignore_missing: true
  - convert:
      field: destination.port
      type: long
      ignore_missing: true
  - set:
      field: network.packets
      copy_from: source.packets
      if: ctx?.source?.packets != null
  - set:
      field: network.type
      value: ipv4
      if: "ctx?.source?.ip != null && ctx?.source?.ip.contains('.')"
  - set:
      field: network.type
      value: ipv6
      if: "ctx?.source?.ip != null && ctx?.network?.type == null"
  - set:
      field: event.outcome
      value: deny
      if: "ctx?._temp_?.event?.outcome == 'denied'"
  - set:
      field: event.outcome
      value: allow
      if: "ctx?._temp_?.event?.outcome == 'permitted'"

  - set:
      field: "log.level"
      if: "ctx.event.severity == 0"
      value: emergencies
  - set:
      field: "log.level"
      if: "ctx.event.severity == 1"
      value: alert
  - set:
      field: "log.level"
      if: "ctx.event.severity == 2"
      value: critical
  - set:
      field: "log.level"
      if: "ctx.event.severity == 3"
      value: error
  - set:
      field: "log.level"
      if: "ctx.event.severity == 4"
      value: warning
  - set:
      field: "log.level"
      if: "ctx.event.severity == 5"
      value: notification
  - set:
      field: "log.level"
      if: "ctx.event.severity == 6"
      value: informational
  - set:
      field: "log.level"
      if: "ctx.event.severity == 7"
      value: debug

    # IP Geolocation Lookup
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true

# IP Autonomous System (AS) Lookup
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
            - asn
            - organization_name
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
            - asn
            - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true

  - remove:
      field: _temp_
      ignore_missing: true

on_failure:
  - set:
      field: error.message
      value: "{{ _ingest.on_failure_message }}"
