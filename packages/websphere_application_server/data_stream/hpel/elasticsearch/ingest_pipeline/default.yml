---
description: Pipeline for processing HPEL logs
processors:
  - set:
      field: ecs.version
      value: '8.2.0'
  - rename:
      field: message
      target_field: event.original
      ignore_failure: true
      ignore_missing: true
  - dissect:
      field: event.original
      pattern: "[%{timestamp}] %{websphere_application_server.hpel.thread_id} %{log.logger->} %{message}"
      ignore_failure: true
      ignore_missing: true
  - set:
      field: _tmp.logger
      copy_from: log.logger
      ignore_failure: true
  - dissect:
      field: message
      pattern: "%{log.level} %{log.logger} %{log.origin.function->} %{message}"
      ignore_failure: true
      ignore_missing: true
  - set:
      field: log.logger
      copy_from: _tmp.logger
      ignore_failure: true
      if: ctx.log.logger == ""
  - grok:
      field: message
      patterns: ["%{MESSAGE_ID:websphere_application_server.hpel.message_id}"]
      pattern_definitions: {
       "MESSAGE_ID" : "[A-Z]{4,5}[0-9]{3,4}[A-Z]"
      }
      ignore_failure: true
      ignore_missing: true
  - date:
      field: timestamp
      formats: ["M/dd/yy H:mm:ss:SSS z","MM/dd/yy H:mm:ss:SSS z","MM/d/yy H:mm:ss:SSS z","MM/dd/yy H:mm:ss:SSS z",    "M/dd/yy HH:mm:ss:SSS z","MM/dd/yy HH:mm:ss:SSS z","MM/d/yy HH:mm:ss:SSS z","MM/dd/yy HH:mm:ss:SSS z"]
      ignore_failure: true
  - script:
      description: Set log level.
      lang: painless
      ignore_failure: true
      source: |
        Map m = new HashMap();
        m.put("F", "fatal");
        m.put("E", "error");
        m.put("W", "warning");
        m.put("A", "audit");
        m.put("C", "configuration");
        m.put("D", "detail");
        m.put("I", "info");
        m.put("O", "system.out");
        m.put("R", "system.err");
        m.put("Z", "not recognized");
        ctx.log.level = m.get(ctx.log.level);
  - script:
      description: Set event type
      lang: painless
      ignore_failure: true
      source: |
        Set error = new HashSet();
        error.add("Fatal");
        error.add("Error");
        error.add("System.err");
        if (error.contains(ctx.log.level)) {
            ctx.event.type = "error"
        } else {
            ctx.event.type = "info"
        }
  - set:
      field: event.category
      value: web
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: event.kind
      value: log
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: event.module
      value: websphere_application_server
      ignore_empty_value: true
      ignore_failure: true
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: 
        - timestamp
        - _tmp.logger
      ignore_failure: true
      ignore_missing: true
  - script:
      description: Drops null/empty values recursively
      lang: painless
      ignore_failure: true
      source: |
        boolean drop(Object o) {
            if (o == null || o == "") {
            return true;
            } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
            } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
            }
            return false;
        }
        drop(ctx);
on_failure:
- set:
    field: error.message
    value: '{{{ _ingest.on_failure_message }}}'