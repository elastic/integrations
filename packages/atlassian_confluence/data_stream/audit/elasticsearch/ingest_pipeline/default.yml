---
description: Pipeline for processing sample logs
processors:
- set:
    field: ecs.version
    value: '8.2.0'
- rename:
    field: message
    target_field: event.original
- json:
    field: event.original
    target_field: json
- pipeline:
    name: '{{ IngestPipeline "cloud" }}'
    if: "ctx._config?.atlassian_cloud != null"
- pipeline:
    name: '{{ IngestPipeline "self-hosted" }}'
    if: "ctx._config?.atlassian_cloud == null"
- date:
    field: _tmp.timestamp
    formats:
    - UNIX
    - UNIX_MS
    - ISO8601
    target_field: "@timestamp"
- convert:
    field: source.address
    target_field: source.ip
    type: ip
    ignore_missing: true
- geoip:
    field: source.ip
    target_field: source.geo
    ignore_missing: true
- geoip:
    database_file: GeoLite2-ASN.mmdb
    field: source.ip
    target_field: source.as
    properties:
    - asn
    - organization_name
    ignore_missing: true
- rename:
    field: source.as.asn
    target_field: source.as.number
    ignore_missing: true
- rename:
    field: source.as.organization_name
    target_field: source.as.organization.name
    ignore_missing: true
- append:
    field: related.user
    value: '{{user.name}}'
    allow_duplicates: false
    if: ctx.user?.name != null
- append:
    field: related.user
    value: '{{user.target.name}}'
    allow_duplicates: false
    if: ctx.user?.target?.name != null
- append:
    field: related.user
    value: '{{user.changes.name}}'
    allow_duplicates: false
    if: ctx.user?.changes?.name != null
- append:
    field: related.ip
    value: '{{source.ip}}'
    allow_duplicates: false
    if: ctx.source?.ip != null
- remove:
    field:
      - json
      - _tmp
      - _config
    ignore_missing: true   
- remove:
    field: event.original
    if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
    ignore_failure: true
    ignore_missing: true
- script:
    lang: painless
    description: This script processor iterates over the whole document to remove fields with null values.
    source: |
      void handleMap(Map map) {
        for (def x : map.values()) {
          if (x instanceof Map) {
              handleMap(x);
          } else if (x instanceof List) {
              handleList(x);
          }
        }
        map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      void handleList(List list) {
        for (def x : list) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
        }
        list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      handleMap(ctx);
on_failure:
- set:
    field: error.message
    value: '{{ _ingest.on_failure_message }}' 
