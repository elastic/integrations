---
description: Pipeline for Barracuda CloudGen Firewall
processors:
  - set:
      field: ecs.version
      value: '8.4.0'

  # Metadata about the origin of the event captured from the Lumberjack connection.
  - rename:
      field: source.address
      target_field: labels.origin_address
      ignore_missing: true
  - rename:
      field: tls.client.subject
      target_field: labels.origin_client_subject
      ignore_missing: true
  - remove:
      field:
        - source
        - tls
      ignore_missing: true

  - set:
      field: observer.vendor
      value: Barracuda
  - set:
      field: observer.type
      value: firewall
  - rename:
      description: Set observer.hostname from beat.hostname (Beats 6.x).
      field: lumberjack.beat.hostname
      target_field: observer.hostname
      ignore_missing: true
  - rename:
      description: Set observer.hostname from agent.name (Beats 7.x+).
      if: ctx.observer?.hostname == null
      field: lumberjack.agent.hostname
      target_field: observer.hostname
      ignore_missing: true
  - rename:
      field: lumberjack.product
      target_field: observer.product
      ignore_missing: true
  - rename:
      field: lumberjack.sn
      target_field: observer.serial_number
      ignore_missing: true
  - rename:
      field: lumberjack.message
      target_field: event.original
      ignore_missing: true
  - rename:
      field: message
      target_field: event.original
      if: ctx.event?.original == null
  - remove:
      field: message
      ignore_missing: true
  - json:
      field: event.original
      target_field: json
  - pipeline:
      name: '{{ IngestPipeline "firewall" }}'
      if: ctx.lumberjack?.type == 'ngfw-act'
  - pipeline:
      name: '{{ IngestPipeline "web" }}'
      if: ctx.lumberjack?.type == 'ngfw-wf'
  - pipeline:
      name: '{{ IngestPipeline "threat" }}'
      if: ctx.lumberjack?.type == 'ngfw-threat'

  # Overwrite the @timestamp. Never enter a state where the event does not
  # have a '@timestamp' because it is required for indexing.
  - set:
      description: Overwrite @timestamp with the value parsed from the JSON.
      field: '@timestamp'
      copy_from: '_tmp.timestamp'
      ignore_empty_value: true

  - set:
      field: network.type
      value: ipv4
      if: 'ctx.source?.ip != null && ctx.source?.ip.contains(".")'
  - set:
      field: network.type
      value: ipv6
      if: 'ctx.source?.ip != null && ctx.source?.ip.contains(":")'
  - community_id:
      target_field: network.community_id
      ignore_failure: true

  # IP Geolocation Lookup
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true

  # IP Autonomous System (AS) Lookup
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true
  - append:
      field: related.ip
      value: '{{{source.ip}}}'
      allow_duplicates: false
      if: ctx.source?.ip != null && ctx.source?.ip != ''
  - append:
      field: related.ip
      value: '{{{destination.ip}}}'
      allow_duplicates: false
      if: ctx.destination?.ip != null && ctx.destination?.ip != ''
  - remove:
      field:
        - json
        - lumberjack
        - _tmp
      ignore_missing: true
  - script:
      description: This script processor iterates over the whole document to remove fields with null values.
      tag: remove-null-recursive
      lang: painless
      source: |
        void handleMap(Map map) {
            for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
            }
            map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
        }
        void handleList(List list) {
            for (def x : list) {
                if (x instanceof Map) {
                    handleMap(x);
                } else if (x instanceof List) {
                    handleList(x);
                }
            }
            list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
        }
        handleMap(ctx);
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - append:
      field: error.message
      value: "{{{ _ingest.on_failure_message }}}"
