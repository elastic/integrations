---
description: Pipeline for CEF logs. CEF decoding happens in the Agent. This performs additional enrichment and vendor specific transformations.
processors:
  - set:
      field: ecs.version
      value: 8.11.0
  - convert:
      field: event.id
      ignore_missing: true
      tag: convert event.id
      type: string
  # IP Geolocation Lookup
  - geoip:
      field: source.ip
      ignore_missing: true
      tag: source geo
      target_field: source.geo
  - geoip:
      field: destination.ip
      ignore_missing: true
      tag: destination geo
      target_field: destination.geo
  # IP Autonomous System (AS) Lookup
  - geoip:
      field: source.ip
      database_file: GeoLite2-ASN.mmdb
      ignore_missing: true
      properties:
      - asn
      - organization_name
      target_field: source.as
  - geoip:
      field: destination.ip
      database_file: GeoLite2-ASN.mmdb
      ignore_missing: true
      properties:
      - asn
      - organization_name
      target_field: destination.as
  - rename:
      field: source.as.asn
      ignore_missing: true
      target_field: source.as.number
  - rename:
      field: source.as.organization_name
      ignore_missing: true
      target_field: source.as.organization.name
  - rename:
      field: destination.as.asn
      ignore_missing: true
      target_field: destination.as.number
  - rename:
      field: destination.as.organization_name
      ignore_missing: true
      target_field: destination.as.organization.name
  - append:
      if: ctx?.cef?.extensions?.fileHash != null && ctx?.cef?.extensions?.fileHash != ''
      field: related.hash
      allow_duplicates: false
      value: '{{cef.extensions.fileHash}}'
  - append:
      if: ctx?.cef?.extensions?.oldFileHash != null && ctx?.cef?.extensions?.oldFileHash != ''
      field: related.hash
      allow_duplicates: false
      value: '{{cef.extensions.oldFileHash}}'
  - append:
      if: ctx?.destination?.ip != null && ctx?.destination?.ip != ''
      field: related.ip
      allow_duplicates: false
      value: '{{destination.ip}}'
  - append:
      if: ctx?.destination?.nat?.ip != null && ctx?.destination?.nat?.ip != ''
      field: related.ip
      allow_duplicates: false
      value: '{{destination.nat.ip}}'
  - append:
      if: ctx?.source?.ip != null && ctx?.source?.ip != ''
      field: related.ip
      allow_duplicates: false
      value: '{{source.ip}}'
  - append:
      if: ctx?.source?.nat?.ip != null && ctx?.source?.nat?.ip != ''
      field: related.ip
      allow_duplicates: false
      value: '{{source.nat.ip}}'
  - append:
      if: ctx?.destination?.user?.name != null
      field: related.user
      value: '{{destination.user.name}}'
  - append:
      if: ctx?.source?.user?.name != null && ctx?.source?.user?.name != ''
      field: related.user
      allow_duplicates: false
      value: '{{source.user.name}}'
  - append:
      if: ctx?.observer?.hostname != null && ctx?.observer?.hostname != ''
      field: related.hosts
      allow_duplicates: false
      value: '{{observer.hostname}}'
  - pipeline:
      if: ctx.cef?.device?.vendor == 'FORCEPOINT'
      name: '{{ IngestPipeline "fp-pipeline" }}'
      tag: forcepoint pipeline
  - pipeline:
      if: ctx.cef?.device?.vendor == 'Check Point'
      name: '{{ IngestPipeline "cp-pipeline" }}'
      tag: checkpoint pipeline
  - community_id:
      tag: community id processor
  # Ensure source.mac and destination.mac are formatted to ECS specifications.
  - gsub:
      field: destination.mac
      ignore_missing: true
      pattern: '[:.]'
      replacement: '-'
      tag: gsub mac
  - gsub:
      field: source.mac
      ignore_missing: true
      pattern: '[:.]'
      replacement: '-'
      tag: gsub mac
  - uppercase:
      field: destination.mac
      ignore_missing: true
  - uppercase:
      field: source.mac
      ignore_missing: true
  #
  # Timestamp parsing.
  #
  - grok:
      # decode_cef sets @timestamp when deviceReceiptTime is provided.
      description: Extract timestamp from log header when deviceReceiptTime not given.
      if: ctx?.cef?.extensions?.deviceReceiptTime == null
      field: event.original
      ignore_failure: true
      pattern_definitions:
        ECS_SYSLOG_PRI: '<%{NONNEGINT:log.syslog.priority:long}>'
        SYSLOG_TIMESTAMP: (?:%{SYSLOGTIMESTAMP:_tmp.timestamp}|%{TIMESTAMP_ISO8601:_tmp.timestamp8601})
      patterns:
        - '^%{SYSLOG_TIMESTAMP} '
        - '^%{ECS_SYSLOG_PRI}%{SYSLOG_TIMESTAMP} ' # RFC3164
        - '^%{ECS_SYSLOG_PRI}%{NONNEGINT} %{SYSLOG_TIMESTAMP} ' # RFC5224
      tag: timestamp extract grok
  - date:
      if: ctx?._tmp?.timestamp8601 != null
      field: _tmp.timestamp8601
      formats:
        - ISO8601
  - date:
      if: ctx?._tmp?.timestamp != null
      field: _tmp.timestamp
      formats:
        - MMM  d HH:mm:ss
        - MMM dd HH:mm:ss
  - remove:
      if: ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))
      field: event.original
      ignore_failure: true
      ignore_missing: true
  # Converting the observer.ip to an array if its not, to provide correct ECS mapping with backwards compatibility.
  # Later this should be changed in the decode_cef processor as well.
  - rename:
      if: ctx.observer?.ip != null && !(ctx.observer.ip instanceof List)
      field: observer.ip
      ignore_missing: true
      tag: observer rename
      target_field: _tmp.observer
  - append:
      if: ctx._tmp?.observer != null && ctx.observer?.ip == null
      field: observer.ip
      tag: observer append
      value: '{{_tmp.observer}}'
  # Set ECS event outcome from ArcSight outcomes
  - set:
      if: ctx.cef?.extensions?.categoryOutcome == "/Success"
      field: event.outcome
      value: success
  - set:
      if: ctx.cef?.extensions?.categoryOutcome == "/Failure"
      field: event.outcome
      value: failure
  # Cleanup
  - remove:
      field:
        - cef.extensions._cefVer
        - _tmp
      ignore_missing: true
on_failure:
  - remove:
      field:
        - _tmp
      ignore_missing: true
  - append:
      field: error.message
      value: |-
        Processor "{{ _ingest.on_failure_processor_type }}" with tag "{{ _ingest.on_failure_processor_tag }}" in pipeline "{{ _ingest.on_failure_pipeline }}" failed with message "{{ _ingest.on_failure_message }}"
  - set:
      field: event.kind
      value: pipeline_error
