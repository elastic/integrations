---
description: Pipeline for Citrix Web App Firewall logs.
processors:
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: '8.11.0'
  - set:
      field: observer.vendor
      tag: set_observer_vendor
      value: 'Citrix'
  - set:
      field: observer.product
      tag: set_observer_product
      value: 'Netscaler'
  - set:
      field: observer.type
      tag: set_observer_type
      value: 'firewall'
  - rename:
      field: message
      tag: rename_message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  - grok:
      description: Extract header details and message from log line.
      tag: grok_event_original
      field: event.original
      patterns:
        - '^%{SYSLOG_TIMESTAMP}( %{LEVEL} %{IP:client.ip:ip})?( %{HOSTNAME:citrix.hostname})? %{GREEDYDATA:citrix.detail}'
        - '^%{GREEDYDATA:citrix.detail}'
      pattern_definitions:
        LEVEL: '<?%{IDENT:citrix.facility:keyword}\.%{IDENT:citrix.priority:keyword}>?'
        IDENT: '[a-zA-Z][a-zA-Z0-9]*'
        SYSLOG_TIMESTAMP: '(?:%{SYSLOGTIMESTAMP:_tmp.syslog_timestamp}|%{TIMESTAMP_ISO8601:_tmp.syslog_timestamp8601})'
        TIMESTAMP_ISO8601: '%{YEAR}-%{MONTHNUM}-%{MONTHDAY}[T ]%{HOUR}:?%{MINUTE}(?::?%{SECOND})?%{ISO8601_TIMEZONE:_tmp.tz}?'
  - pipeline:
      name: '{{ IngestPipeline "cef" }}'
      tag: pipeline_cef
      if: ctx.citrix?.detail != null && ctx.citrix.detail.startsWith("CEF:")
  - pipeline:
      name: '{{ IngestPipeline "native" }}'
      tag: pipeline_native
      if: ctx.citrix?.detail != null && !ctx.citrix.detail.startsWith("CEF:")
  - convert:
      field: event.severity
      tag: convert_event_severity_to_long
      type: long
      ignore_missing: true

# Time zone (in order: log, config, locale, default to UTC).

  - set:
      field: _tmp.tz
      value: UTC
      if: ctx._tmp?.tz == 'Z'
  - set:
      field: _tmp.tz
      copy_from: _conf.tz_offset
      override: false
      ignore_empty_value: true
  - set:
      field: _tmp.tz
      copy_from: event.timezone
      override: false
      if: ctx.event?.timezone != null
  - set:
      field: _tmp.tz
      value: UTC
      override: false
  - set:
      field: event.timezone
      copy_from: _tmp.tz

# Syslog timestamp

  - date:
      if: ctx._tmp?.timestamp8601 != null
      tag: date_syslog_timestamp8601
      field: _tmp.syslog_timestamp8601
      timezone: '{{{event.timezone}}}'
      formats:
        - ISO8601
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: _tmp.syslog_timestamp
      tag: enrich_syslog_timestamp_with_year
      if: ctx._tmp?.syslog_timestamp != null && ctx.citrix?.event_year != null
      value: "{{{citrix.event_year}}} {{{_tmp.syslog_timestamp}}}"
  - remove:
      field: citrix.event_year
      tag: remove_event_year
      ignore_missing: true
  - date:
      if: ctx._tmp?.syslog_timestamp != null
      tag: date_syslog_timestamp
      field: _tmp.syslog_timestamp
      timezone: '{{{event.timezone}}}'
      formats:
        - MMM d HH:mm:ss
        - MMM  d HH:mm:ss
        - MMM dd HH:mm:ss
        - MMMM d HH:mm:ss
        - MMMM  d HH:mm:ss
        - MMMM dd HH:mm:ss
        - yyyy MMM d HH:mm:ss
        - yyyy MMM  d HH:mm:ss
        - yyyy MMM dd HH:mm:ss
        - yyyy MMMM d HH:mm:ss
        - yyyy MMMM  d HH:mm:ss
        - yyyy MMMM dd HH:mm:ss
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

  - script:
      tag: trim_time_fields
      lang: painless
      params:
        fields:
          - timestamp_native
          - timestamp
          - delink_time
          - start_time
          - end_time
      source: |-
        params.fields.forEach(field -> {
          if (!ctx._tmp?.containsKey(field) || !(ctx._tmp[field] instanceof String)) {
            return true;
          }

          String val = ctx._tmp[field];
          ctx._tmp[field] = val.trim();
        });

  - script:
      tag: parse_custom_time_formats
      if: ctx._conf?.custom_date_format != null
      lang: painless
      params:
        fields:
          - timestamp_native
          - timestamp
          - delink_time
          - start_time
          - end_time
      source: |-
        def zone = ctx.event?.timezone != null ? ZoneId.of(ctx.event.timezone) : null;
        def formatter = DateTimeFormatter.ofPattern(ctx._conf.custom_date_format);
        def outFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSSXXX");

        params.fields.forEach(field -> {
          if (!ctx._tmp?.containsKey(field)) {
            return true;
          }

          try {
            def localDateTime = LocalDateTime.parse(ctx._tmp[field], formatter);
            ctx.citrix_adc.log[field] = outFormatter.format(ZonedDateTime.of(localDateTime, zone));
          } catch (Exception e) {
            /* Intentionally ignored */
            return true;
          }
        });

# Native-format timestamp

  - date:
      tag: date_timestamp_native
      field: _tmp.timestamp_native
      target_field: citrix_adc.log.timestamp_native
      timezone: '{{{event.timezone}}}'
      if: ctx._tmp?.timestamp_native != null && ctx.citrix_adc?.log?.timestamp_native == null
      formats:
        - ISO8601
        - yyyy/MM/dd:HH:mm:ss
        - yyyy/MM/dd:HH:mm:ss z
        - MM/dd/yyyy:HH:mm:ss
        - MM/dd/yyyy:HH:mm:ss z
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      tag: date_timestamp
      field: _tmp.timestamp
      target_field: citrix_adc.log.timestamp
      timezone: '{{{event.timezone}}}'
      if: ctx._tmp?.timestamp != null && ctx.citrix_adc?.log?.timestamp == null
      formats:
        - ISO8601
        - yyyy/MM/dd:HH:mm:ss
        - yyyy/MM/dd:HH:mm:ss z
        - MM/dd/yyyy:HH:mm:ss
        - MM/dd/yyyy:HH:mm:ss z
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      tag: date_start_time
      field: _tmp.start_time
      target_field: citrix_adc.log.start_time
      timezone: '{{{event.timezone}}}'
      if: ctx._tmp?.start_time != null && ctx.citrix_adc?.log?.start_time == null
      formats:
        - ISO8601
        - yyyy/MM/dd:HH:mm:ss
        - yyyy/MM/dd:HH:mm:ss z
        - MM/dd/yyyy:HH:mm:ss
        - MM/dd/yyyy:HH:mm:ss z
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      tag: date_end_time
      field: _tmp.end_time
      timezone: '{{{event.timezone}}}'
      target_field: citrix_adc.log.end_time
      if: ctx._tmp?.end_time != null && ctx.citrix_adc?.log?.end_time == null
      formats:
        - ISO8601
        - yyyy/MM/dd:HH:mm:ss
        - yyyy/MM/dd:HH:mm:ss z
        - MM/dd/yyyy:HH:mm:ss
        - MM/dd/yyyy:HH:mm:ss z
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      tag: date_delink_time
      field: _tmp.delink_time
      target_field: citrix_adc.log.delink_time
      timezone: '{{{event.timezone}}}'
      if: ctx._tmp?.delink_time != null && ctx.citrix_adc?.log?.delink_time == null
      formats:
        - ISO8601
        - yyyy/MM/dd:HH:mm:ss
        - yyyy/MM/dd:HH:mm:ss z
        - MM/dd/yyyy:HH:mm:ss
        - MM/dd/yyyy:HH:mm:ss z
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

# Move vendor time fields to ECS.

  - set:
      tag: set_@timestamp_from_citrix_native
      field: '@timestamp'
      copy_from: citrix_adc.log.timestamp_native
      ignore_empty_value: true
  - remove:
      tag: remove_citrix_timestamp_native
      field: citrix_adc.log.timestamp_native
      ignore_missing: true

  - set:
      tag: set_event_start_from_citrix_start_time
      field: event.start
      copy_from: citrix_adc.log.start_time
      ignore_empty_value: true

  - set:
      tag: set_event_end_from_citrix_delink_time
      field: event.end
      copy_from: citrix_adc.log.delink_time
      ignore_empty_value: true
  - set:
      tag: set_event_end_from_citrix_end_time
      field: event.end
      copy_from: citrix_adc.log.end_time
      ignore_empty_value: true

  - script:
      lang: painless
      description: Calculates duration from event.start and event.end, as its easer than parsing citrix_adc.log.duration
      if: ctx?.event?.start != null && ctx?.event?.end != null && ctx?.event?.duration == null
      source: >-
        ZonedDateTime start = ZonedDateTime.parse(ctx.event.start);
        ZonedDateTime end = ZonedDateTime.parse(ctx.event.end);
        ctx.event.duration = ChronoUnit.NANOS.between(start, end);
      tag: calculate_event_duration

  - geoip:
      field: client.ip
      tag: geoip_client_ip_to_client_geo
      target_field: client.geo
      ignore_missing: true
  - geoip:
      field: source.ip
      tag: geoip_source_ip_to_source_geo
      target_field: source.geo
      ignore_missing: true

  # IP Autonomous System (AS) Lookup
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      tag: geoip_source_ip_to_source_as
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      tag: geoip_client_ip_to_client_as
      field: client.ip
      target_field: client.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      tag: rename_source_as_asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      tag: rename_source_as_organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename:
      field: client.as.asn
      tag: rename_client_as_asn
      target_field: client.as.number
      ignore_missing: true
  - rename:
      field: client.as.organization_name
      tag: rename_client_as_organization_name
      target_field: client.as.organization.name
      ignore_missing: true
  - uri_parts:
      field: url.original
      tag: uri_parts_url_original
      target_field: url
      if: ctx.url?.original != null && ctx.url?.original != ""
  - script:
      description: Drops null/empty values recursively
      tag: drop_empty_fields
      lang: painless
      source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);
  - remove:
      field:
        - _tmp
        - _conf
      tag: remove_tmp_and_conf
      ignore_missing: true
on_failure:
  - remove:
      field:
        - _tmp
        - _conf
      tag: remove_tmp_and_conf
      ignore_missing: true
  - append:
      field: error.message
      value: |-
        Processor "{{{ _ingest.on_failure_processor_type }}}" with tag "{{{ _ingest.on_failure_processor_tag }}}" in pipeline "{{{ _ingest.on_failure_pipeline }}}" failed with message "{{{ _ingest.on_failure_message }}}"
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
