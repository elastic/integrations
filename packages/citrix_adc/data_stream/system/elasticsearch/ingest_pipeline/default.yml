---
description: Pipeline for parsing Citrix ADC System metrics.
processors:
  - set:
      field: ecs.version
      value: 8.4.0
      ignore_failure: true
      ignore_empty_value: true
  - set:
      field: event.type
      value: ["info"]
      ignore_failure: true
      ignore_empty_value: true
  - set:
      field: event.kind
      value: event
      ignore_failure: true
      ignore_empty_value: true
  - set:
      field: event.category
      value: ["web"]
      ignore_failure: true
      ignore_empty_value: true
  - set:
      field: event.module
      value: citrix_adc
      ignore_failure: true
      ignore_empty_value: true
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: 'ctx.event?.original == null'
  - json:
      field: event.original
      target_field: json
      ignore_failure: true
  - rename:
      field: json.system.addimgmtcpuusagepcnt
      target_field: citrix_adc.system.cpu.utilization.additional_management.pct
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: json.system.mgmtcpuusagepcnt
      target_field: citrix_adc.system.cpu.utilization.management.pct
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: json.system.pktcpuusagepcnt
      target_field: citrix_adc.system.cpu.utilization.packets.pct
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: json.system.cpuusagepcnt
      target_field: citrix_adc.system.cpu.utilization.pct
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: json.system.disk0perusage
      target_field: citrix_adc.system.disk.usage.flash_partition.pct
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: json.system.disk1perusage
      target_field: citrix_adc.system.disk.usage.var_partition.pct
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: json.system.memusagepcnt
      target_field: citrix_adc.system.memory.utilization.pct
      ignore_missing: true
      ignore_failure: true
  # Renaming and converting fields to double
  - convert:
      field: json.system.numcpus
      target_field: citrix_adc.system.cpu.count
      type: double
      ignore_missing: true
      ignore_failure: true
  - convert:
      field: json.system.rescpuusage
      target_field: citrix_adc.system.cpu.utilization.avg.pct
      type: double
      ignore_missing: true
      ignore_failure: true
  - convert:
      field: json.system.mastercpuusage
      target_field: citrix_adc.system.cpu.utilization.master.pct
      type: double
      ignore_missing: true
      ignore_failure: true
  - convert:
      field: json.system.slavecpuusage
      target_field: citrix_adc.system.cpu.utilization.slave.pct
      type: double
      ignore_missing: true
      ignore_failure: true
  - convert:
      field: json.system.memsizemb
      target_field: citrix_adc.system.memory.size.value
      type: double
      ignore_missing: true
      ignore_failure: true
  - convert:
      field: json.system.memuseinmb
      target_field: citrix_adc.system.memory.usage.value
      type: double
      ignore_missing: true
      ignore_failure: true
  - date:
      field: json.system.starttime
      target_field: citrix_adc.system.start.time
      ignore_failure: true
      formats:
      - EEE MMM dd HH:mm:ss yyyy
      - EEE MMM dd HH:mm:ss.SSSSSS yyyy
      - EEE MMM  d HH:mm:ss yyyy
      - EEE MMM  d HH:mm:ss.SSSSSS yyyy
  - script:
      description: Convert megabyte to byte.
      lang: painless
      source: |
        def convert(def megabytes){
            def bytes = (megabytes*1024*1024);
            return bytes;
        }
        if(ctx.citrix_adc?.system?.memory?.size?.value!=null && ctx.citrix_adc?.system?.memory?.size?.value!=""){
            ctx.citrix_adc.system.memory.size.value = convert(ctx.citrix_adc.system.memory.size.value);
        }
        if(ctx.citrix_adc?.system?.memory?.usage?.value!=null && ctx.citrix_adc?.system?.memory?.usage?.value!=""){
            ctx.citrix_adc.system.memory.usage.value = convert(ctx.citrix_adc.system.memory.usage.value);
        }
  - script:
      description: Drops null/empty values recursively.
      lang: painless
      source: |
        boolean drop(Object o) {
        if (o == null || o == "") {
            return true;
        } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
        } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
        }
        return false;
        }
        drop(ctx);
  - remove:
      field:
        - json
      ignore_missing: true
      ignore_failure: true
  - remove:
      field: event.original
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_missing: true
      ignore_failure: true
on_failure:
  - set:
      field: error.message
      value: '{{{_ingest.on_failure_message}}}'
