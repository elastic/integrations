{
  "id": "elastic-agent-dropped-events",
  "type": "alerting_rule_template",
  "attributes": {
    "name": "[Elastic Agent] Dropped events",
    "tags": ["Elastic Agent", "Pipeline and Queues"],
    "ruleTypeId": ".es-query",
    "schedule": {
      "interval": "1m"
    },
    "params": {
      "searchType": "esqlQuery",
      "timeWindowSize": 3,
      "timeWindowUnit": "m",
      "threshold": [0],
      "thresholdComparator": ">",
      "size": 100,
      "esqlQuery": {
        "esql": "FROM metrics-elastic_agent.*beat-default, *:metrics-elastic_agent.*beat-default*\n| WHERE data_stream.dataset LIKE \"elastic_agent.*beat\" AND agent.name NOT LIKE \"*agentless*\"\n| STATS \n  events_dropped_max = max(to_long(beat.stats.libbeat.pipeline.events.dropped)),\n  events_dropped_min = min(to_long(beat.stats.libbeat.pipeline.events.dropped)), \n  pipeline_acked_max = max(to_long(beat.stats.libbeat.pipeline.queue.acked)), \n  pipeline_acked_min = min(to_long(beat.stats.libbeat.pipeline.queue.acked)) \n  BY time_bucket = DATE_TRUNC(1 minute, @timestamp), elastic_agent.id, component.id\n| EVAL \n  events_dropped = events_dropped_max - events_dropped_min, \n  events_acked = pipeline_acked_max - pipeline_acked_min\n| EVAL drop_pct = CASE(\n  events_acked > 0, events_dropped / events_acked, \n  0\n)\n| WHERE drop_pct >= 0.05\n| STATS MAX(drop_pct) BY elastic_agent.id, component.id"
      },
      "aggType": "count",
      "groupBy": "row",
      "termSize": 5,
      "sourceFields": [],
      "timeField": "@timestamp",
      "excludeHitsFromPreviousRun": true
    },
    "alertDelay": {
      "active": 1
    }
  },
  "coreMigrationVersion": "8.8.0",
  "typeMigrationVersion": "10.1.0"
}
