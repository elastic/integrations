---
description: Pipeline for processing Triggered Alerts.
processors:
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: 8.17.0
  - set:
      field: event.kind
      tag: set_alert_to_event_kind
      value: alert
  - fail:
      tag: data_collection_error
      if: ctx.error?.message != null && ctx.message == null && ctx.event?.original == null
      message: error message set and no data to process.
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      ignore_missing: true
      description: Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.
      if: ctx.event?.original == null
  - remove:
      field: message
      tag: remove_message
      ignore_missing: true
      description: The `message` field is no longer required if the document has an `event.original` field.
      if: ctx.event?.original != null
  - json:
      field: event.original
      tag: json_event_original
      target_field: recordedfuture.triggered_alert
      if: ctx.event?.original != null
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - uri_parts:
      field: recordedfuture.triggered_alert.document.url
      tag: uri_parts_document_url
      if: ctx.recordedfuture?.triggered_alert?.document?.url != ''
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.id
      tag: set_event_id_from_triggered_alert_id
      copy_from: recordedfuture.triggered_alert.id
      ignore_empty_value: true
  - set:
      field: message
      tag: set_message_from_legacy_fragment
      copy_from: recordedfuture.triggered_alert.fragment
      ignore_empty_value: true
  - date:
      field: recordedfuture.triggered_alert.log.note_date
      tag: date_log_note_date
      target_field: recordedfuture.triggered_alert.log.note_date
      formats:
        - ISO8601
      if: ctx.recordedfuture?.triggered_alert?.log?.note_date != null && ctx.recordedfuture.triggered_alert.log.note_date != ''
      on_failure:
        - remove:
            field: recordedfuture.triggered_alert.log.note_date
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: user.name
      tag: set_user_name_from_triggered_alert_log_status_change_by
      copy_from: recordedfuture.triggered_alert.log.status_change_by
      ignore_empty_value: true
  - append:
      field: related.user
      tag: append_user_name_to_related_user
      value: "{{{user.name}}}"
      allow_duplicates: false
      if: ctx.user?.name != null
  - append:
      field: related.user
      tag: append_review_assignee_to_related_user
      value: "{{{recordedfuture.triggered_alert.review.assignee}}}"
      allow_duplicates: false
      if: ctx.recordedfuture?.triggered_alert?.review?.assignee != null
  - date:
      field: recordedfuture.triggered_alert.log.status_date
      tag: date_log_status_date
      target_field: recordedfuture.triggered_alert.log.status_date
      formats:
        - ISO8601
      if: ctx.recordedfuture?.triggered_alert?.log?.status_date != null && ctx.recordedfuture.triggered_alert.log.status_date != ''
      on_failure:
        - remove:
            field: recordedfuture.triggered_alert.log.status_date
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - date:
      field: recordedfuture.triggered_alert.log.triggered
      tag: date_log_triggered
      target_field: recordedfuture.triggered_alert.log.triggered
      formats:
        - ISO8601
      if: ctx.recordedfuture?.triggered_alert?.log?.triggered != null && ctx.recordedfuture.triggered_alert.log.triggered != ''
      on_failure:
        - remove:
            field: recordedfuture.triggered_alert.log.triggered
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: '@timestamp'
      tag: set_@timestamp_from_triggered_alert_log_triggered
      copy_from: recordedfuture.triggered_alert.log.triggered
      ignore_empty_value: true
  - set:
      field: rule.id
      tag: set_rule_id_from_triggered_alert_rule_id
      copy_from: recordedfuture.triggered_alert.rule.id
      ignore_empty_value: true
  - set:
      field: rule.name
      tag: set_rule_name_from_triggered_alert_rule_name
      copy_from: recordedfuture.triggered_alert.rule.name
      ignore_empty_value: true
  - script:
      description: Set related.ip field with entity name.
      tag: script_to_set_related_ip_with_entity_name
      lang: painless
      if: ctx.recordedfuture?.triggered_alert?.entities instanceof List
      source: |-
        ctx.related = ctx.related ?: [:];
        def ipList = new ArrayList();
        for (data in ctx.recordedfuture.triggered_alert.entities) {
          if (data.type != null && data.name != null && data.type.toLowerCase() == 'ipaddress') {
            ipList.add(data.name);
          }
        }
        ctx.related.put('ip', ipList);
  - foreach:
      field: related.ip
      tag: foreach_related_ip
      if: ctx.related?.ip instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: convert_related_ips_to_ip
          type: ip
          ignore_missing: true
          on_failure:
            - remove:
                field: _ingest._value
                ignore_missing: true
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - remove:
      field:
        - recordedfuture.triggered_alert.document.url
        - recordedfuture.triggered_alert.fragment
        - recordedfuture.triggered_alert.id
        - recordedfuture.triggered_alert.log.status_change_by
        - recordedfuture.triggered_alert.log.triggered
        - recordedfuture.triggered_alert.rule.id
        - recordedfuture.triggered_alert.rule.name
      tag: remove_custom_duplicate_fields
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))
  # Cleanup
  - script:
      description: This script processor iterates over the whole document to remove fields with null values.
      tag: script_to_drop_null_values
      lang: painless
      source: |
        void handleMap(Map map) {
          map.values().removeIf(v -> {
            if (v instanceof Map) {
                handleMap(v);
            } else if (v instanceof List) {
                handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        void handleList(List list) {
          list.removeIf(v -> {
            if (v instanceof Map) {
                handleMap(v);
            } else if (v instanceof List) {
                handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        handleMap(ctx);
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
      if: ctx.error?.message != null
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: >-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{{#_ingest.on_failure_processor_tag}}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{{/_ingest.on_failure_processor_tag}}}failed with message '{{{ _ingest.on_failure_message }}}'
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
