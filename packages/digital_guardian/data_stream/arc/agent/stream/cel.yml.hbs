config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
auth.oauth2:
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{auth_server_url}}/as/token.oauth2
  scopes: {{scope}}
redact:
  fields: ~
program: |
  state.with(
    request("POST",
      state.url + "/rest/1.0/export_profiles/{{export_profile}}/export_and_ack"
    ).with({
      "Header":{
          "Accept": ["application/json"],
      },
    }).do_request().as(resp, resp.StatusCode == 200 ?
      bytes(resp.Body).decode_json().as(body, 
        (has(body.fields) && has(body.data) ? 
          body.fields.map(e, e.name).as(field_names, {
            "events": body.data.map(d, zip(field_names, d).as(e, {
              "message": e.encode_json(),
            }))
          })
        : 
          {"events": []}
        )
      )
    :
      {
        "events": dyn({
          "error": {
            "code": string(resp.StatusCode),
            "id": string(resp.Status),
            "message": "POST:"+(
              size(resp.Body) != 0 ?
                string(resp.Body)
              :
                string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
            ),
          },
        })
      }
    )
  )

tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
