---
description: Pipeline for parsing MQ Queue Manager Error logs.
processors:
- set:
    field: event.ingested
    value: "{{{_ingest.timestamp}}}"
    ignore_failure: true
- set:
    field: ecs.version
    value: 8.2.0
    ignore_empty_value: true
    ignore_failure: true
- set:
    field: event.module
    value: ibmmq
    ignore_empty_value: true
    ignore_failure: true
- set:
    field: event.kind
    value: event
    ignore_empty_value: true
    ignore_failure: true
- set:
    field: event.type
    value: error
    ignore_empty_value: true
    ignore_failure: true
- gsub:
    field: message
    pattern: "^[\\-]{5}[a-z0-9\\. :]*[\\-]{5,}"
    replacement: ''
- gsub:
    field: message
    pattern: "\n"
    replacement: " "
- gsub:
    field: message
    pattern: "[ ]{2,}"
    replacement: " "
- trim:
    field: message
- set:
    copy_from: "@timestamp"
    field: event.created
    ignore_failure: true
- grok:
    field: message
    patterns:
    - "^%{DATA:log_timestamp} -"
- grok:
    field: message
    patterns:
    - 'Process\(%{DATA:process.pid}\) User\(%{WORD:user.name}\) Program\(%{DATA:process.title}\)
      Host\(%{DATA:host.hostname}\) Installation\(%{WORD:ibmmq.errorlog.installation}\)
      VRMF\(%{DATA:service.version}\)( QMgr\(%{DATA:ibmmq.errorlog.queue_manager}\))?( Time\(%{TIMESTAMP_ISO8601:log_timestamp}\))?(
      RemoteHost\(%{DATA:destination.address}\))?( ArithInsert1\(%{DATA:ibmmq.errorlog.arithinsert1}\))?(
      ArithInsert2\(%{DATA:ibmmq.errorlog.arithinsert2}\))?( CommentInsert1\(%{DATA:ibmmq.errorlog.commentinsert1}\))?(
      CommentInsert2\(%{DATA:ibmmq.errorlog.commentinsert2}\))?( CommentInsert3\(%{DATA:ibmmq.errorlog.commentinsert3}\))?
      (?=AMQ[0-9]{4})%{DATA:ibmmq.errorlog.error.code}((?<=AMQ[0-9]{4}[A-Z])%{DATA:log.level})?:
      %{DATA:ibmmq.errorlog.error.description} [^\ ]+:( %{DATA:ibmmq.errorlog.error.explanation})?
      [^\ ]+:( %{DATA:ibmmq.errorlog.error.action})?$'
- convert:
    field: process.pid
    type: float
    ignore_failure: true
- date:
    field: log_timestamp
    target_field: "@timestamp"
    formats:
    - ISO8601
    - MM/dd/yyyy hh:mm:ss a
    - dd/MM/yyyy HH:mm:ss
    - dd.MM.yyyy HH:mm:ss
    ignore_failure: true
- append:
    field: ibmmq.errorlog.insert.comment
    value:
    - "{{ibmmq.errorlog.commentinsert1}}"
    - "{{ibmmq.errorlog.commentinsert2}}"
    - "{{ibmmq.errorlog.commentinsert3}}"
    ignore_failure: true
- append:
    field: ibmmq.errorlog.insert.arith
    value:
    - "{{ibmmq.errorlog.arithinsert1}}"
    - "{{ibmmq.errorlog.arithinsert2}}"
    ignore_failure: true
- rename:
    field: message
    target_field: event.original
    ignore_missing: true
    ignore_failure: true
- remove:
    field:
    - log_timestamp
    - ibmmq.errorlog.arithinsert1
    - ibmmq.errorlog.arithinsert2
    - ibmmq.errorlog.commentinsert1
    - ibmmq.errorlog.commentinsert2
    - ibmmq.errorlog.commentinsert3
    ignore_missing: true
    ignore_failure: true
- remove:
    field: event.original
    if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
    ignore_missing: true
    ignore_failure: true
- script:
    description: Drops null/empty values recursively.
    lang: painless
    source: |
        boolean drop(Object o) {
            if (o == null || o == "") {
            return true;
            } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
            } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
            }
            return false;
        }
        drop(ctx);
on_failure:
  - set:
      field: error.message
      value: "{{{_ingest.on_failure_message}}}"
