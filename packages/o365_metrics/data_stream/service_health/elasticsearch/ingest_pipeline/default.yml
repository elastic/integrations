---
description: Pipeline for processing o365 service health metrics.
processors:
  - set:
      field: ecs.version
      value: "8.16.0"
  - json:
      field: service_health
      target_field: o365.metrics.service.health
      tag: json_decoding
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - script:
      lang: painless
      description: Replace spaces, dashes and bom character in field names under o365.metrics.service.health.
      tag: painless_purge_spaces_and_dashes
      if: ctx.o365.metrics?.service?.health instanceof Map
      source: |
        String underscore(String s) {
          String result = /[ -]/.matcher(s).replaceAll('_').toLowerCase();
          return /[\ufeff]/.matcher(result).replaceAll('')
        }
        
        def out = [:];
        for (def item : ctx.o365.metrics.service.health.entrySet()) {
          out[underscore(item.getKey())] = item.getValue();
        }
        ctx.o365.metrics.service.health = out;

  - set:
      copy_from: service_health
      field: event.original
      ignore_empty_value: true
      if: ctx.event?.original == null && (ctx.tags != null && (ctx.tags.contains('preserve_original_event')))

  - remove:
      if: ctx.service_health != null
      field: service_health
      ignore_missing: true

  - script:
      description: Drops null/empty values recursively.
      lang: painless
      source: |
        boolean drop(Object o) {
            if (o == null || o == "") {
            return true;
            } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
            } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
            }
            return false;
        }
        drop(ctx);                 

on_failure:
  - set:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
  - append: 
      field: event.type 
      value: error 
      if: ctx.error?.message != null
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
