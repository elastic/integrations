---
description: Pipeline for processing Teams Call Quality fields
processors:
  - set:
      field: ecs.version
      value: "8.16.0"

  - set:
      copy_from: message
      field: event.original
      ignore_empty_value: true
      if: ctx.event?.original == null && (ctx.tags != null && (ctx.tags.contains('preserve_original_event')))         
  - json:
      field: message
      target_field: o365.metrics.teams.call.quality
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

  - script:
      lang: painless
      ignore_failure: true
      source: |
        // Helper function to convert camelCase to snake_case
        String camelToSnake(String str) {
          def result = "";
          for (int i = 0; i < str.length(); i++) {
            char c = str.charAt(i);
            if (Character.isUpperCase(c)) {
              if (i > 0) {
                result += "_";
              }
              result += Character.toLowerCase(c);
            } else {
              result += c;
            }
          }
          return result;
        }

        // Recursive function to handle nested fields
        def convertToSnakeCase(def obj) {
          if (obj instanceof Map) {
            // Convert each key in the map
            def newObj = [:];
            for (entry in obj.entrySet()) {
              // Skip fields that contain '@' in their name
              if (!entry.getKey().contains("@")) {
                String newKey = camelToSnake(entry.getKey());
                newObj[newKey] = convertToSnakeCase(entry.getValue());
              }
            }
            return newObj;
          } else if (obj instanceof List) {
            // If it's a list, process each item recursively
            def newList = [];
            for (item in obj) {
              newList.add(convertToSnakeCase(item));
            }
            return newList;
          } else {
            return obj;
          }
        }

        // Apply conversion to the document's source
        if (ctx.o365?.metrics?.teams?.call?.quality != null) {
          ctx.o365.metrics.teams.call.quality = convertToSnakeCase(ctx.o365.metrics.teams.call.quality);
        }

  - script:
      description: Drops null/empty values recursively.
      ignore_failure: true
      lang: painless
      source: |
        boolean drop(Object o) {
            if (o == null || o == "") {
            return true;
            } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
            } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
            }
            return false;
        }
        drop(ctx);

  - rename:
      field: o365.metrics.teams.call.quality.callee.cpu_processor_speed_in_mhz
      target_field: o365.metrics.teams.call.quality.callee.cpu_processor_speed.mhz
      ignore_missing: true
  - rename:
      field: o365.metrics.teams.call.quality.callee.cpu_cores_count
      target_field: o365.metrics.teams.call.quality.callee.cpu_cores.count
      ignore_missing: true
  - rename:
      field: o365.metrics.teams.call.quality.caller.cpu_processor_speed_in_mhz
      target_field: o365.metrics.teams.call.quality.caller.cpu_processor_speed.mhz
      ignore_missing: true
  - rename:
      field: o365.metrics.teams.call.quality.caller.cpu_cores_count
      target_field: o365.metrics.teams.call.quality.caller.cpu_cores.count
      ignore_missing: true
  - rename:
      field: o365.metrics.teams.call.quality.segments.caller.cpu_processor_speed_in_mhz
      target_field: o365.metrics.teams.call.quality.segments.caller.cpu_processor_speed.mhz
      ignore_missing: true

  - remove:
      if: ctx.message != null
      field: message
      ignore_missing: true

on_failure:
  - set:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
  - append: 
      field: event.type 
      value: error 
      if: ctx.error?.message != null
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false