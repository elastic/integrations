---
description: Pipeline for parsing the Nginx Ingress Controller error logs
processors:
  - set:
      field: event.ingested
      value: '{{_ingest.timestamp}}'
  - set:
      field: ecs.version
      value: "1.10.0"
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - grok:
      field: event.original
      patterns:
        - '%{LOG_LEVEL:log.level}%{MONTHNUM2:timestamp_month}%{MONTHDAY:timestamp_day} %{HOUR:timestamp_hour}:%{MINUTE:timestamp_minute}:%{SECOND:timestamp_second}.%{NANOS:timestamp_nano}%{SPACE}%{NUMBER:nginx_ingress_controller.error.thread_id} %{SOURCE_FILE:nginx_ingress_controller.error.source.file}:%{NUMBER:nginx_ingress_controller.error.source.line_number}] %{GREEDYMULTILINE:message}'
      pattern_definitions:
        LOG_LEVEL: '[A-Z]{1}'
        NANOS: '[0-9]{6}'
        SOURCE_FILE: '[^:]+'
        GREEDYMULTILINE: "(.|\\n)*"
      ignore_missing: true
  - rename:
      field: '@timestamp'
      target_field: event.created
  - set:
      field: event.kind
      value: event
  - append:
      field: event.category
      value: web
  - append:
      if: 'ctx.log.level == "E" || ctx.log.level == "F"'
      field: event.type
      value: error
  - append:
      if: 'ctx.log.level != "E" && ctx.log.level != "F"'
      field: event.type
      value: info
  - convert:
      field: "nginx_ingress_controller.error.thread_id"
      type: "integer"
  - convert:
      field: "nginx_ingress_controller.error.source.line_number"
      type: "integer"
  - convert:
      field: "timestamp_month"
      type: "integer"
  - convert:
      field: "timestamp_day"
      type: "integer"
  - convert:
      field: "timestamp_hour"
      type: "integer"
  - convert:
      field: "timestamp_minute"
      type: "integer"
  - convert:
      field: "timestamp_second"
      type: "integer"
  - convert:
      field: "timestamp_nano"
      type: "integer"
  - script:
      lang: painless
      source: >-
        ZoneId zid = ZoneId.of(ctx.event.timezone);
        ZonedDateTime zdt = ZonedDateTime.parse(ctx.event.created)
                 .withMonth(ctx.timestamp_month)
                 .withDayOfMonth(ctx.timestamp_day)
                 .withHour(ctx.timestamp_hour)
                 .withMinute(ctx.timestamp_minute)
                 .withSecond(ctx.timestamp_second)
                 .withNano(ctx.timestamp_nano * 1000)
                 .withZoneSameLocal(zid);
        ctx.timestamp = zdt;
  - rename:
      field: timestamp
      target_field: '@timestamp'
  - remove:
      field:
        - timestamp_month
        - timestamp_day
        - timestamp_hour
        - timestamp_minute
        - timestamp_second
        - timestamp_nano
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - set:
      field: error.message
      value: '{{ _ingest.on_failure_message }}'
