---
description: Pipeline for parsing ThreatQ Threat Intel
processors:
  ####################
  # Event ECS fields #
  ####################
  - set:
      field: ecs.version
      value: '8.11.0'
  - set:
      field: event.kind
      value: enrichment
  - set:
      field: event.category
      value: [threat]
  - set:
      field: event.type
      value: [indicator]
  ###############
  # Parse dates #
  ###############
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  - json:
      field: event.original
      target_field: json
  - rename:
      field: json.id
      target_field: threatq.id
      if: ctx.json?.id != null
  - rename:
      field: json.indicator_id
      target_field: threatq.indicator_id
      if: ctx.json?.indicator_id != null
  - date:
      target_field: "@timestamp"
      field: "json.updated_at"
      formats:
        - "yyyy-MM-dd HH:mm:ss"
      if: "ctx.json.updated_at != null"
      ignore_failure: true
  - date:
      target_field: "threatq.created_at"
      field: "json.created_at"
      formats:
        - "yyyy-MM-dd HH:mm:ss"
      if: "ctx.json.created_at != null"
      ignore_failure: true
  - date:
      target_field: "threatq.expires_at"
      field: "json.expires_at"
      formats:
        - "yyyy-MM-dd HH:mm:ss"
      if: "ctx.json.expires_at != null"
      ignore_failure: true
  - date:
      target_field: "threatq.expired_at"
      field: "json.expired_at"
      formats:
        - "yyyy-MM-dd HH:mm:ss"
      if: "ctx.json.expired_at != null"
      ignore_failure: true
  - date:
      target_field: "threatq.expires_calculated_at"
      field: "json.expires_calculated_at"
      formats:
        - "yyyy-MM-dd HH:mm:ss"
      if: "ctx.json.expires_calculated_at != null"
      ignore_failure: true
  - date:
      target_field: "threatq.published_at"
      field: "json.published_at"
      formats:
        - "yyyy-MM-dd HH:mm:ss"
      if: "ctx.json.published_at != null"
      ignore_failure: true

  #####################
  # Threat ECS Fields #
  #####################
  - rename:
      field: json.type.name
      target_field: threat.indicator.type
      ignore_missing: true
  - rename:
      field: json.description
      target_field: threat.indicator.description
      ignore_missing: true
  - script:
      lang: painless
      if: ctx.json?.score != null
      description: >
        Normalize confidence level.
      source: >
        def value = ctx.json.score;
        if (value <= 0.0 || value > 100.0) {
          ctx.threat.indicator.confidence = "None";
          return;
        }
        if (value >= 1.0 && value <= 29.0) {
          ctx.threat.indicator.confidence = "Low";
          return;
        }
        if (value >= 30.0 && value <= 69.0) {
          ctx.threat.indicator.confidence = "Med";
          return;
        }
        if (value >= 70 && value <= 100) {
          ctx.threat.indicator.confidence = "High";
          return;
        }
  - rename:
      field: json.status.name
      target_field: threatq.status
      ignore_missing: true
  - rename:
      field: json.value
      target_field: threatq.indicator_value
      ignore_missing: true

  ##################
  # IOC Expiration #
  ##################

# Set threatq.ioc_expired_at from threatq.expires_at or threatq.expired_at (if present). Either `expires_at` or `expired_at` are available in the data.
# When the datetime threatq.ioc_expired_at is reached, the indicator is deleted using transform's retention policy in the destination index.
  - set:
      field: threatq.ioc_expired_at
      copy_from: threatq.expires_at
      if: ctx.threatq?.expires_at != null
  - set:
      field: threatq.ioc_expired_at
      copy_from: threatq.expired_at
      if: ctx.threatq?.expired_at != null
      override: true
# In case threatq.ioc_expired_at is not set at this point, then based on the `threatq.status`, the indicator is assumed to be Active/Expired.
# Below script checks if indicator is expired based on the value of `threatq.status`. If `threatq.status` == 'Expired', then indicator is expired.
# The script:
# 1. Sets `threatq.ioc_expired_at` to `threatq.updated_at` (@timestamp) to delete the indicator using transform's retention policy in destination index.
    # If the indicator is not expired, set default expiration time to delete indicators after a certain duration. 
    # This is configurable using _conf.ioc_expiration_duration (default: 90d). Default expiration is required to avoid lingering orphaned indicators in the destination indices. 
    # If user-provided value of `ioc_expiration_duration` is not in d, h, or m, default to 90d.
# 2. Sets `threatq.ioc_expiration_reason` indicating the reason for expiry. Possible values are in the script params.
  - script:
      lang: painless
      tag: script-expired_ioc
      if: (ctx._conf?.ioc_expiration_duration != null && ctx._conf.ioc_expiration_duration != '')
      params:
        expires_at: "Expiration set by ThreatQ from expires_at field"
        expired_at: "Expiration set by ThreatQ from expired_at field"
        expired_status: "Expiration set by Elastic when threatq.status is 'Expired'"
        expired_default: "Expiration set by Elastic from the integration's parameter `IOC Expiration Duration`"
      source: |
        if (ctx.threatq.ioc_expired_at == null) {
          ZonedDateTime ioc_expired_at;
          if (ctx.threatq.status == 'Expired') {
            ioc_expired_at = ZonedDateTime.parse(ctx['@timestamp']);
          }
          else {
            def dur = ctx._conf.ioc_expiration_duration;
            ZonedDateTime updated_at = ZonedDateTime.parse(ctx.json.updated_at.concat("Z"), DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ssX"));
            if (dur instanceof String){
              Character time_unit = dur.charAt(dur.length() - 1);
              String time_value = dur.substring(0, dur.length());
              if (time_unit == 'd') {
                ioc_expired_at = updated_at.plusDays(Long.parseLong(time_value));
              } else if (time_unit == 'h') {
                ioc_expired_at = updated_at.plusHours(Long.parseLong(time_value));
              } else if (time_unit == 'm') {
                ioc_expired_at = updated_at.plusMinutes(Long.parseLong(time_value));
              } else {
                ioc_expired_at = updated_at.plusDays(90L);
              }
            }
            else {
              ioc_expired_at = updated_at.plusDays(90L);
            }
          }
          ctx.threatq.ioc_expired_at = ioc_expired_at;
        }

        // Set threatq.ioc_expiration_reason
        if (ctx.threatq.expires_at != null && ctx.threatq.expired_at == null) {
          ctx.threatq.ioc_expiration_reason = params.expires_at;
        } else if (ctx.threatq.expired_at != null) {
          ctx.threatq.ioc_expiration_reason = params.expired_at;
        } else if (ctx.threatq.status == 'Expired') {
          ctx.threatq.ioc_expiration_reason = params.expired_status;
        } else {
          ctx.threatq.ioc_expiration_reason = params.expired_default;
        }
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

  #########################################
  # Map indicator types and values to ECS #
  #########################################

  # Indicator type: Email Address
  - set:
      field: threat.indicator.email.address
      copy_from: threatq.indicator_value
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'Email Address'"
      ignore_empty_value: true
  - set:
      field: threat.indicator.type
      value: email-addr
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'Email Address'"

  # Indicator type: FQDN
  - set:
      field: threat.indicator.domain
      copy_from: threatq.indicator_value
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'FQDN'"
      ignore_empty_value: true
  - set:
      field: threat.indicator.type
      value: domain-name
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'FQDN'"

  # Indicator type: IP Address
  - set:
      field: threat.indicator.ip
      copy_from: threatq.indicator_value
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'IP Address'"
      ignore_empty_value: true

  - set:
      field: threat.indicator.type
      value: ipv4-addr
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'IP Address'"

  # Indicator type: IPv6 Address
  - set:
      field: threat.indicator.domain
      copy_from: threatq.indicator_value
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'IPv6 Address'"
      ignore_empty_value: true
  - set:
      field: threat.indicator.type
      value: ipv6-addr
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'IPv6 Address'"

  # Indicator type: MD5
  - set:
      field: threat.indicator.file.hash.md5
      copy_from: threatq.indicator_value
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'MD5'"
      ignore_empty_value: true
  - set:
      field: threat.indicator.type
      value: file
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'MD5'"

  # Indicator type: SHA-1
  - set:
      field: threat.indicator.file.hash.sha1
      copy_from: threatq.indicator_value
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'SHA-1'"
      ignore_empty_value: true
  - set:
      field: threat.indicator.type
      value: file
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'SHA-1'"

  # Indicator type: SHA-256
  - set:
      field: threat.indicator.file.hash.sha256
      copy_from: threatq.indicator_value
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'SHA-256'"
      ignore_empty_value: true
  - set:
      field: threat.indicator.type
      value: file
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'SHA-256'"

  # Indicator type: SHA-512
  - set:
      field: threat.indicator.file.hash.sha512
      copy_from: threatq.indicator_value
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'SHA-512'"
      ignore_empty_value: true
  - set:
      field: threat.indicator.type
      value: file
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'SHA-512'"

  # Indicator type: URL
  - uri_parts:
      field: threatq.indicator_value
      target_field: threat.indicator.url
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'URL' && ctx.threatq?.indicator_value != null"
      remove_if_successful: true
  - set:
      field: threat.indicator.type
      value: url
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'URL'"

  # Indicator type: x509 Serial
  - set:
      field: threat.indicator.x509.serial_number
      copy_from: threatq.indicator_value
      if: "ctx.threat?.indicator?.type != null && ctx.threat?.indicator?.type == 'x509 Serial'"
      ignore_empty_value: true

  ###################################
  # Map indicator providers and TLP #
  ###################################
  - script:
      if: "ctx.json?.sources != null && ctx.json?.sources instanceof List && ctx.json?.sources.size() > 0"
      lang: painless
      description: "Extract TLP and providers from source"
      source: |-
        def ecsTlps = ['WHITE', 'GREEN', 'AMBER', 'RED'];
        def providers = new ArrayList();
        def tlps = new ArrayList();
        for (source in ctx.json.sources) {
          if (source == null) {
            return;
          }
          if (source.containsKey("provider") && source["provider"] != null) {
            providers.add(source["provider"]);
          }
          if (source.containsKey("tlp_name") && source["tlp_name"] != null && ecsTlps.contains(source["tlp_name"])) {
            tlps.add(source["tlp_name"]);
          }
        }
        if (tlps.size() > 0) {
          if (ctx.threat.indicator.marking == null) {
            ctx.threat.indicator.marking = new HashMap();
          }
          ctx.threat.indicator.marking.tlp = tlps;
        }
        if (providers.size() > 0) {
          if (ctx.threat.indicator.provider == null) {
            ctx.threat.indicator.provider = new HashMap();
          }
          ctx.threat.indicator.provider = providers;
        }

  ############################
  # Map indicator attributes #
  ############################
  - foreach:
      description: Change attribute names to lowercase
      field: json.attributes
      ignore_missing: true
      processor:
        lowercase:
          field: "_ingest._value.name"
  - foreach:
      description: Replaces spaces with underscore in attribute names
      field: json.attributes
      ignore_missing: true
      processor:
        gsub:
          field: "_ingest._value.name"
          pattern: " "
          replacement: "_"
  - foreach:
      description: Append attributes
      field: json.attributes
      ignore_missing: true
      processor:
        append:
          field: threatq.attributes.{{{ _ingest._value.name }}}
          value: "{{{ _ingest._value.value }}}"

  #############################
  # Map indicator adversaries #
  #############################
  - foreach:
      field: json.adversaries
      ignore_missing: true
      processor:
        append:
          field: threatq.adversaries
          value: "{{{ _ingest._value.name }}}"

  ######################
  # Cleanup processors #
  ######################
  # Setting indicator type to unknown if it does not match anything
  - set:
      field: threat.indicator.type
      value: unknown
      if: ctx.threat?.indicator?.type == null
  - script:
      lang: painless
      if: ctx.threat != null
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
        map.values().removeIf(v -> v == null);
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
        }
        handleMap(ctx);

  # Removing fields not needed anymore, either because its copied somewhere else, or is not relevant to this event
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
  - remove:
      field:
        - json
        - message
        - _conf
      ignore_missing: true
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
