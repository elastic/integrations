---
description: Pipeline for processing Admin logs.
processors:
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: 8.16.0
  - set:
      field: observer.vendor
      tag: set_observer_vendor
      value: "Ping Identity"
  - set:
      field: observer.product
      tag: set_observer_product
      value: PingFederate
  - rename:
      field: _conf.tz_offset
      target_field: event.timezone
      if: ctx._conf?.tz_offset != null
      tag: rename_tz_offset
      ignore_missing: true
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      ignore_missing: true
      description: Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.
      if: ctx.event?.original == null
  - remove:
      field: message
      tag: remove_message
      ignore_missing: true
      description: The `message` field is no longer required if the document has an `event.original` field.
      if: ctx.event?.original != null
  - grok:
      field: event.original
      patterns:
        - '%{DATA:ping_federate.admin.timestamp}\s\|\s%{WORD:ping_federate.admin.user}\s\|\s(%{DATA:ping_federate.admin.roles})?\s\|\s(%{IP:ping_federate.admin.ip})?\s\|\s(%{DATA:ping_federate.admin.event.detail_id})?\s\|\s(%{WORD:ping_federate.admin.component})\s\|\s(%{WORD:ping_federate.admin.event.type})?\s\|\s(%{GREEDYDATA:ping_federate.admin.message})?'
      if: ctx.event?.original != null
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      value: event
      tag: set_event_kind
  - append:
      field: event.category
      value: authentication
      tag: append_event_category_authentication
      if: >-
        ctx.ping_federate?.admin?.event?.type != null && (
          ctx.ping_federate.admin.event.type == 'LOGIN_ATTEMPT' ||
          ctx.ping_federate.admin.event.type == 'LOGOUT' ||
          ctx.ping_federate.admin.event.type == 'PASSWORD_CHANGE'
        )
  - append:
      field: event.category
      value: configuration
      tag: append_event_category_configuration
      if: >-
        ctx.ping_federate?.admin?.event?.type != null && ctx.ping_federate?.admin?.component != null && (
          ctx.ping_federate.admin.event.type == 'IMPORT' ||
          ctx.ping_federate.admin.event.type == 'ROTATE' ||
          (ctx.ping_federate.admin.event.type == 'CREATE' && ctx.ping_federate.admin.component != 'USER') ||
          ctx.ping_federate.admin.event.type == 'DELETE' ||
          ctx.ping_federate.admin.event.type == 'MODIFY'
        )
  - append:
      field: event.category
      value: iam
      tag: append_event_category_iam
      if: >-
        ctx.ping_federate?.admin?.event?.type != null && ctx.ping_federate?.admin?.component != null && (
          (ctx.ping_federate.admin.event.type == 'CREATE' && ctx.ping_federate.admin.component == 'USER') ||
          ctx.ping_federate.admin.event.type == 'ROLE_CHANGE' ||
          ctx.ping_federate.admin.event.type == 'ACTIVATE'
        )
  - append:
      field: event.category
      value: session
      if: ctx.ping_federate?.admin?.event?.type != null && ctx.ping_federate.admin.event.type.contains('SESSION')
      tag: append_event_category_session
  - append:
      field: event.type
      value: info
      tag: append_event_type_info
      if: >-
        ctx.ping_federate?.admin?.event?.type != null && (
          ctx.ping_federate.admin.event.type == 'PASSWORD_CHANGE' ||
          ctx.ping_federate.admin.event.type == 'IMPORT'
        )
  - append:
      field: event.type
      value: end
      tag: append_event_type_end
      if: >-
        ctx.ping_federate?.admin?.event?.type != null && (
          ctx.ping_federate.admin.event.type == 'SESSION_TIMEOUT' ||
          ctx.ping_federate.admin.event.type == 'LOGOUT'
        )
  - append:
      field: event.type
      value: change
      tag: append_event_type_change
      if: >-
        ctx.ping_federate?.admin?.event?.type != null && (
          ctx.ping_federate.admin.event.type == 'ROLE_CHANGE' ||
          ctx.ping_federate.admin.event.type == 'MODIFY' ||
          ctx.ping_federate.admin.event.type == 'ROTATE'
        )
  - append:
      field: event.type
      value: user
      tag: append_event_type_user
      if: >-
        ctx.ping_federate?.admin?.event?.type != null && (
          ctx.ping_federate.admin.event.type == 'ROLE_CHANGE' ||
          ctx.ping_federate.admin.event.type == 'ACTIVATE'
        )
  - append:
      field: event.type
      value: start
      tag: append_event_type_start
      if: >-
        ctx.ping_federate?.admin?.event?.type != null && ctx.ping_federate.admin.event.type == 'LOGIN_ATTEMPT'
  - append:
      field: event.type
      value: deletion
      tag: append_event_type_deletion
      if: >-
        ctx.ping_federate?.admin?.event?.type != null && ctx.ping_federate.admin.event.type == 'DELETE'
  - append:
      field: event.type
      value: creation
      tag: append_event_type_creation
      if: >-
        ctx.ping_federate?.admin?.event?.type != null && ctx.ping_federate.admin.event.type == 'CREATE'
  - date:
      field: ping_federate.admin.timestamp
      tag: date_ping_federate_admin_timestamp
      target_field: ping_federate.admin.timestamp
      formats:
        - yyyy-MM-dd HH:mm:ss,SSS
        - yyyy-MM-dd H:mm:ss,SSS
      if: ctx.ping_federate?.admin?.timestamp != null && ctx.ping_federate.admin.timestamp != ''
      on_failure:
        - remove:
            field: ping_federate.admin.timestamp
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
# The timezone doesn't function as expected with custom date formats like yyyy-MM-dd HH:mm:ss,SSS,
# Hence, first converted the date to ISO8601 format and then applied the event.timezone to the ISO8601 formatted date.
# An issue has been raised for this scenario here: https://github.com/elastic/beats/issues/42133
  - date:
      field: ping_federate.admin.timestamp
      tag: date_ping_federate_admin_timestamp_timezone
      target_field: ping_federate.admin.timestamp
      timezone: '{{{event.timezone}}}'
      formats:
        - ISO8601
      if: ctx.ping_federate?.admin?.timestamp != null && ctx.ping_federate.admin.timestamp != '' && ctx.event?.timezone != null
      on_failure:
        - remove:
            field: ping_federate.admin.timestamp
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: '@timestamp'
      copy_from: ping_federate.admin.timestamp
      ignore_empty_value: true
  - set:
      field: user.name
      copy_from: ping_federate.admin.user
      tag: set_user_name
      ignore_empty_value: true
  - append:
      field: related.user
      tag: append_user_name_to_related_user
      value: '{{{ping_federate.admin.user}}}'
      allow_duplicates: false
      if: ctx.ping_federate?.admin?.user != null
  - split:
      field: ping_federate.admin.roles
      tag: split_admin_roles
      if: ctx.ping_federate?.admin?.roles != null && ctx.ping_federate.admin.roles.contains(',')
      separator: ','
      on_failure:
        - remove:
            field: ping_federate.admin.roles
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: ping_federate.admin.roles
      if: ctx.ping_federate?.admin?.roles instanceof List
      ignore_failure: true
      processor:
        append:
          field: user.roles
          tag: append_list_to_user_roles
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
          if: ctx.ping_federate?.admin?.roles != null
  - append:
      field: user.roles
      tag: append_to_user_roles
      value: '{{{ping_federate.admin.roles}}}'
      allow_duplicates: false
      if: ctx.ping_federate?.admin?.roles != null && ctx.user?.roles == null
  - set:
      field: event.action
      copy_from: ping_federate.admin.event.type
      tag: set_event_action
      ignore_empty_value: true
  - lowercase:
      field: event.action
      tag: lowercase_event_action
      ignore_missing: true
  - set:
      field: event.id
      copy_from: ping_federate.admin.event.detail_id
      tag: set_event_id
      ignore_empty_value: true
  - set:
      field: message
      copy_from: ping_federate.admin.message
      tag: set_message
      ignore_empty_value: true
  - convert:
      field: ping_federate.admin.ip
      tag: convert_ping_federate_admin_ip_to_ip
      type: ip
      ignore_missing: true
      if: ctx.ping_federate?.admin?.ip != ''
      on_failure:
        - remove:
            field: ping_federate.admin.ip
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: source.ip
      tag: set_source_ip
      copy_from: ping_federate.admin.ip
      ignore_empty_value: true
  - geoip:
      field: source.ip
      target_field: source.geo
      tag: geoip_proc
      ignore_missing: true
  - append:
      field: related.ip
      tag: append_ping_federate_admin_ip_to_related_ip
      value: '{{{ping_federate.admin.ip}}}'
      allow_duplicates: false
      if: ctx.ping_federate?.admin?.ip != null
  - remove:
      field:
        - ping_federate.admin.timestamp
        - ping_federate.admin.user
        - ping_federate.admin.roles
        - ping_federate.admin.ip
        - ping_federate.admin.event.type
        - ping_federate.admin.event.detail_id
        - ping_federate.admin.message
      tag: remove_custom_duplicate_fields
      ignore_missing: true
      if: ctx.tags == null || !ctx.tags.contains('preserve_duplicate_custom_fields')
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: Drops null/empty values recursively.
      source: |-
        boolean drop(Object object) {
          if (object == null || object == '') {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(v -> drop(v));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(v -> drop(v));
            return (((List) object).length == 0);
          }
          return false;
        }
        drop(ctx);
  - set:
      field: event.kind
      tag: set_pipeline_error_into_event_kind
      value: pipeline_error
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: >-
        Processor '{{{ _ingest.on_failure_processor_type }}}'
        {{{#_ingest.on_failure_processor_tag}}}with tag '{{{ _ingest.on_failure_processor_tag }}}'
        {{{/_ingest.on_failure_processor_tag}}}failed with message '{{{ _ingest.on_failure_message }}}'
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
