---
description: Pipeline for Snyk Audit logs
processors:
  - set:
      field: ecs.version
      value: 8.11.0
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  - json:
      field: event.original
      target_field: json
  - fingerprint:
      fields:
        - json.org_id
        - json.created
        - json.event
      target_field: _id
  - rename:
      field: json
      target_field: snyk.audit_logs
      ignore_missing: true
  - rename:
      field: snyk.audit_logs.groupId
      target_field: user.group.id
      ignore_missing: true
  - rename:
      field: snyk.audit_logs.orgId
      target_field: snyk.audit_logs.org_id
      ignore_missing: true
  - set:
      field: organization.id
      copy_from: snyk.audit_logs.org_id
      ignore_empty_value: true
  - rename:
      field: snyk.audit_logs.projectId
      target_field: snyk.audit_logs.project_id
      ignore_missing: true
  - set:
      field: user.id
      copy_from: snyk.audit_logs.user_id
      ignore_empty_value: true
  - rename:
      field: snyk.audit_logs.event
      target_field: event.action
      ignore_missing: true
  - append:
      field: event.type
      value: user
      if: ctx.event?.action != null && ctx.event.action =~ /\buser\b/
      allow_duplicates: false
  - append:
      field: event.type
      value: creation
      if: ctx.event?.action != null && ctx.event.action =~ /\b(?:add|create)\b/
      allow_duplicates: false
  - append:
      field: event.type
      value: change
      if: ctx.event?.action != null && ctx.event.action =~ /\bedit\b/
      allow_duplicates: false
  - append:
      field: event.type
      value: access
      if: ctx.event?.action != null && ctx.event.action =~ /\baccess\b/
      allow_duplicates: false
  - append:
      field: event.type
      value: deletion
      if: ctx.event?.action != null && ctx.event.action =~ /\b(?:remove|delete)\b/
      allow_duplicates: false
  - append:
      field: event.category
      value: configuration
      if: ctx.event?.action != null && ctx.event.action =~ /\bsettings\b/
      allow_duplicates: false
  - append:
      field: event.category
      value: file
      if: ctx.event?.action != null && ctx.event.action =~ /\bfiles\b/
      allow_duplicates: false
  - append:
      field: event.category
      value: iam
      if: ctx.event?.action != null && ctx.event.action =~ /\buser\b/
      allow_duplicates: false
  - set:
      field: event.type
      value: [info]
      if: ctx.event?.type == null
  - date:
      field: snyk.audit_logs.created
      target_field: "@timestamp"
      formats:
        - "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
  - append:
      field: related.user
      value: '{{{snyk.audit_logs.user_id}}}'
      if: ctx.snyk?.audit_logs?.user_id != null
      allow_duplicates: false
  - append:
      field: related.user
      value: '{{{snyk.audit_logs.content.email}}}'
      if: ctx.snyk?.audit_logs?.content?.email != null
      allow_duplicates: false
  - append:
      field: related.user
      value: '{{{snyk.audit_logs.content.userPublicId}}}'
      if: ctx.snyk?.audit_logs?.content?.userPublicId != null
      allow_duplicates: false
  - uri_parts:
      field: snyk.audit_logs.content.url
      target_field: url
      if: ctx.snyk?.audit_logs?.content?.url != null
      on_failure:
      - append:
          field: error.message
          value: '{{{ _ingest.on_failure_message }}}'
  - script:
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: |
        void handleMap(Map map) {
          for (def x : map.values()) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
          }
          map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
        }
        void handleList(List list) {
          for (def x : list) {
              if (x instanceof Map) {
                  handleMap(x);
              } else if (x instanceof List) {
                  handleList(x);
              }
          }
          list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
        }
        handleMap(ctx);
  - remove:
      field: event.original
      if: ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_failure: true
      ignore_missing: true
  - remove:
      field:
        - snyk.audit_logs.created
        - message
        - json
      ignore_missing: true
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
