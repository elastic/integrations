config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
max_executions: {{max_executions}}
resource.url: {{api_host}}

state:
  want_more: false
  key: {{key}}

program: |-
  request(
    "POST",
    state.url.trim_right("/") + "/graphql"
  ).with(
    {
      "Header": {
        "Content-Type": ["application/json"],
        "Accept": ["application/json"],
        "X-ApiKeys": ["key=" + state.key]
      },
      "Body": {
        "query": "query getAssets { assets { nodes { id details } } }"
      }.encode_json()
    }
  ).do_request().as(resp,
    bytes(resp.Body).decode_json().as(body,
      state.with({
        "events": body.?data.?assets.?nodes.map(e,{
          "message": e,
          ?"event.original": state.?preserve_original_event.orValue(false) ? optional.of(e.encode_json()) : optional.none(),
			}),
        "want_more": false
      })
    )
  )

tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}