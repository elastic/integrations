---
description: Pipeline for processing access logs
processors:
  - grok:
      field: _temp.remMessage
      tag: grok_temp_remMessage_access
      patterns:
        - >-
          ^%{IP:destination.ip} %{NUMBER:destination.port:long}
          %{IP:client.ip} %{NUMBER:client.port:long}
          %{NOTSPACE:client.user.id} %{GREEDYDATA:client.user.name}
          %{NOTSPACE:http.request.method} %{NOTSPACE:network.protocol} %{DATA:_temp.hostIp} (HTTP/)?%{NOTSPACE:http.version}
          %{NONNEGINT:http.response.status_code:long} %{NUMBER:http.response.bytes:long} %{NONNEGINT:http.request.bytes:long}
          %{NONNEGINT:barracuda.waf.cache_hit:long} %{NONNEGINT:barracuda.waf.response_timetaken:long}
          %{IP:_temp.serverIp} %{NUMBER:_temp.serverPort:long} %{NONNEGINT:barracuda.waf.server_time:long}
          %{NOTSPACE:barracuda.waf.sessionid}\s+(%{BARRACUDA_RESPONSE_TYPE:barracuda.waf.response_type}
          )?(%{BARRACUDA_PROFILE_MATCHED:barracuda.waf.profile_matched} )?(%{BARRACUDA_PROTECTED:barracuda.waf.protected}
          )?(%{BARRACUDA_WF_MATCHED:barracuda.waf.wf_matched} )?(%{DATA:url.path})?\s+%{NOTSPACE:url.query}\s+%{NOTSPACE:http.request.referrer}
          %{DATA:barracuda.waf.request_cookie} "?"%{DATA:user_agent.original}""?
          %{IP:barracuda.waf.proxy.ip} %{NONNEGINT:barracuda.waf.proxy.port:long}
          ("-"|%{DATA:user.name}) %{DATA:_temp.raw_custom_headers}\s+%{BARRACUDA_EVENTID:event.id}\s*$
      pattern_definitions:
        BARRACUDA_EVENTID: '[A-Za-z0-9\-]+'
        BARRACUDA_RESPONSE_TYPE: '(?:INTERNAL|SERVER)'
        BARRACUDA_PROFILE_MATCHED: '(?:DEFAULT|PROFILED)'
        BARRACUDA_PROTECTED: '(?:PASSIVE|PROTECTED|UNPROTECTED)'
        BARRACUDA_WF_MATCHED: '(?:IN)?VALID'
        HTTP_REQUEST_METHOD: '[A-Z]+'
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: _temp.hostIp
      if: ctx._temp?.hostIp != null
      type: ip
      on_failure:
        - append:
            field: host.name
            value: '{{{_temp.hostIp}}}'
            allow_duplicates: false
            if: ctx._temp?.hostIp != null && (ctx._temp.hostIp != '-' || ctx._temp.hostIp != '')
        - remove:
            field: _temp.hostIp
            ignore_missing: true
            ignore_failure: true
  - append:
      field: host.ip
      value: '{{{_temp.hostIp}}}'
      if: ctx._temp?.hostIp != null
      allow_duplicates: false
  # In https://campus.barracuda.com/product/webapplicationfirewall/doc/168312823/exporting-log-formats, under `Access Logs` section 
  # after expanding the `Detailed Description`, the format allows for 6 custom headers to be defined.
  - script:
      lang: painless
      description: Extracts custom headers.
      if: ctx._temp?.raw_custom_headers != null && ctx._temp.raw_custom_headers != ''
      params:
        "1": "accept_encoding"
        "2": "host"
        "3": "connection"
        "4": "cache_control"
        "5": "user_agent"
        "6": "content_type"
      source: |
        def headers = ctx._temp.raw_custom_headers.splitOnToken(' ');
        if (ctx.barracuda.waf.custom_header == null) {
            ctx.barracuda.waf.custom_header = new HashMap();
        }
        for (int i = 0; i < headers.length; i++) {
          ctx.barracuda.waf.custom_header[params[(i+1).toString()]] = headers[i];
        }
  - convert:
      field: _temp.clientIp
      target_field: client.ip
      type: ip
      ignore_missing: true
  - convert:
      field: _temp.clientPort
      target_field: client.port
      type: long
      ignore_missing: true
  - convert:
      field: _temp.destIp
      target_field: destination.ip
      type: ip
      ignore_missing: true
  - convert:
      field: _temp.destPort
      target_field: destination.port
      type: long
      ignore_missing: true
  - convert:
      field: _temp.serverIp
      target_field: server.ip
      type: ip
      ignore_missing: true
  - convert:
      field: _temp.serverPort
      target_field: server.port
      type: long
      ignore_missing: true
  - user_agent:
      field: user_agent.original
      ignore_missing: true
  - convert:
      field: barracuda.waf.cache_hit
      type: long
      ignore_missing: true
  - convert:
      field: barracuda.waf.response_timetaken
      type: long
      ignore_missing: true
  - convert:
      field: barracuda.waf.server_time
      type: long
      ignore_missing: true
  - convert:
      field: http.request.bytes
      type: long
      ignore_missing: true
  - convert:
      field: http.response.bytes
      type: long
      ignore_missing: true
  - convert:
      field: http.response.status_code
      type: long
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true
  - geoip:
      field: client.ip
      target_field: client.geo
      ignore_missing: true
  - geoip:
      field: server.ip
      target_field: server.geo
      ignore_missing: true
  - set:
      field: source
      copy_from: client
  - append:
      field: related.ip
      value: "{{{source.ip}}}"
      if: ctx.source?.ip != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: "{{{destination.ip}}}"
      if: ctx.destination?.ip != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: "{{{barracuda.waf.proxy.ip}}}"
      if: ctx.barracuda?.waf?.proxy?.ip != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: "{{{server.ip}}}"
      if: ctx.server?.ip != null
      allow_duplicates: false
  - set:
      field: event.category
      value: [network]
  - set:
      field: event.kind
      value: event
  - set:
      field: event.type
      value: [access, connection]

on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: "{{{ _ingest.on_failure_message }}}"
