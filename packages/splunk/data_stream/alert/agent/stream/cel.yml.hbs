config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
state:
  user: {{username}}
  password: {{password}}
  offset: 0
  batch_size: {{batch_size}}
  search: {{search_query}}
  initial_interval: {{initial_interval}}
redact:
  fields:
    - user
    - password
program: |
  (
    state.?sid.orValue("") != "" ?
      state
    :
      (
        state.?want_more.orValue(false) ?
          state
        :
          state.with({
            "start_time": state.?cursor.last_timestamp.orValue((now - duration(state.initial_interval)).format(time_layout.RFC3339)),
            "end_time": now.format(time_layout.RFC3339),
          })
      ).as(state, state.with(
        post_request(
          state.url.trim_right("/") + "/services/search/v2/jobs",
          "application/x-www-form-urlencoded",
          {
          "output_mode":["json"],
          "search":[string(state.search)],
          "earliest_time": [string(state.start_time)],
          "latest_time": [string(state.end_time)],
          }.format_query()
          ).with({
             "Header":{
               "Authorization": ["Basic "+string(base64(state.user+":"+state.password))],
             }
           }).do_request().as(resp, resp.StatusCode == 201 ?
            bytes(resp.Body).decode_json().as(body, {
              "sid": body.sid,
            })
          :
            {
              "events": {
                "error": {
                  "code": string(resp.StatusCode),
                  "id": string(resp.Status),
                  "message": "GET:"+(
                    size(resp.Body) != 0 ?
                      string(resp.Body)
                    :
                      string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
                  ),
                },
              },
              "want_more": false,
              "offset": 0,
            }
        )
      ))
  ).as(state, state.with(
    state.?dispatchState.orValue("") == "DONE" || !has(state.sid) ?
    {
      "batch_size": state.batch_size,
      "offset": state.offset,
      "dispatchState": state.?dispatchState.orValue(""),
    }
     : // Exit early due to GET failure.
        request("GET",
          state.url.trim_right("/") + "/services/search/v2/jobs/" + state.sid + "?output_mode=json"
          ).with({
             "Header":{
               "Authorization": ["Basic "+string(base64(state.user+":"+state.password))],
             }
           }).do_request().as(resp, resp.StatusCode == 200 ?
          bytes(resp.Body).decode_json().as(body,{
            "dispatchState": body.entry.size() == 0 ? "" : body.entry[0].content.dispatchState,
            "batch_size": state.batch_size,
            "offset": state.offset,
          })
        :
          {
            "events": {
              "error": {
                "code": string(resp.StatusCode),
                "id": string(resp.Status),
                "message": "GET:"+(
                  size(resp.Body) != 0 ?
                    string(resp.Body)
                  :
                    string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
                ),
              },
            },
            "want_more": false,
            "offset": 0,
          }
        )
    )
  ).as(state, state.with(
    !has(state.sid) || state.?dispatchState.orValue("") == "" ? state :
      state.?dispatchState.orValue("") == "DONE" ?
          request("GET",
            state.url.trim_right("/") + "/services/search/v2/jobs/" + state.sid + "/events?"+ {
              "output_mode": ["json"],
              "count": [string(state.batch_size)],
              "offset": [string(state.offset)],
            }.format_query()
            ).with({
               "Header":{
                 "Authorization": ["Basic "+string(base64(state.user+":"+state.password))],
               }
             }).do_request().as(resp, resp.StatusCode == 200 ?
            bytes(resp.Body).decode_json().as(body,{
              "events": body.results.map(e,{
                "message": e.encode_json(),
              }),
              "cursor": {
                ?"last_timestamp": has(body.results) && body.results.size() > 0 ?
                  (
                    has(state.?cursor.last_timestamp) && body.results.map(e, e._time).max() < state.cursor.last_timestamp ?
                      optional.of(state.cursor.last_timestamp)
                    :
                      optional.of(body.results.map(e, e._time).max())
                  )
                :
                  state.?cursor.last_timestamp
              },
              "sid": body.results.size() == int(state.batch_size) ? state.sid : "",
              "dispatchState": body.results.size() == int(state.batch_size) ? state.dispatchState : "",
              "batch_size": state.batch_size,
              "offset": body.results.size() == int(state.batch_size) ? int(state.offset) + body.results.size() : 0,
              "want_more": body.results.size() == int(state.batch_size),
            })
          :
            {
              "events": {
                "error": {
                  "code": string(resp.StatusCode),
                  "id": string(resp.Status),
                  "message": "GET:"+(
                    size(resp.Body) != 0 ?
                      string(resp.Body)
                    :
                      string(resp.Status) + ' (' + string(resp.StatusCode) + ')'
                  ),
                },
              },
              "want_more": false,
              "offset": 0,
            }
          )
        :
        {
          "events": [{}],
          "want_more": true,
          "sid": state.?sid.orValue(""),
          "batch_size": state.batch_size,
          "offset": state.offset,
          "dispatchState": state.?dispatchState.orValue(""),
        }
      )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
