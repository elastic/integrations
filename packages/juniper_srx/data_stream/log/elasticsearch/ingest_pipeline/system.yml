---
description: Pipeline for parsing junipersrx firewall logs (system pipeline)
processors:

## Match system grok pattern
- grok:
    field: _temp_.unparsed.message
    if: ctx._temp_?.unparsed?.message != null && ctx._temp_?.unparsed?.message != ""
    tag: grok_unparsed_message
    patterns:
#   # SRX System log patterns
    - '^(?:%{PROG:syslog_program}|-)?\s(?:%{POSINT:syslog_pid}|-)?\s(?:%{WORD:tag}|-)?\s?((\[([^=]+?\s)?%{DATA:_temp_.system_structured}\"\])|-)?\s?(%{CUSTOM_PROG} )?%{CUSTOM_SYSTEM_TAG:_temp_.sub_tag}:%{DATA:_temp_.unparsed.syslog_structured}\s?$'
    - '^(?:%{PROG:syslog_program})?\s(?:%{POSINT:syslog_pid})?\s(?:%{WORD:tag})?\s?(\[([^=]+?\s)?%{DATA:_temp_.system_structured}\"\])?\s?%{DATA:message}\s?$'
    - '^(%{CUSTOM_PROG} )?%{CUSTOM_SYSTEM_TAG:_temp_.sub_tag}:%{DATA:_temp_.unparsed.syslog_structured}\s?$'
    - '^%{GREEDYDATA:message}$'
    pattern_definitions:
        CUSTOM_DATE: "%{TIMESTAMP_ISO8601}|(%{MONTH}%{SPACE}+%{MONTHDAY}%{SPACE}+%{TIME})"
        CUSTOM_PROG: "(%{DATA:_temp_.to_be_parsed})?%{PROG:_temp_.syslog_sub_program}(\\[%{POSINT:syslog_pid}\\]|\\s*\\(pid=%{DATA:syslog_pid}\\))?:"
        CUSTOM_SYSTEM_TAG: "[A-Za-z_]+"

# split k-v fields inside structured data
- kv:
    field: _temp_.system_structured
    if: 'ctx._temp_?.system_structured != null && ctx._temp_?.system_structured != ""'
    field_split: " (?=[a-z0-9\\_\\-]+=)"
    value_split: "="
    prefix: "juniper.srx."
    ignore_missing: true
    ignore_failure: false
    trim_value: "\""


# Converts all kebab-case key names to snake_case
- script:
    lang: painless
    if: ctx.juniper?.srx != null
    source: >-
        ctx.juniper.srx = ctx?.juniper?.srx.entrySet().stream().collect(Collectors.toMap(e -> e.getKey().replace('-', '_'), e -> e.getValue()));


# Removes all empty fields
- script:
    lang: painless
    if: ctx.juniper?.srx != null
    params:
        values:
            - "None"
            - "UNKNOWN"
            - "N/A"
            - "-"
    source: >-
        ctx?.juniper?.srx.entrySet().removeIf(entry -> params.values.contains(entry.getValue()));

# Clean up syslog_program & tag
- set:
    field: juniper.srx.process
    value: "{{{syslog_program}}}"
    if: 'ctx.syslog_program != null && (ctx.juniper?.srx?.process == null || ctx.juniper?.srx?.process == "-")'
- set:
    field: juniper.srx.process
    value: "{{{_temp_.syslog_sub_program}}}"
    if: 'ctx._temp_?.syslog_sub_program != null && (ctx.juniper?.srx?.process == null || ctx.juniper?.srx?.process == "-")'
- set:
    field: juniper.srx.tag
    value: "{{{tag}}}"
    if: 'ctx.tag != null && (ctx.juniper?.srx?.tag == null || ctx.juniper?.srx?.tag == "-")'
- set:
    field: juniper.srx.tag
    value: "{{{_temp_.sub_tag}}}"
    if: 'ctx._temp_?.sub_tag != null && (ctx.juniper?.srx?.tag == null || ctx.juniper?.srx?.tag == "-")'

#### Firewall (tag = FW)
# if: tag = FW && process = PFE_FW_SYSLOG_IP
- dissect:
    if: "ctx._temp_?.unparsed?.syslog_structured != null && ctx.juniper?.srx?.tag == 'FW' && ctx.juniper?.srx?.process == 'PFE_FW_SYSLOG_IP'"
    tag: "dissect_sub_tag_fw_packets"
    field: "_temp_.unparsed.syslog_structured"
    pattern: " %{_temp_.fw.interface_name} %{_temp_.fw.filter_action} %{_temp_.fw.packet_protocol} %{_temp_.fw.src_addr} %{_temp_.fw.dst_addr} %{_temp_.fw.src_port} %{_temp_.fw.dst_port} (%{_temp_.fw.packets_num} packets)"
    on_failure:
    - append:
        field: error.message
        value: "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message: {{ _ingest.on_failure_message }}"
# if: tag = FW && process != PFE_FW_SYSLOG_IP
- dissect:
    if: "ctx._temp_?.unparsed?.syslog_structured != null && ctx.juniper?.srx?.tag == 'FW' && ctx.juniper?.srx?.process != 'PFE_FW_SYSLOG_IP'"
    tag: "dissect_sub_tag_fw"
    field: "_temp_.unparsed.syslog_structured"
    pattern: " %{_temp_.fw.interface_name} %{_temp_.fw.filter_action} %{_temp_.fw.packet_protocol} %{_temp_.fw.src_addr} %{_temp_.fw.dst_addr} %{_temp_.fw.src_port} %{_temp_.fw.dst_port}"
    on_failure:
    - append:
        field: error.message
        value: "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message: {{ _ingest.on_failure_message }}"
- rename:
    field: _temp_.fw
    target_field: juniper.srx.firewall
    if: "ctx._temp_?.fw != null && ctx.juniper?.srx?.tag == 'FW' "
- rename:
    field: juniper.srx.firewall.interface_name
    target_field: juniper.srx.interface_name
    if: "ctx.juniper?.srx?.firewall?.interface_name != null"

### RTLOG_CONN_ERROR (tag = RTLOG_CONN_ERROR)
- dissect:
    if: "ctx._temp_?.unparsed?.syslog_structured != null && ctx.juniper?.srx?.tag == 'RTLOG_CONN_ERROR'"
    tag: "dissect_sub_tag_rtlog_conn_err"
    field: "_temp_.unparsed.syslog_structured"
    pattern: " Connection error %{_temp_.rtlog_conn_error.stream_name} %{_temp_.rtlog_conn_error.err_msg}"
    on_failure:
    - append:
        field: error.message
        value: "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message: {{ _ingest.on_failure_message }}"
- rename:
    field: _temp_.rtlog_conn_error
    target_field: juniper.srx.rtlog_conn_error
    if: "ctx._temp_?.rtlog_conn_error != null && ctx.juniper?.srx?.tag == 'RTLOG_CONN_ERROR' "
- grok: 
    field: juniper.srx.rtlog_conn_error.err_msg
    patterns:
    - '^(status: %{DATA:juniper.srx.rtlog_conn_error.status}, )?Error code: major %{NUMBER:juniper.srx.rtlog_conn_error.major} minor %{NUMBER:juniper.srx.rtlog_conn_error.minor} code %{NUMBER:juniper.srx.rtlog_conn_error.code}, description:%{DATA:juniper.srx.rtlog_conn_error.description}$'
    ignore_failure: true
    ignore_missing: true
- convert:
    field: juniper.srx.rtlog_conn_error.status
    type: long
    tag: convert_rtlog_conn_error_status_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx?.rtlog_conn_error?.status != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- convert:
    field: juniper.srx.rtlog_conn_error.major
    type: long
    tag: convert_rtlog_conn_error_major_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx?.rtlog_conn_error?.major != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- convert:
    field: juniper.srx.rtlog_conn_error.minor
    type: long
    tag: convert_rtlog_conn_error_minor_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx?.rtlog_conn_error?.minor != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- convert:
    field: juniper.srx.rtlog_conn_error.code
    type: long
    tag: convert_rtlog_conn_error_code_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx?.rtlog_conn_error?.code != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

# PING_TEST_COMPLETED
# if: tag = PING_TEST_COMPLETED
- dissect:
    if: "ctx._temp_?.unparsed?.syslog_structured != null && ctx.juniper?.srx?.tag == 'PING_TEST_COMPLETED'"
    tag: "dissect_sub_tag_ping_test"
    field: "_temp_.unparsed.syslog_structured"
    pattern: " pingCtlOwnerIndex = %{_temp_.ping_test.owner}, pingCtlTestName = %{_temp_.ping_test.name}"
    on_failure:
    - append:
        field: error.message
        value: "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message: {{ _ingest.on_failure_message }}"
- rename:
    field: _temp_.ping_test
    target_field: juniper.srx.ping_test
    if: "ctx._temp_?.ping_test != null && ctx.juniper?.srx?.tag == 'PING_TEST_COMPLETED' "

# IKE negotiation
# if: tag = IKE negotiation
- dissect:
    if: "ctx._temp_?.unparsed?.syslog_structured != null && ctx.juniper?.srx?.tag == 'IKE negotiation'"
    tag: "dissect_sub_tag_ike_neg"
    field: "_temp_.unparsed.syslog_structured"
    pattern: " failed with error: %{_temp_.ike_negotiation.err_msg}\\. IKE Version: %{_temp_.ike_negotiation.version}, VPN: %{_temp_.ike_negotiation.vpn} Gateway: %{_temp_.ike_negotiation.gateway}, Local: %{_temp_.ike_negotiation.local.ip_range}, Remote: %{_temp_.ike_negotiation.remote.ip_range}, Local IKE-ID: %{_temp_.ike_negotiation.local.ike_id}, Remote IKE-ID: %{_temp_.ike_negotiation.remote.ike_id}, VR-ID: %{_temp_.ike_negotiation.vr_id}, Role: %{_temp_.ike_negotiation.role}"
    on_failure:
    - append:
        field: error.message
        value: "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message: {{ _ingest.on_failure_message }}"
- rename:
    field: _temp_.ike_negotiation
    target_field: juniper.srx.ike_negotiation
    if: "ctx._temp_?.ike_negotiation != null && ctx.juniper?.srx?.tag == 'IKE negotiation' "

# KERN_ARP_ADDR_CHANGE
# if: tag = KERN_ARP_ADDR_CHANGE
- dissect:
    if: "ctx._temp_?.unparsed?.syslog_structured != null && ctx.juniper?.srx?.tag == 'KERN_ARP_ADDR_CHANGE'"
    tag: "dissect_sub_tag_kern_arp_addr"
    field: "_temp_.unparsed.syslog_structured"
    pattern: " arp info overwritten for %{_temp_.kern_arp_addr_change.ip} from %{_temp_.kern_arp_addr_change.mac1} to %{_temp_.kern_arp_addr_change.mac2}"
    on_failure:
    - append:
        field: error.message
        value: "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message: {{ _ingest.on_failure_message }}"
- rename:
    field: _temp_.kern_arp_addr_change
    target_field: juniper.srx.kern_arp_addr_change
    if: "ctx._temp_?.kern_arp_addr_change != null && ctx.juniper?.srx?.tag == 'KERN_ARP_ADDR_CHANGE' "
- convert:
    field: juniper.srx.kern_arp_addr_change.ip
    type: ip
    tag: convert_kern_arp_ip_to_ip
    ignore_missing: true
    if: "ctx.juniper?.srx?.kern_arp_addr_change?.ip != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'


# rtslib_dfwsm_get_async_cb
# if: tag = rtslib_dfwsm_get_async_cb
- dissect:
    if: "ctx._temp_?.unparsed?.syslog_structured != null && ctx.juniper?.srx?.tag == 'rtslib_dfwsm_get_async_cb'"
    tag: "dissect_sub_tag_rtslib_dfwsmr"
    field: "_temp_.unparsed.syslog_structured"
    pattern: "u_data:%{_temp_.rtslib_dfwsm.u_data} k_usr_d:%{_temp_.rtslib_dfwsm.k_usr_d}"
    on_failure:
    - append:
        field: error.message
        value: "Processor {{ _ingest.on_failure_processor_type }} with tag {{ _ingest.on_failure_processor_tag }} in pipeline {{ _ingest.on_failure_pipeline }} failed with message: {{ _ingest.on_failure_message }}"
- rename:
    field: _temp_.rtslib_dfwsm
    target_field: juniper.srx.rtslib_dfwsm
    if: "ctx._temp_?.rtslib_dfwsm != null && ctx.juniper?.srx?.tag == 'rtslib_dfwsm_get_async_cb' "


#########################
## SRX System fields ##
#########################

#######################
## ECS Event Mapping ##
#######################
- set:
    field: juniper.srx.log_type
    value: "system"
- set:
    field: event.kind
    value: event
- append:
    field: event.category
    value: network
- append:
    field: event.type
    value: allowed
    if: ctx.juniper?.srx?.firewall?.filter_action == 'A'
- append:
    field: event.type
    value: deletion
    if: ctx.juniper?.srx?.firewall?.filter_action == 'D'
- append:
    field: event.type
    value: denied
    if: ctx.juniper?.srx?.firewall?.filter_action == 'R'
- append:
    field: event.type
    value: error
    if: ctx.juniper?.srx?.ike_negotiation != null
- append:
    field: event.type
    value: info
    if: ctx.juniper?.srx?.rtslib_dfwsm != null
- append:
    field: event.type
    value: 
      - error
      - connection
    if: ctx.juniper?.srx?.rtlog_conn_error != null
- append:
    field: event.type
    value: info
    if: ctx.juniper?.srx?.ping_test != null
- append:
    field: event.outcome
    value: success
    if: ctx.juniper?.srx?.ping_test != null

####################################
## ECS Server/Destination Mapping ##
####################################
- rename:
    field: juniper.srx.remote_address
    target_field: destination.ip
    ignore_missing: true
    if: "ctx.juniper?.srx?.remote_address != null"
- rename:
    field: juniper.srx.destination_address
    target_field: destination.ip
    ignore_missing: true
    if: "ctx.destination?.ip == null && ctx.juniper?.srx?.destination_address != null"
- rename:
    field: juniper.srx.firewall.dst_addr
    target_field: destination.ip
    ignore_missing: true
    if: "ctx.destination?.ip == null && ctx.juniper?.srx?.firewall?.dst_addr != null"
- set:
    field: server.ip
    value: '{{destination.ip}}'
    if: "ctx.destination?.ip != null"
- rename:
    field: juniper.srx.nat_remote_address
    target_field: destination.nat.ip
    ignore_missing: true
    if: "ctx.juniper?.srx?.nat_remote_address != null"
- rename:
    field: juniper.srx.nat_destination_address
    target_field: destination.nat.ip
    ignore_missing: true
    if: "ctx.destination?.nat?.ip == null && ctx.juniper?.srx?.nat_destination_address != null"
- convert:
    field: juniper.srx.destination_port
    target_field: destination.port
    type: long
    tag: convert_destination_port_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx?.destination_port != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- convert:
    field: juniper.srx.firewall.dst_port
    target_field: destination.port
    type: long
    tag: convert_firewall_destination_port_to_long
    ignore_missing: true
    if: "ctx.destination?.port == null && ctx.juniper?.srx?.firewall?.dst_port != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- set:
    field: server.port
    value: '{{destination.port}}'
    if: "ctx.destination?.port != null"
- convert:
    field: server.port
    target_field: server.port
    type: long
    tag: convert_server_port_to_long
    ignore_missing: true
    if: "ctx.server?.port != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- convert:
    field: juniper.srx.nat_destination_port
    target_field: destination.nat.port
    type: long
    tag: convert_nat_destination_port_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx['nat_destination_port'] != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- set:
    field: server.nat.port
    value: '{{destination.nat.port}}'
    if: "ctx.destination?.nat?.port != null"
- convert:
    field: server.nat.port
    target_field: server.nat.port
    type: long
    tag: convert_server_nat_port_to_long
    ignore_missing: true
    if: "ctx.server?.nat?.port != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- convert:
    field: juniper.srx.inbound_bytes
    target_field: destination.bytes
    type: long
    tag: convert_inbound_bytes_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx?.inbound_bytes != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- set:
    field: server.bytes
    value: '{{destination.bytes}}'
    if: "ctx.destination?.bytes != null"
- convert:
    field: server.bytes
    target_field: server.bytes
    type: long
    tag: convert_server_bytes_to_long
    ignore_missing: true
    if: "ctx.server?.bytes != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- convert:
    field: juniper.srx.inbound_packets
    target_field: destination.packets
    type: long
    tag: convert_inbound_packets_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx?.inbound_packets !=null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- set:
    field: server.packets
    value: '{{destination.packets}}'
    if: "ctx.destination?.packets != null"
- convert:
    field: server.packets
    target_field: server.packets
    type: long
    tag: convert_server_packets_to_long
    ignore_missing: true
    if: "ctx.server?.packets != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

###############################
## ECS Client/Source Mapping ##
###############################
- rename:
    field: juniper.srx.local_address
    target_field: source.ip
    ignore_missing: true
    if: "ctx.juniper?.srx?.local_address != null"
- rename:
    field: juniper.srx.source_address
    target_field: source.ip
    ignore_missing: true
    if: "ctx.source?.ip == null && ctx.juniper?.srx?.source_address != null"
- rename:
    field: juniper.srx.firewall.src_addr
    target_field: source.ip
    ignore_missing: true
    if: "ctx.juniper?.srx?.firewall?.src_addr != null"
- set:
    field: client.ip
    value: '{{source.ip}}'
    if: "ctx.source?.ip != null"
- rename:
    field: juniper.srx.nat_local_address
    target_field: source.nat.ip
    ignore_missing: true
    if: "ctx.juniper?.srx?.nat_local_address != null"
- rename:
    field: juniper.srx.nat_source_address
    target_field: source.nat.ip
    ignore_missing: true
    if: "ctx.source?.nat?.ip == null && ctx.juniper?.srx?.nat_source_address != null"
- rename:
    field: juniper.srx.sourceip
    target_field: source.ip
    ignore_missing: true
    if: "ctx.juniper?.srx?.sourceip != null"
- convert:
    field: juniper.srx.source_port
    target_field: source.port
    type: long
    tag: convert_source_port_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx?.source_port != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- convert:
    field: juniper.srx.firewall.src_port
    target_field: source.port
    type: long
    tag: convert_firewall_src_port_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx?.firewall?.src_port != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- set:
    field: client.port
    value: '{{source.port}}'
    if: "ctx.source?.port != null"
- convert:
    field: client.port
    target_field: client.port
    type: long
    tag: convert_client_port_to_long
    ignore_missing: true
    if: "ctx.client?.port != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- convert:
    field: juniper.srx.nat_source_port
    target_field: source.nat.port
    type: long
    tag: convert_nat_source_port_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx?.nat_source_port != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- set:
    field: client.nat.port
    value: '{{source.nat.port}}'
    if: "ctx.source?.nat?.port != null"
- convert:
    field: client.nat.port
    target_field: client.nat.port
    type: long
    tag: convert_client_nat_port
    ignore_missing: true
    if: "ctx.client?.nat?.port != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- convert:
    field: juniper.srx.outbound_bytes
    target_field: source.bytes
    type: long
    tag: convert_outbounds_bytes_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx?.outbound_bytes != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- set:
    field: client.bytes
    value: '{{source.bytes}}'
    if: "ctx.source?.bytes != null"
- convert:
    field: client.bytes
    target_field: client.bytes
    type: long
    tag: convert_client_bytes_to_long
    ignore_missing: true
    if: "ctx.client?.bytes != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- convert:
    field: juniper.srx.outbound_packets
    target_field: source.packets
    type: long
    tag: convert_outbound_packets_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx?.outbound_packets != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- convert:
    field: juniper.srx.firewall.packets_num
    target_field: source.packets
    type: long
    tag: convert_firewall_packets_to_long
    ignore_missing: true
    if: "ctx.juniper?.srx?.firewall?.packets_num != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- set:
    field: client.packets
    value: '{{source.packets}}'
    if: "ctx.source?.packets != null"
- convert:
    field: client.packets
    target_field: client.packets
    type: long
    tag: convert_client_packets_to_long
    ignore_missing: true
    if: "ctx.client?.packets != null"
    on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
- rename:
    field: juniper.srx.username
    target_field: source.user.name
    ignore_missing: true
    if: "ctx.juniper?.srx?.username != null"

######################
## ECS Observer Mapping ##
######################
- rename:
    field: juniper.srx.interface_name
    target_field: observer.ingress.interface.name
    ignore_missing: true

######################
## ECS Rule Mapping ##
######################
- rename:
    field: juniper.srx.rulebase_name
    target_field: rule.name
    ignore_missing: true
    if: "ctx.juniper?.srx?.rulebase_name != null"
- rename:
    field: juniper.srx.rule_name
    target_field: rule.id
    ignore_missing: true
    if: "ctx.juniper?.srx?.rule_name != null"

#########################
## ECS Network Mapping ##
#########################
- rename:
    field: juniper.srx.protocol_name
    target_field: network.protocol
    ignore_missing: true
    if: "ctx.juniper?.srx?.protocol_name != null"
- rename:
    field: juniper.srx.firewall.packet_protocol
    target_field: network.transport
    ignore_missing: true
    if: "ctx.juniper?.srx?.firewall?.packet_protocol != null"

#########################
## ECS message Mapping ##
#########################
- rename:
    field: juniper.srx.message
    target_field: message
    ignore_missing: true
    if: "ctx.juniper?.srx?.message != null"

#############
## Cleanup ##
#############
- remove:
    field:
    # message field can be removed if all dissect patterns are added.
    # - message
    - syslog_program
    - tag
    - juniper.srx.destination_port
    - juniper.srx.nat_destination_port
    - juniper.srx.outbound_bytes
    - juniper.srx.outbound_packets
    - juniper.srx.source_port
    - juniper.srx.nat_source_port
    - juniper.srx.inbound_bytes
    - juniper.srx.inbound_packets
    - juniper.srx.firewall
    ignore_missing: true

on_failure:
- append:
    field: error.message
    value: |-
        Processor "{{ _ingest.on_failure_processor_type }}" with tag "{{ _ingest.on_failure_processor_tag }}" in pipeline "{{ _ingest.on_failure_pipeline }}" failed with message "{{ _ingest.on_failure_message }}"
- set:
    field: event.kind
    value: pipeline_error
