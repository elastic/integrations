inputs:
    - data_stream:
        namespace: ep
      meta:
        package:
            name: sentinel_one
      name: test-all-sentinel_one
      streams:
        - config_version: 2
          data_stream:
            dataset: sentinel_one.application
            type: logs
          interval: 30s
          processors:
            - add_fields:
                fields:
                    id: "574734885120952459"
                    name: myproject
                target: project
            - add_tags:
                tags:
                    - web
                    - production
                target: environment
          program: |-
            (
              (has(state.?worklist.data) && size(state.worklist.data) > 0) ?
                state
              :
                state.with(
                  request(
                    "GET",
                    state.url.trim_right("/") + "/web/api/v2.1/application-management/inventory?" + {
                      "skipCount": ["true"],
                      "limit": [string(state.batch_size)],
                      ?"cursor": state.?next_page.token.optMap(v, [v]),
                    }.format_query()
                  ).with(
                    {
                      "Header": {
                        "Authorization": ["ApiToken " + state.api_token],
                      },
                    }
                  ).do_request().as(resp, (resp.StatusCode == 200) ?
                    resp.Body.decode_json().as(body,
                      {
                        "worklist": body,
                        "next_page": {
                          ?"token": (body.?pagination.nextCursor.orValue(null) != null) ? optional.of(body.pagination.nextCursor) : optional.none(),
                        },
                        "fetch_more": body.?pagination.nextCursor.orValue(null) != null,
                      }
                    )
                  :
                    {
                      "events": {
                        "error": {
                          "code": string(resp.StatusCode),
                          "id": string(resp.Status),
                          "message": "GET " + state.url.trim_right("/") + "/web/api/v2.1/application-management/inventory" + (
                            (size(resp.Body) != 0) ?
                              string(resp.Body)
                            :
                              string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                          ),
                        },
                      },
                      "want_more": false,
                      "offset": 0,
                    }
                  )
                )
            ).as(state,
              state.with(
                !has(state.worklist) ? // Exit early due to GET failure.
                  state
                : (has(state.worklist.data) && size(state.worklist.data) > 0) ?
                  request(
                    "GET",
                    state.url.trim_right("/") + "/web/api/v2.1/application-management/inventory/endpoints?" + {
                      "skipCount": ["true"],
                      "applicationName": [string(state.worklist.data[0].applicationName)],
                      "applicationVendor": [string(state.worklist.data[0].applicationVendor)],
                      "limit": [string(state.batch_size)],
                      ?"cursor": state.?next_chain.token.optMap(v, [v]),
                    }.format_query()
                  ).with(
                    {
                      "Header": {
                        "Authorization": ["ApiToken " + state.api_token],
                      },
                    }
                  ).do_request().as(resp, (resp.StatusCode == 200) ?
                    resp.Body.decode_json().as(body,
                      {
                        "events": (has(body.data) && body.data.size() > 0) ?
                          body.data.map(e,
                            {
                              "message": e.encode_json(),
                            }
                          )
                        :
                          [{"message": "retry"}],
                        "next_chain": {
                          ?"token": (body.?pagination.nextCursor.orValue(null) != null) ? optional.of(body.pagination.nextCursor) : optional.none(),
                        },
                        "worklist": {
                          "data": (body.?pagination.nextCursor.orValue(null) != null) ? state.worklist.data : tail(state.worklist.data),
                        },
                        "want_more": state.?fetch_more.orValue(false) ? state.fetch_more : (body.?pagination.nextCursor.orValue(null) != null),
                      }
                    )
                  :
                    {
                      "events": {
                        "error": {
                          "code": string(resp.StatusCode),
                          "id": string(resp.Status),
                          "message": "GET " + state.url.trim_right("/") + "/web/api/v2.1/application-management/inventory/endpoints" + (
                            (size(resp.Body) != 0) ?
                              string(resp.Body)
                            :
                              string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                          ),
                        },
                      },
                      "want_more": false,
                    }
                  )
                :
                  {
                    "events": [],
                    "want_more": false,
                  }
              )
            )
          publisher_pipeline.disable_host: true
          redact:
            fields:
                - api_token
          resource.proxy_url: https://user:P%40ssword%23@0.0.0.0:0000
          resource.ssl:
            certificate: |
                -----BEGIN CERTIFICATE-----
                MIIDCjCCAfKgAwIBAgITJ706Mu2wJlKckpIvkWxEHvEyijANBgkqhkiG9w0BAQsF
                ADAUMRIwEAYDVQQDDAlsb2NhbGhvc3QwIBcNMTkwNzIyMTkyOTA0WhgPMjExOTA2
                MjgxOTI5MDRaMBQxEjAQBgNVBAMMCWxvY2FsaG9zdDCCASIwDQYJKoZIhvcNAQEB
                BQADggEPADCCAQoCggEBANce58Y/JykI58iyOXpxGfw0/gMvF0hUQAcUrSMxEO6n
                fZRA49b4OV4SwWmA3395uL2eB2NB8y8qdQ9muXUdPBWE4l9rMZ6gmfu90N5B5uEl
                94NcfBfYOKi1fJQ9i7WKhTjlRkMCgBkWPkUokvBZFRt8RtF7zI77BSEorHGQCk9t
                /D7BS0GJyfVEhftbWcFEAG3VRcoMhF7kUzYwp+qESoriFRYLeDWv68ZOvG7eoWnP
                PsvZStEVEimjvK5NSESEQa9xWyJOmlOKXhkdymtcUd/nXnx6UTCFgnkgzSdTWV41
                CI6B6aJ9svCTI2QuoIq2HxX/ix7OvW1huVmcyHVxyUECAwEAAaNTMFEwHQYDVR0O
                BBYEFPwN1OceFGm9v6ux8G+DZ3TUDYxqMB8GA1UdIwQYMBaAFPwN1OceFGm9v6ux
                8G+DZ3TUDYxqMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAG5D
                874A4YI7YUwOVsVAdbWtgp1d0zKcPRR+r2OdSbTAV5/gcS3jgBJ3i1BN34JuDVFw
                3DeJSYT3nxy2Y56lLnxDeF8CUTUtVQx3CuGkRg1ouGAHpO/6OqOhwLLorEmxi7tA
                H2O8mtT0poX5AnOAhzVy7QW0D/k4WaoLyckM5hUa6RtvgvLxOwA0U+VGurCDoctu
                8F4QOgTAWyh8EZIwaKCliFRSynDpv3JTUwtfZkxo6K6nce1RhCWFAsMvDZL8Dgc0
                yvgJ38BRsFOtkRuAGSf6ZUwTO8JJRRIFnpUzXflAnGivK9M13D5GEQMmIl6U9Pvk
                sxSmbIUfc2SGJGCJD4I=
                -----END CERTIFICATE-----
            certificate_authorities:
                - |
                  -----BEGIN CERTIFICATE-----
                  MIIDCjCCAfKgAwIBAgITJ706Mu2wJlKckpIvkWxEHvEyijANBgkqhkiG9w0BAQsF
                  ADAUMRIwEAYDVQQDDAlsb2NhbGhvc3QwIBcNMTkwNzIyMTkyOTA0WhgPMjExOTA2
                  MjgxOTI5MDRaMBQxEjAQBgNVBAMMCWxvY2FsaG9zdDCCASIwDQYJKoZIhvcNAQEB
                  BQADggEPADCCAQoCggEBANce58Y/JykI58iyOXpxGfw0/gMvF0hUQAcUrSMxEO6n
                  fZRA49b4OV4SwWmA3395uL2eB2NB8y8qdQ9muXUdPBWE4l9rMZ6gmfu90N5B5uEl
                  94NcfBfYOKi1fJQ9i7WKhTjlRkMCgBkWPkUokvBZFRt8RtF7zI77BSEorHGQCk9t
                  /D7BS0GJyfVEhftbWcFEAG3VRcoMhF7kUzYwp+qESoriFRYLeDWv68ZOvG7eoWnP
                  PsvZStEVEimjvK5NSESEQa9xWyJOmlOKXhkdymtcUd/nXnx6UTCFgnkgzSdTWV41
                  CI6B6aJ9svCTI2QuoIq2HxX/ix7OvW1huVmcyHVxyUECAwEAAaNTMFEwHQYDVR0O
                  BBYEFPwN1OceFGm9v6ux8G+DZ3TUDYxqMB8GA1UdIwQYMBaAFPwN1OceFGm9v6ux
                  8G+DZ3TUDYxqMA8GA1UdEwEB/wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAG5D
                  874A4YI7YUwOVsVAdbWtgp1d0zKcPRR+r2OdSbTAV5/gcS3jgBJ3i1BN34JuDVFw
                  3DeJSYT3nxy2Y56lLnxDeF8CUTUtVQx3CuGkRg1ouGAHpO/6OqOhwLLorEmxi7tA
                  H2O8mtT0poX5AnOAhzVy7QW0D/k4WaoLyckM5hUa6RtvgvLxOwA0U+VGurCDoctu
                  8F4QOgTAWyh8EZIwaKCliFRSynDpv3JTUwtfZkxo6K6nce1RhCWFAsMvDZL8Dgc0
                  yvgJ38BRsFOtkRuAGSf6ZUwTO8JJRRIFnpUzXflAnGivK9M13D5GEQMmIl6U9Pvk
                  sxSmbIUfc2SGJGCJD4I=
                  -----END CERTIFICATE-----
            cipher_suites:
                - ECDHE-ECDSA-AES-128-CBC-SHA
                - ECDHE-ECDSA-AES-256-GCM-SHA384
            curve_types:
                - P-256
            enabled: true
            key: |
                -----BEGIN PRIVATE KEY-----
                MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDXHufGPycpCOfI
                sjl6cRn8NP4DLxdIVEAHFK0jMRDup32UQOPW+DleEsFpgN9/ebi9ngdjQfMvKnUP
                Zrl1HTwVhOJfazGeoJn7vdDeQebhJfeDXHwX2DiotXyUPYu1ioU45UZDAoAZFj5F
                KJLwWRUbfEbRe8yO+wUhKKxxkApPbfw+wUtBicn1RIX7W1nBRABt1UXKDIRe5FM2
                MKfqhEqK4hUWC3g1r+vGTrxu3qFpzz7L2UrRFRIpo7yuTUhEhEGvcVsiTppTil4Z
                HcprXFHf5158elEwhYJ5IM0nU1leNQiOgemifbLwkyNkLqCKth8V/4sezr1tYblZ
                nMh1cclBAgMBAAECggEBAKdP5jyOicqknoG9/G564RcDsDyRt64NuO7I6hBg7SZx
                Jn7UKWDdFuFP/RYtoabn6QOxkVVlydp5Typ3Xu7zmfOyss479Q/HIXxmmbkD0Kp0
                eRm2KN3y0b6FySsS40KDRjKGQCuGGlNotW3crMw6vOvvsLTlcKgUHF054UVCHoK/
                Piz7igkDU7NjvJeha53vXL4hIjb10UtJNaGPxIyFLYRZdRPyyBJX7Yt3w8dgz8WM
                epOPu0dq3bUrY3WQXcxKZo6sQjE1h7kdl4TNji5jaFlvD01Y8LnyG0oThOzf0tve
                Gaw+kuy17gTGZGMIfGVcdeb+SlioXMAAfOps+mNIwTECgYEA/gTO8W0hgYpOQJzn
                BpWkic3LAoBXWNpvsQkkC3uba8Fcps7iiEzotXGfwYcb5Ewf5O3Lrz1EwLj7GTW8
                VNhB3gb7bGOvuwI/6vYk2/dwo84bwW9qRWP5hqPhNZ2AWl8kxmZgHns6WTTxpkRU
                zrfZ5eUrBDWjRU2R8uppgRImsxMCgYEA2MxuL/C/Ko0d7XsSX1kM4JHJiGpQDvb5
                GUrlKjP/qVyUysNF92B9xAZZHxxfPWpdfGGBynhw7X6s+YeIoxTzFPZVV9hlkpAA
                5igma0n8ZpZEqzttjVdpOQZK8o/Oni/Q2S10WGftQOOGw5Is8+LY30XnLvHBJhO7
                TKMurJ4KCNsCgYAe5TDSVmaj3dGEtFC5EUxQ4nHVnQyCpxa8npL+vor5wSvmsfUF
                hO0s3GQE4sz2qHecnXuPldEd66HGwC1m2GKygYDk/v7prO1fQ47aHi9aDQB9N3Li
                e7Vmtdn3bm+lDjtn0h3Qt0YygWj+wwLZnazn9EaWHXv9OuEMfYxVgYKpdwKBgEze
                Zy8+WDm5IWRjn8cI5wT1DBT/RPWZYgcyxABrwXmGZwdhp3wnzU/kxFLAl5BKF22T
                kRZ+D+RVZvVutebE9c937BiilJkb0AXLNJwT9pdVLnHcN2LHHHronUhV7vetkop+
                kGMMLlY0lkLfoGq1AxpfSbIea9KZam6o6VKxEnPDAoGAFDCJm+ZtsJK9nE5GEMav
                NHy+PwkYsHhbrPl4dgStTNXLenJLIJ+Ke0Pcld4ZPfYdSyu/Tv4rNswZBNpNsW9K
                0NwJlyMBfayoPNcJKXrH/csJY7hbKviAHr1eYy9/8OL0dHf85FV+9uY5YndLcsDc
                nygO9KTJuUiBrLr0AHEnqko=
                -----END PRIVATE KEY-----
            supported_protocols:
                - TLSv1.2
          resource.timeout: 10s
          resource.tracer:
            enabled: true
            filename: ../../logs/cel/http-request-trace-*.ndjson
            maxbackups: 5
          resource.url: http://host.tld
          state:
            api_token: ${SECRET_0}
            batch_size: 100
          tags:
            - preserve_original_event
            - preserve_duplicate_custom_fields
            - forwarded
            - sentinel_one-application
            - test-policy
      type: cel
      use_output: default
output_permissions:
    default:
        _elastic_agent_checks:
            cluster:
                - monitor
        _elastic_agent_monitoring:
            indices: []
        uuid-for-permissions-on-related-indices:
            indices:
                - names:
                    - logs-sentinel_one.application-ep
                  privileges:
                    - auto_configure
                    - create_doc
secret_references:
    - {}
