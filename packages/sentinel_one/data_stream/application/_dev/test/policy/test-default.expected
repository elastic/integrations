inputs:
    - data_stream:
        namespace: ep
      meta:
        package:
            name: sentinel_one
      name: test-default-sentinel_one
      streams:
        - config_version: 2
          data_stream:
            dataset: sentinel_one.application
            type: logs
          interval: 24h
          program: |-
            (
              (has(state.?worklist.data) && size(state.worklist.data) > 0) ?
                state
              :
                state.with(
                  request(
                    "GET",
                    state.url.trim_right("/") + "/web/api/v2.1/application-management/inventory?" + {
                      "skipCount": ["true"],
                      "limit": [string(state.batch_size)],
                      ?"cursor": state.?next_page.token.optMap(v, [v]),
                    }.format_query()
                  ).with(
                    {
                      "Header": {
                        "Authorization": ["ApiToken " + state.api_token],
                      },
                    }
                  ).do_request().as(resp, (resp.StatusCode == 200) ?
                    resp.Body.decode_json().as(body,
                      {
                        "worklist": body,
                        "next_page": {
                          ?"token": (body.?pagination.nextCursor.orValue(null) != null) ? optional.of(body.pagination.nextCursor) : optional.none(),
                        },
                        "fetch_more": body.?pagination.nextCursor.orValue(null) != null,
                      }
                    )
                  :
                    {
                      "events": {
                        "error": {
                          "code": string(resp.StatusCode),
                          "id": string(resp.Status),
                          "message": "GET " + state.url.trim_right("/") + "/web/api/v2.1/application-management/inventory" + (
                            (size(resp.Body) != 0) ?
                              string(resp.Body)
                            :
                              string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                          ),
                        },
                      },
                      "want_more": false,
                      "offset": 0,
                    }
                  )
                )
            ).as(state,
              state.with(
                !has(state.worklist) ? // Exit early due to GET failure.
                  state
                : (has(state.worklist.data) && size(state.worklist.data) > 0) ?
                  request(
                    "GET",
                    state.url.trim_right("/") + "/web/api/v2.1/application-management/inventory/endpoints?" + {
                      "skipCount": ["true"],
                      "applicationName": [string(state.worklist.data[0].applicationName)],
                      "applicationVendor": [string(state.worklist.data[0].applicationVendor)],
                      "limit": [string(state.batch_size)],
                      ?"cursor": state.?next_chain.token.optMap(v, [v]),
                    }.format_query()
                  ).with(
                    {
                      "Header": {
                        "Authorization": ["ApiToken " + state.api_token],
                      },
                    }
                  ).do_request().as(resp, (resp.StatusCode == 200) ?
                    resp.Body.decode_json().as(body,
                      {
                        "events": (has(body.data) && body.data.size() > 0) ?
                          body.data.map(e,
                            {
                              "message": e.encode_json(),
                            }
                          )
                        :
                          [{"message": "retry"}],
                        "next_chain": {
                          ?"token": (body.?pagination.nextCursor.orValue(null) != null) ? optional.of(body.pagination.nextCursor) : optional.none(),
                        },
                        "worklist": {
                          "data": (body.?pagination.nextCursor.orValue(null) != null) ? state.worklist.data : tail(state.worklist.data),
                        },
                        "want_more": state.?fetch_more.orValue(false) ? state.fetch_more : (body.?pagination.nextCursor.orValue(null) != null),
                      }
                    )
                  :
                    {
                      "events": {
                        "error": {
                          "code": string(resp.StatusCode),
                          "id": string(resp.Status),
                          "message": "GET " + state.url.trim_right("/") + "/web/api/v2.1/application-management/inventory/endpoints" + (
                            (size(resp.Body) != 0) ?
                              string(resp.Body)
                            :
                              string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                          ),
                        },
                      },
                      "want_more": false,
                    }
                  )
                :
                  {
                    "events": [],
                    "want_more": false,
                  }
              )
            )
          publisher_pipeline.disable_host: true
          redact:
            fields:
                - api_token
          resource.ssl: null
          resource.timeout: 30s
          resource.tracer:
            enabled: false
            filename: ../../logs/cel/http-request-trace-*.ndjson
            maxbackups: 5
          resource.url: http://host.tld
          state:
            api_token: ${SECRET_0}
            batch_size: 1000
          tags:
            - forwarded
            - sentinel_one-application
      type: cel
      use_output: default
output_permissions:
    default:
        _elastic_agent_checks:
            cluster:
                - monitor
        _elastic_agent_monitoring:
            indices: []
        uuid-for-permissions-on-related-indices:
            indices:
                - names:
                    - logs-sentinel_one.application-ep
                  privileges:
                    - auto_configure
                    - create_doc
secret_references:
    - {}
