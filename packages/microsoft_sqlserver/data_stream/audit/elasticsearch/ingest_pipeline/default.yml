---
description: Pipeline for processing SQL Server audit logs
processors:
- set:
    field: ecs.version
    value: '1.12.0'
- kv:
    field: winlog.event_data.param1
    field_split: "\\n"
    value_split: ":"
    target_field: "sqlserver.audit"
    trim_key: "\\n"
    trim_value: "\\n"
    if: ctx?.winlog?.event_id == "33205"
- set:
    field: log.level
    copy_from: winlog.log.level
    ignore_empty_value: true
    ignore_failure: true
    if: ctx?.winlog?.log?.level != ""
- date:
    field: sqlserver.audit.event_time
    formats:
      - "yyyy-MM-dd HH:mm:ss.SSSSSSS"
- set:
    field: event.ingested
    value: '{{_ingest.timestamp}}'
- rename:
    field: message
    target_field: event.original
    ignore_missing: true
##
# Event kind, code and action
##
- set:
    field: event.kind
    value: event
- set:
    field: event.code
    value: '{{winlog.event_id}}'
- set:
    field: event.category
    value: database

- trim:
    field: sqlserver.audit.action_id
- trim:
    field: sqlserver.audit.class_type
    ignore_missing: true
##
# TODO
# Script to set event.action to value 
# based on code/abbreviation in sqlserver.audit.action_id
##
- convert:
    field: sqlserver.audit.sequence_number
    type: integer
- convert:
    field: sqlserver.audit.succeeded
    type: boolean
- convert:
    field: sqlserver.audit.affected_rows
    type: long
- convert:
    field: sqlserver.audit.response_rows
    type: long
- convert:
    field: sqlserver.audit.is_column_permission
    type: boolean
- convert:
    field: sqlserver.audit.duration_milliseconds
    type: long
##
# Clean up
##
- remove:
    field: event.original
    if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
    ignore_failure: true
    ignore_missing: true
- script:
    lang: painless
    description: This script processor iterates over the whole document to remove fields with null values.
    source: |
      void handleMap(Map map) {
        for (def x : map.values()) {
          if (x instanceof Map) {
              handleMap(x);
          } else if (x instanceof List) {
              handleList(x);
          }
        }
        map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      void handleList(List list) {
        for (def x : list) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
        }
        list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      handleMap(ctx);
on_failure:
- set:
    field: error.message
    value: "{{ _ingest.on_failure_message }}"
