---
description: Pipeline for processing detection event logs.
processors:
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: 8.17.0
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      ignore_missing: true
      description: Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.
      if: ctx.event?.original == null
  - remove:
      field: message
      tag: remove_message
      ignore_missing: true
      description: The `message` field is no longer required if the document has an `event.original` field.
      if: ctx.event?.original != null
  - json:
      field: event.original
      tag: json_event_original
      target_field: json
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      tag: set_event_kind
      value: alert
  - set:
      field: observer.product
      tag: set_observer_product
      value: Vectra RUX
  - append:
      field: event.category
      tag: set_event_category_host
      value: host
      if: ctx.json?.type == 'host'
  - append:
      field: event.type
      tag: set_event_type_info
      value: info
      if: ctx.json?.type == 'host'
  - append:
      field: event.category
      tag: set_event_category_threat
      value: threat
  - append:
      field: event.type
      tag: set_event_type_indicator
      value: indicator
  - rename:
      field: json.category
      tag: rename_category
      target_field: vectra_rux.detection_event.category
      ignore_missing: true
  - append:
      field: threat.tactic.name
      tag: append_detection_event_category_into_threat_tactic_name
      value: '{{{vectra_rux.detection_event.category}}}'
      allow_duplicates: false
      if: ctx.vectra_rux?.detection_event?.category != null
  - convert:
      field: json.certainty
      tag: convert_certainty_to_long
      target_field: vectra_rux.detection_event.certainty
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.d_type_vname
      tag: rename_d_type_vname
      target_field: vectra_rux.detection_event.d_type_vname
      ignore_missing: true
  - set:
      field: rule.name
      tag: set_rule_name_from_detection_event_d_type_vname
      copy_from: vectra_rux.detection_event.d_type_vname
      ignore_empty_value: true
  - rename:
      field: json.detail
      tag: rename_detail
      target_field: vectra_rux.detection_event.detail
      ignore_missing: true
  - rename:
      field: json.detection_href
      tag: rename_detection_href
      target_field: vectra_rux.detection_event.detection.href
      ignore_missing: true
  - set:
      field: event.reference
      tag: set_event_reference_from_detection_event_detection_href
      copy_from: vectra_rux.detection_event.detection.href
      ignore_empty_value: true
  - set:
      field: threat.indicator.reference
      tag: set_threat_indicator_reference_from_detection_event_detection_href
      copy_from: vectra_rux.detection_event.detection.href
      ignore_empty_value: true
  - uri_parts:
      field: event.reference
      tag: uri_parts_event_reference
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: json.detection_id
      tag: convert_detection_id_to_string
      target_field: vectra_rux.detection_event.detection.id
      type: string
      ignore_missing: true
  - set:
      field: event.id
      tag: set_event_id_from_detection_event_detection_id
      copy_from: vectra_rux.detection_event.detection.id
      ignore_empty_value: true
  - rename:
      field: json.detection_type
      tag: rename_detection_type
      target_field: vectra_rux.detection_event.detection.type
      ignore_missing: true
  - convert:
      field: json.entity_id
      tag: convert_entity_id_to_string
      target_field: vectra_rux.detection_event.entity.id
      type: string
      ignore_missing: true
  - set:
      field: user.id
      tag: set_user_id_from_detection_event_entity_id
      copy_from: vectra_rux.detection_event.entity.id
      ignore_empty_value: true
      if: ctx.json?.type == 'account'
  - append:
      field: related.user
      tag: append_user_id_into_related_user
      value: '{{{user.id}}}'
      allow_duplicates: false
      if: ctx.user?.id != null
  - set:
      field: host.id
      tag: set_host_id_from_detection_event_entity_id
      copy_from: vectra_rux.detection_event.entity.id
      ignore_empty_value: true
      if: ctx.json?.type == 'host'
  - append:
      field: related.hosts
      tag: append_host_id_into_related_hosts
      value: '{{{host.id}}}'
      allow_duplicates: false
      if: ctx.host?.id != null  
  - rename:
      field: json.entity_uid
      tag: rename_entity_uid
      target_field: vectra_rux.detection_event.entity.uid
      ignore_missing: true
  - date:
      field: json.event_timestamp
      tag: date_event_timestamp
      target_field: vectra_rux.detection_event.event_timestamp
      formats:
        - ISO8601
      if: ctx.json?.event_timestamp != null && ctx.json.event_timestamp != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: '@timestamp'
      tag: set_@timestamp_from_detection_event_event_timestamp
      copy_from: vectra_rux.detection_event.event_timestamp
      ignore_empty_value: true
  - convert:
      field: json.id
      tag: convert_id_to_string
      target_field: vectra_rux.detection_event.id
      type: string
      ignore_missing: true
  - rename:
      field: json.mitre
      tag: rename_mitre
      target_field: vectra_rux.detection_event.mitre
      ignore_missing: true
  - foreach:
      field: vectra_rux.detection_event.mitre
      if: ctx.vectra_rux?.detection_event?.mitre instanceof List
      ignore_failure: true
      processor:
        append:
          field: threat.technique.id
          value: '{{{_ingest._value}}}'
          tag: append_vectra_rux_detection_event_mitre_into_threat_technique_id
          allow_duplicates: false
  - convert:
      field: json.severity
      tag: convert_severity_to_long
      target_field: vectra_rux.detection_event.severity
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.severity
      tag: set_event_severity_from_detection_event_severity
      copy_from: vectra_rux.detection_event.severity
      ignore_empty_value: true
  - rename:
      field: json.src_entity
      tag: rename_src_entity
      target_field: vectra_rux.detection_event.src_entity
      ignore_missing: true
  - convert:
      field: json.threat
      tag: convert_threat_to_long
      target_field: vectra_rux.detection_event.threat
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: user.risk.calculated_score
      tag: set_user_risk_calculated_score_from_detection_event_threat
      copy_from: vectra_rux.detection_event.threat
      ignore_empty_value: true
      if: ctx.json?.type == 'account'
  - set:
      field: host.risk.calculated_score
      tag: set_host_risk_calculated_score_from_detection_event_threat
      copy_from: vectra_rux.detection_event.threat
      ignore_empty_value: true
      if: ctx.json?.type == 'host'
  - convert:
      field: json.triaged
      tag: convert_triaged_to_boolean
      target_field: vectra_rux.detection_event.triaged
      type: boolean
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.type
      tag: rename_type
      target_field: vectra_rux.detection_event.type
      ignore_missing: true
  - rename:
      field: json.url
      tag: rename_url
      target_field: vectra_rux.detection_event.url
      ignore_missing: true
  - set:
      field: event.url
      tag: set_event_url_from_detection_event_url
      copy_from: vectra_rux.detection_event.url
      ignore_empty_value: true
  - remove:
      field:
        - vectra_rux.detection_event.detection.href
        - vectra_rux.detection_event.detection.id
        - vectra_rux.detection_event.event_timestamp
        - vectra_rux.detection_event.mitre
        - vectra_rux.detection_event.severity
        - vectra_rux.detection_event.url
        - vectra_rux.detection_event.category
        - vectra_rux.detection_event.d_type_vname
        - vectra_rux.detection_event.entity.id
      tag: remove_custom_duplicate_fields
      ignore_missing: true
      if: ctx.tags == null || !ctx.tags.contains('preserve_duplicate_custom_fields')
  - remove:
      field: json
      tag: remove_json
      ignore_missing: true
  # Cleanup
  - script:
      description: This script processor iterates over the whole document to remove fields with null values.
      tag: script_to_drop_null_values
      lang: painless
      source: |
        void handleMap(Map map) {
          map.values().removeIf(v -> {
            if (v instanceof Map) {
                handleMap(v);
            } else if (v instanceof List) {
                handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        void handleList(List list) {
          list.removeIf(v -> {
            if (v instanceof Map) {
                handleMap(v);
            } else if (v instanceof List) {
                handleList(v);
            }
            return v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        handleMap(ctx);
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
      if: ctx.error?.message != null
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
