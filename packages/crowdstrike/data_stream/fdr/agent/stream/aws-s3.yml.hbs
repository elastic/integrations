queue_url: {{queue_url}}
{{#if credential_profile_name}}
credential_profile_name: {{credential_profile_name}}
{{/if}}
{{#if shared_credential_file}}
shared_credential_file: {{shared_credential_file}}
{{/if}}
{{#if visibility_timeout}}
visibility_timeout: {{visibility_timeout}}
{{/if}}
{{#if api_timeout}}
api_timeout: {{api_timeout}}
{{/if}}
{{#if max_number_of_messages}}
max_number_of_messages: {{max_number_of_messages}}
{{/if}}
{{#if number_of_workers}}
number_of_workers: {{number_of_workers}}
{{/if}}
{{#if endpoint}}
endpoint: {{endpoint}}
{{/if}}
{{#if default_region}}
default_region: {{default_region}}
{{/if}}
{{#if access_key_id}}
access_key_id: {{access_key_id}}
{{/if}}
{{#if secret_access_key}}
secret_access_key: {{secret_access_key}}
{{/if}}
{{#if session_token}}
session_token: {{session_token}}
{{/if}}
{{#if role_arn}}
role_arn: {{role_arn}}
{{/if}}
{{#if fips_enabled}}
fips_enabled: {{fips_enabled}}
{{/if}}
{{#if proxy_url }}
proxy_url: {{proxy_url}}
{{/if}}
sqs.notification_parsing_script.source: |
  function parse(n) {
    var m = JSON.parse(n);
    var evts = [];
    var files = m.files;
    var bucket = m.bucket;
    var records = m.Records;
    var message = m.Message;
    var topic_arn = m.TopicArn;
    // Checks if not FDR queue
    if (!Array.isArray(files) || (files.length == 0) || bucket == null || bucket == "") {
      // Checks if event notification is S3 -> SQS or S3 -> SNS -> SQS.
      if ((records != null && records.length != 0) || (message != null && topic_arn != null)) {
        // When notification is from S3 -> SNS -> SQS, records need to be extracted from message.
        if (records == null || records.length == 0) {
          var p = JSON.parse(message);
          records = p.Records;
        }
        if (records != null && records.length != 0) {
          records.forEach(function(f){
            if (f.s3 && f.s3.bucket && f.s3.bucket.name && f.s3.object && f.s3.object.key) {
              var evt = new S3EventV2();
              evt.SetS3BucketName(f.s3.bucket.name);
              evt.SetS3ObjectKey(f.s3.object.key);
              if (f.s3.bucket.arn) {
                evt.SetS3BucketARN(f.s3.bucket.arn);
              }
              if (f.awsRegion) {
                evt.SetAWSRegion(f.awsRegion);
              }
              if (f.eventName) {
                evt.SetEventName(f.eventName);
              }
              if (f.eventSource) {
                evt.SetEventSource(f.eventSource);
              }
              evts.push(evt);
            }
          });
        }
      }
      // Checks if event notification is S3 -> EventBridge -> SQS
      else if (m.detail != null && m.detail.bucket != null && m.detail.object != null && m.detail.bucket.name != null && m.detail.object.key != null) {
        var evt = new S3EventV2();
        evt.SetS3BucketName(m.detail.bucket.name);
        evt.SetS3ObjectKey(m.detail.object.key);
        if (Array.isArray(m.resources) && m.resources.length > 0) {
          evt.SetS3BucketARN(m.resources[0]);
        }
        if (m.source != null && m.source == "aws.s3") {
          evt.SetEventSource("aws:s3");
        }
        if (m['detail-type'] == "Object Created") {
          evt.SetEventName("ObjectCreated:Put");
        }
        evts.push(evt);
      }
    } else {
      // FDR queue
      files.sort(function(a, b) {
        var isMetadata = function(a) {
          return a.path && ((a.path.indexOf("aidmaster") !== -1) || (a.path.indexOf("userinfo") !== -1));
        };
        var cmp = function(a, b) {
          if (a < b) {
            return -1;
          }
          if (a > b) {
            return 1;
          }
          return 0;
        };
        if (isMetadata(a) === isMetadata(b)) {
          return cmp(a.path, b.path);
        }
        if (isMetadata(a)) {
          return -1;
        }
        return 1;
      });
      files.forEach(function(f){
        var evt = new S3EventV2();
        evt.SetS3BucketName(bucket);
        evt.SetS3ObjectKey(f.path);
        evts.push(evt);
      });
    }
    return evts;
  }
{{#if tags.length}}
tags:
{{else}}
{{#if preserve_original_event}}
tags:
{{/if}}
{{/if}}
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
fields_under_root: true
fields:
  _conf:
    long_fields: {{long_fields}}
    long_fields_max_length: {{long_fields_max_length}}
    enable_deduplication: {{enable_deduplication}}
    prune_fields: {{prune_fields}}
processors:
- add_locale: ~
{{#if enrich_metadata}}
- decode_json_fields:
    fields: message
    target: crowdstrike
- if:
    contains:
      log.file.path: aidmaster
  then:
    - cache:
        backend:
          capacity: {{metadata_cache_capacity}}
          file:
            id: aidmaster
            write_interval: {{metadata_cache_write_interval}}
        put:
          ttl: {{metadata_ttl}}
          key_field: crowdstrike.aid
          value_field: crowdstrike
          ignore_missing: true
{{#unless keep_metadata}}
    - drop_event:
        when:
          contains:
            log.file.path: aidmaster
{{/unless}}
  else:
    - if:
        contains:
          log.file.path: userinfo
      then:
        - cache:
            backend:
              capacity: {{metadata_cache_capacity}}
              file:
                id: userinfo
                write_interval: {{metadata_cache_write_interval}}
            put:
              ttl: {{metadata_ttl}}
              key_field: crowdstrike.UserSid_readable
              value_field: crowdstrike
              ignore_missing: true
{{#unless keep_metadata}}
        - drop_event:
            when:
              contains:
                log.file.path: userinfo
{{/unless}}
      else:
        - cache:
            backend:
              file:
                id: aidmaster
            get:
              key_field: crowdstrike.aid
              target_field: metadata.host
              ignore_missing: true
        - cache:
            backend:
              file:
                id: userinfo
            get:
              key_field: crowdstrike.UserSid
              target_field: metadata.user
              ignore_missing: true
- drop_fields:
    fields:
      - crowdstrike
{{/if}}
{{#if processors}}
{{processors}}
{{/if}}
