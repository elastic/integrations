---
description: Pipeline for processing sample logs
processors:
  ## Message decoding.
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      ignore_missing: true
      description: Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.
      if: ctx.event?.original == null
  - remove:
      field: message
      tag: remove_message
      ignore_missing: true
      description: The `message` field is no longer required if the document has an `event.original` field.
      if: ctx.event?.original != null
  - json:
      field: event.original
      tag: json_event_original
      target_field: crowdstrike
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - remove:
      tag: remove-metadata-aid
      field: metadata.host.aid
      ignore_missing: true
  - remove:
      tag: remove-metadata-usersid
      field: metadata.user.UserSid_readable
      ignore_missing: true
  - rename:
      tag: metadata
      field: metadata
      target_field: crowdstrike.info
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: "'{{{ _ingest.on_failure_processor_tag }}}' rename failed with message {{{ _ingest.on_failure_message }}}"
  - convert:
      field: crowdstrike.UTCTimestamp
      target_field: _temp.utc_timestamp
      type: long
      ignore_failure: true
  - date:
      tag: date-timestamp-utc
      description: Parse timestamp from event.
      field: _temp.utc_timestamp
      target_field: event.created
      formats:
        - UNIX
      ignore_failure: true
      if: >
        ctx.event?.created == null && ctx._temp?.utc_timestamp instanceof long && ctx._temp.utc_timestamp < (long)1e10
  - date:
      tag: date-timestamp-utc
      description: Parse timestamp from event.
      field: crowdstrike.UTCTimestamp
      target_field: event.created
      formats:
        - UNIX_MS
        - ISO8601
      ignore_failure: true
      if: >
        ctx.event?.created == null &&
        ctx.crowdstrike?.UTCTimestamp != null &&
        ctx.crowdstrike.UTCTimestamp != "" &&
        ctx.crowdstrike.UTCTimestamp != "none"
  - date:
      tag: date-timestamp
      description: Parse timestamp from event.
      field: crowdstrike.timestamp
      target_field: event.created
      formats:
        - UNIX_MS
        - ISO8601
      ignore_failure: true
      if: >
        ctx.event?.created == null &&
        ctx.crowdstrike?.timestamp != null &&
        ctx.crowdstrike.timestamp != "" &&
        ctx.crowdstrike.timestamp != "none"
  - date:
      tag: date-event-created
      description: Parse timestamp from event.
      field: crowdstrike.CreationTimeStamp
      target_field: event.created
      formats:
        - UNIX
        - ISO8601
      ignore_failure: true
      if: >
        ctx.event?.created == null &&
        ctx.crowdstrike?.CreationTimeStamp != null &&
        ctx.crowdstrike.CreationTimeStamp != "" &&
        ctx.crowdstrike.CreationTimeStamp != "none"
  - date:
      tag: date-Time
      description: Parse Time from event.
      field: crowdstrike.Time
      target_field: event.created
      formats:
        - ISO8601
        - UNIX
      ignore_failure: true
      if: >
        ctx.event?.created == null &&
        ctx.crowdstrike?.Time != null &&
        ctx.crowdstrike.Time != "" &&
        ctx.crowdstrike.Time != "none"
  - date:
      tag: date-_time
      description: Parse _time from event.
      field: crowdstrike._time
      target_field: event.created
      formats:
        - ISO8601
        - UNIX
      ignore_failure: true
      if: >
        ctx.event?.created == null &&
        ctx.crowdstrike?._time != null &&
        ctx.crowdstrike._time != "" &&
        ctx.crowdstrike._time != "none"
  - set:
      tag: set-timestamp
      field: "@timestamp"
      copy_from: event.created
      if: ctx.event?.created != null
  - set:
      tag: set-timestamp-ingest
      field: "@timestamp"
      copy_from: _ingest.timestamp
      if: ctx["@timestamp"] == null
  - script:
      tag: date-context-timestamp-from-nt
      if: (ctx.crowdstrike?.ContextTimeStamp != null && ctx.crowdstrike?.ContextTimeStamp != "")
      description: Conditionally convert ContextTimestamp from Windows NT timestamp format to UNIX.
      lang: painless
      source: |-
        long timestamp;
        if (ctx.crowdstrike.ContextTimeStamp instanceof long) {
          timestamp = (long)ctx.crowdstrike.ContextTimeStamp;
        } else if (ctx.crowdstrike.ContextTimeStamp instanceof String) {
          if (!ctx.crowdstrike.ContextTimeStamp.contains('.')) {
            timestamp = Long.parseLong(ctx.crowdstrike.ContextTimeStamp);
          }
        }
        if (timestamp > 0x0100000000000000L) { // See https://devblogs.microsoft.com/oldnewthing/20030905-02/?p=42653 for constant.
          ctx.crowdstrike.ContextTimeStamp = (timestamp / 10000000) - 11644473600L;
        }
  - script:
      tag: date-start-timestamp-from-nt
      description: Conditionally convert StartTime from Windows NT timestamp format to UNIX.
      lang: painless
      source: |-
        if (ctx.crowdstrike?.StartTime == null) {
          return;
        }
        long timestamp;
        if (ctx.crowdstrike.StartTime instanceof long) {
          timestamp = (long)ctx.crowdstrike.StartTime;
        } else if (ctx.crowdstrike.StartTime instanceof String) {
          if (!ctx.crowdstrike.StartTime.contains('.')) {
            timestamp = Long.parseLong(ctx.crowdstrike.StartTime);
          }
        }
        if (timestamp > 0x0100000000000000L) { // See https://devblogs.microsoft.com/oldnewthing/20030905-02/?p=42653 for constant.
          ctx.crowdstrike.StartTime = (timestamp / 10000000) - 11644473600L;
        }
  - date:
      tag: date-start-timestamp
      field: crowdstrike.StartTime
      target_field: crowdstrike.StartTime
      formats:
        - UNIX
      if: >
        ctx.crowdstrike?.StartTime != null &&
        ctx.crowdstrike.StartTime != "" &&
        ctx.crowdstrike.StartTime != "none"
  - script:
      tag: date-end-timestamp-from-nt
      description: Conditionally convert EndTime from Windows NT timestamp format to UNIX.
      lang: painless
      source: |-
        if (ctx.crowdstrike?.EndTime == null) {
          return;
        }
        long timestamp;
        if (ctx.crowdstrike.EndTime instanceof long) {
          timestamp = (long)ctx.crowdstrike.EndTime;
        } else if (ctx.crowdstrike.EndTime instanceof String) {
          if (!ctx.crowdstrike.EndTime.contains('.')) {
            timestamp = Long.parseLong(ctx.crowdstrike.EndTime);
          }
        }
        if (timestamp > 0x0100000000000000L) { // See https://devblogs.microsoft.com/oldnewthing/20030905-02/?p=42653 for constant.
          ctx.crowdstrike.EndTime = (timestamp / 10000000) - 11644473600L;
        }
  - date:
      tag: date-end-timestamp
      field: crowdstrike.EndTime
      target_field: crowdstrike.EndTime
      formats:
        - UNIX
      if: >
        ctx.crowdstrike?.EndTime != null &&
        ctx.crowdstrike.EndTime != "" &&
        ctx.crowdstrike.EndTime != "none"
  - date:
      tag: date-scores-modified_time
      field: crowdstrike.scores.modified_time
      target_field: crowdstrike.scores.modified_time
      formats:
        - ISO8601
        - yyyy-MM-dd'T'HH:mm:ss.SSS'Z'
      if: >
        ctx.crowdstrike?.scores?.modified_time != null &&
        ctx.crowdstrike.scores.modified_time != "" &&
        ctx.crowdstrike.scores.modified_time != "none"
      on_failure:
        - remove:
            field: crowdstrike.scores.modified_time
            ignore_failure: true
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      tag: rename-message
      field: crowdstrike.message
      target_field: message
      ignore_missing: true
  - rename:
      tag: canonicalize-event_type
      field: crowdstrike.event_type
      target_field: crowdstrike.EventType
      ignore_missing: true
      if: ctx.crowdstrike?.EventType == null
  - rename:
      tag: canonicalize-host_hidden_status
      field: crowdstrike.host_hidden_status
      target_field: crowdstrike.HostHiddenStatus
      ignore_missing: true
      if: ctx.crowdstrike?.HostHiddenStatus == null

# Handle case changes.
  - rename:
      tag: rename_GrandParentCommandLine_GrandparentCommandLine
      field: crowdstrike.GrandParentCommandLine
      target_field: crowdstrike.GrandparentCommandLine
      ignore_failure: true
  - rename:
      tag: rename_GrandParentImageFileName_GrandparentImageFileName
      field: crowdstrike.GrandParentImageFileName
      target_field: crowdstrike.GrandparentImageFileName
      ignore_failure: true
  - rename:
      tag: rename_GrandParentImageFilePath_GrandparentImageFilePath
      field: crowdstrike.GrandParentImageFilePath
      target_field: crowdstrike.GrandparentImageFilePath
      ignore_failure: true

  # Assign severities to conform to security rules values
  #
  # 21 = Low
  # 47 = Medium
  # 73 = High
  # 99 = Critical
  #
  # Leave crowdstrike values in place, since they have their own semantics.
  - script:
      lang: painless
      if: ctx.crowdstrike?.SeverityName instanceof String
      source: |-
        ctx.event = ctx.event ?: [:];
        String name = ctx.crowdstrike.SeverityName;
        if (name.equalsIgnoreCase("low")) {
          ctx.event.severity = 21;
        } else if (name.equalsIgnoreCase("medium")) {
          ctx.event.severity = 47;
        } else if (name.equalsIgnoreCase("high")) {
          ctx.event.severity = 73;
        } else if (name.equalsIgnoreCase("critical")) {
          ctx.event.severity = 99;
        }
# EppDetectionSummaryEvent renames
  - rename:
      tag: rename_Hostname_ComputerName
      field: crowdstrike.Hostname
      target_field: crowdstrike.ComputerName
      ignore_failure: true
  - rename:
      tag: rename_LogonDomain_MachineDomain
      field: crowdstrike.LogonDomain
      target_field: crowdstrike.MachineDomain
      ignore_failure: true
  - rename:
      tag: rename_AgentId_SensorId
      field: crowdstrike.AgentId
      target_field: crowdstrike.SensorId
      ignore_failure: true
  - rename:
      tag: rename_Name_DetectName
      field: crowdstrike.Name
      target_field: crowdstrike.DetectName
      ignore_failure: true

# EppDetectionSummaryEvent converts
  - convert:
      field: crowdstrike.LocalIPv6
      tag: convert_crowdstrike_LocalIPv6_ip
      type: ip
      if: ctx.crowdstrike?.LocalIPv6 != null && ctx.crowdstrike.LocalIPv6 != ''
      on_failure:
        - remove:
            field: crowdstrike.LocalIPv6
            ignore_failure: true
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - foreach:
      field: crowdstrike.FilesWritten
      tag: convert_crowdstrike_fileswritten_timestamp_array
      if: ctx.crowdstrike?.FilesWritten instanceof List
      ignore_failure: true
      processor:
        date:
          field: _ingest._value.Timestamp
          target_field: _ingest._value.Timestamp
          formats:
            - UNIX
          tag: convert_crowdstrike_fileswritten_timestamp
          on_failure:
            - remove:
                field: _ingest._value.Timestamp
                ignore_failure: true
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'

# Handle additional added fields. 
  - convert:
      tag: convert_CurrentLocalIP_ip
      field: crowdstrike.CurrentLocalIP
      type: ip
      if: (ctx.crowdstrike?.CurrentLocalIP != null && ctx.crowdstrike?.CurrentLocalIP != "")
  - date:
      tag: date-first-discovery-date
      field: crowdstrike.FirstDiscoveredDate
      target_field: crowdstrike.FirstDiscoveredDate
      formats:
        - UNIX
      if: >
        ctx.crowdstrike?.FirstDiscoveredDate != null &&
        ctx.crowdstrike.FirstDiscoveredDate != "" &&
        ctx.crowdstrike.FirstDiscoveredDate != "none"
  - convert:
      field: crowdstrike.aipCount
      type: integer
      if: (ctx.crowdstrike?.aipCount != null && ctx.crowdstrike?.aipCount != "")
  - convert:
      field: crowdstrike.discovererCount
      type: integer
      if: (ctx.crowdstrike?.discovererCount != null && ctx.crowdstrike?.discovererCount != "")
  - convert:
      field: crowdstrike.localipCount
      type: integer
      if: (ctx.crowdstrike?.localipCount != null && ctx.crowdstrike?.localipCount != "")

  - fingerprint:
      fields:
        - '@timestamp'
        - crowdstrike.id
        - crowdstrike.aid
        - crowdstrike.cid
      tag: fingerprint_crowdstrike_fdr
      description: >
        When deduplication is enabled, fingerprint the a set of crowdstrike fields 
        in attempt to prevent the same event from being indexed more than once.
      if: ctx._conf?.enable_deduplication == true
      target_field: _id
      ignore_missing: true

  ## Categorization.
  - script:
      tag: script-categorize-events
      description: Categorize events.
      lang: painless
      params:
        AcUninstallConfirmation:
          category: [ package ]
          type: [ deletion ]
          kind: state
          outcome: success
        AcUnloadConfirmation:
          category: [ package ]
          type: [ deletion ]
          kind: state
          outcome: success
        AgentConnect:
          category: [ network, session ]
          type: [ connection, info ]
          kind: event
          outcome: success
        AgentOnline:
          category: [ configuration, package, host ]
          type: [ change, installation, start ]
          kind: state
          outcome: success
        AmsiRegistrationStatus:
          category: [ host ]
          type: [ info ]
          kind: state
          outcome: success
        AsepFileChange:
          category: [ file ]
          type: [ creation, change ]
          kind: event
          outcome: success
        AsepKeyUpdate:
          category: [ registry ]
          type: [ change ]
          kind: event
          outcome: success
        AsepValueUpdate:
          category: [ registry ]
          type: [ change ]
          kind: event
          outcome: success
        AssociateIndicator:
          category: [ malware ]
          type: [ info ]
          kind: alert
          outcome: unknown
        AssociateTreeIdWithRoot:
          category: [ malware ]
          type: [ info ]
          kind: alert
          outcome: success
        BITSJobCreated:
          category: [ network, file ]
          type: [ connection, creation ]
          kind: event
          outcome: success
        BZip2FileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        BehaviorWhitelisted:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        BrowserInjectedThread:
          category: [ process ]
          type: [ access, change ]
          kind: event
          outcome: success
        ClassifiedModuleLoad:
          category: [ library ]
          type: [ start ]
          kind: event
        CloudAssociateTreeIdWithRoot:
          category: [ malware ]
          type: [ deletion ]
          kind: alert
          outcome: success
        CommandHistory:
          category: [ process ]
          type: [ end, info ]
          kind: event
          outcome: success
        ConfigStateUpdate:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        CrashNotification:
          category: [ host ]
          type: [ info ]
          kind: event
          outcome: failure
        CreateProcessArgs:
          category: [ process ]
          type: [ start ]
          kind: state
          outcome: success
        CreateService:
          category: [ host ]
          type: [ change ]
          kind: event
          outcome: success
        CreateThreadNoStartImage:
          category: [ process ]
          type: [ start ]
          kind: event
          outcome: success
        CreateThreadReflectiveDll:
          category: [ process ]
          type: [ change ]
          kind: event
          outcome: success
        CriticalEnvironmentVariableChanged:
          category: [ configuration, host ]
          type: [ change ]
          kind: event
          outcome: success
        CriticalFileAccessed:
          category: [ file ]
          type: [ access ]
          kind: alert
          outcome: success
        CriticalFileModified:
          category: [ file ]
          type: [ change ]
          kind: alert
          outcome: success
        CurrentSystemTags:
          category: [ host ]
          type: [ info ]
          kind: state
          outcome: success
        CustomIOABasicProcessDetectionInfoEvent:
          category: [ malware ]
          type: [ info ]
          kind: alert
          outcome: unknown
        DCSyncAttempted:
          category: [ configuration, iam ]
          type: [ access ]
          kind: event
          outcome: unknown
        DcOffline:
          category: [ iam ]
          type: [ info ]
          kind: event
          outcome: success
        DcOnline:
          category: [ iam ]
          type: [ info ]
          kind: event
          outcome: success
        DcStatus:
          category: [ iam ]
          type: [ info ]
          kind: state
          outcome: success
        DetectAnalysis:
          category: [ malware ]
          type: [ info ]
          kind: alert
          outcome: success
        DetectionExcluded:
          category: [ configuration, malware ]
          type: [ change, info ]
          kind: alert
          outcome: success
        DirectoryCreate:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        DllInjection:
          category: [ process ]
          type: [ change ]
          kind: event
          outcome: success
        DmpFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        DnsRequest:
          category: [ network ]
          type: [ protocol ]
          kind: event
          outcome: success
        DocumentProgramInjectedThread:
          category: [ process ]
          type: [ access, change ]
          kind: event
          outcome: success
        DriverLoad:
          category: [ driver ]
          type: [ start ]
          kind: event
          outcome: success
        DwgFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        EarlyExploitPivotDetect:
          category: [ malware ]
          type: [ info ]
          kind: event
          outcome: unknown
        EndOfProcess:
          category: [ process ]
          type: [ end ]
          kind: event
          outcome: success
        ErrorEvent:
          category: [ package ]
          type: [ info ]
          kind: alert
          outcome: failure
        EtwErrorEvent:
          category: [ package, host ]
          type: [ info ]
          kind: event
          outcome: failure
        ExecutableDeleted:
          category: [ file ]
          type: [ deletion ]
          kind: event
          outcome: success
        FalconHostRegTamperingInfo:
          category: [ registry ]
          type: [ change ]
          kind: alert
          outcome: unknown
        FalconServiceStatus:
          category: [ package ]
          type: [ info ]
          kind: state
          outcome: unknown
        FileCreateInfo:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        FileDeleteInfo:
          category: [ file ]
          type: [ deletion ]
          kind: event
          outcome: success
        FileDetectInfo:
          category: [ file ]
          type: [ info ]
          kind: alert
          outcome: unknown
        FileInfo:
          category: [ file ]
          type: [ info ]
          kind: event
          outcome: unknown
        FileOpenInfo:
          category: [ file ]
          type: [ access ]
          kind: event
          outcome: success
        FileRenameInfo:
          category: [ file ]
          type: [ change ]
          kind: event
          outcome: success
        FileSystemOperationBlocked:
          category: [ file ]
          type: [ change, deletion ]
          kind: event
          outcome: failure
        FileSystemOperationDetectInfo:
          category: [ file ]
          type: [ change, deletion ]
          kind: alert
          outcome: unknown
        FileTimestampsModified:
          category: [ file ]
          type: [ change ]
          kind: event
          outcome: success
        FirewallChangeOption:
          category: [ configuration, host ]
          type: [ change ]
          kind: event
          outcome: success
        FirewallDeleteRule:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        FirewallDeleteRuleIP4:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        FirewallDeleteRuleIP6:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        FirewallDisabled:
          category: [ configuration, host ]
          type: [ change ]
          kind: event
          outcome: success
        FirewallEnabled:
          category: [ configuration, host ]
          type: [ change ]
          kind: event
          outcome: success
        FirewallSetRule:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        FirewallSetRuleIP4:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        FirewallSetRuleIP6:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        FirmwareAnalysisErrorEvent:
          category: [ host ]
          type: [ info ]
          kind: state
          outcome: failure
        FirmwareAnalysisHardwareData:
          category: [ host ]
          type: [ info ]
          kind: state
          outcome: success
        FirmwareAnalysisStatus:
          category: [ host ]
          type: [ info ]
          kind: state
          outcome: success
        FlashThreadCreateProcess:
          category: [ process ]
          type: [ start ]
          kind: event
          outcome: success
        FsPostOpenSnapshotFile:
          category: [ file ]
          type: [ access ]
          kind: event
          outcome: success
        FsVolumeMounted:
          category: [ host ]
          type: [ change ]
          kind: event
          outcome: success
        FsVolumeUnmounted:
          category: [ host ]
          type: [ change ]
          kind: event
          outcome: success
        HostInfo:
          category: [ host ]
          type: [ info ]
          kind: event
          outcome: success
        HostedServiceStarted:
          category: [ process ]
          type: [ start ]
          kind: event
          outcome: success
        HostedServiceStopped:
          category: [ process ]
          type: [ end ]
          kind: event
          outcome: success
        HostnameChanged:
          category: [ host ]
          type: [ change ]
          kind: event
          outcome: success
        HttpRequestDetect:
          category: [ network, session ]
          type: [ connection, start ]
          kind: event
          outcome: success
        HttpVisibilityStatus:
          category: [ session ]
          type: [ info ]
          kind: state
          outcome: unknown
        IOServiceRegister:
          category: [ package ]
          type: [ change ]
          kind: event
          outcome: success
        ImageHash:
          category: [ library ]
          type: [ start ]
          kind: event
          outcome: success
        InjectedThread:
          category: [ process ]
          type: [ change ]
          kind: event
          outcome: success
        InjectedThreadFromUnsignedModule:
          category: [ process ]
          type: [ change ]
          kind: alert
          outcome: success
        InstallBundleDownloadComplete:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        InstallServiceDownloadComplete:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        InstalledApplication:
          category: [ package ]
          type: [ installation ]
          kind: event
          outcome: success
        InstalledUpdates:
          category: [ host, package ]
          type: [ change, installation ]
          kind: event
          outcome: success
        InstanceMetadata:
          category: [ host ]
          type: [ info ]
          kind: state
          outcome: unknown
        IoSessionConnected:
          category: [ session ]
          type: [ start ]
          kind: event
          outcome: success
        IoSessionLoggedOn:
          category: [ session ]
          type: [ end ]
          kind: event
          outcome: success
        JarFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        JavaClassFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        JavaInjectedThread:
          category: [ process ]
          type: [ change ]
          kind: event
          outcome: success
        KernelModeLoadImage:
          category: [ driver ]
          type: [ start ]
          kind: event
          outcome: success
        KextLoad:
          category: [ driver ]
          type: [ start ]
          kind: event
          outcome: success
        KextUnload:
          category: [ driver ]
          type: [ end ]
          kind: event
          outcome: success
        LFODownloadConfirmation:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        LfoUploadDataComplete:
          category: [ file ]
          type: [ change ]
          kind: event
          outcome: success
        LfoUploadDataFailed:
          category: [ file ]
          type: [ change ]
          kind: event
          outcome: failure
        LfoUploadDataUnneeded:
          category: [ file ]
          type: [ change ]
          kind: event
          outcome: failure
        LocalIpAddressIP4:
          category: [ configuration, host ]
          type: [ change ]
          kind: state
          outcome: success
        LocalIpAddressIP6:
          category: [ configuration, host ]
          type: [ change ]
          kind: state
          outcome: success
        LocalIpAddressRemovedIP4:
          category: [ configuration, host ]
          type: [ change ]
          kind: state
          outcome: success
        LocalIpAddressRemovedIP6:
          category: [ configuration, host ]
          type: [ change ]
          kind: state
          outcome: success
        LsassHandleFromUnsignedModule:
          category: [ process ]
          type: [ change ]
          kind: alert
          outcome: unknown
        MachOFileWritten:
          category: [ file ]
          type: [ change ]
          kind: event
          outcome: success
        ManifestDownloadComplete:
          category: [ configuration, file ]
          type: [ change, creation ]
          kind: event
          outcome: success
        ModifyServiceBinary:
          category: [ file ]
          type: [ change ]
          kind: alert
          outcome: unknown
        ModuleBlockedEvent:
          category: [ process, malware ]
          type: [ info, denied ]
          kind: alert
          outcome: success
        ModuleBlockedEventWithPatternId:
          category: [ process, malware ]
          type: [ info ]
          kind: event
          outcome: unknown
        ModuleDetectInfo:
          category: [ process, malware ]
          type: [ info ]
          kind: event
          outcome: unknown
        NeighborListIP4:
          category: [ host, network ]
          type: [ info ]
          kind: state
          outcome: unknown
        NeighborListIP6:
          category: [ host, network ]
          type: [ info ]
          kind: state
          outcome: unknown
        NetShareAdd:
          category: [ host ]
          type: [ change ]
          kind: event
          outcome: success
        NetShareDelete:
          category: [ host ]
          type: [ change ]
          kind: event
          outcome: success
        NetShareSecurityModify:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        NetworkCloseIP4:
          category: [ network ]
          type: [ end, connection ]
          kind: event
          outcome: unknown
        NetworkCloseIP6:
          category: [ network ]
          type: [ end, connection ]
          kind: event
          outcome: unknown
        NetworkConnectIP4:
          category: [ network ]
          type: [ start, connection ]
          kind: event
          outcome: unknown
        NetworkConnectIP6:
          category: [ network ]
          type: [ start, connection ]
          kind: event
          outcome: unknown
        NetworkListenIP4:
          category: [ network ]
          type: [ start ]
          kind: event
          outcome: success
        NetworkListenIP6:
          category: [ network ]
          type: [ start ]
          kind: event
          outcome: success
        NetworkReceiveAcceptIP4:
          category: [ network ]
          type: [ allowed, access, connection ]
          kind: event
          outcome: unknown
        NetworkReceiveAcceptIP6:
          category: [ network ]
          type: [ allowed, access, connection ]
          kind: event
          outcome: unknown
        NewExecutableRenamed:
          category: [ file ]
          type: [ change ]
          kind: event
          outcome: success
        NewExecutableWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        NewScriptWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        OciContainerTelemetry:
          category: [ host ]
          type: [ info ]
          kind: state
          outcome: unknown
        OleFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        OoxmlFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        OsVersionInfo:
          category: [ host ]
          type: [ info ]
          kind: event
          outcome: success
        PackedExecutableWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        PdfFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        PeFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        PeVersionInfo:
          category: [ file ]
          type: [ info ]
          kind: event
          outcome: success
        PrivilegedProcessHandleFromUnsignedModule:
          category: [ process ]
          type: [ access ]
          kind: alert
          outcome: success
        ProcessBlocked:
          category: [ process ]
          type: [ access ]
          kind: alert
          outcome: failure
        ProcessExecOnPackedExecutable:
          category: [ process, file ]
          type: [ access ]
          kind: alert
          outcome: success
        ProcessExecOnSMBFile:
          category: [ process, file, network ]
          type: [ access ]
          kind: alert
          outcome: success
        ProcessHandleOpDetectInfo:
          category: [ process, malware ]
          type: [ info ]
          kind: alert
          outcome: success
        ProcessInjection:
          category: [ process ]
          type: [ change ]
          kind: event
          outcome: success
        ProcessRollup2:
          category: [ process ]
          type: [ start ]
          kind: event
          outcome: success
        ProcessRollup2Stats:
          category: [ process ]
          type: [ info ]
          kind: state
          outcome: unknown
        ProcessSelfDeleted:
          category: [ process ]
          type: [ end ]
          kind: event
          outcome: success
        PromiscuousBindIP4:
          category: [ host ]
          type: [ change ]
          kind: state
          outcome: success
        PtyCreated:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        QuarantineActionResult:
          category: [ file ]
          type: [ info ]
          kind: alert
          outcome: unknown
        QuarantinedFile:
          category: [ file ]
          type: [ change ]
          kind: alert
          outcome: unknown
        QuarantinedFileState:
          category: [ file ]
          type: [ info ]
          kind: alert
          outcome: unknown
        QueueApcEtw:
          category: [ file ]
          type: [ creation ]
          kind: alert
          outcome: success
        RansomwareCreateFile:
          category: [ file ]
          type: [ creation ]
          kind: alert
          outcome: success
        RansomwareFileAccessPattern:
          category: [ file ]
          type: [ access ]
          kind: alert
          outcome: success
        RansomwareOpenFile:
          category: [ file ]
          type: [ access ]
          kind: alert
          outcome: success
        RarFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        RawBindIP4:
          category: [ network ]
          type: [ start, connection ]
          kind: event
          outcome: success
        RawBindIP6:
          category: [ network ]
          type: [ start, connection ]
          kind: event
          outcome: success
        ReflectiveDllOpenProcess:
          category: [ process ]
          type: [ access ]
          kind: alert
          outcome: success
        RegGenericValueUpdate:
          category: [ registry ]
          type: [ change ]
          kind: event
          outcome: success
        RegSystemConfigValueUpdate:
          category: [ registry, host, configuration ]
          type: [ change ]
          kind: event
          outcome: success
        RegisterRawInputDevicesEtw:
          category: [ host, configuration ]
          type: [ change ]
          kind: event
          outcome: success
        RegistryOperationDetectInfo:
          category: [ malware, registry ]
          type: [ info ]
          kind: alert
          outcome: success
        RemoteBruteForceDetectInfo:
          category: [ malware, authentication ]
          type: [ info ]
          kind: alert
          outcome: success
        RemovableDiskModuleLoadAttempt:
          category: [ configuration, host ]
          type: [ change ]
          kind: event
          outcome: success
        RemovableMediaVolumeMounted:
          category: [ configuration, host ]
          type: [ change ]
          kind: event
          outcome: success
        RtfFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        SAMHashDumpFromUnsignedModule:
          category: [ registry, file ]
          type: [ access, creation ]
          kind: alert
          outcome: success
        ScheduledTaskDeleted:
          category: [ configuration ]
          type: [ deletion ]
          kind: event
          outcome: success
        ScheduledTaskModified:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        ScheduledTaskRegistered:
          category: [ configuration ]
          type: [ creation ]
          kind: event
          outcome: success
        ScreenshotTakenEtw:
          category: [ process ]
          type: [ access ]
          kind: event
          outcome: success
        ScriptControlBlocked:
          category: [ malware, file ]
          type: [ info ]
          kind: alert
          outcome: success
        ScriptControlDetectInfo:
          category: [ malware, file ]
          type: [ info ]
          kind: alert
          outcome: success
        ScriptControlErrorEvent:
          category: [ malware, file ]
          type: [ info ]
          kind: alert
          outcome: failure
        ScriptControlScanInfo:
          category: [ malware, file ]
          type: [ info ]
          kind: state
          outcome: success
        ScriptControlScanTelemetry:
          category: [ malware, file ]
          type: [ info ]
          kind: state
          outcome: success
        SensitiveWmiQuery:
          category: [ malware, process ]
          type: [ info ]
          kind: alert
          outcome: success
        SensorHeartbeat:
          category: [ package ]
          type: [ info ]
          kind: event
          outcome: success
        ServiceStarted:
          category: [ process ]
          type: [ start ]
          kind: event
          outcome: success
        SetWinEventHookEtw:
          category: [ host, configuration ]
          type: [ change ]
          kind: event
          outcome: success
        SevenZipFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        SignInfoError:
          category: [ file ]
          type: [ info ]
          kind: state
          outcome: failure
        SignInfoWithCertAndContext:
          category: [ file ]
          type: [ info ]
          kind: state
          outcome: unknown
        SignInfoWithContext:
          category: [ file ]
          type: [ info ]
          kind: state
          outcome: unknown
        SmbClientNamedPipeConnectEtw:
          category: [ network ]
          type: [ connection ]
          kind: event
          outcome: success
        SmbClientShareClosedEtw:
          category: [ network ]
          type: [ connection, end ]
          kind: event
          outcome: success
        SmbClientShareOpenedEtw:
          category: [ network ]
          type: [ connection, start ]
          kind: event
          outcome: success
        SmbServerShareOpenedEtw:
          category: [ network ]
          type: [ connection, start ]
          kind: event
          outcome: success
        SmbServerV1AuditEtw:
          category: [ network ]
          type: [ connection ]
          kind: state
          outcome: unknown
        SnapshotVolumeMounted:
          category: [ host, configuration ]
          type: [ change ]
          kind: event
          outcome: success
        SuspiciousCreateSymbolicLink:
          category: [ malware, file ]
          type: [ creation, info ]
          kind: alert
          outcome: success
        SuspiciousDnsRequest:
          category: [ network ]
          type: [ start, protocol ]
          kind: alert
          outcome: success
        SuspiciousEseFileWritten:
          category: [ malware, file ]
          type: [ creation, info ]
          kind: alert
          outcome: success
        SuspiciousRegAsepUpdate:
          category: [ malware, registry, configuration ]
          type: [ change, info ]
          kind: alert
          outcome: success
        SuspiciousUserRemoteAPCAttempt:
          category: [ malware, process ]
          type: [ info ]
          kind: alert
          outcome: success
        SyntheticProcessRollup2:
          category: [ process ]
          type: [ start ]
          kind: event
          outcome: success
        SystemCapacity:
          category: [ host ]
          type: [ info ]
          kind: state
          outcome: success
        TarFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        TelemetryCounters2:
          category: [ host ]
          type: [ info ]
          kind: state
          outcome: success
        TelemetryNetworkConnections:
          category: [ network ]
          type: [ connection ]
          kind: state
          outcome: success
        TelemetryStats:
          category: [ host ]
          type: [ info ]
          kind: state
          outcome: success
        TerminateProcess:
          category: [ process ]
          type: [ end ]
          kind: event
          outcome: success
        TokenImpersonated:
          category: [ process, authentication ]
          type: [ info, change ]
          kind: event
          outcome: success
        UACCOMElevation:
          category: [ process, authentication ]
          type: [ info, change ]
          kind: event
          outcome: success
        UACExeElevation:
          category: [ process, authentication ]
          type: [ info, change ]
          kind: event
          outcome: success
        UACMSIElevation:
          category: [ process, authentication ]
          type: [ info, change ]
          kind: event
          outcome: success
        UmppaErrorEvent:
          category: [ package ]
          type: [ info ]
          kind: event
          outcome: failure
        UnsignedModuleLoad:
          category: [ library ]
          type: [ start ]
          kind: event
          outcome: success
        UpdateManifestDownloadComplete:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        UserAccountAddedToGroup:
          category: [ configuration, iam ]
          type: [ change, group ]
          kind: event
          outcome: success
        UserAccountCreated:
          category: [ configuration, iam ]
          type: [ creation ]
          kind: event
          outcome: success
        UserAccountDeleted:
          category: [ configuration, iam ]
          type: [ deletion ]
          kind: event
          outcome: success
        UserExceptionDEP:
          category: [ process, malware ]
          type: [ info ]
          kind: alert
          outcome: success
        UserFontLoad:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        UserIdentity:
          category: [ authentication, iam ]
          type: [ info, user ]
          kind: event
          outcome: success
        UserLogoff:
          category: [ authentication ]
          type: [ end ]
          kind: event
          outcome: success
        UserLogon:
          category: [ authentication ]
          type: [ start ]
          kind: event
          outcome: success
        UserLogonFailed:
          category: [ authentication ]
          type: [ start ]
          kind: event
          outcome: failure
        UserLogonFailed2:
          category: [ authentication ]
          type: [ start ]
          kind: event
          outcome: failure
        VolumeSnapshotCreated:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        VolumeSnapshotDeleted:
          category: [ file ]
          type: [ deletion ]
          kind: event
          outcome: success
        WfpFilterTamperingFilterAdded:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        WfpFilterTamperingFilterDeleted:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        WmiCreateProcess:
          category: [ process ]
          type: [ start ]
          kind: event
          outcome: success
        WmiFilterConsumerBindingEtw:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        WmiProviderRegistrationEtw:
          category: [ configuration ]
          type: [ change ]
          kind: event
          outcome: success
        WroteExeAndGeneratedServiceEvent:
          category: [ process ]
          type: [ access ]
          kind: alert
          outcome: success
        XarFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
        ZipFileWritten:
          category: [ file ]
          type: [ creation ]
          kind: event
          outcome: success
      source: |-
        def m = params.get(ctx.crowdstrike?.event_simpleName);
        if (m != null) {
          m.forEach((k, v) -> {
            if (v instanceof List) {
              ctx.event[k] = new ArrayList(v);
            } else {
              ctx.event[k] = v;
            }
          });
        }
  ## Cached event category for category-dependent processors.
  - set:
      field: _temp.isFile
      value: true
      if: ctx.event?.category?.contains('file') == true
  - set:
      field: _temp.isLibrary
      value: true
      if: ctx.event?.category?.contains('library') == true
  - set:
      field: _temp.isNetwork
      value: true
      if: ctx.event?.category?.contains('network') == true
  - set:
      field: _temp.isProcess
      value: true
      if: ctx.event?.category?.contains('process') == true

  ## Event fields.
  - set:
      field: event.id
      description: Concat the fields used in fingerprint.
      tag: set_event_id
      if: ctx.crowdstrike?.id != null || ctx.crowdstrike?.aid != null || ctx.crowdstrike?.cid != null
      value: >-
        {{{#crowdstrike.id}}}{{{ crowdstrike.id }}}{{{/crowdstrike.id}}}|{{{#crowdstrike.aid}}}{{{ crowdstrike.aid }}}{{{/crowdstrike.aid}}}|{{{#crowdstrike.cid}}}{{{ crowdstrike.cid }}}{{{/crowdstrike.cid}}}
  - rename:
      field: crowdstrike.event_simpleName
      target_field: event.action
      ignore_missing: true

  ## Prepare data.
  - script:
      tag: convert-count-fields-to-long
      description: Convert all count fields to number.
      lang: painless
      source: |-
        for (entry in ctx.crowdstrike.entrySet()) {
          def key = entry.getKey().toString();
          if (key.contains("Count") || key.contains("Port")) {
            try {
              ctx.crowdstrike[key] = Long.parseLong(entry.getValue().toString());
            } catch (Exception e) {
            }
          }
        }
  - script:
      tag: remove-empty-hashes
      description: Remove all 0's hashes.
      lang: painless
      params:
        MD5HashData: md5
        SHA1HashData: sha1
        SHA256HashData: sha256
      source: |-
        def hashIsEmpty(String hash) {
          if (hash == null || hash == "") {
            return true;
          }
          
          Pattern emptyHashRegex = /^0*$/;
          def matcher = emptyHashRegex.matcher(hash);
          
          return matcher.matches(); 
        }

        def hashes = new HashMap();
        def related = [
          "hash": new ArrayList()
        ];
        for (entry in params.entrySet()) {
          def key = entry.getKey().toString();
          def value = ctx.crowdstrike[key];
          if (hashIsEmpty(value)) {
            ctx.crowdstrike.remove(key);
            continue;
          }

          hashes[entry.getValue().toString()] = value;
          related.hash.add(value);
        }

        ctx._temp = ctx._temp ?: [:];
        ctx._temp.hashes = hashes;
        if (related.hash.length > 0) {
          ctx.related = related;
        }
  
  ## Observer fields.
  - rename:
      field: crowdstrike.aid
      target_field: observer.serial_number
      ignore_missing: true
      ignore_failure: true
  - split:
      field: crowdstrike.aip
      separator: "\\s+"
      ignore_missing: true
  - convert:
      tag: convert_crowdstrike-aip_ip
      field: crowdstrike.aip
      type: ip
      ignore_missing: true
      on_failure:
        - remove:
            field: crowdstrike.aip
  - rename:
      field: crowdstrike.aip
      target_field: observer.ip
      ignore_missing: true
      ignore_failure: true
  - set:
      field: observer.address
      copy_from: observer.ip
      ignore_empty_value: true
  - rename:
      field: crowdstrike.AgentVersion
      target_field: observer.version
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: crowdstrike.ConfigBuild
      target_field: observer.version
      ignore_missing: true
      ignore_failure: true
  - foreach:
      if: ctx.observer?.ip != null && ctx.observer.ip instanceof List
      field: observer.ip
      processor:
        append:
          field: related.ip
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - foreach:
      if: ctx.observer?.ip != null && ctx.observer.ip instanceof List
      field: observer.ip
      processor:
        append:
          field: related.ip
          value: '{{{_ingest._value}}}'
          allow_duplicates: false

  ## Host fields.
  - set:
      field: host.id
      copy_from: crowdstrike.aid
      ignore_empty_value: true
  - rename:
      field: crowdstrike.ComputerName
      target_field: host.hostname
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: crowdstrike.hostname
      target_field: host.hostname
      ignore_missing: true
      ignore_failure: true
  - set:
      field: host.name
      copy_from: host.hostname
      ignore_empty_value: true
      ignore_failure: true
  - append:
      field: related.hosts
      value: "{{{crowdstrike.info.host.ComputerName}}}"
      allow_duplicates: false
      if: ctx.crowdstrike?.info?.host?.ComputerName != null
  - rename:
      field: crowdstrike.info.host.ComputerName
      target_field: host.name
      ignore_missing: true
      if: ctx.host?.name == null 
  - append:
      field: related.hosts
      value: "{{{host.name}}}"
      allow_duplicates: false
      if: ctx.host?.name != null
  - rename:
      field: crowdstrike.City
      target_field: host.geo.city_name
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: crowdstrike.Continent
      target_field: host.geo.continent_name
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: crowdstrike.Country
      target_field: host.geo.country_name
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: crowdstrike.Timezone
      target_field: host.geo.timezone
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: crowdstrike.MachineDomain
      target_field: host.domain
      ignore_missing: true
      ignore_failure: true
  - convert:
      tag: convert_crowdstrike-info-host-aip_ip
      field: crowdstrike.info.host.aip
      target_field: _temp.aip
      type: ip
      ignore_failure: true
      if: ctx.crowdstrike?.info?.host?.aip != null && ctx.crowdstrike.info.host.aip != ""
  - remove:
      field: crowdstrike.info.host.aip
      if: ctx._temp?.aip != null
  - append:
      field: host.ip
      value: '{{{_temp.aip}}}'
      allow_duplicates: false
      if: ctx._temp?.aip != null
  - append:
      field: related.ip
      value: '{{{_temp.aip}}}'
      allow_duplicates: false
      if: ctx._temp?.aip != null
  
  ## OS fields.
  - set:
      field: host.os.type
      value: linux
      if: ctx.crowdstrike?.event_platform != null && ctx.crowdstrike?.event_platform == "Lin"
  - set:
      field: host.os.type
      value: macos
      if: ctx.crowdstrike?.event_platform != null && ctx.crowdstrike?.event_platform == "Mac"
  - set:
      field: host.os.type
      value: windows
      if: ctx.crowdstrike?.event_platform != null && ctx.crowdstrike?.event_platform == "Win"
  - set:
      field: host.os.type
      value: ios
      if: ctx.crowdstrike?.event_platform != null && ctx.crowdstrike?.event_platform == "iOS"
  - rename:
      field: crowdstrike.OSVersionString
      target_field: host.os.version
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: crowdstrike.Version
      target_field: host.os.version
      ignore_missing: true
      ignore_failure: true

  ## Process fields.
  - rename:
      field: crowdstrike.CommandLine
      target_field: process.command_line
      ignore_missing: true
  - script:
      tag: split-command-line
      description: Implements Windows-like SplitCommandLine
      lang: painless
      if: ctx.process?.command_line != null && ctx.process.command_line != "" && ctx.host?.os?.type != null
      source: |-
        // appendBSBytes appends n '\\' bytes to b and returns the resulting slice.
        def appendBSBytes(StringBuilder b, int n) {
            for (; n > 0; n--) {
                b.append('\\');
            }
            return b;
        }

        // readNextArg splits command line string into next
        // argument and command line remainder offset.
        def readNextArg(String line, int offset) {
            def b = new StringBuilder();
            boolean inquote;
            int nslash;
            for (; offset < line.length(); offset++) {
                def c = line.charAt(offset);
                if (c == (char)' ' || c == (char)0x09) {
                    if (!inquote) {
                        return [
                            "arg":  appendBSBytes(b, nslash).toString(),
                            "offset": offset+1
                        ];
                    }
                } else if (c == (char)'"') {
                    b = appendBSBytes(b, nslash/2);
                    if (nslash%2 == 0) {
                        // use "Prior to 2008" rule from
                        // http://daviddeley.com/autohotkey/parameters/parameters.htm
                        // section 5.2 to deal with double double quotes
                        if (inquote && offset+1 < line.length() && line.charAt(offset+1) == (char)'"') {
                            b.append(c);
                            offset++;
                        }
                        inquote = !inquote;
                    } else {
                        b.append(c);
                    }
                    nslash = 0;
                    continue;
                } else if (c == (char)'\\') {
                    nslash++;
                    continue;
                }
                b = appendBSBytes(b, nslash);
                nslash = 0;
                b.append(c);
            }
            return [
                "arg":  appendBSBytes(b, nslash).toString(), 
                "offset": line.length()
            ];
        }

        // commandLineToArgv splits a command line into individual argument
        // strings, following the Windows conventions documented
        // at http://daviddeley.com/autohotkey/parameters/parameters.htm#WINARGV
        // Original implementation found at: https://github.com/golang/go/commit/39c8d2b7faed06b0e91a1ad7906231f53aab45d1
        def commandLineToArgv(String line) {
            def args = new ArrayList();
            for (int i = 0; i < line.length();) {
                if (line.charAt(i) == (char)' ' || line.charAt(i) == (char)0x09) {
                    i++;
                    continue;
                }
                def next = readNextArg(line, i);
                i = next.offset;
                if (next.arg == '') {
                    // Empty strings will be removed later so don't bother adding them.
                    continue;
                }
                args.add(next.arg);
            }
            return args;
        }

        ctx.process.args = commandLineToArgv(ctx.process.command_line);
        ctx.process.args_count = ctx.process.args.length;
 
  - rename:
      field: crowdstrike.ImageFileName
      target_field: process.executable
      if: ctx._temp?.isLibrary != true
      ignore_missing: true
  - script:
      tag: process-name
      lang: painless
      if: ctx.process?.executable != null && ctx.process.executable != ""
      description: Calculate process.name
      source: |-
        def executable = ctx.process.executable;
        def exe_arr = [];
        def name = executable;
        if(executable.substring(0,1) == "\\") {
          name = executable.splitOnToken("\\")[-1];
        } else if(executable.substring(0,1) == "/") {
          name = executable.splitOnToken("/")[-1];
        }
        ctx.process.put("name", name);
  - convert:
      field: crowdstrike.ExitCode
      type: long
      ignore_missing: true
  - rename:
      field: crowdstrike.ExitCode
      target_field: process.exit_code
      ignore_missing: true
  - convert:
      field: crowdstrike.ProcessStartTime
      type: string
      ignore_missing: true
  - convert:
      field: crowdstrike.ProcessEndTime
      type: string
      ignore_missing: true
  - script:
      tag: process-uptime
      lang: painless
      description: Calculate process.uptime
      source: |-
        float s = Float.parseFloat(ctx.crowdstrike?.ProcessStartTime);
        float e = Float.parseFloat(ctx.crowdstrike?.ProcessEndTime);
        if (e >= s) {
          if (ctx.process == null) {
            ctx.process = [];
          }
          ctx.process.uptime = (long) ((e-s)/1000L);
        }
      if: ctx.crowdstrike?.ProcessStartTime != null && ctx.crowdstrike?.ProcessStartTime != "" && ctx.crowdstrike?.ProcessEndTime != null && ctx.crowdstrike?.ProcessEndTime != ""
  - script:
      tag: parse-raw-pids
      lang: painless
      description: Parse raw process id's so that they roll over if out of 32-bit range
      source: |-
        def parsePid(String pid) {
          try {
            return Long.parseUnsignedLong(pid);
          } catch (Exception e) {
            return pid;
          }
        }
        if (ctx.crowdstrike?.RawProcessId != null) {
          ctx.crowdstrike.RawProcessId = parsePid(ctx.crowdstrike.RawProcessId);
        }
        if (ctx.crowdstrike?.EtwRawProcessId != null) {
          ctx.crowdstrike.EtwRawProcessId = parsePid(ctx.crowdstrike.EtwRawProcessId);
        }
  - date:
      tag: date-process-start-time
      field: crowdstrike.ProcessStartTime
      target_field: crowdstrike.ProcessStartTime
      formats:
        - UNIX
      if: >
        ctx.crowdstrike?.ProcessStartTime != null &&
        ctx.crowdstrike.ProcessStartTime != "" &&
        ctx.crowdstrike.ProcessStartTime != "none"
  - rename:
      field: crowdstrike.ProcessStartTime
      target_field: process.start
      ignore_missing: true
      if: ctx.crowdstrike?.ProcessStartTime != ""
  - date:
      tag: date-process-end-time
      field: crowdstrike.ProcessEndTime
      target_field: crowdstrike.ProcessEndTime
      formats:
        - UNIX
      if: >
        ctx.crowdstrike?.ProcessEndTime != null &&
        ctx.crowdstrike.ProcessEndTime != "" &&
        ctx.crowdstrike.ProcessEndTime != "none"
  - rename:
      field: crowdstrike.ProcessEndTime
      target_field: process.end
      ignore_missing: true
      if: ctx.crowdstrike?.ProcessEndTime != ""
  - rename:
      field: crowdstrike.RawProcessId
      target_field: process.pid
      ignore_missing: true
  - convert:
      field: crowdstrike.TargetProcessId
      type: string
      if: ctx.crowdstrike?.TargetProcessId != null && !(ctx.crowdstrike.TargetProcessId instanceof String)
  - rename:
      field: crowdstrike.TargetProcessId
      target_field: process.entity_id
      ignore_missing: true
  - convert:
      field: crowdstrike.ParentProcessId
      type: string
      if: ctx.crowdstrike?.ParentProcessId != null && !(ctx.crowdstrike.ParentProcessId instanceof String)
  - rename:
      field: crowdstrike.ParentProcessId
      target_field: process.parent.entity_id
      ignore_missing: true
  - set:
      field: process.name
      copy_from: crowdstrike.ContextBaseFileName
      if: ctx._temp?.isNetwork == true
      ignore_empty_value: true
  - rename:
      field: crowdstrike.ParentBaseFileName
      target_field: process.parent.name
      ignore_missing: true
  - convert:
      field: crowdstrike.ProcessGroupId
      type: long
      ignore_missing: true
  - rename:
      field: crowdstrike.ProcessGroupId
      target_field: process.pgid
      ignore_missing: true
  - rename:
      field: crowdstrike.ContextProcessId
      target_field: process.entity_id
      ignore_missing: true
      ignore_failure: true
      if: ctx.process?.entity_id == null && ctx.host?.os?.type != 'windows'
  - convert:
      field: crowdstrike.ContextProcessId
      type: long
      target_field: process.pid
      if: ctx._temp?.isLibrary == true && ctx.crowdstrike?.ContextProcessId != '' && ctx.host?.os?.type == 'windows'
      ignore_missing: true
      ignore_failure: true
  - convert:
      field: crowdstrike.ContextThreadId
      type: long
      ignore_missing: true
      if: ctx.process?.thread?.id == null
  - rename:
      field: crowdstrike.ContextThreadId
      target_field: process.thread.id
      ignore_missing: true
      ignore_failure: true
      if: ctx.process?.thread?.id == null
  - rename:
      field: crowdstrike.EtwRawProcessId
      target_field: process.pid
      ignore_missing: true
      if: ctx.process?.pid == null
  - convert:
      field: crowdstrike.EtwRawThreadId
      type: long
      ignore_missing: true
  - rename:
      field: crowdstrike.EtwRawThreadId
      target_field: process.thread.id
      ignore_missing: true
      if: ctx.process?.thread?.id == null
  - rename:
      field: crowdstrike.ServiceDisplayName
      target_field: process.title
      ignore_missing: true
  - rename:
      field: _temp.hashes
      target_field: process.hash
      if: ctx.event?.action != null && (ctx.event.action.contains("Process") || ctx.event.action.contains("Service")) && ctx._temp?.hashes != null && ctx._temp?.hashes.size() > 0
  - script:
      lang: painless
      if: ctx.crowdstrike?.IntegrityLevel != null
      params:
        levels:
          '0': UNTRUSTED
          '4096': LOW
          '8192': MEDIUM
          '8448': MEDIUM_PLUS
          '12288': HIGH
          '16384': SYSTEM
          '20480': PROTECTED
      source: |-
        String level = params.get('levels')[ctx.crowdstrike.IntegrityLevel];
        if (level != null) {
          ctx.process = ctx.process ?: [:];
          ctx.process.Ext = ctx.process.Ext ?: [:];
          ctx.process.Ext.token = ctx.process.Ext.token ?: [:];
          ctx.process.Ext.token.integrity_level_name = level;
        }
  - set:
      field: process.pe.original_file_name
      copy_from: crowdstrike.OriginalFilename
      if: ctx.host?.os?.type == 'windows'
      ignore_empty_value: true
  - convert:
      field: process.pgid
      target_field: process.group_leader.entity_id
      type: string
      if: ctx._temp?.isProcess == true && ctx.host?.os?.type == 'linux'
      ignore_missing: true
  - set:
      field: process.real_user.id
      copy_from: crowdstrike.RUID
      if: ctx.host?.os?.type == 'linux'
      ignore_empty_value: true
  - set:
      field: process.real_user.id
      copy_from: crowdstrike.RUID
      ignore_empty_value: true
  - set:
      field: user.Ext.real.id
      copy_from: process.real_user.id
      ignore_empty_value: true
  - set:
      field: process.real_group.id
      copy_from: crowdstrike.RGID
      if: ctx.host?.os?.type == 'linux'
      ignore_empty_value: true
  - set:
      field: group.Ext.real.id
      copy_from: process.real_group.id
      ignore_empty_value: true
  - set:
      field: process.group.id
      copy_from: crowdstrike.GID
      if: ctx.host?.os?.type == 'linux'
      ignore_empty_value: true
  - set:
      field: group.id
      copy_from: process.group.id
      ignore_empty_value: true

  ## Library fields.
  - rename:
      field: process.name
      target_field: dll.name
      if: ctx._temp?.isLibrary == true && ctx.host?.os?.type == 'windows'
      ignore_missing: true
  - rename:
      field: process.executable
      target_field: dll.path
      if: ctx._temp?.isLibrary == true && ctx.host?.os?.type == 'windows'
      ignore_missing: true
  - rename:
      field: crowdstrike.MD5HashData
      target_field: dll.hash.md5
      if: ctx._temp?.isLibrary == true && ctx.host?.os?.type == 'windows'
      ignore_missing: true
  - rename:
      field: crowdstrike.SHA1HashData
      target_field: dll.hash.sha1
      if: ctx._temp?.isLibrary == true && ctx.host?.os?.type == 'windows'
      ignore_missing: true
  - rename:
      field: crowdstrike.SHA256HashData
      target_field: dll.hash.sha256
      if: ctx._temp?.isLibrary == true && ctx.host?.os?.type == 'windows'
      ignore_missing: true
  - convert:
      field: crowdstrike.ModuleSize
      type: long
      target_field: dll.Ext.size
      if: ctx.crowdstrike?.ModuleSize != '' && ctx.host?.os?.type == 'windows'
      ignore_missing: true
      ignore_failure: true
  - script:
      lang: painless
      if: ctx._temp?.isLibrary == true && ctx.crowdstrike?.ImageFileName != null && ctx.host?.os?.type == 'windows'
      ignore_failure: true
      source: |-
        int idx = ctx.crowdstrike.ImageFileName.lastIndexOf('\\');
        if (idx >= 0) {
          ctx.dll = ctx.dll ?: [:];
          ctx.dll.name = ctx.crowdstrike.ImageFileName.substring(idx+1);
        }
  - rename:
      field: crowdstrike.ImageFileName
      target_field: dll.path
      ignore_missing: true
      if: ctx.event?.action == 'ClassifiedModuleLoad' && ctx.host?.os?.type == 'windows'
  - script:
      lang: painless
      if: ctx._temp?.isLibrary == true && ctx.crowdstrike?.TargetImageFileName != null && ctx.host?.os?.type == 'windows'
      ignore_failure: true
      source: |-
        int idx = ctx.crowdstrike.TargetImageFileName.lastIndexOf('\\');
        if (idx >= 0) {
          ctx.process = ctx.process ?: [:];
          ctx.process.name = ctx.crowdstrike.TargetImageFileName.substring(idx+1);
        }
  - rename:
      field: crowdstrike.TargetImageFileName
      target_field: process.executable
      if: ctx._temp?.isLibrary == true && ctx.host?.os?.type == 'windows'
      ignore_missing: true
  - script:
      lang: painless
      if: ctx.event?.action == 'ClassifiedModuleLoad' && ctx.crowdstrike?.ImageSignatureLevel != null && ctx.crowdstrike.ImageSignatureLevel != ''
      ignore_failure: true
      source: |-
        long signatureLevel = Long.parseLong(ctx.crowdstrike.ImageSignatureLevel);
        ctx.dll = ctx.dll ?: [:];
        ctx.dll.code_signature = ctx.dll.code_signature ?: [:];
        if (signatureLevel > 0) {
          ctx.dll.code_signature.exists = signatureLevel > 1;
        }
        ctx.dll.code_signature.trusted = signatureLevel > 1;

  ## Registry fields.
  - append:
      field: registry.data.strings
      value: '{{{crowdstrike.RegStringValue}}}'
      if: ctx.crowdstrike?.RegStringValue != null && ctx.crowdstrike.RegStringValue != ''
      allow_duplicates: false
  - set:
      field: registry.path
      value: '{{{crowdstrike.RegObjectName}}}\{{{crowdstrike.RegValueName}}}'
      if: ctx.crowdstrike?.RegObjectName != null && ctx.crowdstrike.RegObjectName != '' && ctx.crowdstrike?.RegValueName != null && ctx.crowdstrike.RegValueName != ''
  - set:
      field: registry.value
      copy_from: crowdstrike.RegValueName
      ignore_empty_value: true
  - gsub:
      field: crowdstrike.RegObjectName
      target_field: registry.key
      pattern: '^\\REGISTRY\\(?:USER|MACHINE)'
      replacement: ''
      ignore_missing: true
      ignore_failure: true
  - script:
      lang: painless
      if: ctx.crowdstrike?.RegOperationType != null
      params:
        op_types:
          '1':
            type: change
            action: modification
          '3':
            type: creation
            action: creation
          '5':
            type: change
            action: modification
          '8':
            type: access
            action: open
          '9':
            type: access
            action: query
      source: |-
        def op = params.get('op_types')[ctx.crowdstrike.RegOperationType];
        if (op != null) {
          ctx.event = ctx.event ?: [:];
          if (ctx.event.type instanceof List) {
            Set type = new HashSet();
            for (String t: ctx.event.type) {
              type.add(t);
            }
            type.add(op.type);
            ctx.event.type = type;
          } else if (ctx.event.type instanceof String) {
            String type = ctx.event.type;
            ctx.event.type = [];
            ctx.event.type.add(type);
            ctx.event.type.add(op.type);
          } else {
            ctx.event.type = [];
            ctx.event.type.add(op.type);
          }
          ctx.event.action = op.action;
        }
  - script:
      lang: painless
      if: ctx.crowdstrike?.RegType != null
      params:
        data_types:
          '0': REG_NONE
          '1': REG_SZ
          '2': REG_EXPAND_SZ
          '3': REG_BINARY
          '4': REG_DWORD
          '5': REG_DWORD_BIG_ENDIAN
          '6': REG_LINK
          '7': REG_MULTI_SZ
          '8': REG_RESOURCE_LIST
          '9': REG_FULL_RESOURCE_DESCRIPTOR
          '10': REG_RESOURCE_REQUIREMENTS_LIST
          '11': REG_QWORD
      source: |-
        String data_type = params.get('data_types')[ctx.crowdstrike.RegType];
        if (data_type != null) {
          ctx.registry = ctx.registry ?: [:];
          ctx.registry.data = ctx.registry.data ?: [:];
          ctx.registry.data.type = data_type;
        }

  ## User fields.
  - rename:
      field: crowdstrike.UID
      target_field: user.id
      ignore_missing: true
  - rename:
      field: crowdstrike.info.user.UserName
      target_field: user.name
      ignore_missing: true
      if: ctx.crowdstrike?.info?.user?.UserName != null && ctx.user?.name == null
  - split:
      field: crowdstrike.info.user.User
      target_field: "_temp.info_user_parts"
      separator: '\\{1,2}'
      if: ctx.crowdstrike?.info?.user?.User != null
  - set:
      field: user.domain
      value: "{{{_temp.info_user_parts.0}}}"
      ignore_failure: true
      ignore_empty_value: true
      if: ctx._temp?.info_user_parts != null && ctx._temp.info_user_parts.size() == 2
  - rename:
      field: crowdstrike.info.user.User
      target_field: user.name
      ignore_missing: true
      if: ctx.crowdstrike?.info?.user?.User != null && ctx.user?.name == null
  - rename:
      field: crowdstrike.GID
      target_field: user.group.id
      ignore_missing: true
  - rename:
      field: crowdstrike.UserSid
      target_field: user.id
      ignore_missing: true
      if: ctx.user?.id == null || ctx.user.id == ""
  - append:
      field: user.roles
      value: admin
      if: ctx.crowdstrike?.UserIsAdmin == "1"
  - rename:
      field: crowdstrike.UserName
      target_field: user.name
      ignore_missing: true
      if: ctx.crowdstrike?.UserName != null && ctx.user?.name == null
  - split:
      field: crowdstrike.UserPrincipal
      target_field: "_temp.user_parts"
      separator: '@'
      if: ctx.crowdstrike?.UserPrincipal != null
  - rename:
      field: crowdstrike.UserPrincipal
      target_field: user.email
      ignore_missing: true
  - set:
      field: user.domain
      value: "{{{_temp.user_parts.1}}}"
      ignore_failure: true
      ignore_empty_value: true
      if: ctx.user?.domain == null && ctx._temp?.user_parts != null && ctx._temp.user_parts.size() == 2
  - append:
      field: user.domain
      value: "{{{_temp.user_parts.1}}}"
      ignore_failure: true
      allow_duplicates: false
      if: ctx.user?.domain != null && ctx._temp?.user_parts != null && ctx._temp.user_parts.size() == 2 && ctx.user.domain != ctx._temp.user_parts[0]
  - set:
      field: user.full_name
      value: "{{{_temp.user_parts.0}}}"
      ignore_failure: true
      ignore_empty_value: true
      if: ctx._temp?.user_parts != null && ctx._temp.user_parts.size() == 2
  - append:
      field: related.user
      value: "{{{user.name}}}"
      ignore_failure: true
      allow_duplicates: false
      if: ctx.user?.name != null
  - append:
      field: related.user
      value: "{{{crowdstrike.info.user.User}}}"
      allow_duplicates: false
      if: ctx.crowdstrike?.info?.user?.User != null
  - append:
      field: related.user
      value: "{{{user.full_name}}}"
      ignore_failure: true
      allow_duplicates: false
      if: ctx.user?.full_name != null

  ## Networking fields.
  - set:
      field: network.direction
      value: outbound
      if: ctx.crowdstrike?.ConnectionDirection == "0"
  - set:
      field: network.direction
      value: inbound
      if: ctx.crowdstrike?.ConnectionDirection == "1"
  - set:
      field: network.direction
      value: unknown
      if: ctx.network?.direction == null && ctx.crowdstrike?.ConnectionDirection != null && ctx.crowdstrike.ConnectionDirection != ""

  - split:
      field: crowdstrike.LocalAddressIP4
      separator: '\s+'
      if: ctx.crowdstrike?.LocalAddressIP4 != null
  - convert:
      tag: convert_LocalAddressIP4_ip
      field: crowdstrike.LocalAddressIP4
      type: ip
      if: ctx.crowdstrike?.LocalAddressIP4 instanceof List && ctx.crowdstrike.LocalAddressIP4.length > 0
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - split:
      field: crowdstrike.LocalAddressIP6
      separator: '\s+'
      if: ctx.crowdstrike?.LocalAddressIP6 != null
  - convert:
      tag: convert_LocalAddressIP6_ip
      field: crowdstrike.LocalAddressIP6
      type: ip
      if: ctx.crowdstrike?.LocalAddressIP6 instanceof List && ctx.crowdstrike.LocalAddressIP6.length > 0
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      tag: convert_RemoteAddressIP4_ip
      field: crowdstrike.RemoteAddressIP4
      type: ip
      ignore_missing: true
  - convert:
      tag: convert_RemoteAddressIP6_ip
      field: crowdstrike.RemoteAddressIP6
      type: ip
      ignore_missing: true

  - pipeline:
      tag: pipeline_outbound_network
      # The condition is all non-inbound, but the pipeline operates assuming the traffic is outbound.
      # In cases where there is no information we make this assumption rather than dropping the data
      # on the floor.
      if: ctx.network?.direction != 'inbound'
      name: '{{ IngestPipeline "outbound_network" }}'
      ignore_missing_pipeline: true
  - pipeline:
      tag: pipeline_inbound_network
      if: ctx.network?.direction == 'inbound'
      name: '{{ IngestPipeline "inbound_network" }}'
      ignore_missing_pipeline: true

  - rename:
      field: crowdstrike.Protocol
      target_field: network.iana_number
      ignore_missing: true
  - script:
      tag: network-transport-lookup
      lang: painless
      ignore_failure: true
      if: ctx.network?.iana_number != null
      source: |
        def iana_number = ctx.network.iana_number;
        if (iana_number == '0') {
            ctx.network.transport = 'hopopt';
        } else if (iana_number == '1') {
            ctx.network.transport = 'icmp';
        } else if (iana_number == '2') {
            ctx.network.transport = 'igmp';
        } else if (iana_number == '6') {
            ctx.network.transport = 'tcp';
        } else if (iana_number == '8') {
            ctx.network.transport = 'egp';
        } else if (iana_number == '17') {
            ctx.network.transport = 'udp';
        } else if (iana_number == '47') {
            ctx.network.transport = 'gre';
        } else if (iana_number == '50') {
            ctx.network.transport = 'esp';
        } else if (iana_number == '58') {
            ctx.network.transport = 'ipv6-icmp';
        } else if (iana_number == '112') {
            ctx.network.transport = 'vrrp';
        } else if (iana_number == '132') {
            ctx.network.transport = 'sctp';
        }
  - community_id:
      ignore_missing: true
      ignore_failure: true
  - foreach:
      if: ctx.crowdstrike?.LocalAddressIP4 instanceof List && ctx.crowdstrike.LocalAddressIP4.length > 0
      field: crowdstrike.LocalAddressIP4
      processor:
        append:
          field: related.ip
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - foreach:
      if: ctx.crowdstrike?.LocalAddressIP6 instanceof List && ctx.crowdstrike.LocalAddressIP6.length > 0
      field: crowdstrike.LocalAddressIP6
      processor:
        append:
          field: related.ip
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - append:
      field: related.ip
      value: '{{{source.ip}}}'
      allow_duplicates: false
      if: ctx.source?.ip != null && ctx.source.ip != ""
  - append:
      field: related.ip
      value: "{{{destination.ip}}}"
      allow_duplicates: false
      if: ctx.destination?.ip != null && ctx.destination.ip != ""
  - foreach:
      if: ctx.crowdstrike?.LocalAddressIP4 instanceof List && ctx.crowdstrike.LocalAddressIP4.length > 0
      field: crowdstrike.LocalAddressIP4
      processor:
        append:
          field: related.ip
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - foreach:
      if: ctx.crowdstrike?.LocalAddressIP6 instanceof List && ctx.crowdstrike.LocalAddressIP6.length > 0
      field: crowdstrike.LocalAddressIP6
      processor:
        append:
          field: related.ip
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
  - append:
      field: related.ip
      value: '{{{source.ip}}}'
      allow_duplicates: false
      if: ctx.source?.ip != null && ctx.source.ip != ""
  - append:
      field: related.ip
      value: "{{{destination.ip}}}"
      allow_duplicates: false
      if: ctx.destination?.ip != null && ctx.destination.ip != ""
  - rename:
      field: crowdstrike.MAC
      target_field: source.mac
      ignore_missing: true
  - rename:
      if: ctx.source?.mac == null
      field: crowdstrike.PhysicalAddress
      target_field: source.mac
      ignore_missing: true
  - uppercase:
      field: source.mac
      ignore_missing: true
  - rename:
      field: crowdstrike.DownloadServer
      target_field: server.address
      ignore_missing: true
  - rename:
      field: crowdstrike.DownloadPath
      target_field: url.path
      ignore_missing: true

  ## URL fields.
  - set:
      field: url.path
      value: "/{{{url.path}}}"
      if: ctx.url?.path != null && !ctx.url.path.startsWith("/")
  - registered_domain:
      field: server.address
      target_field: server
      ignore_missing: true
  - set:
      field: url.scheme
      value: https
      if: ctx.crowdstrike?.DownloadPort == 443
  - set:
      field: url.scheme
      value: http
      if: ctx.crowdstrike?.DownloadPort != null && ctx.crowdstrike.DownloadPort != 443
  - set:
      field: url.full
      value: "{{{url.scheme}}}://{{{server.address}}}{{{url.path}}}"
      if: ctx.url?.scheme != null && ctx.server?.address != null && ctx.url?.path != null
  - uri_parts:
      field: url.full
      ignore_failure: true
      if: ctx.url?.full != null
  - registered_domain:
      field: url.domain
      target_field: url
      ignore_missing: true
      ignore_failure: true
      
  ## IP Geolocation Lookup
  - geoip:
      field: observer.ip
      target_field: observer.geo
      ignore_missing: true
  - geoip:
      field: source.ip
      first_only: true
      target_field: source.geo
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true
  
  ## IP Autonomous System (AS) Lookup
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      first_only: true
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true

  ## DNS fields.
  - set:
      field: dns.type
      value: query
      if: ctx.event?.action != null && ctx.event.action.contains("DnsRequest")
  - set:
      field: network.protocol
      value: dns
      if: ctx.event?.action != null && ctx.event.action.contains("DnsRequest")
  - registered_domain:
      field: crowdstrike.DomainName
      target_field: dns.question
      ignore_missing: true
      if: ctx.event?.action != null && ctx.event.action.contains("DnsRequest")
  - rename:
      field: dns.question.domain
      target_field: dns.question.name
      ignore_missing: true
      if: ctx.event?.action != null && ctx.event.action.contains("DnsRequest")
  - rename:
      field: crowdstrike.DomainName
      target_field: dns.question.name
      ignore_missing: true
      if: ctx.event?.action != null && ctx.dns?.question?.name == null && ctx.event.action.contains("DnsRequest")
  - script:
      tag: dns-request-type-to-name
      description: Map decimal DNS request type to its name.
      lang: painless
      params:
        "1": A
        "2": NS
        "5": CNAME
        "6": SOA
        "12": PTR
        "13": HINFO
        "15": MX
        "16": TXT
        "17": RP
        "18": AFSDB
        "24": SIG
        "25": KEY
        "28": AAAA
        "29": LOC
        "33": SRV
        "35": NAPTR
        "36": KX
        "37": CERT
        "39": DNAME
        "42": APL
        "43": DS
        "44": SSHFP
        "45": IPSECKEY
        "46": RRSIG
        "47": NSEC
        "48": DNSKEY
        "49": DHCID
        "50": NSEC3
        "51": NSEC3PARAM
        "52": TLSA
        "53": SMIMEA
        "55": HIP
        "59": CDS
        "60": CDNSKEY
        "61": OPENPGPKEY
        "62": CSYNC
        "63": ZONEMD
        "64": SVCB
        "65": HTTPS
        "108": EUI48
        "109": EUI64
        "249": TKEY
        "250": TSIG
        "256": URI
        "257": CAA
        "32768": TA
        "32769": DLV
      if: ctx.event?.action != null && ctx.crowdstrike?.RequestType != null && !ctx.crowdstrike.RequestType.isEmpty() && ctx.event.action.contains("DnsRequest")
      source: |-
        def t = params[ctx.crowdstrike.RequestType];
        if (t != null) {
          if (ctx.dns?.question == null) {
            ctx.dns.question = new HashMap();
          }
          ctx.dns.question.type = t;
          ctx.crowdstrike.remove("RequestType");
        }

  # SMB fields.
  - registered_domain:
      field: crowdstrike.DomainName
      target_field: destination
      ignore_missing: true
      if: ctx.event?.action != null && ctx.event.action.contains("SmbServerShareOpenedEtw")
  - rename:
      field: crowdstrike.DomainName
      target_field: destination.domain
      ignore_missing: true
      if: ctx.event?.action != null && ctx.destination?.domain == null && ctx.event.action.contains("SmbServerShareOpenedEtw")

  ## File fields.
  - convert:
      field: crowdstrike.Size
      type: long
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: crowdstrike.Size
      target_field: file.size
      ignore_missing: true
  - rename:
      field: crowdstrike.FileIdentifier
      target_field: file.inode
      ignore_missing: true
  - rename:
      field: crowdstrike.SourceFileName
      target_field: file.path
      ignore_missing: true
  - rename:
      field: crowdstrike.TargetFileName
      target_field: file.path
      ignore_missing: true
      ignore_failure: true
  - rename:
      field: crowdstrike.DiskParentDeviceInstanceId
      target_field: file.device
      ignore_missing: true
  - set:
      field: file.type
      value: file
      if: ctx.file?.path != null && !ctx.event.action.contains("Directory")
  - set:
      field: file.type
      value: dir
      if: ctx.file?.path != null && (ctx.event.action.contains("Directory") || ctx.file.path.endsWith("\\") || ctx.file.path.endsWith("/"))
  - script:
      tag: parse-file-path
      description: Adds file information.
      lang: painless
      if: ctx.file?.path != null && ctx.file.path.length() > 1
      source: |-
        def removeSuffix(String s, String suffix) {
          if (s != null && suffix != null && s.endsWith(suffix)) {
            return s.substring(0, s.length() - suffix.length());
          }
          return s;
        }

        def path = removeSuffix(ctx.file.path, "/");
        path = removeSuffix(path, "\\");
        def idx = path.lastIndexOf("\\");
        if (idx == -1) {
          idx = path.lastIndexOf("/");
        }
        if (idx > -1) {
            if (ctx.file == null) {
                ctx.file = new HashMap();
            }
            ctx.file.name = path.substring(idx+1);
            ctx.file.directory = path.substring(0, idx);

            def extIdx = ctx.file.name.lastIndexOf(".");
            if (extIdx > -1 && ctx.file.type == "file") {
                ctx.file.extension = ctx.file.name.substring(extIdx+1);
            }
        }
        if (path.indexOf(':') == 1) {
          ctx.file.drive_letter = path.substring(0, 1).toUpperCase();
        }
  - rename:
      field: _temp.hashes
      target_field: file.hash
      if: ctx.event?.action != null && (ctx.event.action.contains("File") || ctx.event.action.contains("Directory") || ctx.event.action.contains("Executable")) && ctx._temp?.hashes != null && ctx._temp?.hashes.size() > 0
  - set:
      field: process.name
      copy_from: crowdstrike.ContextBaseFileName
      if: ctx.event?.action != null && ctx.event.action.endsWith('Written')
      ignore_empty_value: true
  - set:
      field: process.executable
      copy_from: crowdstrike.ContextImageFileName
      if: ctx.event?.action != null && ctx.event.action.endsWith('Written') && ctx.host?.os?.type == 'windows'
      ignore_empty_value: true
  - set:
      field: process.entity_id
      copy_from: crowdstrike.ContextProcessId
      if: ctx.event?.action != null && ctx.event.action.endsWith('Written') && ctx.host?.os?.type == 'linux'
      ignore_empty_value: true
  - set:
      field: file.hash.sha256
      copy_from: crowdstrike.SHA256HashData
      if: ctx.event?.action != null && ctx.event.action.endsWith('Written') && ctx.host?.os?.type == 'linux'
      ignore_empty_value: true

  ## Device Fields.
  - set:
      field: device.id
      copy_from: crowdstrike.SensorId
      ignore_empty_value: true
      tag: rename_event_sensorid
  - set:
      field: device.id
      copy_from: crowdstrike.DeviceId
      ignore_empty_value: true
      tag: rename_event_deviceid
      if: ctx.device?.id == null
  - set:
      field: device.id
      copy_from: observer.serial_number
      ignore_empty_value: true
      tag: set_device_id_from_observer_serial_number
      if: ctx.device?.id == null

  ## Crowdstrike fields.
  - split:
      field: crowdstrike.FalconGroupingTags
      separator: ",\\s?"
      ignore_missing: true
      ignore_failure: true
  - split:
      field: crowdstrike.SensorGroupingTags
      separator: ",\\s?"
      ignore_missing: true
      ignore_failure: true
  - split:
      field: crowdstrike.Tags
      separator: ",\\s?"
      ignore_missing: true
      ignore_failure: true
  - split:
      field: crowdstrike.CallStackModuleNames
      separator: "\\|"
      ignore_missing: true
      ignore_failure: true
  - convert:
      field: crowdstrike.UserTime
      type: long
      ignore_missing: true
  - convert:
      field: crowdstrike.KernelTime
      type: long
      ignore_missing: true
  - convert:
      field: crowdstrike.CycleTime
      type: long
      ignore_missing: true
  - append:
      field: related.hash
      value: "{{{crowdstrike.ConfigStateHash}}}"
      ignore_failure: true
      allow_duplicates: false
      if: ctx.crowdstrike?.ConfigStateHash != null && ctx.crowdstrike.ConfigStateHash != ""
  - trim:
      field: crowdstrike.BootArgs
      ignore_missing: true
  - split:
      field: crowdstrike.BootArgs
      separator: '\s+'
      ignore_missing: true
  - date:
      tag: date-LogonTime
      field: crowdstrike.LogonTime
      target_field: crowdstrike.LogonTime
      formats:
        - UNIX
      if: >
        ctx.crowdstrike?.LogonTime != null &&
        ctx.crowdstrike.LogonTime != "" &&
        ctx.crowdstrike.LogonTime != "none"
  - date:
      tag: date-LogoffTime
      field: crowdstrike.LogoffTime
      target_field: crowdstrike.LogoffTime
      formats:
        - UNIX
      if: >
        ctx.crowdstrike?.LogoffTime != null &&
        ctx.crowdstrike.LogoffTime != "" &&
        ctx.crowdstrike.LogoffTime != "none"
  - date:
      tag: date-ConnectTime
      field: crowdstrike.ConnectTime
      target_field: crowdstrike.ConnectTime
      formats:
        - UNIX
      if: >
        ctx.crowdstrike?.ConnectTime != null &&
        ctx.crowdstrike.ConnectTime != "" &&
        ctx.crowdstrike.ConnectTime != "none"
  - date:
      tag: date-PreviousConnectTime
      field: crowdstrike.PreviousConnectTime
      target_field: crowdstrike.PreviousConnectTime
      formats:
        - UNIX
      if: >
        ctx.crowdstrike?.PreviousConnectTime != null &&
        ctx.crowdstrike.PreviousConnectTime != "" &&
        ctx.crowdstrike.PreviousConnectTime != "none"
  - date:
      tag: date-AgentLocalTime
      field: crowdstrike.AgentLocalTime
      target_field: crowdstrike.AgentLocalTime
      formats:
        - UNIX
      if: >
        ctx.crowdstrike?.AgentLocalTime != null &&
        ctx.crowdstrike.AgentLocalTime != "" &&
        ctx.crowdstrike.AgentLocalTime != "none"
      ignore_failure: true
  - date:
      tag: date-FirstSeen
      field: crowdstrike.FirstSeen
      target_field: crowdstrike.FirstSeen
      formats:
        - UNIX
      if: >
        ctx.crowdstrike?.FirstSeen != null &&
        ctx.crowdstrike.FirstSeen != "" &&
        ctx.crowdstrike.FirstSeen != "none"
  - date:
      tag: date-ContextTimeStamp
      field: crowdstrike.ContextTimeStamp
      target_field: crowdstrike.ContextTimeStamp
      formats:
        - UNIX
      if: >
        ctx.crowdstrike?.ContextTimeStamp != null &&
        ctx.crowdstrike.ContextTimeStamp != "" &&
        ctx.crowdstrike.ContextTimeStamp != "none"
  - date:
      tag: date-BiosReleaseDate
      field: crowdstrike.BiosReleaseDate
      target_field: crowdstrike.BiosReleaseDate
      formats:
        - MM/dd/yyyy
        - strict_date_optional_time
      if: >
        ctx.crowdstrike?.BiosReleaseDate != null &&
        ctx.crowdstrike.BiosReleaseDate != "" &&
        ctx.crowdstrike.BiosReleaseDate != "none"
  - convert:
      field: crowdstrike.AgentTimeOffset
      target_field: crowdstrike.AgentTimeOffset
      type: float
      ignore_missing: true
  - convert:
      field: crowdstrike.Timeout
      type: long
      ignore_missing: true
  - convert:
      field: crowdstrike.PhysicalAddressLength
      type: long
      ignore_missing: true
  - convert:
      field: crowdstrike.InterfaceIndex
      type: long
      ignore_missing: true
  - convert:
      field: crowdstrike.NetLuidIndex
      type: long
      ignore_missing: true
  - convert:
      field: crowdstrike.AttemptNumber
      type: long
      ignore_missing: true
  - convert:
      field: crowdstrike.SystemTableIndex
      type: long
      ignore_missing: true
  - split:
      field: crowdstrike.NeighborList
      separator: '\|'
      ignore_missing: true
  - split:
      field: crowdstrike.ConfigStateData
      separator: '\|'
      ignore_missing: true
  - append:
      field: related.hosts
      value: "{{{crowdstrike.LogonServer}}}"
      allow_duplicates: false
      if: ctx.crowdstrike?.LogonServer != null
  - append:
      field: related.hosts
      value: "{{{crowdstrike.ClientComputerName}}}"
      allow_duplicates: false
      if: ctx.crowdstrike?.ClientComputerName != null
  - append:
      field: related.hosts
      value: "{{{crowdstrike.info.user.LastLoggedOnHost}}}"
      allow_duplicates: false
      if: ctx.crowdstrike?.info?.user?.LastLoggedOnHost != null
  - script:
      tag: remove-long-fields
      if: ctx._conf?.long_fields == 'delete_long_fields' && ctx._conf?.long_fields_max_length != null
      description: Remove long fields based on user input stored in _conf.long_fields*.
      lang: painless
      source: |
        def potential_long_fields = new ArrayList(['DylibPath',
                                                  'EnvironmentVariablesString',
                                                  'TaskXml',
                                                  'ScriptContentBytes',
                                                  'RegBinaryValue',
                                                  'ScriptContent',
                                                  'FileContent',
                                                  'VersionInfo',
                                                  'OciContainerConfigImage',
                                                  'OciContainerConfigLabels',
                                                  'OciContainerConfigTty',
                                                  'OciContainerEngineType',
                                                  'OciContainerHostConfigOomKillDisable',
                                                  'OciContainerHostConfigPrivileged',
                                                  'OciContainerHostConfigPublishAllPorts',
                                                  'OciContainerHostConfigReadOnlyRootfs',
                                                  'OciContainerImageId',
                                                  'OciContainerInfoRetransmitted',
                                                  'OciContainerMounts',
                                                  'OciContainerName',
                                                  'OciContainerNetworkSettingsIpAddress',
                                                  'OciContainerStateOOMKilled',
                                                  'OciContainerStatePid',
                                                  'OciContainerConfigUser',
                                                  'OciContainerHostConfigCgroup',
                                                  'DevicePropertyClassGuid',
                                                  'DevicePropertyClassName',
                                                  'DevicePropertyLocationInformation',
                                                  'ConfigurationDescriptorName',
                                                  'InstanceMetadata',
                                                  'InstanceMetadataSignature',
                                                  'OciContainerAppName',
                                                  'OciContainerAppVersion',
                                                  'ManagedPdbBuildPath',
                                                  'RegStringValue',
                                                  'InterfaceKind',
                                                  'ScriptContentScanId',
                                                  'EfiVariableCustomModeAttributes',
                                                  'EfiVariableDbAttributes',
                                                  'EfiVariableDbSha256Hash',
                                                  'EfiVariableKekAttributes',
                                                  'EfiVariableKekSha256Hash',
                                                  'EfiVariablePkAttributes',
                                                  'EfiVariablePkSha256Hash',
                                                  'EfiVariableSecureBootAttributes',
                                                  'EfiVariableSetupModeAttributes',
                                                  'EfiVariableSignatureSupportAttributes',
                                                  'ExtendedAttributeValue',
                                                  'EfiVariableSetupMode',
                                                  'EfiVariableSignatureSupport',
                                                  'MmioDataSmiEn',
                                                  'MmioDataTco1Cnt',
                                                  'PciConfigDataBdsm',
                                                  'PciConfigDataBiosCntl',
                                                  'PciConfigDataGgc',
                                                  'PciConfigDataHfsts1',
                                                  'PciConfigDataRemapbase',
                                                  'PciConfigDataRemaplimit',
                                                  'PciConfigDataTom',
                                                  'PciConfigDataTouud',
                                                  'PciConfigDataTsegmb',
                                                  'SpibarDataBfpr',
                                                  'SpibarDataFreg0',
                                                  'SpibarDataFreg1',
                                                  'SpibarDataFreg2',
                                                  'SpibarDataFreg3',
                                                  'SpibarDataFreg4',
                                                  'SpibarDataHsfs',
                                                  'SpibarDataPr0',
                                                  'SpibarDataPr1',
                                                  'SpibarDataPr2',
                                                  'SpibarDataPr3',
                                                  'SpibarDataPr4',
                                                  'SpibarDataVscc0',
                                                  'SpibarDataVscc1',
                                                  'VolumeSnapshotName',
                                                  'MmioDataGenPmconB',
                                                  'VolumeSnapshotTimeStamp',
                                                  'OciContainerHostConfigDevices',
                                                  'OciContainerPhase',
                                                  'PatternIdList',
                                                  'RPath',
                                                  'VolumeOriginPath',
                                                  'AccountDomain',
                                                  'AccountObjectGuid',
                                                  'AccountObjectSid',
                                                  'DcNumAttachments',
                                                  'DcNumBlockingPolicies',
                                                  'ExtendedAttributeValueReadable',
                                                  'FileVaultIsEnabled',
                                                  'SamAccountName',
                                                  'ServiceDependOnService',
                                                  'ApplicationName',
                                                  'BluetoothDeviceName',
                                                  'BluetoothServiceUuid_1',
                                                  'BluetoothServiceUuid_2',
                                                  'BluetoothServiceUuid_3',
                                                  'BluetoothServiceUuid_4',
                                                  'BluetoothServiceUuid_5',
                                                  'BluetoothVendorIdSource',
                                                  'CommandCount',
                                                  'CommandCountMax',
                                                  'ConnectionAddressIP6',
                                                  'FirstCommand',
                                                  'LastAdded',
                                                  'LastDisplayed',
                                                  'ThreadStartBytes',
                                                  'VolumeDeviceVendor',
                                                  'BluetoothClassOfDeviceValue',
                                                  'BluetoothServiceName_3',
                                                  'BiosChanged',
                                                  'BluetoothServiceUuid_6',
                                                  'ChangedPcrBitmap',
                                                  'ExecutableBytes',
                                                  'ObjectNameEtw',
                                                  'ObjectTypeEtw',
                                                  'Pcr0',
                                                  'Pcr1',
                                                  'Pcr2',
                                                  'Pcr3',
                                                  'Pcr4',
                                                  'Pcr5',
                                                  'Pcr6',
                                                  'Pcr7',
                                                  'RpcOpClassification',
                                                  'ServiceAccessPropertiesEtw',
                                                  'ServiceDelayedAutoStart',
                                                  'SubjectDomainNameEtw',
                                                  'BluetoothDeviceAppearanceValue',
                                                  'BluetoothDeviceModelNumber',
                                                  'BluetoothServiceName_1',
                                                  'BluetoothServiceName_4',
                                                  'BluetoothServiceName_5',
                                                  'BluetoothServiceName_6',
                                                  'BluetoothServiceName_7',
                                                  'BluetoothServiceName_8',
                                                  'BluetoothServiceUuidArray',
                                                  'BluetoothServiceUuid_7',
                                                  'BluetoothServiceUuid_8',
                                                  'ClientId',
                                                  'HttpInternalSource',
                                                  'HttpMethod',
                                                  'HttpRequestHeader',
                                                  'HttpUrl',
                                                  'IndividualDiskInfo',
                                                  'KeyObject',
                                                  'LastPendingUpdateInstalledTime',
                                                  'LaunchItemType',
                                                  'LaunchItemUrl',
                                                  'LdapSearchFilterSample',
                                                  'MemoryAvailable',
                                                  'OciContainersStartedCount',
                                                  'OciContainersStoppedCount',
                                                  'PciConfigDataGenPmconA',
                                                  'PciConfigDataMesegBase',
                                                  'PciConfigDataSmramc',
                                                  'PendingUpdateIds',
                                                  'ProcessAttributes',
                                                  'QuarantinedFileExtendedState',
                                                  'QuarantinedFileName',
                                                  'QuarantinedFileState',
                                                  'RegCreateDisposition',
                                                  'RegCreateOptions',
                                                  'RegPostObjectName',
                                                  'RegRootObjectName',
                                                  'SourceThreadModule',
                                                  'StorageUsageInfo',
                                                  'SystemProcessCount',
                                                  'UninstallPendingUpdateIds']);
        for (String field: potential_long_fields) {
          if (ctx.crowdstrike.get(field) != null && ctx.crowdstrike[field].length() > ctx._conf.long_fields_max_length) {
            ctx.crowdstrike.remove(field);
          }
        }
  ## Cleanup.
  - remove:
      field: crowdstrike.event_platform
      ignore_missing: true
      ignore_failure: true
      if: ctx.host?.os?.type != null
  - remove:
      field:
        - log.file.path
        - log.offset
      if: ctx.aws?.s3?.bucket != null && ctx.aws.s3.object != null
      ignore_missing: true
      ignore_failure: true
  - remove:
      field:
        - agent.ephemeral_id
        - event.timezone
        - log.offset
      if: ctx._conf?.prune_fields == true
      ignore_missing: true
  - remove:
      field:
        - ecs.version
        - _temp
        - crowdstrike.timestamp
        - crowdstrike._time
        - crowdstrike.Time
        - crowdstrike.CreationTimeStamp
        - crowdstrike.DomainName
        - crowdstrike.ConnectionDirection
        - crowdstrike.UserIsAdmin
        - crowdstrike.UTCTimestamp
        - crowdstrike.TargetDirectoryName
        - _conf
      ignore_missing: true
  - script:
      tag: remove-nulls
      lang: painless
      description: This script processor iterates over the whole document to remove fields with null values.
      source: |
        void handleMap(Map map) {
          map.values().removeIf(v -> {
            if (v instanceof Map) {
                handleMap(v);
            } else if (v instanceof List) {
                handleList(v);
            }
            return v == null || v == '' || v == '-' || v == 'none' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        void handleList(List list) {
          list.removeIf(v -> {
            if (v instanceof Map) {
                handleMap(v);
            } else if (v instanceof List) {
                handleList(v);
            }
            return v == null || v == '' || v == '-' || v == 'none' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0)
          });
        }
        handleMap(ctx);
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
  - append:
      field: error.message
      value: "Processor '{{{ _ingest.on_failure_processor_type }}}' with tag '{{{ _ingest.on_failure_processor_tag }}}' failed with message {{{ _ingest.on_failure_message }}}"
