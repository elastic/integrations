stream_type: crowdstrike
url: {{url}}/sensors/entities/datafeed/v2
auth:
  client_id: {{client_id}}
  client_secret: {{client_secret}}
  token_url: {{token_url}}
crowdstrike_app_id: {{app_id}}
redact:
  fields: ~
program: |
  state.response.decode_json().as(body, {
    // Handle both old agent behaviour and new multi-resource cursors.
    ?"cursor": !has(state.feed) ?
      // Old behaviour: no feed key.
      body.?metadata.optMap(m, {"offset": m.offset})
    : has(body.metadata) ?
      // New behaviour with a cursor from the event.
      optional.of(state.?cursor.orValue({}).with({
        ?state.feed: body.?metadata.optMap(m, {"offset": m.offset}),
      }))
    :
      // New behaviour with no cursor; pass through.
      state.?cursor,
    "events": [{
          "message":  body.encode_json(),
    }],
  })
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
processors:
{{#if processors}}
{{processors}}
{{/if}}
