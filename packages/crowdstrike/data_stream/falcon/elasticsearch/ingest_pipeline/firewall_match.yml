---
processors:
  - set:
      field: event.kind
      value: event
  - append:
      field: event.category
      value: network
      tag: append_network_category
  - append:
      field: event.action
      value: firewall_match_event
      tag: append_firewall_match_event
  - append:
      field: event.type
      value:
        - start 
        - connection
      tag: append_start_connection_type
  - append:
      field: event.type
      value: allowed
      tag: append_allowed_type
      if: ctx.crowdstrike?.event?.RuleAction != null && ctx.crowdstrike?.event?.RuleAction == "1"
  - set:
      field: _tmp_.action
      value: "Allowed"
      tag: set_allowed_action
      if: ctx.crowdstrike?.event?.RuleAction != null && ctx.crowdstrike?.event?.RuleAction == "2"
  - append:
      field: event.type
      value: denied
      tag: append_denied_type
      if: ctx.crowdstrike?.event?.RuleAction != null && ctx.crowdstrike?.event?.RuleAction == "2"
  - set:
      field: _tmp_.action
      value: "Blocked"
      tag: set_blocked_action
      if: ctx.crowdstrike?.event?.RuleAction != null && ctx.crowdstrike?.event?.RuleAction == "2"
  - set:
      field: _tmp_.action
      value: "Unknown"
      tag: set_unknown_action
      if: ctx._tmp_?.action == null
  - set:
      field: message
      value: "Firewall Rule: '{{crowdstrike.event.RuleName}}' triggered - Action: '{{_tmp_.action}}'"
      tag: set_message
      if: ctx.crowdstrike?.event?.RuleName != null     
  - rename:
      field: crowdstrike.event.Ipv
      target_field: network.type
      ignore_missing: true
      tag: rename_ipv
  - convert:
      field: crowdstrike.event.PID
      target_field: process.pid
      type: long
      ignore_missing: true
      tag: convert_pid
  - set:
      value: '{{{crowdstrike.event.ImageFileName}}}'
      field: process.executable
      ignore_empty_value: true
      tag: set_process_executable_to_image_file_name
  - remove:
      field: crowdstrike.event.ImageFileName
      ignore_missing: true
      tag: remove_image_file_name
  - rename:
      field: crowdstrike.event.RuleId
      target_field: rule.id
      ignore_missing: true
      tag: rename_rule_id
  - rename:
      field: crowdstrike.event.RuleName
      target_field: rule.name
      ignore_missing: true
      tag: rename_rule_name
  - rename:
      field: crowdstrike.event.RuleGroupName
      target_field: rule.ruleset
      ignore_missing: true
      tag: rename_rule_group_name
  - rename:
      field: crowdstrike.event.RuleDescription
      target_field: rule.description
      ignore_missing: true
      tag: rename_rule_description
  - rename:
      field: crowdstrike.event.RuleFamilyID
      target_field: rule.category
      ignore_missing: true
      tag: rename_rule_family_id
  - rename:
      field: crowdstrike.event.HostName
      target_field: host.name
      ignore_missing: true
      tag: rename_host_name
  - rename:
      field: crowdstrike.event.EventType
      target_field: event.code
      ignore_missing: true
      tag: rename_event_type
  - set:
      field: network.direction
      value: ingress
      tag: set_ingress_direction
      if: ctx.crowdstrike?.event?.ConnectionDirection == "1"
  - rename:
      field: crowdstrike.event.RemoteAddress
      target_field: source.ip
      ignore_missing: true
      tag: rename_remote_address
      if: ctx.crowdstrike?.event?.RemoteAddress != null && ctx.network?.direction == "ingress"
  - rename:
      field: crowdstrike.event.LocalAddress
      target_field: destination.ip
      ignore_missing: true
      tag: rename_local_address
      if: ctx.crowdstrike?.event?.LocalAddress != null && ctx.network?.direction == "ingress"
  - convert:
      field: crowdstrike.event.LocalPort
      target_field: destination.port
      type: long
      ignore_missing: true
      tag: convert_local_port
      if: ctx.crowdstrike?.event?.LocalPort != null && ctx.network?.direction == "ingress"
  - convert:
      field: crowdstrike.event.RemotePort
      target_field: source.port
      type: long
      ignore_missing: true
      tag: convert_remote_port
      if: ctx.crowdstrike?.event?.RemotePort != null && ctx.network?.direction == "ingress"
  - set:
      field: network.direction
      value: egress
      tag: set_egress_direction
      if: ctx.crowdstrike?.event?.ConnectionDirection == "2"
  - rename:
      field: crowdstrike.event.RemoteAddress
      target_field: destination.ip
      ignore_missing: true
      tag: rename_remote_address
      if: ctx.crowdstrike?.event?.RemoteAddress != null && ctx.network?.direction == "egress"
  - rename:
      field: crowdstrike.event.LocalAddress
      target_field: source.ip
      ignore_missing: true
      tag: rename_local_address
      if: ctx.crowdstrike?.event?.LocalAddress != null && ctx.network?.direction == "egress"
  - convert:
      field: crowdstrike.event.LocalPort
      target_field: source.port
      type: long
      ignore_missing: true
      tag: convert_local_port
      if: ctx.crowdstrike?.event?.LocalPort != null && ctx.network?.direction == "egress"
  - convert:
      field: crowdstrike.event.RemotePort
      target_field: destination.port
      type: long
      ignore_missing: true
      tag: convert_remote_port
      if: ctx.crowdstrike?.event?.RemotePort != null && ctx.network?.direction == "egress"

on_failure:
  - append:
      field: error.message
      value: |-
        Processor "{{ _ingest.on_failure_processor_type }}" with tag "{{ _ingest.on_failure_processor_tag }}" in pipeline "{{ _ingest.on_failure_pipeline }}" failed with message "{{ _ingest.on_failure_message }}"
  - set:
      field: event.kind
      value: pipeline_error
