---
description: Ingest pipeline for normalizing CrowdStrike Falcon logs
processors:
  - set:
      field: ecs.version
      value: '8.8.0'
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - json:
      field: event.original
      target_field: crowdstrike
  - remove:
      field:
        - host.name
      ignore_missing: true
  - set:
      field: observer.vendor
      value: Crowdstrike
  - set:
      field: observer.product
      value: Falcon
  # Can be both string and int, depending on type, should always be string, field is mapped as keyword
  - convert:
      field: crowdstrike.event.IncidentType
      type: string
      ignore_missing: true
  # Can be both string and int, depending on type, should always be string, field is mapped as keyword
  - convert:
      field: crowdstrike.event.PatternId
      type: string
      ignore_missing: true

  # UTCTimestamp should exist in each event, however on the off-chance it might not be (Like RemoteSession Start/End), then we have to use eventCreation time.
  - date:
      field: crowdstrike.event.UTCTimestamp
      tag: date_utc_timestamp
      timezone: UTC
      formats:
        - UNIX_MS
      if: 'ctx.crowdstrike?.event?.UTCTimestamp != null && String.valueOf(ctx.crowdstrike.event.UTCTimestamp).length() >= 12'
  - date:
      field: crowdstrike.event.eventCreationTime
      target_field: event.created
      tag: date_event_creation_time
      timezone: UTC
      formats:
        - UNIX
      if: 'ctx.crowdstrike?.event?.eventCreationTime != null && String.valueOf(ctx.crowdstrike.event.eventCreationTime).length() <= 11'
  - set:
      field: '@timestamp'
      copy_from: event.created
      if: ctx.crowdstrike?.event?.UTCTimestamp == null && ctx.event?.created != null
  - script:
      lang: painless
      if: ctx.crowdstrike?.event != null
      params:
        values:
          - null
          - ''
          - '-'
          - 'N/A'
          - 'NA'
          - 0
      source: |
        ctx.crowdstrike.event.entrySet().removeIf(entry -> params.values.contains(entry.getValue()));
  - script:
      lang: painless
      if: ctx?.crowdstrike?.metadata != null
      params:
        values:
          - null
          - ''
          - '-'
          - 'N/A'
          - 'NA'
      source: |
        ctx.crowdstrike.metadata.entrySet().removeIf(entry -> params.values.contains(entry.getValue()));
  - script:
      lang: painless
      if: ctx.crowdstrike?.event?.CommandLine != null
      source: |
        def commandLine = ctx?.crowdstrike?.event?.CommandLine;
        commandLine = commandLine.trim();

        if (commandLine != "") {
          def args = new ArrayList(Arrays.asList(/ /.split(commandLine)));
          args.removeIf(arg -> arg == "");

          ctx.process = [
            'command_line': commandLine,
            'args': args,
            'executable': args.get(0)
          ]
        }

  - script:
      lang: painless
      if: ctx.crowdstrike?.event?.ParentCommandLine != null
      source: |
        def parentCommandLine = ctx?.crowdstrike?.event?.ParentCommandLine;
        parentCommandLine = parentCommandLine.trim();

        if (parentCommandLine != "") {
          def args = new ArrayList(Arrays.asList(/ /.split(parentCommandLine)));
          args.removeIf(arg -> arg == "");
          if (ctx.process == null) {
            ctx.process = new HashMap();
          }
          ctx.process.parent = [
            'command_line': parentCommandLine,
            'args': args,
            'executable': args.get(0)
          ]
        }

  - pipeline:
      name: '{{ IngestPipeline "detection_summary" }}'
      if: ctx.crowdstrike?.metadata?.eventType == "DetectionSummaryEvent"
  - pipeline:
      name: '{{ IngestPipeline "incident_summary" }}'
      if: ctx.crowdstrike?.metadata?.eventType == "IncidentSummaryEvent"
  - pipeline:
      name: '{{ IngestPipeline "user_activity_audit" }}'
      if: ctx.crowdstrike?.metadata?.eventType == "UserActivityAuditEvent"
  - pipeline:
      name: '{{ IngestPipeline "auth_activity_audit" }}'
      if: ctx.crowdstrike?.metadata?.eventType == "AuthActivityAuditEvent"
  - pipeline:
      name: '{{ IngestPipeline "firewall_match" }}'
      if: ctx.crowdstrike?.metadata?.eventType == "FirewallMatchEvent"
  - pipeline:
      name: '{{ IngestPipeline "remote_response_session_start" }}'
      if: ctx.crowdstrike?.metadata?.eventType == "RemoteResponseSessionStartEvent"
  - pipeline:
      name: '{{ IngestPipeline "remote_response_session_end" }}'
      if: ctx.crowdstrike?.metadata?.eventType == "RemoteResponseSessionEndEvent"
  - set:
      field: user.email
      copy_from: user.name
      if: ctx.user?.name != null && ctx.user?.name.contains("@")
  - append:
      field: related.user
      value: '{{user.name}}'
      allow_duplicates: false
      if: ctx.user?.name != null && ctx.user?.name != ""
  - append:
      field: related.ip
      value: '{{source.ip}}'
      allow_duplicates: false
      if: ctx.source?.ip != null && ctx.source?.ip != ""
  - append:
      field: related.ip
      value: '{{destination.ip}}'
      allow_duplicates: false
      if: ctx.destination?.ip != null && ctx.destination?.ip != ""
  - append:
      field: related.hosts
      value: '{{host.name}}'
      allow_duplicates: false
      if: ctx.host?.name != null && ctx.host?.name != ""
  - fingerprint:
      fields:
        - '@timestamp'
        - crowdstrike.event.SessionId
        - crowdstrike.event.DetectId
        - crowdstrike.metadata.eventType
        - crowdstrike.metadata.customerIDString
      target_field: _id
      ignore_missing: true
  - remove:
      field: event.original
      if: "ctx?.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: 
        - _tmp_
        - crowdstrike.event.Technique
        - crowdstrike.event.Tactic
        - crowdstrike.event.ParentCommandLine
        - crowdstrike.event.CommandLine
        - crowdstrike.event.ProcessStartTime
        - crowdstrike.event.IncidentStartTime
        - crowdstrike.event.ProcessEndTime
        - crowdstrike.event.IncidentEndTime
        - crowdstrike.metadata.eventCreationTime
        - crowdstrike.event.UTCTimestamp
        - crowdstrike.event.PID
        - crowdstrike.event.RemotePort
        - crowdstrike.event.LocalPort
        - crowdstrike.event.ConnectionDirection
        - crowdstrike.event.StartTimestamp
        - crowdstrike.event.EndTimestamp
      ignore_missing: true

on_failure:
  - append:
      field: error.message
      value: |-
        Processor "{{ _ingest.on_failure_processor_type }}" with tag "{{ _ingest.on_failure_processor_tag }}" in pipeline "{{ _ingest.on_failure_pipeline }}" failed with message "{{ _ingest.on_failure_message }}"
  - set:
      field: event.kind
      value: pipeline_error
