---
description: Ingest pipeline for normalizing CrowdStrike Falcon logs
processors:
  - set:
      field: ecs.version
      value: '8.9.0'
  - rename:
      field: message
      target_field: event.original
      tag: rename_message_to_event_original
      ignore_missing: true
  - json:
      field: event.original
      target_field: crowdstrike
      tag: decode_json
  - remove:
      field:
        - host.name
      ignore_missing: true
  - set:
      field: observer.vendor
      value: Crowdstrike
  - set:
      field: observer.product
      value: Falcon
  # Can be both string and int, depending on type, should always be string, field is mapped as keyword
  - convert:
      field: crowdstrike.event.IncidentType
      type: string
      tag: convert_incident_type
      ignore_missing: true
  # Can be both string and int, depending on type, should always be string, field is mapped as keyword
  - convert:
      field: crowdstrike.event.PatternId
      type: string
      tag: convert_pattern_id
      ignore_missing: true
  # Script to convert windows NT timestamp to unix timestamp
  - script:
        tag: convert-nt-timestamp-to-unix
        description: Convert Windows NT timestamps to UNIX timestamps for multiple fields.
        lang: painless
        if : ctx.crowdstrike?.event != null
        params:
            values:
                - 'StartTime'
                - 'EndTime'
                - 'ContextTimeStamp'
                - 'EndTimestamp'
                - 'IncidentEndTime'
                - 'IncidentStartTime'
                - 'ItemPostedTimestamp'
                - 'MatchedTimestamp'
                - 'MostRecentActivityTimeStamp'
                - 'PrecedingActivityTimeStamp'
                - 'StartTimestamp'
                - 'UTCTimestamp'
# Process to convert LDAP/WIN32 FILETIME to Unix (milliseconds) timestamp.
# More details can be found here https://devblogs.microsoft.com/oldnewthing/20030905-02/?p=42653 and here https://www.epochconverter.com/ldap
        source: |
            def convertToUnix(def longValue) {
                if (longValue > 0x0100000000000000L) {
                    return (longValue / 10000) - 11644473600000L;
                }
                return longValue;
            }

            for (def field : params.values) {
                def fieldValue = ctx.crowdstrike.event[field];
                if (fieldValue != null) {
                    if (fieldValue instanceof long) {
                         ctx.crowdstrike.event[field] = convertToUnix(fieldValue);
                    } else if (fieldValue instanceof String) {
                        if (!fieldValue.contains('.')) {
                           def timestamp = Long.parseLong(fieldValue);
                            ctx.crowdstrike.event[field] = convertToUnix(timestamp);
                        }
                    }
                } 
            }
  # Handle event Tags, which can be a string or a list of maps.
  - script:
      tag: convert-Tags-and-copy-to-tags
      description: Convert tags from nested type and append to ctx.tags.
      lang: painless
      if : ctx.crowdstrike?.event?.Tags != null
      source: |
            if (ctx.crowdstrike.event.Tags instanceof List) {
                for (tag in ctx.crowdstrike.event.Tags) {
                    if (tag instanceof Map) {
                      ctx.tags.add(tag["Key"] + ":" + tag["ValueString"]);
                    }
                }
            } else if (ctx.crowdstrike.event.Tags instanceof String) {
                def values = ctx.crowdstrike.event.Tags.splitOnToken(',');
                for (value in values) {
                    ctx.tags.add(value.trim());
                }
            }
  # UTCTimestamp should exist in each event, however on the off-chance it might not be (Like RemoteSession Start/End), then we have to use eventCreation time.
  - date:
      field: crowdstrike.event.UTCTimestamp
      timezone: UTC
      formats:
        - UNIX_MS
      tag: date_utc_timestamp
      if: 'ctx.crowdstrike?.event?.UTCTimestamp != null && String.valueOf(ctx.crowdstrike.event.UTCTimestamp).length() >= 12'
  - date:
      field: crowdstrike.event.UTCTimestamp
      timezone: UTC
      formats:
        - UNIX
      tag: date_utc_timestamp
      if: 'ctx.crowdstrike?.event?.UTCTimestamp != null && String.valueOf(ctx.crowdstrike.event.UTCTimestamp).length() <= 11'
  - date:
      field: crowdstrike.metadata.eventCreationTime
      target_field: event.created
      timezone: UTC
      formats:
        - UNIX
      tag: date_event_creation_time
      if: 'ctx.crowdstrike?.metadata?.eventCreationTime != null && String.valueOf(ctx.crowdstrike.metadata.eventCreationTime).length() <= 11'
  - date:
      field: crowdstrike.metadata.eventCreationTime
      target_field: event.created
      timezone: UTC
      formats:
        - UNIX_MS
      tag: date_event_creation_time
      if: 'ctx.crowdstrike?.metadata?.eventCreationTime != null && String.valueOf(ctx.crowdstrike.metadata.eventCreationTime).length() >= 12'
  - set:
      field: '@timestamp'
      copy_from: event.created
      tag: copy_timestamp_from_event_created
      if: ctx.crowdstrike?.event?.UTCTimestamp == null && ctx.event?.created != null
  - script:
      lang: painless
      tag: script_remove_null_event
      if: ctx.crowdstrike?.event != null
      params:
        values:
          - null
          - ''
          - '-'
          - 'N/A'
          - 'NA'
          - 0
      source: |
        ctx.crowdstrike.event.entrySet().removeIf(entry -> params.values.contains(entry.getValue()));
  - script:
      lang: painless
      tag: script_remove_null_metadata
      if: ctx.crowdstrike?.metadata != null
      params:
        values:
          - null
          - ''
          - '-'
          - 'N/A'
          - 'NA'
      source: |
        ctx.crowdstrike.metadata.entrySet().removeIf(entry -> params.values.contains(entry.getValue()));
  - script:
      lang: painless
      tag: script_enrich_command_line
      if: ctx.crowdstrike?.event?.CommandLine != null
      source: |
        def commandLine = ctx.crowdstrike?.event?.CommandLine;
        commandLine = commandLine.trim();

        if (commandLine != "") {
          def args = new ArrayList(Arrays.asList(/ /.split(commandLine)));
          args.removeIf(arg -> arg == "");

          ctx.process = [
            'command_line': commandLine,
            'args': args,
            'executable': args.get(0)
          ]
        }

  - script:
      lang: painless
      tag: script_enrich_command_line_parent
      if: ctx.crowdstrike?.event?.ParentCommandLine != null
      source: |
        def parentCommandLine = ctx.crowdstrike?.event?.ParentCommandLine;
        parentCommandLine = parentCommandLine.trim();

        if (parentCommandLine != "") {
          def args = new ArrayList(Arrays.asList(/ /.split(parentCommandLine)));
          args.removeIf(arg -> arg == "");
          if (ctx.process == null) {
            ctx.process = new HashMap();
          }
          ctx.process.parent = [
            'command_line': parentCommandLine,
            'args': args,
            'executable': args.get(0)
          ]
        }

  - pipeline:
      name: '{{ IngestPipeline "detection_summary" }}'
      tag: pipeline_detection_summary
      if: ctx.crowdstrike?.metadata?.eventType == "DetectionSummaryEvent"
  - pipeline:
      name: '{{ IngestPipeline "mobile_detection_summary" }}'
      tag: pipeline_mobile_detection_summary
      if: ctx.crowdstrike?.metadata?.eventType == "MobileDetectionSummaryEvent"
  - pipeline:
      name: '{{ IngestPipeline "incident_summary" }}'
      tag: pipeline_incident_summary
      if: ctx.crowdstrike?.metadata?.eventType == "IncidentSummaryEvent"
  - pipeline:
      name: '{{ IngestPipeline "xdr_detection_summary" }}'
      tag: pipeline_xdr_summary
      if: ctx.crowdstrike?.metadata?.eventType == "XdrDetectionSummaryEvent"
  - pipeline:
      name: '{{ IngestPipeline "ipd_detection_summary" }}'
      tag: pipeline_ipd_summary
      if: ctx.crowdstrike?.metadata?.eventType == "IdpDetectionSummaryEvent"
  - pipeline:
      name: '{{ IngestPipeline "recon_notification_summary" }}'
      tag: pipeline_recon_nofitication_summary
      if: ctx.crowdstrike?.metadata?.eventType == "ReconNotificationSummaryEvent"
  - pipeline:
      name: '{{ IngestPipeline "identity_protection_incident" }}'
      tag: pipeline_identity_protection_incident
      if: ctx.crowdstrike?.metadata?.eventType == "IdentityProtectionEvent"
  - pipeline:
      name: '{{ IngestPipeline "cspm_events" }}'
      tag: pipeline_cspm_events
      if: "['CSPMIOAStreamingEvent','CSPMSearchStreamingEvent'].contains(ctx.crowdstrike?.metadata?.eventType)"
  - pipeline:
      name: '{{ IngestPipeline "user_activity_audit" }}'
      tag: pipeline_user_activity_audit
      if: ctx.crowdstrike?.metadata?.eventType == "UserActivityAuditEvent"
  - pipeline:
      name: '{{ IngestPipeline "auth_activity_audit" }}'
      tag: pipeline_auth_activity_audit
      if: ctx.crowdstrike?.metadata?.eventType == "AuthActivityAuditEvent"
  - pipeline:
      name: '{{ IngestPipeline "firewall_match" }}'
      tag: pipeline_firewall_match
      if: ctx.crowdstrike?.metadata?.eventType == "FirewallMatchEvent"
  - pipeline:
      name: '{{ IngestPipeline "remote_response_session_start" }}'
      tag: pipeline_remote_response_session_start
      if: ctx.crowdstrike?.metadata?.eventType == "RemoteResponseSessionStartEvent"
  - pipeline:
      name: '{{ IngestPipeline "remote_response_session_end" }}'
      tag: pipeline_remote_response_session_end
      if: ctx.crowdstrike?.metadata?.eventType == "RemoteResponseSessionEndEvent"
  - set:
      field: user.email
      copy_from: user.name
      tag: copy_user_email
      if: ctx.user?.name != null && ctx.user?.name.contains("@")
  - append:
      field: related.user
      value: '{{user.name}}'
      allow_duplicates: false
      tag: append_related_user
      if: ctx.user?.name != null && ctx.user?.name != ""
  - append:
      field: related.ip
      value: '{{source.ip}}'
      allow_duplicates: false
      tag: append_related_src_ip
      if: ctx.source?.ip != null && ctx.source?.ip != ""
  - append:
      field: related.ip
      value: '{{destination.ip}}'
      allow_duplicates: false
      tag: append_related_dst_ip
      if: ctx.destination?.ip != null && ctx.destination?.ip != ""
  - append:
      field: related.hosts
      value: '{{host.name}}'
      allow_duplicates: false
      tag: append_related_host
      if: ctx.host?.name != null && ctx.host?.name != ""
  - fingerprint:
      fields:
        - '@timestamp'
        - crowdstrike.event.SessionId
        - crowdstrike.event.DetectId
        - crowdstrike.metadata.eventType
        - crowdstrike.metadata.customerIDString
      target_field: _id
      tag: fingerprint
      ignore_missing: true
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - geoip:
      field: destination.ip
      target_field: source.geo
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: source.as
      properties:
        - asn
        - organization_name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true
  - remove:
      field: event.original
      tag: remove_event_original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
  # This removes any fields that are mapped to ECS, but have not been renamed.
  # This is to prevent the fields from being duplicated in the event.
  - remove:
      field: 
        - _tmp_
        - crowdstrike.event.Technique
        - crowdstrike.event.TechniqueId
        - crowdstrike.event.Tactic
        - crowdstrike.event.TacticId
        - crowdstrike.event.Techniques
        - crowdstrike.event.TechniqueIds
        - crowdstrike.event.Tactics
        - crowdstrike.event.TacticIds
        - crowdstrike.event.IPv6Addresses
        - crowdstrike.event.IPv4Addresses
        - crowdstrike.event.ParentCommandLine
        - crowdstrike.event.CommandLine
        - crowdstrike.event.ProcessStartTime
        - crowdstrike.event.IncidentStartTime
        - crowdstrike.event.HostNames
        - crowdstrike.event.DomainNames
        - crowdstrike.event.Users
        - crowdstrike.event.SHA256Hashes
        - crowdstrike.event.MD5Hashes
        - crowdstrike.event.Author
        - crowdstrike.event.ProcessEndTime
        - crowdstrike.event.IncidentEndTime
        - crowdstrike.metadata.eventCreationTime
        - crowdstrike.event.UTCTimestamp
        - crowdstrike.event.ContextTimeStamp
        - crowdstrike.event.PID
        - crowdstrike.event.RemotePort
        - crowdstrike.event.LocalPort
        - crowdstrike.event.ConnectionDirection
        - crowdstrike.event.StartTimestamp
        - crowdstrike.event.StartTimeEpoch
        - crowdstrike.event.AdditionalAccountDomain
        - crowdstrike.event.AdditionalAccountName
        - crowdstrike.event.AdditionalEndpointHostName
        - crowdstrike.event.AdditionalEndpointIpAddress
        - crowdstrike.event.AttemptOutcome
        - crowdstrike.event.EndTimeEpoch
        - crowdstrike.event.EndTimestamp
        - crowdstrike.event.EndTime
        - crowdstrike.event.EventCreatedTimestamp
        - crowdstrike.event.StartTime
        - crowdstrike.event.Disposition
        - crowdstrike.event.MatchedTimestamp
        - crowdstrike.event.Tags
      ignore_missing: true

on_failure:
  - append:
      field: error.message
      value: |-
        Processor "{{ _ingest.on_failure_processor_type }}" with tag "{{ _ingest.on_failure_processor_tag }}" in pipeline "{{ _ingest.on_failure_pipeline }}" failed with message "{{ _ingest.on_failure_message }}"
  - set:
      field: event.kind
      value: pipeline_error
