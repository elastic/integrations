inputs:
    - data_stream:
        namespace: ep
      meta:
        package:
            name: crowdstrike
      name: test-default-crowdstrike
      streams:
        - auth.oauth2:
            client.id: test_client_id
            client.secret: ${SECRET_0}
            token_url: http://host.tld/oauth2/token
          config_version: 2
          data_stream:
            dataset: crowdstrike.vulnerability
            type: logs
          interval: 5m
          program: |-
            (
              state.?want_more.orValue(false) ?
                state
              :
                state.with(
                  {
                    "start_time": state.?cursor.last_timestamp.orValue((now - duration(state.initial_interval)).format(time_layout.RFC3339)),
                  }
                )
            ).as(state,
              state.with(
                request(
                  "GET",
                  state.url.trim_right("/") + "/spotlight/queries/vulnerabilities/v1?" + {
                    "sort": ["updated_timestamp|asc"],
                    ?"after": (state.?nextPageToken.orValue("") != "") ? optional.of([state.?nextPageToken]) : optional.none(),
                    "limit": [string(state.batch_size)],
                    "filter": [
                      [
                        "updated_timestamp:>\"" + state.start_time + "\"",
                        ?state.?query.optMap(q, "(" + q + ")"),
                      ].join("+"),
                    ],
                  }.format_query()
                ).do_request().as(resp, (resp.StatusCode == 200) ?
                  bytes(resp.Body).decode_json().as(body,
                    {
                      "resources": (body.resources.size() > 0) ? body.resources : [],
                      "nextPageToken": (body.meta.pagination.after != "") ? body.meta.pagination.after : "",
                      "events": [],
                      "want_more": (body.meta.pagination.after != "") ? true : false,
                    }
                  )
                :
                  {
                    "events": {
                      "error": {
                        "code": string(resp.StatusCode),
                        "id": string(resp.Status),
                        "message": "GET " + state.url.trim_right("/") + "/spotlight/queries/vulnerabilities/v1:" + (
                          (size(resp.Body) != 0) ?
                            string(resp.Body)
                          :
                            string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                        ),
                      },
                    },
                    "resources": [],
                    "nextPageToken": "",
                    "want_more": false,
                  }
                )
              ).as(state,
                state.with(
                  !(has(state.resources) && state.resources.size() > 0) ? // Exit early due to GET failure or no resources to collect.
                    state
                  :
                    request(
                      "GET",
                      state.url.trim_right("/") + "/spotlight/entities/vulnerabilities/v2?" + {
                        "ids": state.resources,
                      }.format_query()
                    ).do_request().as(resp, (resp.StatusCode == 200) ?
                      bytes(resp.Body).decode_json().as(body,
                        {
                          "events": body.resources.map(e,
                            {
                              "message": e.encode_json(),
                            }
                          ),
                          "cursor": {
                            ?"last_timestamp": (has(body.resources) && body.resources.size() > 0) ?
                              optional.of(body.resources.map(e, timestamp(e.updated_timestamp)).max().format(time_layout.RFC3339))
                            :
                              state.?cursor.last_timestamp,
                          },
                        }
                      )
                    :
                      {
                        "events": {
                          "error": {
                            "code": string(resp.StatusCode),
                            "id": string(resp.Status),
                            "message": "GET " + state.url.trim_right("/") + "/spotlight/entities/vulnerabilities/v2:" + (
                              (size(resp.Body) != 0) ?
                                string(resp.Body)
                              :
                                string(resp.Status) + " (" + string(resp.StatusCode) + ")"
                            ),
                          },
                        },
                        "resources": [],
                        "nextPageToken": "",
                        "want_more": false,
                      }
                    )
                )
              )
            )
          publisher_pipeline.disable_host: true
          redact:
            fields: null
          resource.ssl: null
          resource.timeout: 30s
          resource.tracer:
            enabled: false
            filename: ../../logs/cel/http-request-trace-*.ndjson
            maxbackups: 5
          resource.url: http://host.tld
          state:
            batch_size: 400
            initial_interval: 24h
          tags:
            - preserve_original_event
            - preserve_duplicate_custom_fields
            - forwarded
            - crowdstrike-vulnerability
      type: cel
      use_output: default
output_permissions:
    default:
        _elastic_agent_checks:
            cluster:
                - monitor
        _elastic_agent_monitoring:
            indices: []
        uuid-for-permissions-on-related-indices:
            indices:
                - names:
                    - logs-crowdstrike.vulnerability-ep
                  privileges:
                    - auto_configure
                    - create_doc
secret_references:
    - {}
