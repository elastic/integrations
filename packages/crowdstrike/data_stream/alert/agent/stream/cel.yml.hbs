config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
auth.oauth2:
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{token_url}}
state:
  initial_interval: {{initial_interval}}
  want_more: false
  offset: 0
  batch_size: {{batch_size}}
redact:
  fields: ~
program: |
  state.with(
    (
      !state.want_more ?
        request(
          "GET",
          state.url.trim_right("/") + "/alerts/queries/alerts/v2?" + {
            "sort": ["timestamp|asc"],
            "offset": ["0"],
            "limit": [string(state.batch_size)],
            "filter": ['timestamp:>"'+state.?cursor.last_timestamp.orValue(string(now - duration(state.initial_interval)))+'"'],
          }.format_query()
        )
      :
        request(
          "GET",
          state.url.trim_right("/") + "/alerts/queries/alerts/v2?" + {
            "sort": ["timestamp|asc"],
            "offset": [string(state.offset)],
            "limit": [string(state.batch_size)],
            ?"filter": has(state.?cursor.first_timestamp) ? optional.of(['timestamp:>"'+state.cursor.first_timestamp+'"']) : optional.none(),
          }.format_query()
        )
    ).do_request().as(get_resp, get_resp.StatusCode == 200 ?
      bytes(get_resp.Body).decode_json().as(body, {
        ?"resources": has(body.resources) && body.resources.size() > 0 ? optional.of(body.resources) : optional.none(),
        "want_more": ((int(state.offset) + body.resources.size()) < body.meta.pagination.total),
        "offset": ((int(state.offset) + body.resources.size()) < body.meta.pagination.total) ?
          int(state.offset) + body.resources.size()
        :
          0,
      })
    :
      {
        "events": {
          "error": {
            "code": string(get_resp.StatusCode),
            "id": string(get_resp.Status),
            "message": "GET:"+(
              size(get_resp.Body) != 0 ?
                string(get_resp.Body)
              :
                string(get_resp.Status) + ' (' + string(get_resp.StatusCode) + ')'
            ),
          },
        },
        "want_more": false,
      }
    )
  ).as(state, state.with(
    !has(state.resources) ? state : // Exit early due to GET failure or no resources to collect.
      post_request(
        state.url.trim_right("/") + "/alerts/entities/alerts/v2",
        "application/json",
        {"composite_ids": state.resources}.encode_json()
      ).do_request().as(post_resp, post_resp.StatusCode == 200 ?
        bytes(post_resp.Body).decode_json().as(inner_body, {
          "events": inner_body.resources.map(e, {
            "message": e.encode_json(),
          }),
          "cursor": {
            ?"last_timestamp": (
              has(inner_body.resources) && inner_body.resources.size() > 0 ?
                optional.of(inner_body.resources.map(e, e.timestamp).max())
              :
                state.?cursor.last_timestamp
            ),
            "first_timestamp": (
              state.?cursor.first_timestamp.orValue(null) != null ?
                (state.want_more ? state.cursor.first_timestamp : state.cursor.last_timestamp)
              :
                string(now - duration(state.initial_interval))
            ),
          },
        })
      :
        {
          "events": {
            "error": {
              "code": string(post_resp.StatusCode),
              "id": string(post_resp.Status),
              "message": "POST:"+(
                size(post_resp.Body) != 0 ?
                  string(post_resp.Body)
                :
                  string(post_resp.Status) + ' (' + string(post_resp.StatusCode) + ')'
              ),
            },
          },
          "want_more": false,
        }
      )
    )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
