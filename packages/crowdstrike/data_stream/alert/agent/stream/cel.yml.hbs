config_version: 2
interval: {{interval}}
resource.tracer:
  enabled: {{enable_request_tracer}}
  filename: "../../logs/cel/http-request-trace-*.ndjson"
  maxbackups: 5
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
auth.oauth2:
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{token_url}}
state:
  initial_interval: {{initial_interval}}
  batch_size: {{batch_size}}
{{#if query}}
  query: {{query}}
{{/if}}
redact:
  fields: ~
program: |-
  state.with(
    (
      state.?want_more.orValue(false) ?
        state.start_time
      :
        state.?cursor.last_timestamp.orValue(
          (now - duration(state.initial_interval)).format(time_layout.RFC3339Nano)
        )
    ).as(start_time,
      post_request(
        state.url.trim_right("/") + "/alerts/combined/alerts/v1?",
        "application/json",
        {
          ?"after": state.?next.page_token,
          "limit": int(state.batch_size),
          "sort": "updated_timestamp|asc",
          "filter": [
            "updated_timestamp:>'" + start_time + "'",
            ?state.?query.optMap(q, "(" + q + ")"),
          ].join("+"),
        }.encode_json()
      ).do_request().as(resp, (resp.StatusCode == 200) ?
        resp.Body.decode_json().as(body,
          (size(body.?errors.orValue([])) > 0) ?
            {
              "events": body.errors.map(error,
                {
                  "error": {
                    "code": string(error.code),
                    "message": string(error.message),
                  },
                }
              ),
              "next": {},
              "want_more": false,
            }
          :
            {
              "events": has(body.resources) ?
                body.resources.map(e,
                  {
                    "message": e.encode_json(),
                  }
                )
              :
                [],
              "start_time": start_time,
              "next": {
                ?"page_token": body.?meta.pagination.after,
              },
              "cursor": {
                // The records are sorted in ascending order based on the value of updated_timestamp,
                // in the next interval we start from the last event (newest) time.
                ?"last_timestamp": (has(body.resources) && body.resources.size() > 0) ?
                  optional.of(timestamp(body.resources[size(body.resources) - 1].updated_timestamp).format(time_layout.RFC3339Nano))
                :
                  state.?cursor.last_timestamp,
              },
              "want_more": has(body.?meta.pagination.after),
            }
        )
      :
        {
          "events": {
            "error": {
              "code": string(resp.StatusCode),
              "id": string(resp.Status),
              "message": "POST " + state.url.trim_right("/") + "/alerts/combined/alerts/v1:" + (
                (size(resp.Body) != 0) ?
                  string(resp.Body)
                :
                  string(resp.Status) + " (" + string(resp.StatusCode) + ")"
              ),
            },
          },
          "next": {},
          "want_more": false,
        }
      )
    )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
