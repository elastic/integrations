config_version: 2
interval: {{interval}}
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
request.tracer.maxbackups: 5
{{/if}}
{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}
{{#if ssl}}
resource.ssl: {{ssl}}
{{/if}}
{{#if http_client_timeout}}
resource.timeout: {{http_client_timeout}}
{{/if}}
resource.url: {{url}}
auth.oauth2:
  client.id: {{client_id}}
  client.secret: {{client_secret}}
  token_url: {{token_url}}
state:
  initial_interval: {{initial_interval}}
  want_more: false
  offset: 0
  batch_size: {{batch_size}}
redact:
  fields: ~
program: |
  (
    state.with(
      (
        !state.want_more ?
          request("GET", state.url + "/devices/queries/devices/v1?sort=modified_timestamp.asc&offset=0&limit=" + string(state.batch_size) + '&filter=modified_timestamp:>"' + (
            has(state.cursor) && has(state.cursor.last_timestamp) && state.cursor.last_timestamp != null ?
              state.cursor.last_timestamp + '"'
            :
              (now - duration(state.initial_interval)).format(time_layout.RFC3339) + '"'
          ))
        :
          request("GET", state.url + "/devices/queries/devices/v1?sort=modified_timestamp.asc&offset=" + string(state.offset) + "&limit=" + string(state.batch_size) + '&filter=modified_timestamp:>"' + (
            has(state.cursor) && has(state.cursor.first_timestamp) && state.cursor.first_timestamp != null ?
              state.cursor.first_timestamp + '"'
            :
              '"'
          ))
      ).do_request().as(resp, bytes(resp.Body).decode_json().as(body, {
        "resources": has(body.resources) && body.resources.size() > 0 ? body.resources : "",
        "want_more": ((int(state.offset) + body.resources.size()) < body.meta.pagination.total),
        "offset": ((int(state.offset) + body.resources.size()) < body.meta.pagination.total) ?
          int(state.offset) + int(body.resources.size())
        :
          0,
        "url": state.url,
        "batch_size": state.batch_size,
        "initial_interval": state.initial_interval,
      }))
    ).as(state, state.with(
      !has(state.resources) || state.resources == "" ? {"events": []} :
        post_request(
          state.url + "/devices/entities/devices/v2",
          "application/json",
          {"ids": state.resources }.encode_json()
        ).do_request().as(resp, bytes(resp.Body).decode_json().as(inner_body, {
           "events": inner_body.resources.map(e, {
             "message": e.encode_json(),
           }),
           "cursor": {
              "last_timestamp": (
                has(inner_body.resources) && inner_body.resources.size() > 0 ?
                  inner_body.resources.map(e, e.modified_timestamp).max()
                : has(state.cursor) && has(state.cursor.last_timestamp) ?
                  state.cursor.last_timestamp
                :
                  null
              ),
              "first_timestamp": (
                has(state.cursor) && has(state.cursor.first_timestamp) && state.cursor.first_timestamp != null ?
                  ( state.want_more ? state.cursor.first_timestamp : state.cursor.last_timestamp )
                :
                  (now - duration(state.initial_interval)).format(time_layout.RFC3339)
              ),
           },
        }))
      )
    )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
