---
description: Pipeline for ingesting BBOT ndjson files.

processors:
####################
# Basic ECS Fields #
####################

- set:
    field: ecs.version
    value: 8.11.0

- set:
    field: event.kind
    value: asset

########################
# JSON Object Handling #
########################

# if we consumed from logfile we'll have message and no json object
# if we consumed from http_endpoint we'll have a json object already
- json:
    description: Log file ingest method will read lines from file into the message field
    if: ctx.message != null && ctx.json == null
    field: message
    target_field: json

# regardless of file input or HTTP input JSON should now exist, fail if not
- fail:
    description: Provide a more useful error message if json object is missing
    if: ctx.json == null || !(ctx.json instanceof Map)
    message: missing json object in input document

# move the whole json blob to our custom top level name
- rename:
    field: json
    target_field: bbot
    ignore_missing: true

##################
# event.original #
##################

# if we consumed from logfile we'll have message and no event.original value
# if we consumed from http_endpoint we'll have a event.original value already
- rename:
    description: Store message as event.original, if message exists and if event.original does not already exist
    field: message
    target_field: event.original
    ignore_missing: true
    if: ctx.event?.original == null

########################
# Timestamp Extraction #
########################

# if it's a bbot v1 event this will be UNIX timestamp float, conversion required
# if it's a bbot v2 event this will already be an ISO8601 string, there's no harm in conversion
- convert:
    description: Ensure bbot.timestamp will be a string
    field: bbot.timestamp
    ignore_missing: true
    type: string

# now that we have a string, convert as needed
- date:
    field: bbot.timestamp
    formats:
    - UNIX
    - ISO8601
    ignore_failure: false

####################################################
# Ensure BBOT v1.x & v2.x SCAN event compatibility #
####################################################
- rename:
    description: "Avoid type conflict between BBOT v1.x (string/keyword) and v2.x (object)"
    if: ctx.bbot?.data?.SCAN instanceof Map
    field: bbot.data.SCAN
    target_field: bbot.data.SCAN_CONFIG
    ignore_missing: true

- set:
    description: "Set bbot.data.SCAN based on bbot.data.SCAN_CONFIG to emulate BBOT v1.x field type"
    if: ctx.bbot?.data?.SCAN == null && ctx.bbot?.data?.SCAN_CONFIG?.name != null && ctx.bbot?.data?.SCAN_CONFIG?.id != null
    field: bbot.data.SCAN
    value: "{{{bbot.data.SCAN_CONFIG.name}}} ({{{bbot.data.SCAN_CONFIG.id}}})"

#################
# Sub-Pipelines #
#################

# NOTE: The final processor in the ecs pipeline lowercases the keys for all first level objects under bbot.data, e.g. bbot.SCAN becomes bbot.scan
- pipeline:
    description: All ECS mapping is now done in a separate pipeline for sanity, this could be further split to per event type pipelines if things get more complicated.
    name: '{{ IngestPipeline "ecs" }}'

###########
# Cleanup #
###########
- script:
    description: Drops null/empty values recursively to minimise event size
    lang: painless
    source: |
        boolean dropEmptyFields(Object object) {
          if (object == null || object == '') {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);
    tag: 'Remove null/empty values recursively.'
    on_failure:
    - append:
        field: error.message
        value: "fail-{{{ _ingest.on_failure_processor_tag }}}"
    - fail:
        message: 'Processor {{{ _ingest.on_failure_processor_type }}} with tag {{{ _ingest.on_failure_processor_tag }}} in pipeline {{{ _ingest.on_failure_pipeline }}} failed with message: {{{ _ingest.on_failure_message }}}'

- remove:
    description: "Remove temporary and other unnecessary fields"
    field:
        - _tmp
        - _config
    ignore_missing: true

- remove:
    description: "Remove message if we have event.original"
    field: message
    ignore_missing: true
    if: ctx.event?.original != null

- remove:
    description: "Remove json if we have bbot"
    field: json
    ignore_missing: true
    if: ctx.bbot != null

- remove:
    description: "Remove ECS mapped fields unless tags indicate not to"
    field:
        - bbot.timestamp
        - bbot.data.ip_address
        - bbot.data.protocol.port
        - bbot.data.vulnerability.severity
        - bbot.data.dns_name
        - bbot.resolved_hosts
    if: ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))
    ignore_missing: true

on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
  - append:
      field: error.message
      value: 'Processor {{{ _ingest.on_failure_processor_type }}} with tag {{{ _ingest.on_failure_processor_tag }}} in pipeline {{{ _ingest.on_failure_pipeline }}} failed with message: {{{ _ingest.on_failure_message }}}'
