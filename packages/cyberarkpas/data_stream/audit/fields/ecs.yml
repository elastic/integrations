- name: destination
  type: group
  fields:
    - name: as
      type: group
      fields:
        - name: number
          level: extended
          type: long
          description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
          example: 15169
        - name: organization
          type: group
          fields:
            - name: name
              level: extended
              type: keyword
              ignore_above: 1024
              multi_fields:
                - name: text
                  type: text
                  norms: false
                  default_field: false
              description: Organization name.
              example: Google LLC
    - name: address
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Some event destination addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.

        Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.'
    - name: domain
      level: core
      type: keyword
      ignore_above: 1024
      description: Destination domain.
    - name: geo
      type: group
      fields:
        - name: city_name
          level: core
          type: keyword
          ignore_above: 1024
          description: City name.
          example: Montreal
        - name: continent_name
          level: core
          type: keyword
          ignore_above: 1024
          description: Name of the continent.
          example: North America
        - name: country_iso_code
          level: core
          type: keyword
          ignore_above: 1024
          description: Country ISO code.
          example: CA
        - name: country_name
          level: core
          type: keyword
          ignore_above: 1024
          description: Country name.
          example: Canada
        - name: location
          level: core
          type: geo_point
          description: Longitude and latitude.
          example: '{ "lon": -73.614830, "lat": 45.505918 }'
        - name: region_iso_code
          level: core
          type: keyword
          ignore_above: 1024
          description: Region ISO code.
          example: CA-QC
        - name: region_name
          level: core
          type: keyword
          ignore_above: 1024
          description: Region name.
          example: Quebec
    - name: ip
      level: core
      type: ip
      description: IP address of the destination (IPv4 or IPv6).
    - name: user
      type: group
      fields:
        - name: name
          level: core
          type: keyword
          ignore_above: 1024
          multi_fields:
            - name: text
              type: text
              norms: false
              default_field: false
          description: Short name or login of the user.
          example: albert
- name: error
  type: group
  fields:
    - name: message
      level: core
      type: text
      description: Error message.
- name: event
  type: group
  fields:
    - name: ingested
      level: core
      type: date
      description: 'Timestamp when an event arrived in the central data store.

        This is different from `@timestamp`, which is when the event originally occurred.  It''s also different from `event.created`, which is meant to capture the first time an agent saw the event.

        In normal conditions, assuming no tampering, the timestamps should chronologically look like this: `@timestamp` < `event.created` < `event.ingested`.'
      example: '2016-05-23T08:05:35.101Z'
      default_field: false
    - name: original
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Raw text message of entire event. Used to demonstrate log integrity.

        This field is not indexed and doc_values are disabled. It cannot be searched, but it can be retrieved from `_source`. If users wish to override this and index this field, consider using the wildcard data type.'
      example: Sep 19 08:26:10 host CEF:0&#124;Security&#124; threatmanager&#124;1.0&#124;100&#124; worm successfully stopped&#124;10&#124;src=10.0.0.1 dst=2.1.2.2spt=1232
      index: false
    - name: action
      level: core
      type: keyword
      ignore_above: 1024
      description: 'The action captured by the event.

        This describes the information in the event. It is more specific than `event.category`. Examples are `group-add`, `process-started`, `file-created`. The value is normally defined by the implementer.'
      example: user-password-change
    - name: category
      level: core
      type: keyword
      ignore_above: 1024
      description: 'This is one of four ECS Categorization Fields, and indicates the second level in the ECS category hierarchy.

        `event.category` represents the "big buckets" of ECS categories. For example, filtering on `event.category:process` yields all events relating to process activity. This field is closely related to `event.type`, which is used as a subcategory.

        This field is an array. This will allow proper categorization of some events that fall in multiple categories.'
      example: authentication
    - name: code
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Identification code for this event, if one exists.

        Some event sources use event codes to identify messages unambiguously, regardless of message language or wording adjustments over time. An example of this is the Windows Event ID.'
      example: 4648
    - name: dataset
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Name of the dataset.

        If an event source publishes more than one type of log or events (e.g. access log, error log), the dataset is used to specify which one the event comes from.

        It''s recommended but not required to start the dataset name with the module name, followed by a dot, then the dataset name.'
      example: apache.access
    - name: duration
      level: core
      type: long
      format: duration
      input_format: nanoseconds
      output_format: asMilliseconds
      output_precision: 1
      description: 'Duration of the event in nanoseconds.

        If event.start and event.end are known this value should be the difference between the end and start time.'
    - name: kind
      level: core
      type: keyword
      ignore_above: 1024
      description: 'This is one of four ECS Categorization Fields, and indicates the highest level in the ECS category hierarchy.

        `event.kind` gives high-level information about what type of information the event contains, without being specific to the contents of the event. For example, values of this field distinguish alert events from metric events.

        The value of this field can be used to inform how these kinds of events should be handled. They may warrant different retention, different access control, it may also help understand whether the data coming in at a regular interval or not.'
      example: alert
    - name: module
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Name of the module this data is coming from.

        If your monitoring agent supports the concept of modules or plugins to process events of a given source (e.g. Apache logs), `event.module` should contain the name of this module.'
      example: apache
    - name: outcome
      level: core
      type: keyword
      ignore_above: 1024
      description: 'This is one of four ECS Categorization Fields, and indicates the lowest level in the ECS category hierarchy.

        `event.outcome` simply denotes whether the event represents a success or a failure from the perspective of the entity that produced the event.

        Note that when a single transaction is described in multiple events, each event may populate different values of `event.outcome`, according to their perspective.

        Also note that in the case of a compound event (a single event that contains multiple logical events), this field should be populated with the value that best captures the overall success or failure from the perspective of the event producer.

        Further note that not all events will have an associated outcome. For example, this field is generally not populated for metric events, events with `event.type:info`, or any events for which an outcome does not make logical sense.'
      example: success
    - name: reason
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Reason why this event happened, according to the source.

        This describes the why of a particular action or outcome captured in the event. Where `event.action` captures the action from the event, `event.reason` describes why that action was taken. For example, a web proxy with an `event.action` which denied the request may also populate `event.reason` with the reason why (e.g. `blocked site`).'
      example: Terminated an unexpected process
      default_field: false
    - name: severity
      level: core
      type: long
      format: string
      description: 'The numeric severity of the event according to your event source.

        What the different severity values mean can be different between sources and use cases. It''s up to the implementer to make sure severities are consistent across events from the same source.

        The Syslog severity belongs in `log.syslog.severity.code`. `event.severity` is meant to represent the severity according to the event source (e.g. firewall, IDS). If the event source does not publish its own severity, you may optionally copy the `log.syslog.severity.code` to `event.severity`.'
      example: 7
    - name: timezone
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'This field should be populated when the event''s timestamp does not include timezone information already (e.g. default Syslog timestamps). It''s optional otherwise.

        Acceptable timezone formats are: a canonical ID (e.g. "Europe/Amsterdam"), abbreviated (e.g. "EST") or an HH:mm differential (e.g. "-05:00").'
    - name: type
      level: core
      type: keyword
      ignore_above: 1024
      description: 'This is one of four ECS Categorization Fields, and indicates the third level in the ECS category hierarchy.

        `event.type` represents a categorization "sub-bucket" that, when used along with the `event.category` field values, enables filtering events down to a level appropriate for single visualization.

        This field is an array. This will allow proper categorization of some events that fall in multiple event types.'
- name: observer
  type: group
  fields:
    - name: type
      level: core
      type: keyword
      ignore_above: 1024
      description: 'The type of the observer the data is coming from.

        There is no predefined list of observer types. Some examples are `forwarder`, `firewall`, `ids`, `ips`, `proxy`, `poller`, `sensor`, `APM server`.'
      example: firewall
    - name: vendor
      level: core
      type: keyword
      ignore_above: 1024
      description: Vendor name of the observer.
      example: Symantec
    - name: hostname
      level: core
      type: keyword
      ignore_above: 1024
      description: Hostname of the observer.
    - name: product
      level: extended
      type: keyword
      ignore_above: 1024
      description: The product name of the observer.
      example: s200
    - name: version
      level: core
      type: keyword
      ignore_above: 1024
      description: Observer version.
- name: related
  type: group
  fields:
    - name: ip
      level: extended
      type: ip
      description: All of the IPs seen on your event.
    - name: user
      level: extended
      type: keyword
      ignore_above: 1024
      description: All the user names seen on your event.
      default_field: false
- name: source
  type: group
  fields:
    - name: as
      type: group
      fields:
        - name: number
          level: extended
          type: long
          description: Unique number allocated to the autonomous system. The autonomous system number (ASN) uniquely identifies each network on the Internet.
          example: 15169
        - name: organization
          type: group
          fields:
            - name: name
              level: extended
              type: keyword
              ignore_above: 1024
              multi_fields:
                - name: text
                  type: text
                  norms: false
                  default_field: false
              description: Organization name.
              example: Google LLC
    - name: address
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'Some event source addresses are defined ambiguously. The event will sometimes list an IP, a domain or a unix socket.  You should always store the raw address in the `.address` field.

        Then it should be duplicated to `.ip` or `.domain`, depending on which one it is.'
    - name: geo
      type: group
      fields:
        - name: city_name
          level: core
          type: keyword
          ignore_above: 1024
          description: City name.
          example: Montreal
        - name: continent_name
          level: core
          type: keyword
          ignore_above: 1024
          description: Name of the continent.
          example: North America
        - name: country_iso_code
          level: core
          type: keyword
          ignore_above: 1024
          description: Country ISO code.
          example: CA
        - name: country_name
          level: core
          type: keyword
          ignore_above: 1024
          description: Country name.
          example: Canada
        - name: location
          level: core
          type: geo_point
          description: Longitude and latitude.
          example: '{ "lon": -73.614830, "lat": 45.505918 }'
        - name: region_iso_code
          level: core
          type: keyword
          ignore_above: 1024
          description: Region ISO code.
          example: CA-QC
        - name: region_name
          level: core
          type: keyword
          ignore_above: 1024
          description: Region name.
          example: Quebec
    - name: ip
      level: core
      type: ip
      description: IP address of the source (IPv4 or IPv6).
    - name: user
      type: group
      fields:
        - name: name
          level: core
          type: keyword
          ignore_above: 1024
          multi_fields:
            - name: text
              type: text
              norms: false
              default_field: false
          description: Short name or login of the user.
          example: albert
- name: tags
  level: core
  type: keyword
  ignore_above: 1024
  description: List of keywords used to tag each event.
  example: '["production", "env2"]'
- name: ecs
  type: group
  fields:
    - name: version
      level: core
      required: true
      type: keyword
      ignore_above: 1024
      description: 'ECS version this event conforms to. `ecs.version` is a required field and must exist in all events.

        When querying across multiple indices -- which may conform to slightly different ECS versions -- this field lets integrations adjust to the schema version of the events.'
      example: 1.0.0
- name: file
  type: group
  fields:
    - name: path
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
        - name: text
          type: text
          norms: false
          default_field: false
      description: Full path to the file, including the file name. It should include the drive letter, when appropriate.
      example: /home/alice/example.png
- name: host
  type: group
  fields:
    - name: name
      level: core
      type: keyword
      ignore_above: 1024
      description: 'Name of the host.

        It can contain what `hostname` returns on Unix systems, the fully qualified domain name, or a name specified by the user. The sender decides which value to use.'
- name: log
  type: group
  fields:
    - name: syslog
      type: group
      fields:
        - name: priority
          level: extended
          type: long
          format: string
          description: 'Syslog numeric priority of the event, if available.

            According to RFCs 5424 and 3164, the priority is 8 * facility + severity. This number is therefore expected to contain a value between 0 and 191.'
          example: 135
- name: network
  type: group
  fields:
    - name: application
      level: extended
      type: keyword
      ignore_above: 1024
      description: 'A name given to an application level protocol. This can be arbitrarily assigned for things like microservices, but also apply to things like skype, icq, facebook, twitter. This would be used in situations where the vendor or service can be decoded such as from the source/dest IP owners, ports, or wire format.

        The field value must be normalized to lowercase for querying. See the documentation section "Implementing ECS".'
      example: aim
    - name: direction
      level: core
      type: keyword
      ignore_above: 1024
      description: "Direction of the network traffic.\nRecommended values are:\n  * ingress\n  * egress\n  * inbound\n  * outbound\n  * internal\n  * external\n  * unknown\n\nWhen mapping events from a host-based monitoring context, populate this field from the host's point of view, using the values \"ingress\" or \"egress\".\nWhen mapping events from a network or perimeter-based monitoring context, populate this field from the point of view of the network perimeter, using the values \"inbound\", \"outbound\", \"internal\" or \"external\".\nNote that \"internal\" is not crossing perimeter boundaries, and is meant to describe communication between two hosts within the perimeter. Note also that \"external\" is meant to describe traffic between two hosts that are external to the perimeter. This could for example be useful for ISPs or VPN service providers."
      example: inbound
- name: process
  type: group
  fields:
    - name: name
      level: extended
      type: keyword
      ignore_above: 1024
      multi_fields:
        - name: text
          type: text
          norms: false
          default_field: false
      description: 'Process name.

        Sometimes called program name or similar.'
      example: ssh
    - name: pid
      level: core
      type: long
      format: string
      description: Process id.
      example: 4242
- name: service
  type: group
  fields:
    - name: type
      level: core
      type: keyword
      ignore_above: 1024
      description: 'The type of the service data is collected from.

        The type can be used to group and correlate logs and metrics from one service type.

        Example: If logs or metrics are collected from Elasticsearch, `service.type` would be `elasticsearch`.'
      example: elasticsearch
- name: user
  type: group
  fields:
    - name: name
      level: core
      type: keyword
      ignore_above: 1024
      multi_fields:
        - name: text
          type: text
          norms: false
          default_field: false
      description: Short name or login of the user.
      example: albert
    - name: target
      type: group
      fields:
        - name: name
          level: core
          type: keyword
          ignore_above: 1024
          multi_fields:
            - name: text
              type: text
              norms: false
          description: Short name or login of the user.
          example: albert
          default_field: false
