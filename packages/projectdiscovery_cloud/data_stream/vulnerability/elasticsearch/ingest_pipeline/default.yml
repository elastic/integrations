---
description: ProjectDiscovery Cloud vulnerability changelogs â†’ ECS

processors:
  # Parse JSON from message field (httpjson stores response as JSON string in message)
  - json:
      field: message
      target_field: json
      ignore_failure: true
  
  # Set standard Elastic metadata fields
  - set: { field: input.type, value: httpjson, if: "ctx?.input?.type == null" }
  - set: { field: event.module, value: projectdiscovery_cloud }
  - set: { field: event.dataset, value: projectdiscovery_cloud.vulnerability }
  - append: { field: tags, value: ["projectdiscovery-cloud", "vulnerability", "forwarded"], if: "ctx?.tags == null" }
  
  # Set ECS event fields
  - set: { field: event.kind, value: event }
  - set: { field: event.category, value: ["vulnerability"] }
  - set: { field: event.type, value: ["change"] }

  # Parse timestamp from raw json
  - date:
      field: json.created_at
      target_field: "@timestamp"
      formats: ["ISO8601"]
      ignore_failure: true

  # Rename and transform fields from parsed JSON
  - rename: { field: json.vuln_id, target_field: vulnerability.id, ignore_missing: true }
  - rename: { field: json.vuln_status, target_field: vulnerability.status, ignore_missing: true }
  - rename: { field: json.event.info.description, target_field: vulnerability.description, ignore_missing: true }
  - rename: { field: json.event.info.reference, target_field: vulnerability.reference, ignore_missing: true }
  - rename: { field: json.event.info.severity, target_field: vulnerability.severity, ignore_missing: true }
  - set:    { field: vulnerability.scanner.vendor, value: "ProjectDiscovery" }
  - set:    { field: vulnerability.scanner.type, value: "nuclei" }
  
  # Convert port to long before moving event object
  - convert: { field: json.event.port, type: long, ignore_missing: true, ignore_failure: true }
  
  # Copy server port to ECS (before moving entire event object)
  - set: { field: server.port, copy_from: json.event.port, ignore_empty_value: true, if: "ctx?.json?.event?.port != null" }
  
  # Copy vendor-specific fields to projectdiscovery namespace
  - rename: { field: json.target, target_field: projectdiscovery.target, ignore_missing: true }
  - rename: { field: json.vuln_hash, target_field: projectdiscovery.vuln_hash, ignore_missing: true }
  - rename: { field: json.scan_id, target_field: projectdiscovery.scan_id, ignore_missing: true }
  - rename: { field: json.template_url, target_field: projectdiscovery.template_url, ignore_missing: true }
  - rename: { field: json.matcher_status, target_field: projectdiscovery.matcher_status, ignore_missing: true }
  - rename: { field: json.created_at, target_field: projectdiscovery.created_at, ignore_missing: true }
  - rename: { field: json.updated_at, target_field: projectdiscovery.updated_at, ignore_missing: true }
  - rename: { field: json.change_event, target_field: projectdiscovery.change_event, ignore_missing: true }
  - rename: { field: json.event, target_field: projectdiscovery.event, ignore_missing: true }
  
  # Set clean message after processing
  - set: 
      field: message
      value: "ProjectDiscovery vulnerability changelog: {{vulnerability.id}} status changed to {{vulnerability.status}}"
      if: "ctx?.vulnerability?.id != null && ctx?.vulnerability?.status != null"
  - set:
      field: message
      value: "ProjectDiscovery vulnerability changelog event"
      if: "ctx?.vulnerability?.id == null"

on_failure:
  - set: { field: error.message, value: "{{ _ingest.on_failure_message }}" }
