package main

import (
	"encoding/json"
	"log"
	"net/http"
	"os"
	"strconv"
)

// Response structure matching ProjectDiscovery Cloud API
type VulnChangelogResponse struct {
	Data []map[string]interface{} `json:"data"`
}

var mockData []map[string]interface{}

func main() {
	port := os.Getenv("MOCK_API_PORT")
	if port == "" {
		port = "8080"
	}

	// Load mock data
	data, err := os.ReadFile("mock_data.json")
	if err != nil {
		log.Fatalf("Failed to read mock_data.json: %v", err)
	}

	var response VulnChangelogResponse
	if err := json.Unmarshal(data, &response); err != nil {
		log.Fatalf("Failed to parse mock_data.json: %v", err)
	}
	mockData = response.Data

	log.Printf("Starting ProjectDiscovery Cloud Mock API on port %s", port)
	log.Printf("Loaded %d mock vulnerability events", len(mockData))

	http.HandleFunc("/health", healthHandler)
	http.HandleFunc("/v1/scans/vuln/changelogs", changelogsHandler)

	log.Fatal(http.ListenAndServe(":"+port, nil))
}

func healthHandler(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	json.NewEncoder(w).Encode(map[string]string{"status": "healthy"})
}

func changelogsHandler(w http.ResponseWriter, r *http.Request) {
	// Validate authentication headers (case-insensitive)
	apiKey := r.Header.Get("x-api-key")
	if apiKey == "" {
		apiKey = r.Header.Get("X-API-Key")
	}
	teamID := r.Header.Get("x-team-id")
	if teamID == "" {
		teamID = r.Header.Get("X-Team-Id")
	}

	expectedAPIKey := os.Getenv("EXPECTED_API_KEY")
	expectedTeamID := os.Getenv("EXPECTED_TEAM_ID")

	if apiKey != expectedAPIKey || teamID != expectedTeamID {
		log.Printf("Authentication failed: api_key=%s, team_id=%s", apiKey, teamID)
		w.WriteHeader(http.StatusUnauthorized)
		json.NewEncoder(w).Encode(map[string]string{"error": "unauthorized"})
		return
	}

	// Parse pagination parameters
	limitStr := r.URL.Query().Get("limit")
	offsetStr := r.URL.Query().Get("offset")

	limit := 10
	offset := 0

	if limitStr != "" {
		if l, err := strconv.Atoi(limitStr); err == nil {
			limit = l
		}
	}
	if offsetStr != "" {
		if o, err := strconv.Atoi(offsetStr); err == nil {
			offset = o
		}
	}

	log.Printf("Request: limit=%d, offset=%d, time=%s", limit, offset, r.URL.Query().Get("time"))

	// Apply pagination
	end := offset + limit
	if end > len(mockData) {
		end = len(mockData)
	}
	if offset > len(mockData) {
		offset = len(mockData)
	}

	paginatedData := mockData[offset:end]

	log.Printf("Returning %d events (offset=%d)", len(paginatedData), offset)

	// Return response
	w.Header().Set("Content-Type", "application/json")
	response := VulnChangelogResponse{Data: paginatedData}
	json.NewEncoder(w).Encode(response)
}
