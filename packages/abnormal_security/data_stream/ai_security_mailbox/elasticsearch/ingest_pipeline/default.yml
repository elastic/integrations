---
description: Pipeline for processing ai security mailbox logs.
processors:
  - set:
      field: ecs.version
      tag: set_ecs_version
      value: 8.11.0
  - fail:
      tag: data_collection_error
      if: ctx.error?.message != null && ctx.message == null && ctx.event?.original == null
      message: error message set and no data to process.
  - rename:
      field: message
      tag: rename_message_to_event_original
      target_field: event.original
      ignore_missing: true
      description: Renames the original `message` field to `event.original` to store a copy of the original message. The `event.original` field is not touched if the document already has one; it may happen when Logstash sends the document.
      if: ctx.event?.original == null
  - remove:
      field: message
      tag: remove_message
      ignore_missing: true
      description: The `message` field is no longer required if the document has an `event.original` field.
      if: ctx.event?.original != null
  - json:
      field: event.original
      tag: json_event_original
      target_field: json
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - fingerprint:
      fields:
        - json.lastReported
        - json.campaignId
        - json.messageId
      tag: fingerprint_ai_security_mailbox
      target_field: _id
      ignore_missing: true
  - set:
      field: event.kind
      tag: set_event_kind_to_event
      value: event
  - set:
      field: observer.vendor
      tag: set_observer_vendor
      value: Abnormal
  - set:
      field: observer.product
      tag: set_observer_product
      value: Inbound Email Security
  - rename:
      field: json.attackType
      tag: rename_attackType
      target_field: abnormal_security.ai_security_mailbox.attack.type
      ignore_missing: true
  - append:
      field: threat.tactic.name
      tag: append_abnormal_security_ai_security_mailbox_attack_type_into_threat_tactic_name
      value: '{{{abnormal_security.ai_security_mailbox.attack.type}}}'
      allow_duplicates: false
      if: ctx.abnormal_security?.ai_security_mailbox?.attack?.type != null
  - rename:
      field: json.campaignId
      tag: rename_campaignId
      target_field: abnormal_security.ai_security_mailbox.campaign_id
      ignore_missing: true
  - date:
      field: json.firstReported
      tag: date_firstReported
      target_field: abnormal_security.ai_security_mailbox.first_reported
      formats:
        - ISO8601
      if: ctx.json?.firstReported != null && ctx.json.firstReported != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - rename:
      field: json.fromName
      tag: rename_fromName
      target_field: abnormal_security.ai_security_mailbox.from.name
      ignore_missing: true
  - grok:
      field: abnormal_security.ai_security_mailbox.from.name
      tag: grok_abnormal_security_ai_security_mailbox_from_name
      patterns:
        - '^%{EMAILADDRESS:user.email}$'
        - '^%{DATA:user.name}$'
      ignore_failure: true
  - append:
      field: related.user
      tag: append_abnormal_security_ai_security_mailbox_from_name_into_related_user
      value: '{{{abnormal_security.ai_security_mailbox.from.name}}}'
      allow_duplicates: false
      if: ctx.abnormal_security?.ai_security_mailbox?.from?.name != null
  - rename:
      field: json.judgementStatus
      tag: rename_judgementStatus
      target_field: abnormal_security.ai_security_mailbox.judgement_status
      ignore_missing: true
  - set:
      field: event.kind
      tag: set_event_kind_to_enrichment
      value: enrichment
      if: ctx.abnormal_security?.ai_security_mailbox?.judgement_status != null && ['spam','malicious'].contains(ctx.abnormal_security.ai_security_mailbox.judgement_status.toLowerCase())
  - append:
      field: event.category
      tag: append_event_category
      value: threat
      if: ctx.abnormal_security?.ai_security_mailbox?.judgement_status != null && ['spam','malicious'].contains(ctx.abnormal_security.ai_security_mailbox.judgement_status.toLowerCase())
  - append:
      field: event.type
      tag: append_event_type
      value: indicator
      if: ctx.abnormal_security?.ai_security_mailbox?.judgement_status != null && ['spam','malicious'].contains(ctx.abnormal_security.ai_security_mailbox.judgement_status.toLowerCase())
  - set:
      field: threat.indicator.type
      tag: set_threat_indicator_type_to_email-addr
      value: email-addr
      if: ctx.abnormal_security?.ai_security_mailbox?.judgement_status != null && ['spam','malicious'].contains(ctx.abnormal_security.ai_security_mailbox.judgement_status.toLowerCase())
  - rename:
      field: json.fromAddress
      tag: rename_fromAddress
      target_field: abnormal_security.ai_security_mailbox.from.address
      ignore_missing: true
  - append:
      field: email.from.address
      tag: append_abnormal_security_ai_security_mailbox_from_address_into_email_from_address
      value: '{{{abnormal_security.ai_security_mailbox.from.address}}}'
      allow_duplicates: false
      if: ctx.abnormal_security?.ai_security_mailbox?.from?.address != null
  - set:
      field: threat.indicator.email.address
      tag: set_threat_indicator_email_address_to_from_address
      copy_from: abnormal_security.ai_security_mailbox.from.address
      if: ctx.abnormal_security?.ai_security_mailbox?.judgement_status != null && ['spam','malicious'].contains(ctx.abnormal_security.ai_security_mailbox.judgement_status.toLowerCase())
  - set:
      field: threat.indicator.name
      tag: set_threat_indicator_name_to_from_address
      copy_from: abnormal_security.ai_security_mailbox.from.address
      if: ctx.abnormal_security?.ai_security_mailbox?.judgement_status != null && ['spam','malicious'].contains(ctx.abnormal_security.ai_security_mailbox.judgement_status.toLowerCase())
  - append:
      field: related.user
      tag: append_abnormal_security_ai_security_mailbox_from_address_into_related_user
      value: '{{{abnormal_security.ai_security_mailbox.from.address}}}'
      allow_duplicates: false
      if: ctx.abnormal_security?.ai_security_mailbox?.from?.address != null
  - date:
      field: json.lastReported
      tag: date_lastReported
      target_field: abnormal_security.ai_security_mailbox.last_reported
      formats:
        - ISO8601
      if: ctx.json?.lastReported != null && ctx.json.lastReported != ''
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: '@timestamp'
      tag: set_@timestamp_from_ai_security_mailbox_last_reported
      copy_from: abnormal_security.ai_security_mailbox.last_reported
      ignore_empty_value: true
  - convert:
      field: json.messageId
      tag: convert_messageId_to_string
      target_field: abnormal_security.ai_security_mailbox.message_id
      type: string
      ignore_missing: true
  - set:
      field: event.id
      tag: set_event_id_from_ai_security_mailbox_message_id
      copy_from: abnormal_security.ai_security_mailbox.message_id
      ignore_empty_value: true
  - rename:
      field: json.overallStatus
      tag: rename_overallStatus
      target_field: abnormal_security.ai_security_mailbox.overall_status
      ignore_missing: true
  - set:
      field: event.action
      tag: set_event_action_from_ai_security_mailbox_overall_status
      copy_from: abnormal_security.ai_security_mailbox.overall_status
      if: ctx.abnormal_security?.ai_security_mailbox?.overall_status?.toLowerCase() != 'no action needed'
      ignore_empty_value: true
  - lowercase:
      field: event.action
      tag: lowercase_event_action
      ignore_missing: true
  - rename:
      field: json.recipientAddress
      tag: rename_recipientAddress
      target_field: abnormal_security.ai_security_mailbox.recipient.address
      ignore_missing: true
  - append:
      field: email.to.address
      tag: append_abnormal_security_ai_security_mailbox_recipient_address_into_email_to_address
      value: '{{{abnormal_security.ai_security_mailbox.recipient.address}}}'
      allow_duplicates: false
      if: ctx.abnormal_security?.ai_security_mailbox?.recipient?.address != null
  - append:
      field: related.user
      tag: append_abnormal_security_ai_security_mailbox_recipient_address_into_related_user
      value: '{{{abnormal_security.ai_security_mailbox.recipient.address}}}'
      allow_duplicates: false
      if: ctx.abnormal_security?.ai_security_mailbox?.recipient?.address != null
  - rename:
      field: json.recipientName
      tag: rename_recipientName
      target_field: abnormal_security.ai_security_mailbox.recipient.name
      ignore_missing: true
  - grok:
      field: abnormal_security.ai_security_mailbox.recipient.name
      tag: grok_abnormal_security_ai_security_mailbox_recipient_name
      patterns:
        - '^%{EMAILADDRESS:destination.user.email}$'
        - '^%{DATA:destination.user.name}$'
      ignore_failure: true
  - append:
      field: related.user
      tag: append_abnormal_security_ai_security_mailbox_recipient_name_into_related_user
      value: '{{{abnormal_security.ai_security_mailbox.recipient.name}}}'
      allow_duplicates: false
      if: ctx.abnormal_security?.ai_security_mailbox?.recipient?.name != null
  - rename:
      field: json.subject
      tag: rename_subject
      target_field: abnormal_security.ai_security_mailbox.subject
      ignore_missing: true
  - set:
      field: email.subject
      tag: set_email_subject_from_ai_security_mailbox_subject
      copy_from: abnormal_security.ai_security_mailbox.subject
      ignore_empty_value: true
  - remove:
      field:
        - abnormal_security.ai_security_mailbox.attack.type
        - abnormal_security.ai_security_mailbox.from.address
        - abnormal_security.ai_security_mailbox.from.name
        - abnormal_security.ai_security_mailbox.last_reported
        - abnormal_security.ai_security_mailbox.message_id
        - abnormal_security.ai_security_mailbox.recipient.address
        - abnormal_security.ai_security_mailbox.recipient.name
        - abnormal_security.ai_security_mailbox.subject
        - abnormal_security.ai_security_mailbox.overall_status
      tag: remove_custom_duplicate_fields
      ignore_missing: true
      if: ctx.tags == null || !ctx.tags.contains('preserve_duplicate_custom_fields')
  - remove:
      field: json
      tag: remove_json
      ignore_missing: true
  - script:
      tag: script_to_drop_null_values
      lang: painless
      description: Drops null/empty values recursively.
      source: |-
        boolean drop(Object object) {
          if (object == null || object == '') {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(v -> drop(v));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(v -> drop(v));
            return (((List) object).length == 0);
          }
          return false;
        }
        drop(ctx);
  - set:
      field: event.kind
      value: pipeline_error
      tag: set_pipeline_error_into_event_kind
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag {{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.on_failure_pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.kind
      tag: set_pipeline_error_to_event_kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
