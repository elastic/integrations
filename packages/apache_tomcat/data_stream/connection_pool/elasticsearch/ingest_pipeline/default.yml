---
description: Pipeline for processing Connection Pool metrics.
processors:
  - set:
      field: ecs.version
      value: 8.7.0
  - set:
      field: event.kind
      value: metric
  - set:
      field: event.module
      value: apache_tomcat
  - set:
      field: event.type
      value: [info]
  - set:
      field: event.category
      value: [web]
  - rename:
      field: prometheus.labels.context
      target_field: apache_tomcat.connection_pool.application_name
      ignore_missing: true
  - set:
      field: apache_tomcat.connection_pool.access_to_underlying_connection_allowed
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_accessToUnderlyingConnectionAllowed == 1
  - set:
      field: apache_tomcat.connection_pool.access_to_underlying_connection_allowed
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_accessToUnderlyingConnectionAllowed == 0
  - rename:
      field: prometheus.metrics.Catalina_DataSource_cacheState
      target_field: apache_tomcat.connection_pool.cache.state
      ignore_missing: true
  - set:
      field: apache_tomcat.connection_pool.connection.remove_abandoned_on_borrow
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_removeAbandonedOnBorrow == 1
  - set:
      field: apache_tomcat.connection_pool.connection.remove_abandoned_on_borrow
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_removeAbandonedOnBorrow == 0
  - set:
      field: apache_tomcat.connection_pool.connection.abandoned_usage_tracking
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_abandonedUsageTracking == 1
  - set:
      field: apache_tomcat.connection_pool.connection.abandoned_usage_tracking
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_abandonedUsageTracking == 0
  - set:
      field: apache_tomcat.connection_pool.connection.autocommit_on_return
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_autoCommitOnReturn == 1
  - set:
      field: apache_tomcat.connection_pool.connection.autocommit_on_return
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_autoCommitOnReturn == 0
  - set:
      field: apache_tomcat.connection_pool.connection.closed
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_closed == 1
  - set:
      field: apache_tomcat.connection_pool.connection.closed
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_closed == 0
  - rename:
      field: prometheus.metrics.Catalina_DataSource_numActive
      target_field: apache_tomcat.connection_pool.connection.active.count
      ignore_missing: true
  - rename:
      field: prometheus.metrics.Catalina_DataSource_defaultTransactionIsolation
      target_field: apache_tomcat.connection_pool.connection.default_transaction_isolation
      ignore_missing: true
  - set:
      field: apache_tomcat.connection_pool.connection.enable_autocommit_on_return
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_enableAutoCommitOnReturn == 1
  - set:
      field: apache_tomcat.connection_pool.connection.enable_autocommit_on_return
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_enableAutoCommitOnReturn == 0
  - set:
      field: apache_tomcat.connection_pool.connection.fast_fail_validation
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_fastFailValidation == 1
  - set:
      field: apache_tomcat.connection_pool.connection.fast_fail_validation
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_fastFailValidation == 0
  - rename:
      field: prometheus.metrics.Catalina_DataSource_numIdle
      target_field: apache_tomcat.connection_pool.connection.idle.count
      ignore_missing: true
  - set:
      field: apache_tomcat.connection_pool.connection.idle.exists
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_logAbandoned == 1
  - set:
      field: apache_tomcat.connection_pool.connection.idle.exists
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_logAbandoned == 0
  - rename:
      field: prometheus.metrics.Catalina_DataSource_maxOpenPreparedStatements
      target_field: apache_tomcat.connection_pool.connection.idle.max.size
      ignore_missing: true
  - rename:
      field: prometheus.metrics.Catalina_DataSource_maxIdle
      target_field: apache_tomcat.connection_pool.connection.idle.max.count
      ignore_missing: true
  - rename:
      field: prometheus.metrics.Catalina_DataSource_minIdle
      target_field: apache_tomcat.connection_pool.connection.idle.min.size
      ignore_missing: true
  - rename:
      field: prometheus.metrics.Catalina_DataSource_softMinEvictableIdleTimeMillis
      target_field: apache_tomcat.connection_pool.connection.idle.min.time.ms
      ignore_missing: true
  - rename:
      field: prometheus.metrics.Catalina_DataSource_numTestsPerEvictionRun
      target_field: apache_tomcat.connection_pool.connection.idle.max.time.ms
      ignore_missing: true
  - rename:
      field: prometheus.metrics.Catalina_DataSource_initialSize
      target_field: apache_tomcat.connection_pool.connection.initial_size.count
      ignore_missing: true
  - rename:
      field: prometheus.metrics.Catalina_DataSource_maxConnLifetimeMillis
      target_field: apache_tomcat.connection_pool.connection.lifetime.max.ms
      ignore_missing: true
  - rename:
      field: prometheus.metrics.Catalina_DataSource_maxWaitMillis
      target_field: apache_tomcat.connection_pool.connection.database.time.max.ms
      ignore_missing: true
  - set:
      field: apache_tomcat.connection_pool.connection.log_expired
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_logExpiredConnections == 1
  - set:
      field: apache_tomcat.connection_pool.connection.log_expired
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_logExpiredConnections == 0
  - rename:
      field: prometheus.metrics.Catalina_DataSource_minEvictableIdleTimeMillis
      target_field: apache_tomcat.connection_pool.connection.min_evictable_idle.time
      ignore_missing: true
  - set:
      field: apache_tomcat.connection_pool.connection.remove_abandoned_on_maintenance
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_removeAbandonedOnMaintenance == 1
  - set:
      field: apache_tomcat.connection_pool.connection.remove_abandoned_on_maintenance
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_removeAbandonedOnMaintenance == 0
  - rename:
      field: prometheus.metrics.Catalina_DataSource_removeAbandonedTimeout
      target_field: apache_tomcat.connection_pool.connection.remove_abandoned_timeout
      ignore_missing: true
  - set:
      field: apache_tomcat.connection_pool.connection.rollback_on_return
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_rollbackOnReturn == 1
  - set:
      field: apache_tomcat.connection_pool.connection.rollback_on_return
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_rollbackOnReturn == 0
  - set:
      field: apache_tomcat.connection_pool.connection.test_on_return
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_testOnReturn == 1
  - set:
      field: apache_tomcat.connection_pool.connection.test_on_return
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_testOnReturn == 0
  - set:
      field: apache_tomcat.connection_pool.connection.test_while_idle
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_testWhileIdle == 1
  - set:
      field: apache_tomcat.connection_pool.connection.test_while_idle
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_testWhileIdle == 0
  - rename:
      field: prometheus.metrics.Catalina_DataSource_timeBetweenEvictionRunsMillis
      target_field: apache_tomcat.connection_pool.connection.time_betwen_eviction_run.time.ms
      ignore_missing: true
  - rename:
      field: prometheus.metrics.Catalina_DataSource_validationQueryTimeout
      target_field: apache_tomcat.connection_pool.connection.validate
      ignore_missing: true
  - set:
      field: apache_tomcat.connection_pool.connection.clear_statement_pool_on_return
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_clearStatementPoolOnReturn == 1
  - set:
      field: apache_tomcat.connection_pool.connection.clear_statement_pool_on_return
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_clearStatementPoolOnReturn == 0
  - set:
      field: apache_tomcat.connection_pool.lifo
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_lifo == 1
  - set:
      field: apache_tomcat.connection_pool.lifo
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_lifo == 0
  - rename:
      field: prometheus.metrics.Catalina_DataSource_maxTotal
      target_field: apache_tomcat.connection_pool.max.total
      ignore_missing: true
  - set:
      field: apache_tomcat.connection_pool.prepared_statements
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_poolPreparedStatements == 1
  - set:
      field: apache_tomcat.connection_pool.prepared_statements
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_poolPreparedStatements == 0
  - set:
      field: apache_tomcat.connection_pool.test_on_borrow
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_testOnBorrow == 1
  - set:
      field: apache_tomcat.connection_pool.test_on_borrow
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_testOnBorrow == 0
  - set:
      field: apache_tomcat.connection_pool.test_on_create
      value: true
      if: ctx.prometheus?.metrics?.Catalina_DataSource_testOnCreate == 1
  - set:
      field: apache_tomcat.connection_pool.test_on_create
      value: false
      if: ctx.prometheus?.metrics?.Catalina_DataSource_testOnCreate == 0
  - remove:
      field:
      - prometheus
      ignore_missing: true
  - script:
      description: Drops null/empty values recursively.
      lang: painless
      source: |
          boolean drop(Object o) {
              if (o == null || o == "") {
              return true;
              } else if (o instanceof Map) {
              ((Map) o).values().removeIf(v -> drop(v));
              return (((Map) o).size() == 0);
              } else if (o instanceof List) {
              ((List) o).removeIf(v -> drop(v));
              return (((List) o).length == 0);
              }
              return false;
          }
          drop(ctx);
  - set:
      field: event.kind
      value: pipeline_error
      if: ctx.error?.message != null
on_failure:
  - set:
      field: error.message
      value: "{{{_ingest.on_failure_message}}}"
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false