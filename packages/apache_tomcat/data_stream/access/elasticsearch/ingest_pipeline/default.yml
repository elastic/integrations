---
description: Pipeline for processing Apache Tomcat Access logs.
processors:
  - set:
      field: ecs.version
      value: 8.7.0
  - set:
      field: event.kind
      value: event
  - set:
      field: event.module
      value: apache_tomcat
  - set:
      field: event.category
      value: [web]
  - set:
      field: event.type
      value: [access]
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: 'ctx.event?.original == null'
  - dissect:
      field: event.original
      tag: 'dissect_event_original'
      pattern: '%{_tmp.sourceorusername} %{apache_tomcat.access.http.ident} %{apache_tomcat.access.http.useragent} [%{_tmp.timestamp}] "%{http.request.method} %{url.original} HTTP/%{http.version}" %{_tmp.dissectgrok}'
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - grok:
      field: _tmp.sourceorusername
      tag: 'grok_parse_log_sourceoruser'
      patterns:
        - '^(%{IP:source.ip}|%{DATA:source.user.name})$'
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - grok:
      field: _tmp.dissectgrok
      tag: 'grok_parse_log_dissectgrok'
      patterns:
        - '^%{NUMBER:http.response.status_code} %{POSINT:destination.bytes}( %{GREEDYDATA:_tmp.grok})?$'
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - grok:
      field: _tmp.grok
      tag: 'grok_parse_log2'
      patterns:
        - '(?:%{IP:apache_tomcat.access.ip.local}%{SPACE})?(?:%{CONN_STATUS:apache_tomcat.access.connection_status}%{SPACE})?(?:%{NUMBER:apache_tomcat.access.response_time}%{SPACE})?\"%{DATA:http.request.referrer}\" \"%{DATA:user_agent.original}\" X-Forwarded-For=\"%{DATA:_tmp.header_forwarder}(\")*$'
        - '\"%{DATA:http.request.referrer}\" \"%{DATA:user_agent.original}(\")*$'
      pattern_definitions:
        CONN_STATUS: "[X+-]"
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - append:
      field: related.ip
      value: '{{{source.ip}}}'
      if: ctx.source?.ip != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: '{{{apache_tomcat.access.ip.local}}}'
      if: ctx.apache_tomcat?.access?.ip?.local != null
      allow_duplicates: false
  - append:
      field: related.user
      value: '{{{source.user.name}}}'
      if: ctx.source?.user?.name != null
      allow_duplicates: false
  - date:
      field: _tmp.timestamp
      if: ctx._tmp?.timestamp != null && ctx._tmp.timestamp != ''
      tag: 'date_set_timestamp'
      formats:
        - dd/MMM/yyyy:HH:mm:ss ZZZ
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: http.response.status_code
      tag: 'convert_status_code_to_long'
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - set:
      field: event.outcome
      value: success
      if: ctx.http?.response?.status_code != null && ctx.http.response.status_code >= 200 && ctx.http.response.status_code < 300
  - set:
      field: event.outcome
      value: failure
      if: ctx.http?.response?.status_code != null && ctx.http.response.status_code >= 400 && ctx.http.response.status_code < 600
  - remove:
      if: ctx.destination?.bytes == '-'
      field: destination.bytes
      ignore_missing: true
  - convert:
      field: destination.bytes
      tag: 'convert_destination_bytes_to_long'
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - convert:
      field: apache_tomcat.access.response_time
      tag: 'convert_response_time_to_double'
      type: double
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - user_agent:
      field: user_agent.original
      if: ctx.user_agent?.original != null && ctx.user_agent.original != '' && ctx.user_agent.original != '-'
      tag: 'user_agent_processor'
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
  - uri_parts:
      field: url.original
      if: ctx.url?.original != null && ctx.url.original != '' && ctx.url.original != '-'
      tag: 'uri_parts_processor'
      on_failure:
        - append:
            field: error.message
            value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
# There could be a scenario where IPs are separated by commas(,).
  - split:
      field: _tmp.header_forwarder
      if: ctx._tmp?.header_forwarder != null && ctx._tmp.header_forwarder != '' && ctx._tmp.header_forwarder != '-'
      tag: 'split_x_forwarded_for'
      target_field: client.ip
      separator: ', '
  - foreach:
      field: client.ip
      if: ctx.client?.ip instanceof List
      processor:
        convert:
          field: _ingest._value
          tag: 'convert_client-ip_to_ip'
          type: ip
          ignore_missing: true
          on_failure:
            - append:
                field: error.message
                value: 'Processor {{{_ingest.on_failure_processor_type}}} with tag fail-{{{_ingest.on_failure_processor_tag}}} in pipeline {{{_ingest.pipeline}}} failed with message: {{{_ingest.on_failure_message}}}'
      ignore_missing: true
  - foreach:
      field: client.ip
      if: ctx.client?.ip instanceof List
      processor:
        append:
          field: related.ip
          value: '{{{_ingest._value}}}'
          allow_duplicates: false
      ignore_missing: true
  - remove:
      field:
        - _tmp
      ignore_missing: true
  - remove:
      field:
        - event.original
      ignore_missing: true
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
  - script:
      lang: painless
      source: |-
        boolean drop(Object o) {
          if (o == null || o == '') {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
      description: Drops null/empty values recursively.
  - set:
      field: event.kind
      value: pipeline_error
      if: ctx.error?.message != null
on_failure:
  - append:
      field: error.message
      value: '{{{_ingest.on_failure_message}}}'
  - append:
      field: event.kind
      value: pipeline_error
      allow_duplicates: false
