---
description: Pipeline for parsing fortinet firewall logs
processors:
  - set:
      field: ecs.version
      value: '8.11.0'
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  - grok:
      field: event.original
      ecs_compatibility: v1
      patterns:
        - "%{SYSLOG5424PRI}%{GREEDYDATA:syslog5424_sd}$"
        - "%{GREEDYDATA:syslog5424_sd}$"
  - script:
      lang: painless
      source: |
        if (ctx.log?.syslog?.priority != null) {
          def severity = new HashMap();
          severity['code'] = ctx.log.syslog.priority&0x7;
          ctx.log.syslog['severity'] = severity;
          def facility = new HashMap();
          facility['code'] = ctx.log.syslog.priority>>3;
          ctx.log.syslog['facility'] = facility;
        }
  - gsub:
      field: syslog5424_sd
      pattern: "[\u0000-\u001F\u007F]"
      replacement: ""
  - script:
      lang: painless
      if: ctx.syslog5424_sd != null
      description: |
        Splits syslog5424_sd KV list by space and then each by "=" taking into account quoted values.
      source: |
        def splitUnquoted(String input, String sep) {
          def tokens = [];
          def startPosition = 0;
          def isInQuotes = false;
          char quote = (char)"\"";
          for (def currentPosition = 0; currentPosition < input.length(); currentPosition++) {
              if (input.charAt(currentPosition) == quote) {
                  isInQuotes = !isInQuotes;
              }
              else if (input.charAt(currentPosition) == (char)sep && !isInQuotes) {
                  def token = input.substring(startPosition, currentPosition).trim();
                  if (!token.equals("")) {
                    tokens.add(token);
                  }
                  startPosition = currentPosition + 1;
              }
          }

          def lastToken = input.substring(startPosition);
          if (!lastToken.equals(sep) && !lastToken.equals("")) {
              tokens.add(lastToken.trim());
          }
          return tokens;
        }

        def arr = splitUnquoted(ctx.syslog5424_sd, " ");

        Map map = new HashMap();
        Pattern pattern = /^\"|\"$/;
        for (def i = 0; i < arr?.length; i++) {
          def kv = splitUnquoted(arr[i], "=");
          if (kv.length == 2) {
            map[kv[0]] = pattern.matcher(kv[1]).replaceAll("");
          }
        }
        if (ctx.fortinet == null) {
          ctx.fortinet = new HashMap();
        }
        ctx.fortinet.firewall = map;
  - script:
      lang: painless
      source: |
        def fw = ctx.fortinet?.firewall;
        if (fw != null) {
            // We will remove any keys that are non-words to avoid polluting documents
            def pat = /\W+/; 
            fw.entrySet().removeIf(entry -> entry.getValue() == "N/A" || pat.matcher(entry.getKey()).find());
        }
  - set:
      field: observer.vendor
      value: Fortinet
  - set:
      field: observer.product
      value: Fortigate
  - set:
      field: observer.type
      value: firewall
  # Fortigate may set two timezones for an event. Use the first.
  - set:
      if: ctx.fortinet?.firewall?.tz != null && !(ctx.fortinet.firewall.tz instanceof List)
      field: event.timezone
      copy_from: fortinet.firewall.tz
  - set:
      if: ctx.fortinet?.firewall?.tz instanceof List && ctx.fortinet.firewall.tz.length != 0
      field: event.timezone
      copy_from: fortinet.firewall.tz.0
  # The timezone may be formatted for human consumption, so fix that too.
  - gsub:
      field: event.timezone
      pattern: ^(?:[A-Z]{1,4})([+-])([0-9]):?([0-9]{2})$
      replacement: $10$2$3
      ignore_missing: true
      ignore_failure: true
  - gsub:
      field: event.timezone
      pattern: ^(?:[A-Z]{1,4})([+-][0-9]{2}):?([0-9]{2})$
      replacement: $1$2
      ignore_missing: true
      ignore_failure: true
  - set:
      field: _temp.time
      value: "{{{fortinet.firewall.date}}} {{{fortinet.firewall.time}}} {{{event.timezone}}}"
      if: ctx.fortinet?.firewall?.date != null && ctx.fortinet?.firewall?.time != null && ctx.event?.timezone != null
  - set:
      field: _temp.time
      value: "{{{fortinet.firewall.date}}} {{{fortinet.firewall.time}}}"
      if: ctx.fortinet?.firewall?.date != null && ctx.fortinet?.firewall?.time != null && ctx.event?.timezone == null
  - date:
      field: _temp.time
      target_field: "@timestamp"
      formats:
        - yyyy-MM-dd HH:mm:ss
        - yyyy-MM-dd HH:mm:ss Z
        - yyyy-MM-dd HH:mm:ss z
        - ISO8601
      timezone: "{{{event.timezone}}}"
      if: ctx._temp?.time != null && ctx.event?.timezone != null
  - date:
      field: _temp.time
      target_field: "@timestamp"
      formats:
        - yyyy-MM-dd HH:mm:ss
        - yyyy-MM-dd HH:mm:ss Z
        - yyyy-MM-dd HH:mm:ss z
        - ISO8601
      if: ctx._temp?.time != null && ctx.event?.timezone == null
  - gsub:
      field: fortinet.firewall.eventtime
      pattern: "\\d{6}$"
      replacement: ""
      if: ctx.fortinet?.firewall?.eventtime != null && (ctx.fortinet?.firewall?.eventtime).length() > 18
  - date:
      field: fortinet.firewall.eventtime
      target_field: event.start
      formats:
        - UNIX_MS
      timezone: "{{{event.timezone}}}"
      if: ctx.fortinet?.firewall?.eventtime != null && ctx.event?.timezone != null && (ctx.fortinet?.firewall?.eventtime).length() > 11
  - date:
      field: fortinet.firewall.eventtime
      target_field: event.start
      formats:
        - UNIX
      timezone: "{{{event.timezone}}}"
      if: ctx.fortinet?.firewall?.eventtime != null && ctx.event?.timezone != null && (ctx.fortinet?.firewall?.eventtime).length() <= 11
  - date:
      field: fortinet.firewall.eventtime
      target_field: event.start
      formats:
        - UNIX_MS
      if: ctx.fortinet?.firewall?.eventtime != null && ctx.event?.timezone == null && (ctx.fortinet?.firewall?.eventtime).length() > 11
  - date:
      field: fortinet.firewall.eventtime
      target_field: event.start
      formats:
        - UNIX
      if: ctx.fortinet?.firewall?.eventtime != null && ctx.event?.timezone == null && (ctx.fortinet?.firewall?.eventtime).length() <= 11
  - rename:
      field: fortinet.firewall.devname
      target_field: observer.name
      ignore_missing: true
  - script:
      lang: painless
      source: "ctx.event.duration = Long.parseLong(ctx.fortinet.firewall.duration) * 1000000000"
      if: ctx.fortinet?.firewall?.duration != null
  - rename:
      field: fortinet.firewall.devid
      target_field: observer.serial_number
      ignore_missing: true
  - rename:
      field: fortinet.firewall.dstintf
      target_field: observer.egress.interface.name
      ignore_missing: true
      if: ctx.observer?.egress?.interface?.name == null
  - rename:
      field: fortinet.firewall.srcintf
      target_field: observer.ingress.interface.name
      ignore_missing: true
      if: ctx.observer?.ingress?.interface?.name == null
  - rename:
      field: fortinet.firewall.dst_int
      target_field: observer.egress.interface.name
      ignore_missing: true
  - rename:
      field: fortinet.firewall.src_int
      target_field: observer.ingress.interface.name
      ignore_missing: true
  - rename:
      field: fortinet.firewall.level
      target_field: log.level
      ignore_missing: true
  - append:
      field: email.cc.address
      value: "{{{fortinet.firewall.cc}}}"
      if: ctx.fortinet?.cc?.address != null
  - set:
      field: email.subject
      copy_from: fortinet.firewall.subject
      if: ctx.fortinet?.firewall?.subject != null
  - lowercase:
      target_field: host.name
      field: fortinet.firewall.srcname
      if: ctx.fortinet?.firewall?.srcname != null
  - set:
      field: user.name
      copy_from: source.user.name
      if: ctx.source?.user?.name != null && ctx.user?.name == null
  - rename:
      field: fortinet.firewall.msg
      target_field: message
      ignore_missing: true
  - rename:
      field: fortinet.firewall.dstmac
      target_field: destination.mac
      ignore_missing: true
  - gsub:
      field: destination.mac
      pattern: ':'
      replacement: '-'
      ignore_missing: true
  - uppercase:
      field: destination.mac
      ignore_missing: true
  - pipeline:
      name: '{{ IngestPipeline "event" }}'
      if: ctx.fortinet?.firewall?.type == 'event'
  - pipeline:
      name: '{{ IngestPipeline "login" }}'
      if: "ctx.message instanceof String && ctx.message.toLowerCase().contains('login')"
  - pipeline:
      name: '{{ IngestPipeline "traffic" }}'
      if: ctx.fortinet?.firewall?.type == 'traffic'
  - pipeline:
      name: '{{ IngestPipeline "utm" }}'
      if: ctx.fortinet?.firewall?.type == 'utm' || ctx.fortinet?.firewall?.type == 'dns'
  - rename:
      field: fortinet.firewall.eventtype
      target_field: event.action
      ignore_missing: true
      if: ctx.event?.action == null
  - rename:
      field: fortinet.firewall.reason
      target_field: event.reason
      ignore_missing: true
      if: ctx.event?.reason == null
  - rename:
      field: fortinet.firewall.eventsubtype
      target_field: event.reason
      ignore_missing: true
      if: ctx.event?.reason == null
  - rename:
      field: fortinet.firewall.dir
      target_field: network.direction
      ignore_missing: true
      if: ctx.network?.direction == null
  - rename:
      field: fortinet.firewall.direction
      target_field: network.direction
      ignore_missing: true
      if: ctx.network?.direction == null
  - network_direction:
      internal_networks_field: _temp.internal_networks
      ignore_missing: true
      if: ctx.network?.direction == null
  # Handle interface-based network directionality
  - set:
      field: network.direction
      value: inbound
      if: >
        ctx._temp?.external_interfaces != null &&
        ctx._temp?.internal_interfaces != null &&
        ctx.observer?.ingress?.interface?.name != null &&
        ctx.observer?.egress?.interface?.name != null &&
        ctx._temp.external_interfaces.contains(ctx.observer.ingress.interface.name) &&
        ctx._temp.internal_interfaces.contains(ctx.observer.egress.interface.name)
  - set:
      field: network.direction
      value: outbound
      if: >
        ctx._temp?.external_interfaces != null &&
        ctx._temp?.internal_interfaces != null &&
        ctx.observer?.ingress?.interface?.name != null &&
        ctx.observer?.egress?.interface?.name != null &&
        ctx._temp.external_interfaces.contains(ctx.observer.egress.interface.name) &&
        ctx._temp.internal_interfaces.contains(ctx.observer.ingress.interface.name)
  - set:
      field: network.direction
      value: internal
      if: >
        ctx._temp?.external_interfaces != null &&
        ctx._temp?.internal_interfaces != null &&
        ctx.observer?.ingress?.interface?.name != null &&
        ctx.observer?.egress?.interface?.name != null &&
        ctx._temp.internal_interfaces.contains(ctx.observer.egress.interface.name) &&
        ctx._temp.internal_interfaces.contains(ctx.observer.ingress.interface.name)
  - set:
      field: network.direction
      value: external
      if: >
        ctx._temp?.external_interfaces != null &&
        ctx._temp?.internal_interfaces != null &&
        ctx.observer?.ingress?.interface?.name != null &&
        ctx.observer?.egress?.interface?.name != null &&
        ctx._temp.external_interfaces.contains(ctx.observer.egress.interface.name) &&
        ctx._temp.external_interfaces.contains(ctx.observer.ingress.interface.name)
  - set:
      field: network.direction
      value: unknown
      if: >
        ctx._temp?.external_interfaces != null &&
        ctx._temp?.internal_interfaces != null &&
        ctx.observer?.egress?.interface?.name != null &&
        ctx.observer?.ingress?.interface?.name != null &&
        (
          (
            !ctx._temp.external_interfaces.contains(ctx.observer.egress.interface.name) &&
            !ctx._temp.internal_interfaces.contains(ctx.observer.egress.interface.name)
          ) ||
          (
            !ctx._temp.external_interfaces.contains(ctx.observer.ingress.interface.name) &&
            !ctx._temp.internal_interfaces.contains(ctx.observer.ingress.interface.name)
          )
        )
  # Normalize the network direction
  - script:
      lang: painless
      ignore_failure: true
      params:
        outgoing: outbound
        incoming: inbound
      source: >-
        def k = ctx.network.direction.toLowerCase();
        def normalized = params.get(k);
        if (normalized != null) {
            ctx.network.direction = normalized;
            return;
        }
        ctx.network.direction = k;
      if: ctx.network?.direction instanceof String
  # Fix up network direction field to match ECS-allowable values.
  - set:
      field: network.direction
      value: unknown
      if: ctx.network?.direction != null && !(['ingress', 'egress', 'inbound', 'outbound', 'internal', 'external'].contains(ctx.network.direction))
  - rename:
      field: fortinet.firewall.interface
      target_field: observer.ingress.interface.name
      ignore_missing: true
      if: ctx.observer?.ingress?.interface?.name == null && (['ingress', 'inbound', 'internal'].contains(ctx.network?.direction))
  - rename:
      field: fortinet.firewall.interface
      target_field: observer.egress.interface.name
      ignore_missing: true
      if: ctx.observer?.egress?.interface?.name == null && (['egress', 'outbound', 'external'].contains(ctx.network?.direction))
  - convert:
      field: fortinet.firewall.auditid
      type: long
      ignore_missing: true
  - convert:
      field: fortinet.firewall.audittime
      type: long
      ignore_missing: true
  - convert:
      field: fortinet.firewall.quotamax
      type: long
      ignore_missing: true
  - convert:
      field: fortinet.firewall.quotaused
      type: long
      ignore_missing: true
  - convert:
      field: fortinet.firewall.size
      type: long
      ignore_missing: true
  - convert:
      field: fortinet.firewall.disklograte
      type: long
      ignore_missing: true
  - convert:
      field: fortinet.firewall.fazlograte
      type: long
      ignore_missing: true
  - convert:
      field: fortinet.firewall.lanin
      type: long
      ignore_missing: true
  - convert:
      field: fortinet.firewall.lanout
      type: long
      ignore_missing: true
  - convert:
      field: fortinet.firewall.setuprate
      type: long
      ignore_missing: true
  - convert:
      field: fortinet.firewall.wanin
      type: long
      ignore_missing: true
  - convert:
      field: fortinet.firewall.wanout
      type: long
      ignore_missing: true
  - geoip:
      field: source.ip
      target_field: source.geo
      ignore_missing: true
      if: ctx.source?.geo == null
  - geoip:
      field: destination.ip
      target_field: destination.geo
      ignore_missing: true
      if: ctx.destination?.geo == null
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.ip
      target_field: source.as
      properties:
      - asn
      - organization_name
      ignore_missing: true
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.ip
      target_field: destination.as
      properties:
      - asn
      - organization_name
      ignore_missing: true
  - geoip:
      field: source.nat.ip
      target_field: source.geo
      ignore_missing: true
      if: ctx.source?.geo == null
  - geoip:
      field: destination.nat.ip
      target_field: destination.geo
      ignore_missing: true
      if: ctx.destination?.geo == null
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: source.nat.ip
      target_field: source.as
      properties:
      - asn
      - organization_name
      ignore_missing: true
      if: ctx.source?.as == null
  - geoip:
      database_file: GeoLite2-ASN.mmdb
      field: destination.nat.ip
      target_field: destination.as
      properties:
      - asn
      - organization_name
      ignore_missing: true
      if: ctx.destination?.as == null
  - rename:
      field: source.as.asn
      target_field: source.as.number
      ignore_missing: true
  - rename:
      field: source.as.organization_name
      target_field: source.as.organization.name
      ignore_missing: true
  - rename:
      field: destination.as.asn
      target_field: destination.as.number
      ignore_missing: true
  - rename:
      field: destination.as.organization_name
      target_field: destination.as.organization.name
      ignore_missing: true
  - script:
      lang: painless
      source: "ctx.network.bytes = ctx.source.bytes + ctx.destination.bytes"
      if: ctx.source?.bytes != null && ctx.destination?.bytes != null
      ignore_failure: true
  - script:
      lang: painless
      source: "ctx.network.packets = ctx.source.packets + ctx.destination.packets"
      if: ctx.source?.packets != null && ctx.destination?.packets != null
      ignore_failure: true
  - script:
      lang: painless
      ignore_failure: true
      if: ctx.network?.iana_number != null
      source: |
        def iana_number = ctx.network.iana_number;
        if (iana_number == '0') {
            ctx.network.transport = 'hopopt';
        } else if (iana_number == '1') {
            ctx.network.transport = 'icmp';
        } else if (iana_number == '2') {
            ctx.network.transport = 'igmp';
        } else if (iana_number == '6') {
            ctx.network.transport = 'tcp';
        } else if (iana_number == '8') {
            ctx.network.transport = 'egp';
        } else if (iana_number == '17') {
            ctx.network.transport = 'udp';
        } else if (iana_number == '47') {
            ctx.network.transport = 'gre';
        } else if (iana_number == '50') {
            ctx.network.transport = 'esp';
        } else if (iana_number == '58') {
            ctx.network.transport = 'ipv6-icmp';
        } else if (iana_number == '112') {
            ctx.network.transport = 'vrrp';
        } else if (iana_number == '132') {
            ctx.network.transport = 'sctp';
        }
  - uppercase:
      field: source.mac
      ignore_missing: true
  - gsub:
      field: source.mac
      pattern: '[:.]'
      replacement: '-'
      ignore_missing: true
  - append:
      field: related.ip
      value: "{{{source.ip}}}"
      if: ctx.source?.ip != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: "{{{destination.ip}}}"
      if: ctx.destination?.ip != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: "{{{source.nat.ip}}}"
      if: ctx.source?.nat?.ip != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: "{{{destination.nat.ip}}}"
      if: ctx.destination?.nat?.ip != null
      allow_duplicates: false
  - append:
      field: related.ip
      value: "{{{source.nat.ip}}}"
      allow_duplicates: false
      if: ctx.source?.nat?.ip != null
  - append:
      field: related.ip
      value: "{{{destination.nat.ip}}}"
      allow_duplicates: false
      if: ctx.destination?.nat?.ip != null
  - append:
      field: related.ip
      value: "{{{fortinet.firewall.ip}}}"
      allow_duplicates: false
      if: ctx.fortinet?.firewall?.ip != null
  - append:
      field: related.ip
      value: "{{{fortinet.firewall.assignip}}}"
      allow_duplicates: false
      if: ctx.fortinet?.firewall?.assignip != null
  - append:
      field: related.ip
      value: "{{{fortinet.firewall.tunnelip}}}"
      allow_duplicates: false
      if: ctx.fortinet?.firewall?.tunnelip != null
  - append:
      field: related.user
      value: "{{{source.user.name}}}"
      if: ctx.source?.user?.name != null
      allow_duplicates: false
  - append:
      field: related.user
      value: "{{{destination.user.name}}}"
      if: ctx.destination?.user?.name != null
      allow_duplicates: false
  - append:
      field: related.hosts
      value: "{{{destination.address}}}"
      if: ctx.destination?.address != null
      allow_duplicates: false
  - append:
      field: related.hosts
      value: "{{{source.address}}}"
      if: ctx.source?.address != null
      allow_duplicates: false
  - append:
      field: related.hosts
      value: "{{{host.name}}}"
      if: ctx.host?.name != null
      allow_duplicates: false
  - append:
      field: related.hosts
      value: "{{{dns.question.name}}}"
      if: ctx.dns?.question?.name != null
      allow_duplicates: false

  - script:
      lang: painless
      source: |
        def dnsIPs = ctx.dns?.resolved_ip;
        if (dnsIPs != null && dnsIPs instanceof List) {
          if (ctx.related?.ip == null) {
            ctx.related.ip = [];
          }
          for (ip in dnsIPs) {
            if (!ctx.related.ip.contains(ip)) {
                ctx.related.ip.add(ip);
            }
          }
        }
  - remove:
      field: event.original
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_failure: true
      ignore_missing: true
  - remove:
      field:
        - _temp
        - syslog5424_sd
        - fortinet.firewall.tz
        - fortinet.firewall.date
        - fortinet.firewall.devid
        - fortinet.firewall.eventtime
        - fortinet.firewall.time
        - fortinet.firewall.duration
      ignore_missing: true
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
