---
description: Pipeline for parsing fortinet firewall logs (utm pipeline)
processors:
  - set:
      field: event.kind
      value: event
  - append:
      field: event.type
      value: denied
      if: "['block', 'blocked'].contains(ctx.fortinet?.firewall?.action)"
  - append:
      field: event.type
      value: info
      if: ctx.fortinet?.firewall?.subtype == 'dns'
  - append:
      field: event.type
      value: allowed
      if: "['pass', 'passthrough'].contains(ctx.fortinet?.firewall?.action)"
  - set:
      field: event.outcome
      value: success
      if: ctx.fortinet?.firewall?.action != null
  - append:
      field: event.category
      value: network
  - rename:
      field: fortinet.firewall.dstip
      target_field: destination.ip
      ignore_missing: true
  - rename:
      field: fortinet.firewall.remip
      target_field: destination.ip
      ignore_missing: true
      if: ctx.destination?.ip == null
  - convert:
      field: fortinet.firewall.dst_port
      target_field: destination.port
      type: long
      ignore_failure: true
      ignore_missing: true
  - convert:
      field: fortinet.firewall.remport
      target_field: destination.port
      type: long
      ignore_failure: true
      ignore_missing: true
      if: ctx.destination?.port == null
  - convert:
      field: fortinet.firewall.dstport
      target_field: destination.port
      type: long
      ignore_failure: true
      ignore_missing: true
      if: ctx.destination?.port == null
  - convert:
      field: fortinet.firewall.rcvdbyte
      target_field: destination.bytes
      type: long
      ignore_failure: true
      ignore_missing: true
  - rename:
      field: fortinet.firewall.recipient
      target_field: email.to.address
      ignore_missing: true
  - append:
      field: email.to.address
      value: "{{{fortinet.firewall.recipient}}}"
      if: ctx.fortinet?.firewall?.recipient != null
  - rename:
      field: fortinet.firewall.group
      target_field: source.user.group.name
      ignore_missing: true
  - rename:
      field: fortinet.firewall.locip
      target_field: source.ip
      ignore_missing: true
  - convert:
      field: fortinet.firewall.locport
      target_field: source.port
      type: long
      ignore_failure: true
      ignore_missing: true
  - convert:
      field: fortinet.firewall.src_port
      target_field: source.port
      type: long
      ignore_failure: true
      ignore_missing: true
      if: ctx.source?.port == null
  - convert:
      field: fortinet.firewall.srcport
      target_field: source.port
      type: long
      ignore_failure: true
      ignore_missing: true
      if: ctx.source?.port == null
  - convert:
      field: fortinet.firewall.sentbyte
      target_field: source.bytes
      type: long
      ignore_failure: true
      ignore_missing: true
  - rename:
      field: fortinet.firewall.srcdomain
      target_field: source.domain
      ignore_missing: true
  - rename:
      field: fortinet.firewall.srcip
      target_field: source.ip
      ignore_missing: true
      if: ctx.source?.ip == null
  - rename:
      field: fortinet.firewall.httpmethod
      target_field: http.request.method
      ignore_missing: true
  - rename:
      field: fortinet.firewall.referralurl
      target_field: http.request.referrer
      ignore_missing: true
  - rename:
      field: fortinet.firewall.srcmac
      target_field: source.mac
      ignore_missing: true
  - rename:
      field: fortinet.firewall.unauthuser
      target_field: source.user.name
      ignore_missing: true
  - rename:
      field: fortinet.firewall.user
      target_field: source.user.name
      ignore_missing: true
      if: ctx.source?.user?.name == null
  - append:
      field: email.sender.address
      value: "{{{fortinet.firewall.sender}}}"
      if: ctx.fortinet?.firewall?.sender != null
  - append:
      field: email.from.address
      value: "{{{fortinet.firewall.from}}}"
      if: ctx.fortinet?.firewall?.from != null
  - rename:
      field: fortinet.firewall.agent
      target_field: user_agent.original
      ignore_missing: true
  - rename:
      field: fortinet.firewall.app
      target_field: network.application
      ignore_missing: true
  - rename:
      field: fortinet.firewall.appcat
      target_field: rule.category
      ignore_missing: true
  - rename:
      field: fortinet.firewall.applist
      target_field: rule.ruleset
      ignore_missing: true
  - rename:
      field: fortinet.firewall.catdesc
      target_field: rule.category
      ignore_missing: true
      if: ctx.rule?.category == null
  - gsub:
      field: rule.category
      pattern: "\\."
      replacement: "-"
      ignore_missing: true
      if: ctx.rule?.category != null
  - rename:
      field: fortinet.firewall.error
      target_field: event.message
      ignore_missing: true
  - rename:
      field: fortinet.firewall.errorcode
      target_field: event.code
      ignore_missing: true
  - rename:
      field: fortinet.firewall.event_id
      target_field: event.id
      ignore_missing: true
  - rename:
      field: fortinet.firewall.eventid
      target_field: event.id
      ignore_missing: true
      if: ctx.event?.id == null
  - rename:
      field: fortinet.firewall.filename
      target_field: file.name
      ignore_missing: true
  - convert:
      field: fortinet.firewall.filesize
      target_field: file.size
      type: long
      ignore_failure: true
      ignore_missing: true
  - rename:
      field: fortinet.firewall.filetype
      target_field: file.extension
      ignore_missing: true
  - rename:
      field: fortinet.firewall.infectedfilename
      target_field: file.name
      ignore_missing: true
      if: ctx.file?.name == null
  - rename:
      field: fortinet.firewall.infectedfilesize
      target_field: file.size
      ignore_missing: true
      if: ctx.file?.size == null
  - rename:
      field: fortinet.firewall.infectedfiletype
      target_field: file.extension
      ignore_missing: true
      if: ctx.file?.extension == null
  - rename:
      field: fortinet.firewall.matchedfilename
      target_field: file.name
      ignore_missing: true
      if: ctx.file?.name == null
  - rename:
      field: fortinet.firewall.matchedfiletype
      target_field: file.extension
      ignore_missing: true
      if: ctx.file?.extension == null
  - rename:
      field: fortinet.firewall.hostname
      target_field: url.domain
      ignore_missing: true
  - rename:
      field: fortinet.firewall.ipaddr
      target_field: dns.resolved_ip
      ignore_missing: true
  - split:
      field: dns.resolved_ip
      separator: ", "
      ignore_missing: true
  - rename:
      field: fortinet.firewall.level
      target_field: log.level
      ignore_missing: true
  - rename:
      field: fortinet.firewall.logid
      target_field: event.code
      ignore_missing: true
      if: ctx.event?.code == null
  - rename:
      field: fortinet.firewall.msg
      target_field: message
      ignore_missing: true
  - rename:
      field: fortinet.firewall.policy_id
      target_field: rule.id
      ignore_missing: true
      if: ctx.rule?.id == null
  - rename:
      field: fortinet.firewall.policyid
      target_field: rule.id
      ignore_missing: true
      if: ctx.rule?.id == null
  - rename:
      field: fortinet.firewall.profile
      target_field: rule.ruleset
      ignore_missing: true
      if: ctx.rule?.ruleset == null
  - rename:
      field: fortinet.firewall.proto
      target_field: network.iana_number
      ignore_missing: true
  - rename:
      field: fortinet.firewall.qclass
      target_field: dns.question.class
      ignore_missing: true
  - rename:
      field: fortinet.firewall.qname
      target_field: dns.question.name
      ignore_missing: true
  - rename:
      field: fortinet.firewall.qtype
      target_field: dns.question.type
      ignore_missing: true
  - rename:
      field: fortinet.firewall.service
      target_field: network.protocol
      ignore_missing: true
  - lowercase:
      field: network.protocol
      ignore_missing: true
  - rename:
      field: fortinet.firewall.url
      target_field: url.path
      ignore_missing: true
  - rename:
      field: fortinet.firewall.xid
      target_field: dns.id
      ignore_missing: true
  - append:
      field: tls.server.x509.subject.common_name
      value: "{{{fortinet.firewall.scertcname}}}"
      if: ctx.fortinet?.firewall?.scertcname != null
  - rename:
      field: fortinet.firewall.scertissuer
      target_field: tls.server.issuer
      ignore_missing: true
  - append:
      field: tls.server.x509.issuer.common_name
      value: "{{{tls.server.issuer}}}"
      if: ctx.tls?.server?.issuer != null
  - rename:
      field: fortinet.firewall.ccertissuer
      target_field: tls.client.issuer
      ignore_missing: true
  - append:
      field: tls.client.x509.issuer.common_name
      value: "{{{tls.client.issuer}}}"
      if: ctx.tls?.client?.issuer != null
  - rename:
      field: fortinet.firewall.sender
      target_field: tls.server.issuer
      ignore_missing: true
  - rename:
      field: fortinet.firewall.issuer
      target_field: tls.server.issuer
      ignore_missing: true
      if: ctx.tls?.server?.issuer == null
  - rename:
      field: fortinet.firewall.authalgo
      target_field: tls.server.x509.public_key_algorithm
      ignore_missing: true
  - rename:
      field: fortinet.firewall.keyalgo
      target_field: tls.server.x509.public_key_algorithm
      ignore_missing: true
      if: ctx.tls?.server?.x509?.public_key_algorithm == null
  - rename:
      field: fortinet.firewall.notbefore
      target_field: tls.server.not_before
      ignore_missing: true
      if: ctx.tls?.server?.not_before == null
  - rename:
      field: fortinet.firewall.notafter
      target_field: tls.server.not_after
      ignore_missing: true
      if: ctx.tls?.server?.not_after == null
  - rename:
      field: fortinet.firewall.keysize
      target_field: tls.server.x509.public_key_size
      ignore_missing: true
      if: ctx.tls?.server?.x509?.public_key_size == null
  - convert:
      field: tls.server.x509.public_key_size
      type: long
      ignore_missing: true
  - rename:
      field: fortinet.firewall.sn
      target_field: tls.server.x509.serial_number
      ignore_missing: true
      if: ctx.tls?.server?.x509?.serial_number == null
  - rename:
      field: fortinet.firewall.certhash
      target_field: tls.server.hash.sha1
      ignore_missing: true
      if: ctx.tls?.server?.hash?.sha1 == null
  - append:
      field: related.hash
      value: "{{{tls.server.hash.sha1}}}"
      allow_duplicates: false
      if: ctx.tls?.server?.hash?.sha1 != null
  - set:
      field: tls.server.x509.not_after
      copy_from: tls.server.not_after
      ignore_empty_value: true
  - set:
      field: tls.server.x509.not_before
      copy_from: tls.server.not_before
      ignore_empty_value: true
  - split:
      field: fortinet.firewall.san
      separator: ";"
      target_field: tls.server.x509.alternative_names
      ignore_missing: true
  - append:
      field: tls.server.x509.alternative_names
      value: "{{{fortinet.firewall.cn}}}"
      allow_duplicates: false
      if: ctx.fortinet?.firewall?.cn != null
  - set:
      field: tls.client.x509.public_key_algorithm
      copy_from: tls.server.x509.public_key_algorithm
      ignore_empty_value: true
  - rename:
      field: fortinet.firewall.kxcurve
      target_field: tls.curve
      ignore_missing: true
  - rename:
      field: fortinet.firewall.cipher
      target_field: tls.cipher
      ignore_missing: true
  - rename:
      field: fortinet.firewall.sni
      target_field: tls.client.server_name
      ignore_missing: true
  - set:
      field: destination.domain
      copy_from: tls.client.server_name
      ignore_empty_value: true
      if: ctx.destination?.domain == null
  - set:
      field: tls.established
      value: true
      if: ctx.fortinet?.firewall?.handshake == "full"
  - script:
      lang: painless
      if: ctx.fortinet?.firewall?.tlsver instanceof String
      source: >-
        def pat = /\d+/;
        def tlsver = ctx.fortinet.firewall.tlsver.toLowerCase();
        def matcher = pat.matcher(tlsver);
        if (!matcher.find()) {
            return;
        }
        ctx.tls.version_protocol = tlsver.substring(0, matcher.start());
        ctx.tls.version = tlsver.substring(matcher.start(), tlsver.length());
        if (!ctx.tls.version.contains(".")) {
          ctx.tls.version += ".0";
        }
  - append:
      field: vulnerability.category
      value: "{{{fortinet.firewall.dtype}}}"
      allow_duplicates: false
      if: ctx.fortinet?.firewall?.dtype instanceof String
  - rename:
      field: fortinet.firewall.ref
      target_field: event.reference
      ignore_missing: true
  - rename:
      field: fortinet.firewall.filehash
      target_field: fortinet.file.hash.crc32
      ignore_missing: true
  - append:
      field: related.hash
      value: "{{{fortinet.file.hash.crc32}}}"
      if: ctx.fortinet?.file?.hash?.crc32 != null
  # Populate ECS dns
  - registered_domain:
      field: dns.question.name
      target_field: dns.question
      ignore_missing: true
      ignore_failure: true
  - remove:
      field: dns.question.domain
      ignore_missing: true
  - remove:
      field:
        - fortinet.firewall.cn
        - fortinet.firewall.san
        - fortinet.firewall.dst_port
        - fortinet.firewall.remport
        - fortinet.firewall.dstport
        - fortinet.firewall.rcvdbyte
        - fortinet.firewall.locport
        - fortinet.firewall.scertcname
        - fortinet.firewall.src_port
        - fortinet.firewall.srcport
        - fortinet.firewall.sentbyte
        - fortinet.firewall.filesize
        - fortinet.firewall.dtype
        - fortinet.firewall.tlsver
      ignore_missing: true
on_failure:
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: error.message
      value: '{{{ _ingest.on_failure_message }}}'
