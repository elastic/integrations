---
description: Pipeline for parsing ActiveMQ logs.
processors:
  - set:
      field: event.ingested
      value: "{{{_ingest.timestamp}}}"
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: event.module
      value: activemq
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: event.original
      value: "{{{message}}}"
      ignore_empty_value: true
      ignore_failure: true
  - grok:
      field: message
      pattern_definitions:
        GREEDYMULTILINE: "(.|\\n|\\t)*"
        NOPIPEGREEDYDATA: "(\\n|(?! \\|).)*"
        THREAD_NAME: "((?! \n).)*"
      patterns:
        - "%{TIMESTAMP_ISO8601:timestamp}%{SPACE}\\|%{SPACE}%{LOGLEVEL:log.level}%{SPACE}\\|%{SPACE}%{NOPIPEGREEDYDATA:message}%{SPACE}\\|%{SPACE}%{NOPIPEGREEDYDATA:activemq.log.caller}%{SPACE}\\|%{SPACE}%{THREAD_NAME:activemq.log.thread}%{SPACE}%{GREEDYMULTILINE:error.stack_trace}"
      ignore_missing: true
  - date:
      if: "ctx.event.timezone == null"
      field: timestamp
      target_field: "@timestamp"
      formats: ["yyyy-MM-dd HH:mm:ss,SSS"]
  - date:
      if: "ctx.event.timezone != null"
      field: timestamp
      target_field: "@timestamp"
      timezone: "{{{ event.timezone }}}"
      formats: ["yyyy-MM-dd HH:mm:ss,SSS"]
  - remove:
      field:
        - timestamp
  - set:
      field: event.kind
      value: event
      ignore_empty_value: true
      ignore_failure: true
  - set:
      field: ecs.version
      value: 8.2.0
      ignore_empty_value: true
      ignore_failure: true
  - script:
      if: "ctx.log?.level != null"
      lang: painless
      source: >-
        def err_levels = ["FATAL", "ERROR", "WARN"];
        if (err_levels.contains(ctx.log.level)) {
          ctx.event.type = ["error"];
        } else {
          ctx.event.type = ["info"];
        }
  - script:
      description: Drops null/empty values recursively
      lang: painless
      ignore_failure: true
      source: |
        boolean drop(Object o) {
          if (o == null || o == "") {
            return true;
          } else if (o instanceof Map) {
            ((Map) o).values().removeIf(v -> drop(v));
            return (((Map) o).size() == 0);
          } else if (o instanceof List) {
            ((List) o).removeIf(v -> drop(v));
            return (((List) o).length == 0);
          }
          return false;
        }
        drop(ctx);
  - remove:
      field: event.original
      if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
      ignore_failure: true
      ignore_missing: true
on_failure:
  - set:
      field: error.message
      value: "{{{ _ingest.on_failure_message }}}"

