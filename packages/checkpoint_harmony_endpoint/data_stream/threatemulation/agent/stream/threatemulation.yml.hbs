config_version: 3
{{#if enable_request_tracer}}
resource.tracer.filename: "../../logs/cel/http-request-trace-*.ndjson"
resource.tracer.maxbackups: 5
{{/if}}
resource.url: {{base_url}}
interval: {{interval}}
state:
  auth_client_id: {{client_id}}
  auth_access_key: {{access_key}}
  initial_interval: {{initial_interval}}
  limit: {{limit}}
  page_limit: {{page_limit}}
program: |
  (
    (!has(state.cursor) || (has(state.cursor) && has(state.cursor.auth_token) && state.cursor.auth_token == null))
    ?
    request("POST", state.url.trim_right("/")+"/auth/external").with({
      "Header": {
        "Accept": ["application/json"],
        "Content-Type": ["application/json"],
      },
      "Body": {
        "clientId": state.auth_client_id,
        "accessKey": state.auth_access_key,
      }.encode_json(),
      }).do_request().as(resp,
        resp.StatusCode == 200
        ?
        (
          bytes(resp.Body).decode_json().as(body,
            body.data.token
          )
        )
        :
        (
          bytes(resp.Body).decode_json().as(body,
            body.message
            )
        )
      ).as(auth_token,
      request("POST", state.url.trim_right("/")+"/app/laas-logs-api/api/logs_query").with({
        "Header": {
          "Accept": ["application/json"],
          "Content-Type": ["application/json"],
          "Authorization": ["Bearer "+auth_token],
        },
        "Body": {
          "filter": "product:\"Threat Emulation\"",
          "limit": state.limit,
          "pageLimit": state.page_limit,
          "cloudService": "Harmony Endpoint",
          "timeframe": {
            "startTime": state.?cursor.next_startTime.orValue(null) == null ?
              timestamp(now() - duration(state.initial_interval)).format(time_layout.RFC3339)
              :
              timestamp(state.cursor.next_startTime).format(time_layout.RFC3339),
            "endTime": timestamp(now().format(time_layout.RFC3339))
          }
        }.encode_json(),
      }).do_request().as(resp,
        resp.StatusCode == 200
        ?
        bytes(resp.Body).decode_json().as(body,
        {
          "events": [],
          "want_more": true,
          "cursor": {
            "auth_token": auth_token,
            "task_id": body.data.taskId,
            "task_ready": false,
            "page_token": null,
            "next_startTime": (has(state.cursor) && has(state.cursor.next_startTime)) ? state.cursor.next_startTime : null,
            "last_page": false
          },
          "url": state.url,
          "auth_client_id": state.auth_client_id,
          "auth_access_key": state.auth_access_key,
          "limit": state.limit,
          "page_limit": state.page_limit,
          "initial_interval": state.initial_interval
        })
        :
        {
          "events": {
            "error": {
              "message": "Error " + bytes(resp.Body).decode_json().as(body, body.message)
            }
          },
          "want_more": false,
          "cursor": {
            "auth_token": null,
            "task_id": null,
            "task_ready": false,
            "page_token": null,
            "next_startTime": (has(state.cursor) && has(state.cursor.next_startTime)) ? state.cursor.next_startTime : null,
            "last_page": false
          },
          "url": state.url,
          "auth_client_id": state.auth_client_id,
          "auth_access_key": state.auth_access_key,
          "limit": state.limit,
          "page_limit": state.page_limit,
          "initial_interval": state.initial_interval
        }
      )
    )
    :
    (
      has(state.cursor) && has(state.cursor.task_ready) && state.cursor.task_ready == false
      ?
      (
        request("GET", state.url.trim_right("/")+"/app/laas-logs-api/api/logs_query/"+state.cursor.task_id).with({
          "Header": {
            "Accept": ["application/json"],
            "Content-Type": ["application/json"],
            "Authorization": ["Bearer "+ state.cursor.auth_token],
          }
        }).do_request().as(resp,
          bytes(resp.Body).decode_json().as(body,
            body.data.state == "Ready"
            ?
            {
              "events": [],
              "want_more": true,
              "cursor": {
                "auth_token": state.cursor.auth_token,
                "task_id": state.cursor.task_id,
                "task_ready": true,
                "page_token": body.data.pageTokens[0],
                "next_startTime": (has(state.cursor) && has(state.cursor.next_startTime)) ? state.cursor.next_startTime : null,
                "last_page": null
              },
              "url": state.url,
              "auth_client_id": state.auth_client_id,
              "auth_access_key": state.auth_access_key,
              "limit": state.limit,
              "page_limit": state.page_limit,
              "initial_interval": state.initial_interval
            }
            :
            (
              body.data.state == "Done"
              ?
              {
                "events": [],
                "want_more": false,
                "cursor": {
                  "auth_token": null,
                  "task_id": null,
                  "task_ready": null,
                  "page_token": null,
                  "next_startTime": (has(state.cursor) && has(state.cursor.next_startTime)) ? state.cursor.next_startTime : null,
                    "last_page": null
                },
                "url": state.url,
                "auth_client_id": state.auth_client_id,
                "auth_access_key": state.auth_access_key,
                "limit": state.limit,
                "page_limit": state.page_limit,
                "initial_interval": state.initial_interval
              }
              :
              {
                "events": [],
                "want_more": true,
                "cursor": {
                  "auth_token": state.cursor.auth_token,
                  "task_id": state.cursor.task_id,
                  "task_ready": false,
                  "page_token": null,
                  "next_startTime": (has(state.cursor) && has(state.cursor.next_startTime)) ? state.cursor.next_startTime : null,
                  "last_page": null
                },
                "url": state.url,
                "auth_client_id": state.auth_client_id,
                "auth_access_key": state.auth_access_key,
                "limit": state.limit,
                "page_limit": state.page_limit,
                "initial_interval": state.initial_interval
              }
            )
          )
        )
      )
      :
      (
        request("POST", state.url.trim_right("/")+"/app/laas-logs-api/api/logs_query/retrieve").with({
          "Header": {
            "Accept": ["application/json"],
            "Content-Type": ["application/json"],
            "Authorization": ["Bearer "+ state.cursor.auth_token],
          },
          "Body": {
            "taskId": state.cursor.task_id,
            "pageToken": state.cursor.page_token
          }.encode_json(),
        }).do_request().as(resp,
          bytes(resp.Body).decode_json().as(body,
            body.data.nextPageToken == "NULL"
            ?
            {
              "events": body.data.records.map(e, { "message": e.encode_json(), }),
              "want_more": false,
              "cursor": {
                "auth_token": null,
                "task_id": null,
                "task_ready": null,
                "page_token": null,
                "next_startTime": timestamp(timestamp(body.data.records[0].time) + duration("1s")).format(time_layout.RFC3339),
                "last_page": null
              },
              "url": state.url,
              "auth_client_id": state.auth_client_id,
              "auth_access_key": state.auth_access_key,
              "limit": state.limit,
              "page_limit": state.page_limit,
              "initial_interval": state.initial_interval
            }
            :
            {
              "events": body.data.records.map(e, { "message": e.encode_json(), }),
              "want_more": true,
              "cursor": {
                "auth_token": state.cursor.auth_token,
                "task_id": state.cursor.task_id,
                "task_ready": true,
                "page_token": body.data.nextPageToken,
                "next_startTime": timestamp(timestamp(body.data.records[0].time) + duration("1s")).format(time_layout.RFC3339),
                "last_page": false
              },
              "url": state.url,
              "auth_client_id": state.auth_client_id,
              "auth_access_key": state.auth_access_key,
              "limit": state.limit,
              "page_limit": state.page_limit,
              "initial_interval": state.initial_interval
            }
          )
        )
      )
    )
  )
tags:
{{#if preserve_original_event}}
  - preserve_original_event
{{/if}}
{{#if preserve_duplicate_custom_fields}}
  - preserve_duplicate_custom_fields
{{/if}}
{{#each tags as |tag|}}
  - {{tag}}
{{/each}}
{{#contains "forwarded" tags}}
publisher_pipeline.disable_host: true
{{/contains}}
{{#if processors}}
processors:
{{processors}}
{{/if}}
