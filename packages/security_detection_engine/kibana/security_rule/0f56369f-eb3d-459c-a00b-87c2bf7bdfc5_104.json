{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "Monitors for the execution of a netcat listener via rlwrap. rlwrap is a 'readline wrapper', a small utility that uses the GNU Readline library to allow the editing of keyboard input for any command. This utility can be used in conjunction with netcat to gain a more stable reverse shell.",
        "false_positives": [
            "Netcat is a dual-use tool that can be used for benign or malicious activity. Netcat is included in some Linux distributions so its presence is not necessarily suspicious. Some normal use of this program, while uncommon, may originate from scripts, automation tools, and frameworks."
        ],
        "from": "now-9m",
        "index": [
            "logs-endpoint.events.*",
            "endgame-*",
            "logs-crowdstrike.fdr*",
            "logs-sentinel_one_cloud_funnel.*"
        ],
        "language": "eql",
        "license": "Elastic License v2",
        "name": "Netcat Listener Established via rlwrap",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Netcat Listener Established via rlwrap\n\nNetcat, a versatile networking tool, can establish connections for data transfer or remote shell access. When combined with rlwrap, which enhances command-line input, it can create a more stable reverse shell environment. Adversaries exploit this to maintain persistent access. The detection rule identifies such misuse by monitoring rlwrap's execution with netcat-related arguments, signaling potential unauthorized activity.\n\n### Possible investigation steps\n\n- Review the process execution details to confirm the presence of rlwrap with netcat-related arguments by examining the process.name and process.args fields.\n- Check the process start time and correlate it with any known scheduled tasks or user activity to determine if the execution was expected or authorized.\n- Investigate the source IP address and port used in the netcat connection to identify potential external connections or data exfiltration attempts.\n- Analyze the user account associated with the process execution to verify if the account has a history of similar activities or if it has been compromised.\n- Examine any related network traffic logs to identify unusual patterns or connections that coincide with the alert, focusing on the host where the process was executed.\n- Look for any additional processes spawned by the netcat listener to detect further malicious activity or persistence mechanisms.\n\n### False positive analysis\n\n- Development and testing environments may frequently use rlwrap with netcat for legitimate purposes, such as testing network applications or scripts. To manage this, create exceptions for specific user accounts or IP addresses known to be involved in development activities.\n- System administrators might use rlwrap with netcat for troubleshooting or network diagnostics. Identify and exclude these activities by setting up rules that recognize the specific command patterns or user roles associated with administrative tasks.\n- Automated scripts or cron jobs that utilize rlwrap and netcat for routine maintenance or monitoring can trigger false positives. Review and whitelist these scripts by their unique process identifiers or command structures to prevent unnecessary alerts.\n- Educational or training environments where rlwrap and netcat are used for learning purposes can generate alerts. Implement exceptions based on the environment's network segment or user group to reduce noise from these benign activities.\n\n### Response and remediation\n\n- Immediately isolate the affected host from the network to prevent further unauthorized access or data exfiltration.\n- Terminate the rlwrap and netcat processes on the affected host to disrupt the reverse shell connection.\n- Conduct a forensic analysis of the affected system to identify any additional malicious activities or persistence mechanisms.\n- Review and secure any compromised accounts or credentials that may have been used or accessed during the incident.\n- Apply security patches and updates to the affected system to mitigate any exploited vulnerabilities.\n- Enhance monitoring and logging on the affected host and network to detect similar activities in the future.\n- Report the incident to the appropriate internal security team or external authorities if required, following organizational protocols.",
        "query": "process where host.os.type == \"linux\" and event.type == \"start\" and\n  event.action in (\"exec\", \"exec_event\", \"start\", \"ProcessRollup2\") and\n  process.name == \"rlwrap\" and process.args in (\"nc\", \"ncat\", \"netcat\", \"nc.openbsd\", \"socat\") and\n  process.args : \"*l*\" and process.args_count >= 4\n",
        "related_integrations": [
            {
                "package": "endpoint",
                "version": "^8.2.0"
            },
            {
                "package": "crowdstrike",
                "version": "^1.1.0"
            },
            {
                "package": "sentinel_one_cloud_funnel",
                "version": "^1.0.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "event.action",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.os.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.args",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.args_count",
                "type": "long"
            },
            {
                "ecs": true,
                "name": "process.name",
                "type": "keyword"
            }
        ],
        "risk_score": 21,
        "rule_id": "0f56369f-eb3d-459c-a00b-87c2bf7bdfc5",
        "setup": "## Setup\n\nThis rule requires data coming in from Elastic Defend.\n\n### Elastic Defend Integration Setup\nElastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows\nthe Elastic Agent to monitor events on your host and send data to the Elastic Security app.\n\n#### Prerequisite Requirements:\n- Fleet is required for Elastic Defend.\n- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).\n\n#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:\n- Go to the Kibana home page and click \"Add integrations\".\n- In the query bar, search for \"Elastic Defend\" and select the integration to see more details about it.\n- Click \"Add Elastic Defend\".\n- Configure the integration name and optionally add a description.\n- Select the type of environment you want to protect, either \"Traditional Endpoints\" or \"Cloud Workloads\".\n- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).\n- We suggest to select \"Complete EDR (Endpoint Detection and Response)\" as a configuration setting, that provides \"All events; all preventions\"\n- Enter a name for the agent policy in \"New agent policy name\". If other agent policies already exist, you can click the \"Existing hosts\" tab and select an existing policy instead.\nFor more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).\n- Click \"Save and Continue\".\n- To complete the integration, select \"Add Elastic Agent to your hosts\" and continue to the next section to install the Elastic Agent on your hosts.\nFor more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).\n",
        "severity": "low",
        "tags": [
            "Domain: Endpoint",
            "OS: Linux",
            "Use Case: Threat Detection",
            "Tactic: Execution",
            "Data Source: Elastic Defend",
            "Data Source: Elastic Endgame",
            "Data Source: Crowdstrike",
            "Data Source: SentinelOne",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0002",
                    "name": "Execution",
                    "reference": "https://attack.mitre.org/tactics/TA0002/"
                },
                "technique": [
                    {
                        "id": "T1059",
                        "name": "Command and Scripting Interpreter",
                        "reference": "https://attack.mitre.org/techniques/T1059/",
                        "subtechnique": [
                            {
                                "id": "T1059.004",
                                "name": "Unix Shell",
                                "reference": "https://attack.mitre.org/techniques/T1059/004/"
                            }
                        ]
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "eql",
        "version": 104
    },
    "id": "0f56369f-eb3d-459c-a00b-87c2bf7bdfc5_104",
    "type": "security-rule"
}