{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "Detects suspicious use of sudo's --chroot / -R option consistent with attempts to exploit CVE-2025-32463 (the \"sudo chroot\" privilege escalation), where an attacker tricks sudo into using attacker-controlled NSS files or libraries to gain root.",
        "from": "now-9m",
        "index": [
            "logs-endpoint.events.process*",
            "logs-sentinel_one_cloud_funnel.*",
            "endgame-*",
            "auditbeat-*",
            "logs-auditd_manager.auditd-*",
            "logs-crowdstrike.fdr*"
        ],
        "language": "eql",
        "license": "Elastic License v2",
        "name": "Potential CVE-2025-32463 Sudo Chroot Execution Attempt",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Potential CVE-2025-32463 Sudo Chroot Execution Attempt\n\nThis rule highlights sudo invoked with the chroot (-R/--chroot) option outside normal administration, a behavior tied to CVE-2025-32463 where attackers force sudo to load attacker-controlled NSS configs or libraries and escalate to root. An attacker pattern: running sudo -R /tmp/fakechroot /bin/sh after seeding that directory with malicious nsswitch.conf and libnss to obtain a root shell. Treat unexpected chrooted sudo on Linux hosts as high-risk privilege escalation activity.\n\n### Possible investigation steps\n\n- Extract the chroot target path from the event and enumerate its etc and lib directories for attacker-seeded NSS artifacts (nsswitch.conf, libnss_*, ld.so.preload) and fake passwd/group files, noting recent mtime, ownership, and world-writable files.\n- Pivot to file-creation and modification telemetry to identify processes and users that populated that path shortly before execution (e.g., curl, wget, tar, git, gcc), linking them to the invoking user to establish intent.\n- Review session and process details to see if a shell or interpreter was launched inside the chroot and whether an euid transition to 0 occurred, indicating a successful privilege escalation.\n- Confirm sudo\u2019s package version and build options and the user\u2019s sudoers policy (secure_path/env_* settings and any NOPASSWD allowances) to assess exploitability and whether chroot usage was authorized.\n- Collect and preserve the chroot directory contents and relevant audit/log artifacts, and scope by searching for similar chroot invocations or NSS file seeds across the host and fleet.\n\n### False positive analysis\n\n- A legitimate offline maintenance session where an administrator chroots into a mounted system under /mnt or /srv using sudo --chroot to run package or initramfs commands, which will trigger when the invoked program is not in the whitelist.\n- An image-building or OS bootstrap workflow that stages a root filesystem and uses sudo -R to execute a shell or build/configuration scripts inside the chroot, producing the same pattern from a known user or host context.\n\n### Response and remediation\n\n- Immediately isolate the affected host from the network, revoke the invoking user\u2019s sudo privileges, and terminate any chrooted shells or child processes spawned via \u201csudo -R <path> /bin/sh\u201d or similar executions.\n- Preserve evidence and then remove attacker-seeded NSS and loader artifacts within the chroot path\u2014delete or replace nsswitch.conf, libnss_*.so, ld.so.preload, passwd, and group files, and clean up world-writable staging directories like /tmp/fakechroot.\n- Upgrade sudo to a fixed build that addresses CVE-2025-32463, and recover by restoring any modified system NSS and loader files from known-good backups while validating ownership, permissions, and hashes.\n- Escalate to full incident response if a root shell or process with euid 0 is observed, if /etc/ld.so.preload or /lib/libnss_*.so outside the chroot show unauthorized changes, or if similar \u201csudo -R\u201d executions appear across multiple hosts.\n- Harden by updating sudoers to remove NOPASSWD for chrooted commands, enforce Defaults env_reset and secure_path with noexec, disable \u201c--chroot\u201d usage for non-admin workflows, and monitor for creation of libnss_*.so or nsswitch.conf in non-standard directories.\n- Add platform controls by enabling SELinux/AppArmor policies on sudo and the dynamic loader, applying nodev,nosuid,noexec mounts to /tmp and build paths, and setting immutability (chattr +i) on /etc/nsswitch.conf where operationally feasible.\n",
        "query": "process where host.os.type == \"linux\" and event.type == \"start\" and\nevent.action in (\"exec\", \"exec_event\", \"start\", \"executed\", \"process_started\", \"ProcessRollup2\") and\nprocess.name == \"sudo\" and process.args in (\"-R\", \"--chroot\") and\n// To enforce the -R and --chroot arguments to be for sudo specifically, while wildcarding potential full sudo paths\nprocess.command_line like (\"*sudo -R*\", \"*sudo --chroot*\") \n",
        "references": [
            "https://www.stratascale.com/vulnerability-alert-CVE-2025-32463-sudo-chroot",
            "https://github.com/kh4sh3i/CVE-2025-32463"
        ],
        "related_integrations": [
            {
                "package": "endpoint",
                "version": "^9.0.0"
            },
            {
                "package": "auditd_manager",
                "version": "^1.18.0"
            },
            {
                "package": "sentinel_one_cloud_funnel",
                "version": "^1.9.0"
            },
            {
                "package": "crowdstrike",
                "version": "^2.0.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "event.action",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.os.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.args",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.command_line",
                "type": "wildcard"
            },
            {
                "ecs": true,
                "name": "process.name",
                "type": "keyword"
            }
        ],
        "risk_score": 73,
        "rule_id": "1d485649-c486-4f1d-a99c-8d64795795ad",
        "setup": "## Setup\n\nThis rule requires data coming in from Elastic Defend.\n\n### Elastic Defend Integration Setup\nElastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.\n\n#### Prerequisite Requirements:\n- Fleet is required for Elastic Defend.\n- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).\n\n#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:\n- Go to the Kibana home page and click \"Add integrations\".\n- In the query bar, search for \"Elastic Defend\" and select the integration to see more details about it.\n- Click \"Add Elastic Defend\".\n- Configure the integration name and optionally add a description.\n- Select the type of environment you want to protect, either \"Traditional Endpoints\" or \"Cloud Workloads\".\n- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).\n- We suggest selecting \"Complete EDR (Endpoint Detection and Response)\" as a configuration setting, that provides \"All events; all preventions\"\n- Enter a name for the agent policy in \"New agent policy name\". If other agent policies already exist, you can click the \"Existing hosts\" tab and select an existing policy instead.\nFor more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).\n- Click \"Save and Continue\".\n- To complete the integration, select \"Add Elastic Agent to your hosts\" and continue to the next section to install the Elastic Agent on your hosts.\nFor more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).\n",
        "severity": "high",
        "tags": [
            "Domain: Endpoint",
            "OS: Linux",
            "Use Case: Threat Detection",
            "Tactic: Privilege Escalation",
            "Data Source: Elastic Defend",
            "Data Source: SentinelOne",
            "Data Source: Crowdstrike",
            "Data Source: Elastic Endgame",
            "Data Source: Auditd Manager",
            "Use Case: Vulnerability",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0004",
                    "name": "Privilege Escalation",
                    "reference": "https://attack.mitre.org/tactics/TA0004/"
                },
                "technique": [
                    {
                        "id": "T1068",
                        "name": "Exploitation for Privilege Escalation",
                        "reference": "https://attack.mitre.org/techniques/T1068/"
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "eql",
        "version": 1
    },
    "id": "1d485649-c486-4f1d-a99c-8d64795795ad_1",
    "type": "security-rule"
}