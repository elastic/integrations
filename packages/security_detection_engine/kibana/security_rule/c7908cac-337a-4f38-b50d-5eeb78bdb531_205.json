{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "This rule detects when a user creates a pod/container running in privileged mode. A highly privileged container has access to the node's resources and breaks the isolation between containers. If compromised, an attacker can use the privileged container to gain access to the underlying host. Gaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, or setting up a command and control channel on the host.",
        "false_positives": [
            "By default a container is not allowed to access any devices on the host, but a \"privileged\" container is given access to all devices on the host. This allows the container nearly all the same access as processes running on the host. An administrator may want to run a privileged container to use operating system administrative capabilities such as manipulating the network stack or accessing hardware devices from within the cluster. Add exceptions for trusted container images using the query field \"kubernetes.audit.requestObject.spec.container.image\""
        ],
        "index": [
            "logs-kubernetes.*"
        ],
        "language": "kuery",
        "license": "Elastic License v2",
        "name": "Kubernetes Privileged Pod Created",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Kubernetes Privileged Pod Created\n\nKubernetes allows for the creation of privileged pods, which can access the host's resources, breaking container isolation. Adversaries may exploit this to escalate privileges, access sensitive data, or establish persistence. The detection rule identifies such events by monitoring audit logs for pod creation with privileged settings, excluding known safe images, to flag potential security threats.\n\n### Possible investigation steps\n\n- Review the Kubernetes audit logs to identify the user or service account responsible for creating the privileged pod by examining the `kubernetes.audit.annotations.authorization_k8s_io/decision` and `kubernetes.audit.verb:create` fields.\n- Investigate the context of the privileged pod creation by checking the `kubernetes.audit.requestObject.spec.containers.image` field to determine if the image used is known or potentially malicious.\n- Assess the necessity and legitimacy of the privileged pod by consulting with the relevant development or operations teams to understand if there was a valid reason for its creation.\n- Examine the `kubernetes.audit.objectRef.resource:pods` field to identify the specific pod and its associated namespace, and verify if it aligns with expected deployment patterns or environments.\n- Check for any subsequent suspicious activities or anomalies in the Kubernetes environment that may indicate further exploitation attempts, such as lateral movement or data exfiltration, following the creation of the privileged pod.\n\n### False positive analysis\n\n- Known safe images like \"docker.elastic.co/beats/elastic-agent:8.4.0\" are already excluded from triggering alerts. Ensure that any additional internal or third-party images that are verified as safe are added to the exclusion list to prevent unnecessary alerts.\n- Development and testing environments often use privileged pods for legitimate purposes. Consider creating separate rules or exceptions for these environments to avoid false positives while maintaining security in production.\n- Automated deployment tools or scripts might create privileged pods as part of their normal operation. Review these tools and, if they are deemed safe, add their specific actions or images to the exclusion list.\n- Regularly review and update the exclusion list to reflect changes in your environment, such as new safe images or changes in deployment practices, to maintain an accurate detection rule.\n\n### Response and remediation\n\n- Immediately isolate the affected node to prevent further exploitation and lateral movement within the cluster. This can be done by cordoning and draining the node to stop new pods from being scheduled and to safely evict existing pods.\n- Terminate the privileged pod to stop any ongoing malicious activity. Ensure that the termination is logged for further analysis.\n- Conduct a thorough review of the audit logs to identify any unauthorized access or actions taken by the privileged pod. Focus on any attempts to access sensitive data or escalate privileges.\n- Reset credentials and access tokens that may have been exposed or compromised due to the privileged pod's access to the host's resources.\n- Patch and update the Kubernetes environment and any affected nodes to address vulnerabilities that may have been exploited to create the privileged pod.\n- Implement network segmentation and firewall rules to limit the communication capabilities of pods, especially those with elevated privileges, to reduce the risk of lateral movement.\n- Escalate the incident to the security operations team for a comprehensive investigation and to assess the need for further security measures or incident response actions.",
        "query": "event.dataset : \"kubernetes.audit_logs\"\n  and kubernetes.audit.annotations.authorization_k8s_io/decision:\"allow\"\n  and kubernetes.audit.objectRef.resource:pods\n  and kubernetes.audit.verb:create\n  and kubernetes.audit.requestObject.spec.containers.securityContext.privileged:true\n  and not kubernetes.audit.requestObject.spec.containers.image: (\"docker.elastic.co/beats/elastic-agent:8.4.0\")\n",
        "references": [
            "https://media.defense.gov/2021/Aug/03/2002820425/-1/-1/1/CTR_KUBERNETES%20HARDENING%20GUIDANCE.PDF",
            "https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"
        ],
        "related_integrations": [
            {
                "package": "kubernetes",
                "version": "^1.4.1"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "event.dataset",
                "type": "keyword"
            },
            {
                "ecs": false,
                "name": "kubernetes.audit.annotations.authorization_k8s_io/decision",
                "type": "keyword"
            },
            {
                "ecs": false,
                "name": "kubernetes.audit.objectRef.resource",
                "type": "keyword"
            },
            {
                "ecs": false,
                "name": "kubernetes.audit.requestObject.spec.containers.image",
                "type": "keyword"
            },
            {
                "ecs": false,
                "name": "kubernetes.audit.requestObject.spec.containers.securityContext.privileged",
                "type": "boolean"
            },
            {
                "ecs": false,
                "name": "kubernetes.audit.verb",
                "type": "keyword"
            }
        ],
        "risk_score": 47,
        "rule_id": "c7908cac-337a-4f38-b50d-5eeb78bdb531",
        "setup": "The Kubernetes Fleet integration with Audit Logs enabled or similarly structured data is required to be compatible with this rule.",
        "severity": "medium",
        "tags": [
            "Data Source: Kubernetes",
            "Tactic: Execution",
            "Tactic: Privilege Escalation",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0004",
                    "name": "Privilege Escalation",
                    "reference": "https://attack.mitre.org/tactics/TA0004/"
                },
                "technique": [
                    {
                        "id": "T1611",
                        "name": "Escape to Host",
                        "reference": "https://attack.mitre.org/techniques/T1611/"
                    }
                ]
            },
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0002",
                    "name": "Execution",
                    "reference": "https://attack.mitre.org/tactics/TA0002/"
                },
                "technique": [
                    {
                        "id": "T1610",
                        "name": "Deploy Container",
                        "reference": "https://attack.mitre.org/techniques/T1610/"
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "query",
        "version": 205
    },
    "id": "c7908cac-337a-4f38-b50d-5eeb78bdb531_205",
    "type": "security-rule"
}