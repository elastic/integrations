{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "Identifies the first occurrence of an unauthorized attempt by an AWS role to use `GetPassword` to access the administrator password of an EC2 instance. Adversaries may use this API call to escalate privileges or move laterally within EC2 instances.",
        "from": "now-6m",
        "history_window_start": "now-7d",
        "index": [
            "filebeat-*",
            "logs-aws.cloudtrail*"
        ],
        "interval": "5m",
        "investigation_fields": {
            "field_names": [
                "@timestamp",
                "user.name",
                "user_agent.original",
                "source.address",
                "aws.cloudtrail.user_identity.arn",
                "aws.cloudtrail.user_identity.type",
                "aws.cloudtrail.user_identity.session_context.session_issuer.arn",
                "aws.cloudtrail.user_identity.access_key_id",
                "event.action",
                "event.outcome",
                "aws.cloudtrail.error_code",
                "aws.cloudtrail.request_parameters",
                "cloud.account.id",
                "cloud.region"
            ]
        },
        "language": "kuery",
        "license": "Elastic License v2",
        "name": "AWS EC2 Unauthorized Admin Credential Fetch via Assumed Role",
        "new_terms_fields": [
            "aws.cloudtrail.user_identity.session_context.session_issuer.arn"
        ],
        "note": "## Triage and analysis\n\n### Investigating AWS EC2 Unauthorized Admin Credential Fetch via Assumed Role\n\nThis rule detects the first occurrence of a role using the `GetPasswordData` API call, which retrieves the administrator password, against an unauthorized EC2 instance in AWS. This can be an indicator of an adversary attempting to escalate privileges or move laterally within EC2 instances.\n\nThis is a New Terms rule, which means it will only trigger once for each unique value of the `aws.cloudtrail.user_identity.session_context.session_issuer.arn` field that has not been seen making this API request within the last 7 days. This field contains the Amazon Resource Name (ARN) of the assumed role that triggered the API call.\n\n#### Possible Investigation Steps\n\n- **Identify the User Identity and Role**: Examine the AWS CloudTrail logs to determine the user identity that made the `GetPasswordData` request. Pay special attention to the role and permissions associated with the user.\n- **Review Request Parameters**: Analyze the `aws.cloudtrail.request_parameters` and `aws.cloudtrail.error_message` fields to understand the context of the API call.\n- **Contextualize with User Behavior**: Compare this activity against the role's typical behavior patterns. Look for unusual login times, IP addresses, or other anomalous actions taken by the role prior to and following the incident.\n- **Review EC2 Instance Details**: Check the details of the EC2 instance from which the password retrieval was attempted. Assess the criticality and sensitivity of the applications running on this instance.\n- **Examine Related CloudTrail Events**: Search for other API calls made by the same role, especially those modifying security groups, network access controls, or instance metadata.\n- **Investigate the Origin of the API Call**: Analyze the IP address and geographical location from which the request originated. Determine if it aligns with expected locations for legitimate administrative activity.\n\n### False Positive Analysis\n\n- **Legitimate Administrative Actions**: Ensure that the activity was not part of legitimate administrative tasks such as system maintenance or updates.\n- **Automation Scripts**: Verify if the activity was generated by automation or deployment scripts that are authorized to use `GetPasswordData` for legitimate purposes.\n\n### Response and Remediation\n\n- **User Account Review**: Review the permissions of the implicated user identity. Apply the principle of least privilege by adjusting permissions to prevent misuse.\n- **Enhanced Monitoring**: Increase monitoring on the user identity that triggered the rule and similar EC2 instances.\n- **Incident Response**: If malicious intent is confirmed, initiate the incident response protocol. This includes further investigation, containment of the threat, eradication of any threat actor presence, and recovery of affected systems.\n- **Preventative Measures**: Implement or enhance security measures such as multi-factor authentication and continuous audits of sensitive operations like `GetPasswordData`.\n\n### Additional Information\n\nRefer to resources like [AWS privilege escalation methods](https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-privilege-escalation/aws-ec2-privesc) and the MITRE ATT&CK technique [T1552.005 - Cloud Instance Metadata API](https://attack.mitre.org/techniques/T1552/005/) for more details on potential vulnerabilities and mitigation strategies.\n\n",
        "query": "event.dataset:\"aws.cloudtrail\"\n    and event.provider:\"ec2.amazonaws.com\" and event.action:\"GetPasswordData\"\n    and aws.cloudtrail.user_identity.type:\"AssumedRole\" and aws.cloudtrail.error_code:\"Client.UnauthorizedOperation\"\n",
        "references": [
            "https://cloud.hacktricks.xyz/pentesting-cloud/aws-security/aws-privilege-escalation/aws-ec2-privesc"
        ],
        "related_integrations": [
            {
                "integration": "cloudtrail",
                "package": "aws",
                "version": "^3.0.0"
            }
        ],
        "required_fields": [
            {
                "ecs": false,
                "name": "aws.cloudtrail.error_code",
                "type": "keyword"
            },
            {
                "ecs": false,
                "name": "aws.cloudtrail.user_identity.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.action",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.dataset",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.provider",
                "type": "keyword"
            }
        ],
        "risk_score": 47,
        "rule_id": "8446517c-f789-11ee-8ad0-f661ea17fbce",
        "severity": "medium",
        "tags": [
            "Domain: Cloud",
            "Data Source: AWS",
            "Data Source: Amazon Web Services",
            "Data Source: AWS EC2",
            "Use Case: Identity and Access Audit",
            "Resources: Investigation Guide",
            "Tactic: Credential Access"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0006",
                    "name": "Credential Access",
                    "reference": "https://attack.mitre.org/tactics/TA0006/"
                },
                "technique": [
                    {
                        "id": "T1552",
                        "name": "Unsecured Credentials",
                        "reference": "https://attack.mitre.org/techniques/T1552/",
                        "subtechnique": [
                            {
                                "id": "T1552.005",
                                "name": "Cloud Instance Metadata API",
                                "reference": "https://attack.mitre.org/techniques/T1552/005/"
                            }
                        ]
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "new_terms",
        "version": 7
    },
    "id": "8446517c-f789-11ee-8ad0-f661ea17fbce_7",
    "type": "security-rule"
}