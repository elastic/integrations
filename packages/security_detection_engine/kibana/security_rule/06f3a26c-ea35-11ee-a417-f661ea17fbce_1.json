{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "Generates a detection alert each time an Elastic Defend alert for memory signatures are received. Enabling this rule allows you to immediately begin investigating your Endpoint memory signature alerts. This rule identifies Elastic Defend memory signature preventions only, and does not include detection only alerts.",
        "enabled": false,
        "exceptions_list": [
            {
                "id": "endpoint_list",
                "list_id": "endpoint_list",
                "namespace_type": "agnostic",
                "type": "endpoint"
            }
        ],
        "from": "now-10m",
        "index": [
            "logs-endpoint.alerts-*"
        ],
        "interval": "5m",
        "language": "kuery",
        "license": "Elastic License v2",
        "max_signals": 10000,
        "name": "Memory Threat - Prevented- Elastic Defend",
        "note": "## Triage and analysis\n\n### Investigating Memory Threat Alerts\n\nElastic Endpoint\u2019s memory threat protection adds a layer of coverage for advanced attacks which avoid the traditional approach of writing payloads to disk. Instead, the malicious code runs only in-memory, an effective technique for evading legacy security products. There are currently two sub-categories of memory threat protection.\n\nThe first category is referred to as memory signatures and is available on all supported OS. It operates by periodically scanning process executable memory regions based on their activity to identify and terminate known bad malware.\n\nThe second category is referred to as shellcode thread and is unique to Windows endpoints today. A common technique of in-memory malware is to load the payload in a memory region not backed by a file on disk and create a thread to execute it.\n\n### Possible investigation steps\n\n- Investigate the process execution chain (parent process tree) for unknown processes. Examine their executable files for prevalence, whether they are located in expected locations, and if they are signed with valid digital signatures.\n- Assess whether this behavior is prevalent in the environment by looking for similar occurrences across hosts :\n   - For shellcode alerts, the key for bucketing alerts is stored in the `Memory_protection.unique_key_v1` field.\n   - For Memory signature alerts, bucket based on the signatures which match `rule.name`.\n- Examine the following fields if there are any matches on known Yara signatures:\n  - `process.Ext.memory_region.malware_signature.all_names`\n  - `Target.process.Ext.memory_region.malware_signature.all_names`\n  - `process.Ext.memory_region.malware_signature.primary.signature.name`\n- Review the memory region strings for any suspicious or unique keywords captured in `process.Ext.memory_region.strings` and `Target.process.Ext.memory_region.strings`.\n- For signature matches review the `process.Ext.memory_region.malware_signature.primary.matches` and `process.Ext.memory_region.malware_signature.secondary.matches` to understand which keywords or byte sequences matched on the memory Yara signature.\n- For shellcode alerts, check the field `Memory_protection.self_injection` value, if it's false it means it's a remote shellcode injection and you need to review the Target process details like `Target.process.executable` fields.\n- Even if the acting process is signed, review any unsigned or suspicious loaded libraries (adversaries may use `DLL Side-Loading`) captured in:\n  - `process.thread.Ext.call_stack.module_path`\n  - `process.Ext.dll.path and process.Ext.dll.hash.sha256`\n  - `Target.process.Ext.dll.hash.sha256`\n  - `Target.process.Ext.dll.path`\n- If you have access to VirusTotal of similar services, you can also perform vGrep searches to look for files with bytes matching on `process.thread.Ext.start_address_bytes` or `Target.process.thread.Ext.start_address_bytes`.\n- Investigate any abnormal behavior by the subject process, such as network connections, registry or file modifications, and any spawned child processes.\n\n### False positive analysis\n\n- False positives may include Yara signature matches on generic keywords or some third party software performing code injection (often all involved files are signed and by the same vendor).\n\n### Response and Remediation\n\n- Initiate the incident response process based on the outcome of the triage.\n  - If malicious activity is confirmed, perform a broader investigation to identify the scope of the compromise and determine the appropriate remediation steps.\n- Implement Elastic Endpoint Security to detect and prevent further post exploitation activities in the environment.\n   - Contain the affected system by isolating it from the network to prevent further spread of the attack.\n- If the triage identified malware, search the environment for additional compromised hosts.\n  - Implement temporary network rules, procedures, and segmentation to contain the malware.\n  - Stop suspicious processes.\n  - Immediately block the identified indicators of compromise (IoCs).\n  - Inspect the affected systems for additional malware backdoors like reverse shells, reverse proxies, or droppers that attackers could use to reinfect the system.\n- Remove and block malicious artifacts identified during triage.\n- Restore the affected system to its operational state by applying any necessary patches, updates, or configuration changes.\n- Investigate credential exposure on systems compromised or used by the attacker to ensure all compromised accounts are identified. Reset passwords for these accounts and other potentially compromised credentials, such as email, business systems, and web services.\n- Run a full antimalware scan. This may reveal additional artifacts left in the system, persistence mechanisms, and malware components.\n- Determine the initial vector abused by the attacker and take action to prevent reinfection through the same vector.\n- Using the incident response data, update logging and audit policies to improve the mean time to detect (MTTD) and the mean time to respond (MTTR).\n",
        "query": "event.kind : alert and event.code : (memory_signature or shellcode_thread) and event.type : denied and event.outcome : success\n",
        "references": [
            "https://github.com/elastic/protections-artifacts/tree/main/yara",
            "https://docs.elastic.co/en/integrations/endpoint"
        ],
        "related_integrations": [
            {
                "package": "endpoint",
                "version": "^8.2.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "event.code",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.kind",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.outcome",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.type",
                "type": "keyword"
            }
        ],
        "risk_score": 73,
        "risk_score_mapping": [
            {
                "field": "event.risk_score",
                "operator": "equals",
                "value": ""
            }
        ],
        "rule_id": "06f3a26c-ea35-11ee-a417-f661ea17fbce",
        "rule_name_override": "message",
        "setup": "## Setup\n\n### Elastic Defend Alerts\nThis rule is designed to capture specific alerts generated by Elastic Defend.\n\nTo capture all the Elastic Defend alerts, it is recommended to use all of the Elastic Defend feature-specific protection rules:\n\nBehavior - Detected - Elastic Defend (UUID: 0f615fe4-eaa2-11ee-ae33-f661ea17fbce)\nBehavior - Prevented - Elastic Defend (UUID: eb804972-ea34-11ee-a417-f661ea17fbce)\nMalicious File - Detected - Elastic Defend (UUID: f2c3caa6-ea34-11ee-a417-f661ea17fbce)\nMalicious File - Prevented - Elastic Defend (UUID: f87e6122-ea34-11ee-a417-f661ea17fbce)\nMemory Threat - Detected - Elastic Defend (UUID: 017de1e4-ea35-11ee-a417-f661ea17fbce)\nMemory Threat - Prevented - Elastic Defend (UUID: 06f3a26c-ea35-11ee-a417-f661ea17fbce)\nRansomware - Detected - Elastic Defend (UUID: 0c74cd7e-ea35-11ee-a417-f661ea17fbce)\nRansomware - Prevented - Elastic Defend (UUID: 10f3d520-ea35-11ee-a417-f661ea17fbce)\n\nTo avoid generating duplicate alerts, you should enable either all feature-specific protection rules or the Endpoint Security (Elastic Defend) rule (UUID: 9a1a2dae-0b5f-4c3d-8305-a268d404c306).\n\n### Additional notes\nThis rule is configured to generate more **Max alerts per run** than the default 1000 alerts per run set for all rules. This is to ensure that it captures as many alerts as possible.\n\n**IMPORTANT:** The rule's **Max alerts per run** setting can be superseded by the `xpack.alerting.rules.run.alerts.max` Kibana config setting, which determines the maximum alerts generated by _any_ rule in the Kibana alerting framework. For example, if `xpack.alerting.rules.run.alerts.max` is set to 1000, this rule will still generate no more than 1000 alerts even if its own **Max alerts per run** is set higher.\n\nTo make sure this rule can generate as many alerts as it's configured in its own **Max alerts per run** setting, increase the `xpack.alerting.rules.run.alerts.max` system setting accordingly.\n\n**NOTE:** Changing `xpack.alerting.rules.run.alerts.max` is not possible in Serverless projects.\n",
        "severity": "high",
        "severity_mapping": [
            {
                "field": "event.severity",
                "operator": "equals",
                "severity": "low",
                "value": "21"
            },
            {
                "field": "event.severity",
                "operator": "equals",
                "severity": "medium",
                "value": "47"
            },
            {
                "field": "event.severity",
                "operator": "equals",
                "severity": "high",
                "value": "73"
            },
            {
                "field": "event.severity",
                "operator": "equals",
                "severity": "critical",
                "value": "99"
            }
        ],
        "tags": [
            "Data Source: Elastic Defend",
            "Tactic: Defense Evasion"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0005",
                    "name": "Defense Evasion",
                    "reference": "https://attack.mitre.org/tactics/TA0005/"
                },
                "technique": [
                    {
                        "id": "T1055",
                        "name": "Process Injection",
                        "reference": "https://attack.mitre.org/techniques/T1055/"
                    },
                    {
                        "id": "T1620",
                        "name": "Reflective Code Loading",
                        "reference": "https://attack.mitre.org/techniques/T1620/"
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "query",
        "version": 1
    },
    "id": "06f3a26c-ea35-11ee-a417-f661ea17fbce_1",
    "type": "security-rule"
}