{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "Identifies potential ransomware note being uploaded to an AWS S3 bucket. This rule detects the PutObject S3 API call with a common ransomware note file name or extension such as ransom or .lock. Adversaries with access to a misconfigured S3 bucket may retrieve, delete, and replace objects with ransom notes to extort victims.",
        "false_positives": [
            "Administrators may legitimately access, delete, and replace objects in S3 buckets. Ensure that the uploaded files are not part of a legitimate operation before taking action."
        ],
        "from": "now-6m",
        "index": [
            "filebeat-*",
            "logs-aws.cloudtrail-*"
        ],
        "investigation_fields": {
            "field_names": [
                "@timestamp",
                "user.name",
                "user_agent.original",
                "source.ip",
                "aws.cloudtrail.user_identity.arn",
                "aws.cloudtrail.user_identity.type",
                "aws.cloudtrail.user_identity.access_key_id",
                "aws.cloudtrail.resources.arn",
                "aws.cloudtrail.resources.type",
                "tls.client.server_name",
                "event.action",
                "event.outcome",
                "cloud.account.id",
                "cloud.region",
                "aws.cloudtrail.request_parameters",
                "aws.cloudtrail.response_elements"
            ]
        },
        "language": "eql",
        "license": "Elastic License v2",
        "name": "Potential AWS S3 Bucket Ransomware Note Uploaded",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Potential AWS S3 Bucket Ransomware Note Uploaded\n\nThis rule detects a successful `PutObject` to S3 where the object key matches common ransomware-note patterns (for example, `readme`, `how_to_decrypt`, `decrypt_instructions`, `ransom`, `lock`). Attackers who obtain credentials or abuse overly-permissive bucket policies can upload ransom notes (often after deleting or encrypting data).\n\n#### Possible Investigation Steps:\n- **Confirm the actor and session details.** Review `aws.cloudtrail.user_identity.*` (ARN, type, access key, session context), `source.ip`, `user.agent`, and `tls.client.server_name` to identify *who* performed the upload and *from where*. Validate whether this principal typically writes to this bucket. \n- **Inspect the object key and bucket context.** From `aws.cloudtrail.request_parameters`, capture the exact `key` and `bucketName`. Check whether the key is publicly readable (ACL), whether the bucket is internet-exposed, and whether replication or lifecycle rules could propagate or remove related objects. \n- **Pivot to related S3 activity around the same time.** Look for `DeleteObject`/`DeleteObjects`, mass `PutObject` spikes, `PutBucketPolicy`, `PutPublicAccessBlock`, `PutBucketVersioning`, and `PutBucketLifecycleConfiguration` events on the same bucket or by the same actor to determine if data destruction, policy tampering, or guard-rail changes occurred. \n- **Assess blast radius across the account.** Search recent CloudTrail for the same actor/IP touching other buckets, KMS keys used by those buckets, and IAM changes (new access keys, policy attachments, role assumptions) that could indicate broader compromise paths consistent with ransomware playbooks. \n- **Check protections and recovery posture on the bucket.** Verify whether S3 Versioning and (if in use) Object Lock legal hold are enabled; note prior versions available for the affected key, and whether lifecycle rules might expire them. \n- **Correlate with threat signals.** Review other related alerts, GuardDuty S3-related findings, AWS Config drift on the bucket and its policy, and any SOAR/IR runbook executions tied to ransomware triage. \n\n### False Positive Analysis:\n- **Planned tests or red-team exercises.** Confirm change tickets or test windows for staging/dev buckets; red teams often drop \u201cransom-note-like\u201d files during exercises. \n- **Benign automation naming.** Some data-migration or backup tools may use \u201creadme\u201d/\u201crecovery\u201d-style filenames; validate by `user.agent`, principal, and target environment (dev vs prod). \n- **Log/archive buckets.** Exclude infrastructure/logging buckets (for example, `AWSLogs`, CloudTrail, access logs) per rule guidance to reduce noise. \n\n### Response and Remediation:\n\n**1. Immediate, low-risk actions (safe for most environments)**\n- **Preserve context:** Export the triggering `PutObject` CloudTrail record(s), plus 15\u201330 min before/after, to an evidence bucket (restricted access). \n- **Snapshot configuration:** Record current bucket settings (Block Public Access, Versioning, Object Lock, Bucket Policy, Lifecycle rules) and any KMS keys used.\n- **Quiet the spread:** Pause destructive automation: disable/bypass lifecycle rules that would expire/delete object versions; temporarily pause data pipelines targeting the bucket.\n- **Notify owners:** Inform the bucket/application owner(s) and security leadership.\n\n**2. Containment options (choose the least disruptive first)**\n- **Harden exposure:** If not already enforced, enable `Block Public Access` for the bucket.\n- **Targeted deny policy (temporary):** Add a restrictive bucket policy allowing only IR/admin roles while you scope impact. Reconfirm critical workload dependencies before applying.\n- **Credential risk reduction:** If a specific IAM user/key or role is implicated, rotate access keys; for roles, remove risky policy attachments or temporarily restrict with an SCP/deny statement.\n\n**3. Evidence preservation**\n- Export relevant CloudTrail events, S3 server/access logs (if enabled), AWS Config history for the bucket/policy, and the suspicious object plus its previous versions (if Versioning is enabled).\n- Document actor ARN, source IPs, user agent(s), exact `bucketName`/`key`, and timestamps. Maintain a simple chain-of-custody note for collected artifacts.\n\n**4. Scope and hunting (same actor/time window)**\n- Look for `DeleteObject(s)`, unusual `PutObject` volume, `PutBucketPolicy`, `PutPublicAccessBlock`, `PutBucketVersioning` changes, `PutBucketLifecycleConfiguration`, and cross-account access.\n- Cross reference other buckets touched by the same actor/IP; recent IAM changes (new keys, policy/role edits); GuardDuty findings tied to S3/credentials.\n\n**5. Recovery (prioritize data integrity)**\n- If Versioning is enabled, restore last known-good versions for impacted objects. Consider applying Object Lock legal hold to clean versions during recovery if configured.\n- If Versioning is not enabled, recover from backups (AWS Backup, replication targets). Enable Versioning going forward on critical buckets; evaluate Object Lock for high-value data.\n- Carefully remove any temporary deny policy only after credentials are rotated, policies re-validated, and no ongoing destructive activity is observed.\n\n**6. Post-incident hardening**\n- Enforce `Block Public Access`, enable Versioning (and MFA-Delete where appropriate), and review bucket policies for least privilege.\n- Ensure continuous CloudTrail data events for S3 are enabled in covered regions; enable/verify GuardDuty S3 protections and alerts routing.\n- Add detections for related behaviors (policy tampering, bulk deletes, versioning/lifecycle toggles) and create allowlists for known maintenance windows.\n\n**7. Communication & escalation**\n- If you have an IR team/provider: escalate with the evidence bundle and a summary (bucket/key, actor, protections, related activity, business impact).\n- If you do not have an IR team: designate an internal incident lead, track actions/time, and follow these steps conservatively. Favor reversible controls (temporary deny, key rotation) over invasive changes.\n\n### Additional Information:\n- For further guidance on managing S3 bucket security and protecting against ransomware, refer to the [AWS S3 documentation](https://docs.aws.amazon.com/AmazonS3/latest/userguide/Welcome.html) and AWS best practices for security.\n- [AWS IRP\u2014Ransomware](https://github.com/aws-samples/aws-incident-response-playbooks/blob/c151b0dc091755fffd4d662a8f29e2f6794da52c/playbooks/IRP-Ransomware.md) (NIST-aligned template for evidence, containment, eradication, recovery, post-incident). \n- [AWS Customer Playbook\u2014Ransom Response (S3)](https://github.com/aws-samples/aws-customer-playbook-framework/blob/a8c7b313636b406a375952ac00b2d68e89a991f2/docs/Ransom_Response_S3.md) (bucket-level response steps: public access blocks, temporary deny, versioning/object lock, lifecycle considerations, recovery). \n",
        "query": "file where\n  event.dataset == \"aws.cloudtrail\" and\n  event.provider == \"s3.amazonaws.com\" and\n  event.action == \"PutObject\" and\n  event.outcome == \"success\" and\n  /* Apply regex to match patterns only after the bucket name */\n  aws.cloudtrail.resources.arn regex \"arn:aws:s3:::[^/]+/.*?(ransom|lock|crypt|enc|readme|how_to_decrypt|decrypt_instructions|recovery|datarescue).*\" and\n  not aws.cloudtrail.resources.arn regex \".*(AWSLogs|CloudTrail|access-logs).*\"\n",
        "references": [
            "https://stratus-red-team.cloud/attack-techniques/AWS/aws.impact.s3-ransomware-batch-deletion/",
            "https://rhinosecuritylabs.com/aws/s3-ransomware-part-1-attack-vector/"
        ],
        "related_integrations": [
            {
                "integration": "cloudtrail",
                "package": "aws",
                "version": "^4.0.0"
            }
        ],
        "required_fields": [
            {
                "ecs": false,
                "name": "aws.cloudtrail.resources.arn",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.action",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.dataset",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.outcome",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.provider",
                "type": "keyword"
            }
        ],
        "risk_score": 47,
        "rule_id": "7fda9bb2-fd28-11ee-85f9-f661ea17fbce",
        "setup": "AWS S3 data types need to be enabled in the CloudTrail trail configuration to capture PutObject API calls.",
        "severity": "medium",
        "tags": [
            "Domain: Cloud",
            "Data Source: AWS",
            "Data Source: Amazon Web Services",
            "Data Source: AWS S3",
            "Use Case: Threat Detection",
            "Tactic: Impact",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0040",
                    "name": "Impact",
                    "reference": "https://attack.mitre.org/tactics/TA0040/"
                },
                "technique": [
                    {
                        "id": "T1485",
                        "name": "Data Destruction",
                        "reference": "https://attack.mitre.org/techniques/T1485/"
                    },
                    {
                        "id": "T1486",
                        "name": "Data Encrypted for Impact",
                        "reference": "https://attack.mitre.org/techniques/T1486/"
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "eql",
        "version": 7
    },
    "id": "7fda9bb2-fd28-11ee-85f9-f661ea17fbce_7",
    "type": "security-rule"
}