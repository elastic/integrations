{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "Identifies an outbound network connection by JAVA to LDAP, RMI or DNS standard ports followed by a suspicious JAVA child processes. This may indicate an attempt to exploit a JAVA/NDI (Java Naming and Directory Interface) injection vulnerability.",
        "from": "now-9m",
        "index": [
            "auditbeat-*",
            "logs-endpoint.events.*"
        ],
        "language": "eql",
        "license": "Elastic License v2",
        "name": "Potential JAVA/JNDI Exploitation Attempt",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Potential JAVA/JNDI Exploitation Attempt\n\nJava Naming and Directory Interface (JNDI) is a Java API that provides naming and directory functionality, allowing Java applications to discover and look up data and resources via a directory service. Adversaries exploit JNDI by injecting malicious payloads that trigger outbound connections to LDAP, RMI, or DNS services, potentially leading to remote code execution. The detection rule identifies such exploitation attempts by monitoring Java processes making suspicious outbound connections followed by the execution of potentially harmful child processes, such as shell scripts or scripting languages, indicating a possible compromise.\n\n### Possible investigation steps\n\n- Review the network logs to confirm the outbound connection attempt by the Java process to the specified ports (1389, 389, 1099, 53, 5353) and identify the destination IP addresses to determine if they are known malicious or suspicious entities.\n- Examine the process tree to verify the parent-child relationship between the Java process and any suspicious child processes such as shell scripts or scripting languages (e.g., sh, bash, curl, python).\n- Check the command line arguments and environment variables of the suspicious child processes to identify any potentially malicious payloads or commands being executed.\n- Investigate the host's recent activity and logs for any other indicators of compromise or unusual behavior that might correlate with the suspected exploitation attempt.\n- Assess the system for any unauthorized changes or new files that may have been introduced as a result of the exploitation attempt, focusing on directories commonly used by Java applications.\n\n### False positive analysis\n\n- Development and testing environments may trigger false positives when developers use Java applications to test connections to LDAP, RMI, or DNS services. To mitigate this, exclude known development servers or IP ranges from the detection rule.\n- Automated scripts or maintenance tasks that involve Java applications making legitimate outbound connections to the specified ports can be mistaken for exploitation attempts. Identify and whitelist these scripts or tasks by their process names or hashes.\n- Legitimate Java-based applications that require frequent updates or data retrieval from external services might generate similar network patterns. Monitor and document these applications, then create exceptions for their specific network behaviors.\n- Security tools or monitoring solutions that use Java for network scanning or analysis might inadvertently match the rule's criteria. Ensure these tools are recognized and excluded by their process identifiers or network activity profiles.\n\n### Response and remediation\n\n- Immediately isolate the affected host from the network to prevent further outbound connections and potential lateral movement.\n- Terminate any suspicious Java processes identified in the alert, especially those making outbound connections to LDAP, RMI, or DNS ports.\n- Conduct a thorough review of the affected system for any unauthorized changes or additional malicious processes, focusing on child processes like shell scripts or scripting languages.\n- Restore the affected system from a known good backup if unauthorized changes or malware are detected.\n- Update and patch Java and any related applications to the latest versions to mitigate known vulnerabilities.\n- Implement network-level controls to block outbound connections to suspicious or unauthorized LDAP, RMI, or DNS services from Java processes.\n- Escalate the incident to the security operations center (SOC) or incident response team for further investigation and to assess the potential impact on other systems within the network.",
        "query": "sequence by host.id with maxspan=1m\n [network where event.action == \"connection_attempted\" and\n  process.name : \"java\" and\n  /*\n     outbound connection attempt to\n     LDAP, RMI or DNS standard ports\n     by JAVA process\n   */\n  destination.port in (1389, 389, 1099, 53, 5353)] by process.pid\n [process where event.type == \"start\" and\n\n  /* Suspicious JAVA child process */\n  process.parent.name : \"java\" and\n   process.name : (\"sh\",\n                   \"bash\",\n                   \"dash\",\n                   \"ksh\",\n                   \"tcsh\",\n                   \"zsh\",\n                   \"curl\",\n                   \"perl*\",\n                   \"python*\",\n                   \"ruby*\",\n                   \"php*\",\n                   \"wget\") and\n    not process.command_line like~ (\n      \"bash -c ulimit -u\",\n      \"bash /opt/flutter/bin/flutter*\",\n      \"bash -c echo $$\",\n      \"/bin/bash /opt/python3/bin/jira*\",\n      \"/bin/sh -c env LC_ALL=C /usr/sbin/lpc status*\"\n    )] by process.parent.pid\n",
        "references": [
            "https://www.lunasec.io/docs/blog/log4j-zero-day/",
            "https://github.com/christophetd/log4shell-vulnerable-app",
            "https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE.pdf",
            "https://www.elastic.co/security-labs/detecting-log4j2-with-elastic-security",
            "https://www.elastic.co/security-labs/analysis-of-log4shell-cve-2021-45046"
        ],
        "related_integrations": [
            {
                "package": "endpoint",
                "version": "^8.2.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "destination.port",
                "type": "long"
            },
            {
                "ecs": true,
                "name": "event.action",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.id",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.command_line",
                "type": "wildcard"
            },
            {
                "ecs": true,
                "name": "process.name",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.parent.name",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.parent.pid",
                "type": "long"
            },
            {
                "ecs": true,
                "name": "process.pid",
                "type": "long"
            }
        ],
        "risk_score": 73,
        "rule_id": "c3f5e1d8-910e-43b4-8d44-d748e498ca86",
        "severity": "high",
        "tags": [
            "Domain: Endpoint",
            "OS: Linux",
            "OS: macOS",
            "Use Case: Threat Detection",
            "Tactic: Execution",
            "Use Case: Vulnerability",
            "Data Source: Elastic Defend",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0002",
                    "name": "Execution",
                    "reference": "https://attack.mitre.org/tactics/TA0002/"
                },
                "technique": [
                    {
                        "id": "T1059",
                        "name": "Command and Scripting Interpreter",
                        "reference": "https://attack.mitre.org/techniques/T1059/",
                        "subtechnique": [
                            {
                                "id": "T1059.007",
                                "name": "JavaScript",
                                "reference": "https://attack.mitre.org/techniques/T1059/007/"
                            }
                        ]
                    },
                    {
                        "id": "T1203",
                        "name": "Exploitation for Client Execution",
                        "reference": "https://attack.mitre.org/techniques/T1203/"
                    }
                ]
            }
        ],
        "type": "eql",
        "version": 105
    },
    "id": "c3f5e1d8-910e-43b4-8d44-d748e498ca86_105",
    "type": "security-rule"
}