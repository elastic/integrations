{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "This rule detects an incoming SSH connection established inside a running container. Running an ssh daemon inside a container should be avoided and monitored closely if necessary. If an attacker gains valid credentials they can use it to gain initial access or establish persistence within a compromised environment.",
        "false_positives": [
            "SSH usage may be legitimate depending on the environment. Access patterns and follow-on activity should be analyzed to distinguish between authorized and potentially malicious behavior."
        ],
        "from": "now-6m",
        "index": [
            "logs-cloud_defend*"
        ],
        "interval": "5m",
        "language": "eql",
        "license": "Elastic License v2",
        "name": "SSH Connection Established Inside A Running Container",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating SSH Connection Established Inside A Running Container\n\nSSH (Secure Shell) is a protocol used to securely access and manage systems remotely. In containerized environments, running an SSH daemon is generally discouraged due to security risks. Adversaries may exploit SSH to gain unauthorized access or maintain persistence within a compromised container. The detection rule identifies SSH connections initiated within containers by monitoring for SSH daemon processes that start new sessions, indicating potential unauthorized access attempts. This rule is crucial for identifying and mitigating threats related to initial access and lateral movement within containerized environments.\n\n### Possible investigation steps\n\n- Review the container ID associated with the alert to identify the specific container where the SSH connection was established.\n- Examine the process details, particularly focusing on the entry leader and session leader fields, to determine if the SSH daemon process is the initial process or part of a new session within the container.\n- Check for any interactive sessions initiated by the SSH daemon to confirm if the connection was actively used for interaction.\n- Investigate the source of the SSH connection by analyzing network logs or connection details to identify the originating IP address and assess if it is known or suspicious.\n- Correlate the event with user activity logs to determine if the SSH connection aligns with expected user behavior or if it indicates potential unauthorized access.\n- Assess the container's configuration and security posture to understand why an SSH daemon is running and evaluate if it is necessary or a security oversight.\n- Review any recent changes or deployments related to the container to identify potential vulnerabilities or misconfigurations that could have been exploited.\n\n### False positive analysis\n\n- Legitimate administrative access to containers via SSH may trigger the rule. To manage this, create exceptions for known administrative IP addresses or user accounts that regularly access containers for maintenance.\n- Automated scripts or tools that use SSH for legitimate purposes, such as configuration management or deployment, can cause false positives. Identify these tools and exclude their specific process signatures or user accounts from the rule.\n- Development or testing environments where SSH is used for debugging or monitoring may also trigger alerts. Consider excluding these environments by tagging them appropriately and adjusting the rule to ignore these tags.\n- Containers running legacy applications that require SSH for functionality might be flagged. Document these applications and create exceptions based on their specific container IDs or hostnames.\n\n### Response and remediation\n\n- Immediately isolate the affected container to prevent further unauthorized access or lateral movement within the environment.\n- Terminate the SSH daemon process running inside the container to cut off any active unauthorized sessions.\n- Conduct a thorough review of access logs and container activity to identify any unauthorized access attempts or suspicious behavior.\n- Revoke any compromised credentials and enforce a password reset for affected accounts to prevent further unauthorized access.\n- Deploy updated container images without SSH daemons and ensure that future container deployments adhere to security best practices.\n- Implement network segmentation to limit access to containerized environments and reduce the attack surface for similar threats.\n- Escalate the incident to the security operations team for further investigation and to assess the potential impact on the broader environment.",
        "query": "process where container.id: \"*\" and event.type == \"start\" and\n\n/* use of sshd to enter a container*/\nprocess.entry_leader.entry_meta.type: \"sshd\"  and\n\n/* process is the initial process run in a container or start of a new session*/\n(process.entry_leader.same_as_process== true or process.session_leader.same_as_process== true) and\n\n/* interactive process*/\nprocess.interactive== true\n",
        "references": [
            "https://microsoft.github.io/Threat-Matrix-for-Kubernetes/techniques/SSH%20server%20running%20inside%20container/"
        ],
        "related_integrations": [
            {
                "package": "cloud_defend",
                "version": "^1.0.5"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "container.id",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.entry_leader.entry_meta.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.entry_leader.same_as_process",
                "type": "boolean"
            },
            {
                "ecs": true,
                "name": "process.interactive",
                "type": "boolean"
            },
            {
                "ecs": true,
                "name": "process.session_leader.same_as_process",
                "type": "boolean"
            }
        ],
        "risk_score": 73,
        "rule_id": "f5488ac1-099e-4008-a6cb-fb638a0f0828",
        "severity": "high",
        "tags": [
            "Data Source: Elastic Defend for Containers",
            "Domain: Container",
            "OS: Linux",
            "Use Case: Threat Detection",
            "Tactic: Initial Access",
            "Tactic: Lateral Movement",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0001",
                    "name": "Initial Access",
                    "reference": "https://attack.mitre.org/tactics/TA0001/"
                },
                "technique": [
                    {
                        "id": "T1133",
                        "name": "External Remote Services",
                        "reference": "https://attack.mitre.org/techniques/T1133/"
                    }
                ]
            },
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0008",
                    "name": "Lateral Movement",
                    "reference": "https://attack.mitre.org/tactics/TA0008/"
                },
                "technique": [
                    {
                        "id": "T1021",
                        "name": "Remote Services",
                        "reference": "https://attack.mitre.org/techniques/T1021/",
                        "subtechnique": [
                            {
                                "id": "T1021.004",
                                "name": "SSH",
                                "reference": "https://attack.mitre.org/techniques/T1021/004/"
                            }
                        ]
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "eql",
        "version": 3
    },
    "id": "f5488ac1-099e-4008-a6cb-fb638a0f0828_3",
    "type": "security-rule"
}