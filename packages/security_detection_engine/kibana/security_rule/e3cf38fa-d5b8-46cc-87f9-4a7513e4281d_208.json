{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "Identifies unusual processes connecting to domains using known free SSL certificates. Adversaries may employ a known encryption algorithm to conceal command and control traffic.",
        "from": "now-9m",
        "index": [
            "winlogbeat-*",
            "logs-endpoint.events.network-*",
            "logs-windows.sysmon_operational-*"
        ],
        "language": "eql",
        "license": "Elastic License v2",
        "name": "Connection to Commonly Abused Free SSL Certificate Providers",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Connection to Commonly Abused Free SSL Certificate Providers\n\nFree SSL certificates, like those from Let's Encrypt, enable secure web traffic encryption. Adversaries exploit these to mask malicious command and control (C2) communications. The detection rule identifies unusual Windows processes accessing domains with such certificates, excluding common false positives, to flag potential misuse of encrypted channels for C2 activities.\n\n### Possible investigation steps\n\n- Review the process executable path to confirm if it is a native Windows process and assess the legitimacy of its network activity. Focus on paths like \"C:\\Windows\\System32\\*.exe\" and \"C:\\Windows\\SysWOW64\\*.exe\".\n- Investigate the specific domain accessed by the process, such as those ending in \"*.letsencrypt.org\" or \"*.sslforfree.com\", to determine if it is associated with known malicious activity or if it is a legitimate service.\n- Check the process name against the list of excluded false positives, ensuring it is not \"svchost.exe\", \"MicrosoftEdge*.exe\", or \"msedge.exe\", which are common and typically benign.\n- Analyze the network traffic associated with the process to identify any unusual patterns or anomalies that could indicate command and control activity.\n- Correlate the alert with other security events or logs from the same host to identify any additional indicators of compromise or related suspicious activities.\n\n### False positive analysis\n\n- Windows system processes like svchost.exe and MicrosoftEdge.exe are common false positives due to their legitimate network activities. These can be excluded from the detection rule to reduce noise.\n- Regularly update the list of excluded processes to include any new system processes that are verified to have legitimate reasons for accessing domains with free SSL certificates.\n- Monitor and analyze network traffic patterns to identify any additional processes that consistently generate false positives, and consider adding them to the exclusion list if they are deemed non-threatening.\n- Use process whitelisting to allow known safe applications that frequently access these domains, ensuring they do not trigger alerts unnecessarily.\n- Implement a review process to periodically reassess the exclusion list, ensuring it remains relevant and does not inadvertently allow malicious activities to go undetected.\n\n### Response and remediation\n\n- Isolate the affected system from the network to prevent further malicious communication and potential lateral movement.\n- Terminate any suspicious processes identified in the alert that are not typically associated with network activity, such as those running from unusual paths or with unexpected network connections.\n- Conduct a thorough review of the system's recent activity logs to identify any unauthorized changes or additional indicators of compromise.\n- Remove any malicious files or executables found on the system, ensuring that all remnants of the threat are eradicated.\n- Restore the system from a known good backup if any critical system files or configurations have been altered.\n- Update and patch the system to the latest security standards to close any vulnerabilities that may have been exploited.\n- Escalate the incident to the security operations center (SOC) or incident response team for further investigation and to determine if additional systems are affected.",
        "query": "network where host.os.type == \"windows\" and network.protocol == \"dns\" and\n  /* Add new free SSL certificate provider domains here */\n  dns.question.name : (\"*letsencrypt.org\", \"*.sslforfree.com\", \"*.zerossl.com\", \"*.freessl.org\") and\n\n  /* Native Windows process paths that are unlikely to have network connections to domains secured using free SSL certificates */\n  process.executable : (\"C:\\\\Windows\\\\System32\\\\*.exe\",\n                        \"C:\\\\Windows\\\\System\\\\*.exe\",\n\t                  \"C:\\\\Windows\\\\SysWOW64\\\\*.exe\",\n\t\t          \"C:\\\\Windows\\\\Microsoft.NET\\\\Framework*\\\\*.exe\",\n\t\t          \"C:\\\\Windows\\\\explorer.exe\",\n\t\t          \"C:\\\\Windows\\\\notepad.exe\") and\n\n  /* Insert noisy false positives here */\n  not process.name : (\"svchost.exe\", \"MicrosoftEdge*.exe\", \"msedge.exe\")\n",
        "related_integrations": [
            {
                "package": "endpoint",
                "version": "^8.2.0"
            },
            {
                "package": "windows",
                "version": "^2.0.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "dns.question.name",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.os.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "network.protocol",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.executable",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.name",
                "type": "keyword"
            }
        ],
        "risk_score": 21,
        "rule_id": "e3cf38fa-d5b8-46cc-87f9-4a7513e4281d",
        "setup": "## Setup\n\nIf enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,\nevents will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.\nHence for this rule to work effectively, users will need to add a custom ingest pipeline to populate\n`event.ingested` to @timestamp.\nFor more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html\n",
        "severity": "low",
        "tags": [
            "Domain: Endpoint",
            "OS: Windows",
            "Use Case: Threat Detection",
            "Tactic: Command and Control",
            "Data Source: Elastic Defend",
            "Data Source: Sysmon",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0011",
                    "name": "Command and Control",
                    "reference": "https://attack.mitre.org/tactics/TA0011/"
                },
                "technique": [
                    {
                        "id": "T1573",
                        "name": "Encrypted Channel",
                        "reference": "https://attack.mitre.org/techniques/T1573/"
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "eql",
        "version": 208
    },
    "id": "e3cf38fa-d5b8-46cc-87f9-4a7513e4281d_208",
    "type": "security-rule"
}