{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "This rule detects the creation of a hidden directory via an unusual parent executable. Hidden directories are directories that are not visible to the user by default. They are often used by attackers to hide malicious files or tools.",
        "false_positives": [
            "Certain tools may create hidden temporary directories upon installation or as part of their normal behavior. These events can be filtered by the process arguments, username, or process name values."
        ],
        "from": "now-9m",
        "index": [
            "logs-endpoint.events.*",
            "logs-sentinel_one_cloud_funnel.*",
            "endgame-*"
        ],
        "language": "eql",
        "license": "Elastic License v2",
        "name": "Hidden Directory Creation via Unusual Parent",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Hidden Directory Creation via Unusual Parent\n\nIn Linux environments, hidden directories, often prefixed with a dot, are typically used for configuration files but can be exploited by attackers to conceal malicious activities. Adversaries may create these directories using unexpected parent processes in sensitive locations. The detection rule identifies such anomalies by monitoring directory creation commands executed by unusual parent executables, focusing on specific directories and excluding known benign patterns.\n\n### Possible investigation steps\n\n- Review the process.parent.executable field to identify the parent process that initiated the directory creation and assess its legitimacy based on its typical behavior and location.\n- Examine the process.args field to understand the specific arguments used with the mkdir command, focusing on the directory path and any patterns that may indicate malicious intent.\n- Check the process.command_line field for any unusual or suspicious command-line patterns that might suggest an attempt to evade detection.\n- Investigate the context of the parent process by reviewing recent activities or logs associated with it, especially if it originates from sensitive directories like /dev/shm, /tmp, or /var/tmp.\n- Correlate the alert with other security events or logs from the same host to identify any related suspicious activities or patterns that could indicate a broader attack or compromise.\n- Consult threat intelligence sources or databases to determine if the parent executable or directory path has been associated with known malicious activities or threat actors.\n\n### False positive analysis\n\n- Temporary directories used by legitimate applications can trigger false positives. Exclude known benign parent executables like those in \"/tmp/newroot/*\" or \"/run/containerd/*\" to reduce noise.\n- Automated build processes may create hidden directories during software compilation. Add exceptions for parent executables such as \"/var/tmp/buildah*\" or \"/tmp/python-build.*\" to prevent unnecessary alerts.\n- Development tools and scripts might create hidden directories for caching or temporary storage. Consider excluding parent executables like \"/tmp/pear/temp/*\" or \"/tmp/cliphist-wofi-img\" if they are part of regular development activities.\n- Ensure that the command line patterns like \"mkdir -p .\" or \"mkdir ./*\" are excluded, as these are common in scripts and do not typically indicate malicious intent.\n- Regularly review and update the list of excluded patterns and parent executables to align with changes in the environment and reduce false positives effectively.\n\n### Response and remediation\n\n- Isolate the affected system from the network to prevent further malicious activity and lateral movement.\n- Terminate any suspicious processes associated with the unusual parent executable identified in the alert to halt potential malicious operations.\n- Conduct a thorough review of the hidden directory and its contents to identify and remove any malicious files or tools.\n- Restore any affected files or configurations from a known good backup to ensure system integrity.\n- Implement stricter access controls and monitoring on sensitive directories to prevent unauthorized directory creation.\n- Escalate the incident to the security operations team for further investigation and to determine if additional systems are compromised.\n- Update and enhance endpoint detection and response (EDR) solutions to improve detection capabilities for similar threats in the future.",
        "query": "process where host.os.type == \"linux\" and event.type == \"start\" and event.action in (\"exec\", \"start\", \"exec_event\") and\nprocess.name == \"mkdir\" and process.parent.executable like (\n  \"/dev/shm/*\", \"/tmp/*\", \"/var/tmp/*\", \"/var/run/*\", \"/root/*\", \"/boot/*\", \"/var/www/html/*\", \"/opt/.*\"\n) and process.args like (\".*\", \"/*/.*\") and process.args_count <= 3 and not (\n  process.parent.executable like (\"/tmp/newroot/*\", \"/run/containerd/*\") or\n  process.command_line like (\"mkdir -p .\", \"mkdir ./*\") or\n  process.args == \"/root/.ssh\" or\n  process.parent.executable like (\n    \"/tmp/pear/temp/*\", \"/var/tmp/buildah*\", \"/tmp/python-build.*\", \"/tmp/cliphist-wofi-img\", \"/tmp/snap.rootfs_*\"\n  )\n)\n",
        "related_integrations": [
            {
                "package": "endpoint",
                "version": "^8.2.0"
            },
            {
                "package": "sentinel_one_cloud_funnel",
                "version": "^1.0.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "event.action",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.os.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.args",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.args_count",
                "type": "long"
            },
            {
                "ecs": true,
                "name": "process.command_line",
                "type": "wildcard"
            },
            {
                "ecs": true,
                "name": "process.name",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.parent.executable",
                "type": "keyword"
            }
        ],
        "risk_score": 21,
        "rule_id": "b15a15f2-becf-475d-aa69-45c9e0ff1c49",
        "setup": "## Setup\n\nThis rule requires data coming in from Elastic Defend.\n\n### Elastic Defend Integration Setup\nElastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.\n\n#### Prerequisite Requirements:\n- Fleet is required for Elastic Defend.\n- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).\n\n#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:\n- Go to the Kibana home page and click \"Add integrations\".\n- In the query bar, search for \"Elastic Defend\" and select the integration to see more details about it.\n- Click \"Add Elastic Defend\".\n- Configure the integration name and optionally add a description.\n- Select the type of environment you want to protect, either \"Traditional Endpoints\" or \"Cloud Workloads\".\n- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).\n- We suggest selecting \"Complete EDR (Endpoint Detection and Response)\" as a configuration setting, that provides \"All events; all preventions\"\n- Enter a name for the agent policy in \"New agent policy name\". If other agent policies already exist, you can click the \"Existing hosts\" tab and select an existing policy instead.\nFor more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).\n- Click \"Save and Continue\".\n- To complete the integration, select \"Add Elastic Agent to your hosts\" and continue to the next section to install the Elastic Agent on your hosts.\nFor more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).\n",
        "severity": "low",
        "tags": [
            "Domain: Endpoint",
            "OS: Linux",
            "Use Case: Threat Detection",
            "Tactic: Defense Evasion",
            "Data Source: Elastic Defend",
            "Tactic: Persistence",
            "Data Source: SentinelOne",
            "Data Source: Elastic Endgame",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0005",
                    "name": "Defense Evasion",
                    "reference": "https://attack.mitre.org/tactics/TA0005/"
                },
                "technique": [
                    {
                        "id": "T1564",
                        "name": "Hide Artifacts",
                        "reference": "https://attack.mitre.org/techniques/T1564/",
                        "subtechnique": [
                            {
                                "id": "T1564.001",
                                "name": "Hidden Files and Directories",
                                "reference": "https://attack.mitre.org/techniques/T1564/001/"
                            }
                        ]
                    }
                ]
            },
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0003",
                    "name": "Persistence",
                    "reference": "https://attack.mitre.org/tactics/TA0003/"
                },
                "technique": []
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "eql",
        "version": 102
    },
    "id": "b15a15f2-becf-475d-aa69-45c9e0ff1c49_102",
    "type": "security-rule"
}