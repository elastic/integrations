{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "Identifies access attempts to LSASS handle, this may indicate an attempt to dump credentials from Lsass memory.",
        "from": "now-9m",
        "index": [
            "winlogbeat-*",
            "logs-windows.sysmon_operational-*"
        ],
        "language": "eql",
        "license": "Elastic License v2",
        "name": "Suspicious Lsass Process Access",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Suspicious Lsass Process Access\n\nThe Local Security Authority Subsystem Service (LSASS) is crucial for enforcing security policies and managing user logins in Windows environments. Adversaries often target LSASS to extract credentials, enabling unauthorized access. The detection rule identifies unusual access attempts to LSASS by filtering out legitimate processes and access patterns, focusing on anomalies that suggest credential dumping activities.\n\n### Possible investigation steps\n\n- Review the process details that triggered the alert, focusing on the process name and executable path to determine if it is a known legitimate application or potentially malicious.\n- Examine the GrantedAccess value in the event data to understand the level of access attempted on the LSASS process and compare it against typical access patterns.\n- Investigate the parent process of the suspicious process to identify how it was spawned and assess if it is part of a legitimate workflow or an anomaly.\n- Check the CallTrace field for any unusual or suspicious DLLs that might indicate malicious activity or exploitation attempts.\n- Correlate the alert with other security events or logs from the same host to identify any related suspicious activities or patterns, such as network connections or file modifications.\n- Verify the host's security posture, including the status of antivirus or endpoint protection solutions, to ensure they are functioning correctly and have not been tampered with.\n\n### False positive analysis\n\n- Legitimate security tools like Sysinternals Process Explorer and Process Monitor can trigger false positives. Exclude these by adding their process names to the exception list.\n- Windows Defender and other antivirus software may access LSASS for legitimate scanning purposes. Exclude their executable paths from the detection rule to prevent false alerts.\n- System processes such as csrss.exe, lsm.exe, and wmiprvse.exe are known to access LSASS as part of normal operations. Ensure these are included in the process executable exceptions to avoid unnecessary alerts.\n- Software updates and installers, like those from Cisco AnyConnect or Oracle, may access LSASS during legitimate operations. Add these specific paths to the exclusion list to reduce false positives.\n- Custom enterprise applications that interact with LSASS for authentication purposes should be identified and their paths added to the exceptions to prevent disruption in monitoring.\n\n### Response and remediation\n\n- Isolate the affected system from the network immediately to prevent further unauthorized access or lateral movement by the adversary.\n- Terminate any suspicious processes identified in the alert that are attempting to access the LSASS process, ensuring that legitimate processes are not disrupted.\n- Conduct a memory dump analysis of the affected system to identify any malicious tools or scripts used for credential dumping, focusing on the LSASS process.\n- Change all potentially compromised credentials, especially those with administrative privileges, to prevent unauthorized access using stolen credentials.\n- Apply patches and updates to the affected system to address any vulnerabilities that may have been exploited by the adversary.\n- Monitor the network for any signs of further suspicious activity or attempts to access LSASS on other systems, using enhanced logging and alerting mechanisms.\n- Escalate the incident to the security operations center (SOC) or incident response team for further investigation and to determine if additional systems are affected.",
        "query": "process where host.os.type == \"windows\" and event.code == \"10\" and\n  winlog.event_data.TargetImage : \"?:\\\\WINDOWS\\\\system32\\\\lsass.exe\" and\n  not winlog.event_data.GrantedAccess :\n                (\"0x1000\", \"0x1400\", \"0x101400\", \"0x101000\", \"0x101001\", \"0x100000\", \"0x100040\", \"0x3200\", \"0x40\", \"0x3200\") and\n  not process.name : (\"procexp64.exe\", \"procmon.exe\", \"procexp.exe\", \"Microsoft.Identity.AadConnect.Health.AadSync.Host.ex\") and\n  not process.executable : (\n        \"?:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\platform\\\\*\",\n        \"?:\\\\ProgramData\\\\WebEx\\\\webex\\\\*\",\n        \"?:\\\\Program Files (x86)\\\\*\",\n        \"?:\\\\Program Files\\\\*\",\n        \"?:\\\\Windows\\\\CCM\\\\CcmExec.exe\",\n        \"?:\\\\Windows\\\\LTSvc\\\\LTSVC.exe\",\n        \"?:\\\\Windows\\\\Sysmon.exe\",\n        \"?:\\\\Windows\\\\Sysmon64.exe\",\n        \"C:\\\\Windows\\\\CynetMS.exe\",\n        \"?:\\\\Windows\\\\system32\\\\csrss.exe\",\n        \"?:\\\\Windows\\\\System32\\\\lsm.exe\",\n        \"?:\\\\Windows\\\\system32\\\\MRT.exe\",\n        \"?:\\\\Windows\\\\System32\\\\msiexec.exe\",\n        \"?:\\\\Windows\\\\system32\\\\wbem\\\\wmiprvse.exe\",\n        \"?:\\\\Windows\\\\system32\\\\wininit.exe\",\n        \"?:\\\\Windows\\\\SystemTemp\\\\GUM*.tmp\\\\GoogleUpdate.exe\",\n        \"?:\\\\Windows\\\\sysWOW64\\\\wbem\\\\wmiprvse.exe\",\n        \"C:\\\\oracle\\\\64\\\\02\\\\instantclient_19_13\\\\sqlplus.exe\",\n        \"C:\\\\oracle\\\\64\\\\02\\\\instantclient_19_13\\\\sqlldr.exe\",\n        \"d:\\\\oracle\\\\product\\\\19\\\\dbhome1\\\\bin\\\\ORACLE.EXE\",\n        \"C:\\\\wamp\\\\bin\\\\apache\\\\apache*\\\\bin\\\\httpd.exe\",\n        \"C:\\\\Windows\\\\system32\\\\netstat.exe\",\n        \"C:\\\\PROGRA~1\\\\INFORM~1\\\\apps\\\\jdk\\\\*\\\\jre\\\\bin\\\\java.exe\",\n        \"C:\\\\PROGRA~2\\\\CyberCNSAgentV2\\\\osqueryi.exe\",\n        \"C:\\\\Utilityw2k19\\\\packetbeat\\\\packetbeat.exe\",\n        \"C:\\\\ProgramData\\\\Cisco\\\\Cisco AnyConnect Secure Mobility Client\\\\Temp\\\\CloudUpdate\\\\vpndownloader.exe\",\n        \"C:\\\\ProgramData\\\\Cisco\\\\Cisco Secure Client\\\\Temp\\\\CloudUpdate\\\\vpndownloader.exe\"\n  ) and\n  not winlog.event_data.CallTrace : (\"*mpengine.dll*\", \"*appresolver.dll*\", \"*sysmain.dll*\")\n",
        "references": [
            "https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1003.001/T1003.001.md"
        ],
        "related_integrations": [
            {
                "package": "windows",
                "version": "^2.0.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "event.code",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.os.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.executable",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.name",
                "type": "keyword"
            },
            {
                "ecs": false,
                "name": "winlog.event_data.CallTrace",
                "type": "keyword"
            },
            {
                "ecs": false,
                "name": "winlog.event_data.GrantedAccess",
                "type": "keyword"
            },
            {
                "ecs": false,
                "name": "winlog.event_data.TargetImage",
                "type": "keyword"
            }
        ],
        "risk_score": 47,
        "rule_id": "128468bf-cab1-4637-99ea-fdf3780a4609",
        "setup": "## Setup\n\nIf enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,\nevents will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.\nHence for this rule to work effectively, users will need to add a custom ingest pipeline to populate\n`event.ingested` to @timestamp.\nFor more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html\n",
        "severity": "medium",
        "tags": [
            "Domain: Endpoint",
            "OS: Windows",
            "Use Case: Threat Detection",
            "Tactic: Credential Access",
            "Data Source: Sysmon",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0006",
                    "name": "Credential Access",
                    "reference": "https://attack.mitre.org/tactics/TA0006/"
                },
                "technique": [
                    {
                        "id": "T1003",
                        "name": "OS Credential Dumping",
                        "reference": "https://attack.mitre.org/techniques/T1003/",
                        "subtechnique": [
                            {
                                "id": "T1003.001",
                                "name": "LSASS Memory",
                                "reference": "https://attack.mitre.org/techniques/T1003/001/"
                            }
                        ]
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "eql",
        "version": 209
    },
    "id": "128468bf-cab1-4637-99ea-fdf3780a4609_209",
    "type": "security-rule"
}