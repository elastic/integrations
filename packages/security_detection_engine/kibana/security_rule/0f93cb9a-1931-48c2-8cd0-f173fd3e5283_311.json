{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "Identifies suspicious access to an LSASS handle via PssCaptureSnapShot where two successive process accesses are performed by the same process and target two different instances of LSASS. This may indicate an attempt to evade detection and dump LSASS memory for credential access.",
        "from": "now-9m",
        "index": [
            "winlogbeat-*",
            "logs-windows.sysmon_operational-*"
        ],
        "language": "kuery",
        "license": "Elastic License v2",
        "name": "Potential LSASS Memory Dump via PssCaptureSnapShot",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Potential LSASS Memory Dump via PssCaptureSnapShot\n\nPssCaptureSnapShot is a Windows feature used for capturing process snapshots, aiding in diagnostics and debugging. Adversaries exploit this to access LSASS memory, aiming to extract credentials. The detection rule identifies suspicious behavior by monitoring for repeated access to LSASS by the same process, targeting different instances, which may indicate an evasion attempt to dump credentials stealthily.\n\n### Possible investigation steps\n\n- Review the event logs for the specific event code 10 to gather details about the process that accessed the LSASS handle, including the process name, process ID, and the time of access.\n- Check the process execution history on the host to determine if the process accessing LSASS is legitimate or potentially malicious. Look for any unusual or unexpected processes that might have been executed around the time of the alert.\n- Investigate the parent process of the suspicious process to understand how it was initiated and whether it was spawned by a legitimate application or a known malicious process.\n- Analyze the network activity of the host around the time of the alert to identify any suspicious outbound connections that might indicate data exfiltration attempts.\n- Correlate the alert with other security events or alerts from the same host or user account to identify any patterns or additional indicators of compromise.\n- Verify the integrity and security posture of the host by checking for any unauthorized changes to system files or configurations, especially those related to security settings.\n\n### False positive analysis\n\n- Legitimate diagnostic tools or software that utilize PssCaptureSnapShot for debugging purposes may trigger this rule. Users should identify and whitelist these trusted applications to prevent false positives.\n- System administrators or security tools performing regular health checks on LSASS might access LSASS memory in a non-malicious manner. Exclude these known processes by creating exceptions based on their process names or hashes.\n- Automated scripts or maintenance tasks that interact with LSASS for legitimate reasons could be flagged. Review and document these tasks, then configure the rule to ignore these specific activities.\n- Security software updates or patches that temporarily access LSASS for validation or configuration purposes may cause alerts. Monitor update schedules and adjust the rule to accommodate these temporary accesses.\n\n### Response and remediation\n\n- Immediately isolate the affected host from the network to prevent further unauthorized access or data exfiltration.\n- Terminate any suspicious processes identified as accessing LSASS memory using PssCaptureSnapShot to halt potential credential dumping activities.\n- Conduct a thorough review of the affected system's event logs, focusing on event code 10, to identify any additional instances of suspicious LSASS access and determine the scope of the compromise.\n- Change all potentially compromised credentials, especially those with administrative privileges, to mitigate the risk of unauthorized access using dumped credentials.\n- Apply the latest security patches and updates to the affected system to address any vulnerabilities that may have been exploited.\n- Escalate the incident to the security operations center (SOC) or incident response team for further investigation and to determine if additional systems are affected.\n- Enhance monitoring and detection capabilities by ensuring that similar suspicious activities are logged and alerted on, using the specific query fields and threat indicators identified in this alert.",
        "query": "event.category:process and host.os.type:windows and event.code:10 and\n winlog.event_data.TargetImage:(\"C:\\\\Windows\\\\system32\\\\lsass.exe\" or\n                                 \"c:\\\\Windows\\\\system32\\\\lsass.exe\" or\n                                 \"c:\\\\Windows\\\\System32\\\\lsass.exe\")\n",
        "references": [
            "https://www.matteomalvica.com/blog/2019/12/02/win-defender-atp-cred-bypass/",
            "https://twitter.com/sbousseaden/status/1280619931516747777?lang=en"
        ],
        "related_integrations": [
            {
                "package": "windows",
                "version": "^2.0.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "event.category",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.code",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.os.type",
                "type": "keyword"
            },
            {
                "ecs": false,
                "name": "winlog.event_data.TargetImage",
                "type": "keyword"
            }
        ],
        "risk_score": 73,
        "rule_id": "0f93cb9a-1931-48c2-8cd0-f173fd3e5283",
        "setup": "## Setup\n\nThis is meant to run only on datasources using Elastic Agent 7.14+ since versions prior to that will be missing the threshold\nrule cardinality feature.\n",
        "severity": "high",
        "tags": [
            "Domain: Endpoint",
            "OS: Windows",
            "Use Case: Threat Detection",
            "Tactic: Credential Access",
            "Data Source: Sysmon",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0006",
                    "name": "Credential Access",
                    "reference": "https://attack.mitre.org/tactics/TA0006/"
                },
                "technique": [
                    {
                        "id": "T1003",
                        "name": "OS Credential Dumping",
                        "reference": "https://attack.mitre.org/techniques/T1003/",
                        "subtechnique": [
                            {
                                "id": "T1003.001",
                                "name": "LSASS Memory",
                                "reference": "https://attack.mitre.org/techniques/T1003/001/"
                            }
                        ]
                    }
                ]
            }
        ],
        "threshold": {
            "cardinality": [
                {
                    "field": "winlog.event_data.TargetProcessId",
                    "value": 2
                }
            ],
            "field": [
                "process.entity_id"
            ],
            "value": 2
        },
        "timestamp_override": "event.ingested",
        "type": "threshold",
        "version": 311
    },
    "id": "0f93cb9a-1931-48c2-8cd0-f173fd3e5283_311",
    "type": "security-rule"
}