{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "Identifies potential session hijacking or token replay in Microsoft Entra ID. This rule detects cases where a user signs in and subsequently accesses Microsoft Graph from a different IP address using the same session ID. This may indicate a successful OAuth phishing attack, session hijacking, or token replay attack, where an adversary has stolen a session cookie or refresh/access token and is impersonating the user from an alternate host or location.",
        "false_positives": [
            "This pattern may occur during legitimate device switching or roaming between networks (e.g., corporate to mobile). Developers or power users leveraging multiple environments may also trigger this detection if session persistence spans IP ranges. Still, this behavior is rare and warrants investigation when rapid IP switching and Graph access are involved."
        ],
        "from": "now-31m",
        "interval": "30m",
        "language": "esql",
        "license": "Elastic License v2",
        "name": "Microsoft Entra ID Suspicious Session Reuse to Graph Access",
        "note": "## Triage and analysis\n\n### Investigating Microsoft Entra ID Suspicious Session Reuse to Graph Access\n\nIdentifies potential session hijacking or token replay in Microsoft Entra ID. This rule detects cases where a user signs in and subsequently accesses Microsoft Graph from a different IP address using the same session ID. This may indicate a successful OAuth phishing attack, session hijacking, or token replay attack, where an adversary has stolen a session cookie or refresh/access token and is impersonating the user from an alternate host or location.\n\nThis rule uses ESQL aggregations and thus has dynamically generated fields. Correlation of the values in the alert document may need to be\nperformed to the original sign-in and Graph events for further context.\n\n### Investigation Steps\n\n- This rule relies on an aggregation-based ESQL query, therefore the alert document will contain dynamically generated fields.\n    - To pivot into the original events, it is recommended to use the values captured to filter in timeline or discovery for the original sign-in and Graph events.\n- Review the session ID and user ID to identify the user account involved in the suspicious activity.\n- Check the source addresses involved in the sign-in and Graph access to determine if they are known or expected locations for the user.\n    - The sign-in source addresses should be two, one for the initial phishing sign-in and the other when exchanging the auth code for a token by the adversary.\n    - The Graph API source address should identify the IP address used by the adversary to access Microsoft Graph.\n- Review the user agent strings for the sign-in and Graph access events to identify any anomalies or indicators of compromise.\n- Check the timestamp difference between the sign-in and Graph access events to determine if they occurred within a reasonable time frame that would suggest successful phishing to token issuance and then Graph access.\n- Identify the original sign-in event to investigation if conditional access policies were applied, such as requiring multi-factor authentication or blocking access from risky locations. In phishing scenarios, these policies likely were applied as the victim user would have been prompted to authenticate.\n\n### False Positive Analysis\n- This pattern may occur during legitimate device switching or roaming between networks (e.g., corporate to mobile).\n- Developers or power users leveraging multiple environments may also trigger this detection if session persistence spans IP ranges. Still, this behavior is rare and warrants investigation when rapid IP switching and Graph access are involved.\n\n### Response Recommendations\n\n- If confirmed malicious, revoke all refresh/access tokens for the user principal.\n- Block the source IP(s) involved in the Graph access.\n- Notify the user and reset credentials.\n- Review session control policies and conditional access enforcement.\n- Monitor for follow-on activity, such as lateral movement or privilege escalation.\n- Review conditional access policies to ensure they are enforced correctly.\n",
        "query": "from logs-azure.signinlogs-*, logs-azure.graphactivitylogs-* metadata _id, _version, _index\n| where\n    (event.dataset == \"azure.signinlogs\"\n     and source.`as`.organization.name != \"MICROSOFT-CORP-MSN-as-BLOCK\"\n     and azure.signinlogs.properties.session_id is not null)\n    or\n    (event.dataset == \"azure.graphactivitylogs\"\n     and source.`as`.organization.name != \"MICROSOFT-CORP-MSN-as-BLOCK\"\n     and azure.graphactivitylogs.properties.c_sid is not null)\n\n| eval\n    Esql.azure_signinlogs_properties_session_id_coalesce = coalesce(azure.signinlogs.properties.session_id, azure.graphactivitylogs.properties.c_sid),\n    Esql.azure_signinlogs_properties_user_id_coalesce = coalesce(azure.signinlogs.properties.user_id, azure.graphactivitylogs.properties.user_principal_object_id),\n    Esql.azure_signinlogs_properties_app_id_coalesce = coalesce(azure.signinlogs.properties.app_id, azure.graphactivitylogs.properties.app_id),\n    Esql.source_ip = source.ip,\n    Esql.@timestamp = @timestamp,\n    Esql.event_type_case = case(\n        event.dataset == \"azure.signinlogs\", \"signin\",\n        event.dataset == \"azure.graphactivitylogs\", \"graph\",\n        \"other\"\n    ),\n    Esql.time_window_date_trunc = date_trunc(5 minutes, @timestamp)\n\n| keep\n    Esql.azure_signinlogs_properties_session_id_coalesce,\n    Esql.source_ip,\n    Esql.@timestamp,\n    Esql.event_type_case,\n    Esql.time_window_date_trunc,\n    Esql.azure_signinlogs_properties_user_id_coalesce,\n    Esql.azure_signinlogs_properties_app_id_coalesce\n\n| stats\n    Esql.azure_signinlogs_properties_user_id_coalesce_values = values(Esql.azure_signinlogs_properties_user_id_coalesce),\n    Esql.azure_signinlogs_properties_session_id_coalesce_values = values(Esql.azure_signinlogs_properties_session_id_coalesce),\n    Esql.source_ip_values = values(Esql.source_ip),\n    Esql.source_ip_count_distinct = count_distinct(Esql.source_ip),\n    Esql.azure_signinlogs_properties_app_id_coalesce_values = values(Esql.azure_signinlogs_properties_app_id_coalesce),\n    Esql.azure_signinlogs_properties_app_id_coalesce_count_distinct = count_distinct(Esql.azure_signinlogs_properties_app_id_coalesce),\n    Esql.event_type_case_values = values(Esql.event_type_case),\n    Esql.event_type_case_count_distinct = count_distinct(Esql.event_type_case),\n    Esql.@timestamp.min = min(Esql.@timestamp),\n    Esql.@timestamp.max = max(Esql.@timestamp),\n    Esql.signin_time_min = min(case(Esql.event_type_case == \"signin\", Esql.@timestamp, null)),\n    Esql.graph_time_min = min(case(Esql.event_type_case == \"graph\", Esql.@timestamp, null)),\n    Esql.event_count = count()\n  by Esql.azure_signinlogs_properties_session_id_coalesce, Esql.time_window_date_trunc\n\n| eval\n    Esql.event_duration_minutes_date_diff = date_diff(\"minutes\", Esql.@timestamp.min, Esql.@timestamp.max),\n    Esql.event_signin_to_graph_delay_minutes_date_diff = date_diff(\"minutes\", Esql.signin_time_min, Esql.graph_time_min)\n\n| where\n    Esql.event_type_case_count_distinct > 1 and\n    Esql.source_ip_count_distinct > 1 and\n    Esql.event_duration_minutes_date_diff <= 5 and\n    Esql.signin_time_min is not null and\n    Esql.graph_time_min is not null and\n    Esql.event_signin_to_graph_delay_minutes_date_diff >= 0\n",
        "references": [
            "https://www.volexity.com/blog/2025/04/22/phishing-for-codes-russian-threat-actors-target-microsoft-365-oauth-workflows/",
            "https://github.com/dirkjanm/ROADtools",
            "https://attack.mitre.org/techniques/T1078/004/"
        ],
        "risk_score": 47,
        "rule_id": "0d3d2254-2b4a-11f0-a019-f661ea17fbcc",
        "setup": "#### Required Microsoft Entra ID Sign-In and Graph Activity Logs\nThis rule requires the Microsoft Entra ID Sign-In Logs and Microsoft Graph Activity Logs integration to be enabled and configured to collect audit and activity logs via Azure Event Hub.\n",
        "severity": "medium",
        "tags": [
            "Domain: Cloud",
            "Domain: Identity",
            "Domain: API",
            "Data Source: Azure",
            "Data Source: Microsoft Entra ID",
            "Data Source: Microsoft Entra ID Sign-In Logs",
            "Data Source: Microsoft Graph",
            "Data Source: Microsoft Graph Activity Logs",
            "Use Case: Identity and Access Audit",
            "Use Case: Threat Detection",
            "Resources: Investigation Guide",
            "Tactic: Defense Evasion",
            "Tactic: Initial Access"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0001",
                    "name": "Initial Access",
                    "reference": "https://attack.mitre.org/tactics/TA0001/"
                },
                "technique": [
                    {
                        "id": "T1078",
                        "name": "Valid Accounts",
                        "reference": "https://attack.mitre.org/techniques/T1078/",
                        "subtechnique": [
                            {
                                "id": "T1078.004",
                                "name": "Cloud Accounts",
                                "reference": "https://attack.mitre.org/techniques/T1078/004/"
                            }
                        ]
                    }
                ]
            },
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0005",
                    "name": "Defense Evasion",
                    "reference": "https://attack.mitre.org/tactics/TA0005/"
                },
                "technique": [
                    {
                        "id": "T1550",
                        "name": "Use Alternate Authentication Material",
                        "reference": "https://attack.mitre.org/techniques/T1550/",
                        "subtechnique": [
                            {
                                "id": "T1550.001",
                                "name": "Application Access Token",
                                "reference": "https://attack.mitre.org/techniques/T1550/001/"
                            }
                        ]
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "esql",
        "version": 4
    },
    "id": "0d3d2254-2b4a-11f0-a019-f661ea17fbcc_4",
    "type": "security-rule"
}