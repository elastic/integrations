{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "This rule detects memory swap modification events on Linux systems. Memory swap modification can be used to manipulate the system's memory and potentially impact the system's performance. This behavior is commonly observed in malware that deploys miner software such as XMRig.",
        "from": "now-9m",
        "index": [
            "logs-endpoint.events.*",
            "logs-sentinel_one_cloud_funnel.*",
            "endgame-*"
        ],
        "language": "eql",
        "license": "Elastic License v2",
        "name": "Memory Swap Modification",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Memory Swap Modification\n\nMemory swap in Linux systems manages RAM by moving inactive pages to disk, freeing up memory for active processes. Adversaries exploit this by altering swap settings to degrade performance or deploy resource-intensive malware like cryptominers. The detection rule identifies suspicious activities by monitoring processes that modify swap settings or execute related commands, flagging potential misuse for further investigation.\n\n### Possible investigation steps\n\n- Review the process details to identify the parent process using the field process.parent.executable. This can help determine if the swap modification was initiated by a legitimate or suspicious parent process.\n- Examine the command line arguments captured in process.command_line to understand the specific changes made to swap settings, such as modifications to vm.swappiness.\n- Check the user account associated with the process to determine if the action was performed by a privileged or unauthorized user.\n- Investigate any recent system performance issues or anomalies that could be linked to swap modifications, such as increased CPU or memory usage.\n- Correlate the event with other security alerts or logs to identify if this activity is part of a larger pattern of suspicious behavior, such as the presence of cryptomining software like XMRig.\n- Assess the system for any unauthorized software installations or configurations that could indicate a compromise, focusing on resource-intensive applications.\n\n### False positive analysis\n\n- System administrators may frequently modify swap settings during routine maintenance or performance tuning. To handle this, create exceptions for known administrator accounts or specific maintenance scripts.\n- Automated configuration management tools like Ansible or Puppet might execute commands that alter swap settings. Identify these tools and exclude their processes from triggering alerts.\n- Some legitimate applications may adjust swap settings to optimize their performance. Monitor and whitelist these applications to prevent unnecessary alerts.\n- Development environments often experiment with system settings, including swap configurations. Consider excluding processes from known development environments or specific user accounts associated with development activities.\n- Scheduled tasks or cron jobs might include swap modification commands for system optimization. Review and whitelist these tasks if they are verified as non-threatening.\n\n### Response and remediation\n\n- Immediately isolate the affected system from the network to prevent further spread or impact of the potential malware.\n- Terminate any suspicious processes identified by the detection rule, such as those involving \"swapon\", \"swapoff\", or unauthorized modifications to \"vm.swappiness\".\n- Conduct a thorough scan of the isolated system using updated antivirus or anti-malware tools to identify and remove any malicious software, particularly cryptominers like XMRig.\n- Review and restore swap settings to their default or secure configurations to ensure system stability and performance.\n- Implement monitoring for any further unauthorized changes to swap settings or related processes to detect and respond to similar threats promptly.\n- Escalate the incident to the security operations team for a detailed forensic analysis to understand the scope and origin of the attack.\n- Update system and security patches to close any vulnerabilities that may have been exploited by the adversary.",
        "query": "process where host.os.type == \"linux\" and event.type == \"start\" and event.action in (\"exec\", \"exec_event\", \"start\") and\nprocess.parent.executable != null and\nprocess.name in (\"swapon\", \"swapoff\") or (\n  process.command_line like (\"*vm.swappiness*\", \"*/proc/sys/vm/swappiness*\") and (\n    (process.name == \"sysctl\" and process.args like (\"*-w*\", \"*--write*\", \"*=*\")) or\n    (\n      process.name in (\"bash\", \"dash\", \"sh\", \"tcsh\", \"csh\", \"zsh\", \"ksh\", \"fish\") and process.args == \"-c\" and\n      process.command_line like \"*echo *\"\n    )\n  )\n) and\nnot process.parent.name in (\"lynis\", \"systemd\", \"end-zram-swapping\", \"SyxsenseResponder\", \"tuned\", \"platform-python\", \"timeout\")\n",
        "related_integrations": [
            {
                "package": "endpoint",
                "version": "^8.2.0"
            },
            {
                "package": "sentinel_one_cloud_funnel",
                "version": "^1.0.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "event.action",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.os.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.args",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.command_line",
                "type": "wildcard"
            },
            {
                "ecs": true,
                "name": "process.name",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.parent.executable",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.parent.name",
                "type": "keyword"
            }
        ],
        "risk_score": 21,
        "rule_id": "5e4023e7-6357-4061-ae1c-9df33e78c674",
        "setup": "## Setup\n\nThis rule requires data coming in from Elastic Defend.\n\n### Elastic Defend Integration Setup\nElastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.\n\n#### Prerequisite Requirements:\n- Fleet is required for Elastic Defend.\n- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).\n\n#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:\n- Go to the Kibana home page and click \"Add integrations\".\n- In the query bar, search for \"Elastic Defend\" and select the integration to see more details about it.\n- Click \"Add Elastic Defend\".\n- Configure the integration name and optionally add a description.\n- Select the type of environment you want to protect, either \"Traditional Endpoints\" or \"Cloud Workloads\".\n- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).\n- We suggest selecting \"Complete EDR (Endpoint Detection and Response)\" as a configuration setting, that provides \"All events; all preventions\"\n- Enter a name for the agent policy in \"New agent policy name\". If other agent policies already exist, you can click the \"Existing hosts\" tab and select an existing policy instead.\n\nFor more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).\n- Click \"Save and Continue\".\n- To complete the integration, select \"Add Elastic Agent to your hosts\" and continue to the next section to install the Elastic Agent on your hosts.\n\nFor more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).\n",
        "severity": "low",
        "tags": [
            "Domain: Endpoint",
            "OS: Linux",
            "Use Case: Threat Detection",
            "Tactic: Impact",
            "Tactic: Execution",
            "Data Source: Elastic Defend",
            "Data Source: SentinelOne",
            "Data Source: Elastic Endgame",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0040",
                    "name": "Impact",
                    "reference": "https://attack.mitre.org/tactics/TA0040/"
                },
                "technique": [
                    {
                        "id": "T1496",
                        "name": "Resource Hijacking",
                        "reference": "https://attack.mitre.org/techniques/T1496/"
                    }
                ]
            },
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0002",
                    "name": "Execution",
                    "reference": "https://attack.mitre.org/tactics/TA0002/"
                },
                "technique": [
                    {
                        "id": "T1059",
                        "name": "Command and Scripting Interpreter",
                        "reference": "https://attack.mitre.org/techniques/T1059/",
                        "subtechnique": [
                            {
                                "id": "T1059.004",
                                "name": "Unix Shell",
                                "reference": "https://attack.mitre.org/techniques/T1059/004/"
                            }
                        ]
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "eql",
        "version": 102
    },
    "id": "5e4023e7-6357-4061-ae1c-9df33e78c674_102",
    "type": "security-rule"
}