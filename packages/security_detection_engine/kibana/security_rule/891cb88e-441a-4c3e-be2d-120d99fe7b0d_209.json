{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "Identifies a suspicious image load (wmiutils.dll) from Microsoft Office processes. This behavior may indicate adversarial activity where child processes are spawned via Windows Management Instrumentation (WMI). This technique can be used to execute code and evade traditional parent/child processes spawned from Microsoft Office products.",
        "from": "now-9m",
        "index": [
            "winlogbeat-*",
            "logs-endpoint.events.library-*",
            "logs-windows.sysmon_operational-*",
            "endgame-*"
        ],
        "language": "eql",
        "license": "Elastic License v2",
        "name": "Suspicious WMI Image Load from MS Office",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Suspicious WMI Image Load from MS Office\n\nWindows Management Instrumentation (WMI) is a powerful framework for managing data and operations on Windows systems. Adversaries exploit WMI to execute code stealthily, bypassing traditional security measures by spawning processes indirectly. The detection rule identifies unusual loading of the `wmiutils.dll` library by Microsoft Office applications, signaling potential misuse of WMI for malicious execution. This rule leverages event categories and process names to pinpoint suspicious activity, aiding in early threat detection.\n\n### Possible investigation steps\n\n- Review the alert details to confirm the specific Microsoft Office process involved (e.g., WINWORD.EXE, EXCEL.EXE) and the associated event category (library, driver, or process).\n- Check the process execution history to determine if the process has a legitimate reason to load the wmiutils.dll library, such as recent updates or legitimate automation tasks.\n- Investigate the parent process of the flagged Microsoft Office application to identify any unusual or unexpected parent-child process relationships that could indicate malicious activity.\n- Analyze recent user activity on the affected system to identify any suspicious behavior or unauthorized access that might correlate with the alert.\n- Examine network connections and data transfers initiated by the flagged process to detect any potential data exfiltration or communication with known malicious IP addresses.\n- Cross-reference the alert with other security logs and alerts to identify any patterns or additional indicators of compromise that might suggest a broader attack campaign.\n\n### False positive analysis\n\n- Legitimate use of WMI by Microsoft Office applications for automation tasks or system management can trigger the rule. Users should verify if the activity aligns with expected administrative tasks.\n- Some third-party plugins or add-ins for Microsoft Office may load wmiutils.dll for legitimate purposes. Users can create exceptions for these known plugins after confirming their benign nature.\n- Scheduled tasks or scripts that utilize WMI for legitimate business processes might cause false positives. Review and document these processes, then exclude them from the rule if they are verified as non-threatening.\n- Security or monitoring tools that interact with Office applications and use WMI for data collection could be flagged. Ensure these tools are recognized and excluded from the rule after validation.\n\n### Response and remediation\n\n- Isolate the affected system from the network to prevent further malicious activity and lateral movement.\n- Terminate any suspicious Microsoft Office processes identified in the alert that are loading the `wmiutils.dll` library.\n- Conduct a thorough scan of the affected system using updated antivirus and anti-malware tools to identify and remove any malicious code or files.\n- Review and analyze the system's WMI repository and scripts for unauthorized or suspicious entries, and remove any that are identified as malicious.\n- Restore the system from a known good backup if malicious activity has compromised system integrity or data.\n- Escalate the incident to the security operations center (SOC) or incident response team for further investigation and to determine if additional systems are affected.\n- Implement enhanced monitoring and logging for WMI activity and Microsoft Office processes to detect similar threats in the future.",
        "query": "any where host.os.type == \"windows\" and\n (event.category : (\"library\", \"driver\") or (event.category == \"process\" and event.action : \"Image loaded*\")) and\n  process.name : (\"WINWORD.EXE\", \"EXCEL.EXE\", \"POWERPNT.EXE\", \"MSPUB.EXE\", \"MSACCESS.EXE\") and\n  (?dll.name : \"wmiutils.dll\" or file.name : \"wmiutils.dll\")\n",
        "references": [
            "https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16"
        ],
        "related_integrations": [
            {
                "package": "endpoint",
                "version": "^8.2.0"
            },
            {
                "package": "windows",
                "version": "^2.0.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "dll.name",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.action",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.category",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "file.name",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.os.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.name",
                "type": "keyword"
            }
        ],
        "risk_score": 21,
        "rule_id": "891cb88e-441a-4c3e-be2d-120d99fe7b0d",
        "setup": "## Setup\n\nIf enabling an EQL rule on a non-elastic-agent index (such as beats) for versions <8.2,\nevents will not define `event.ingested` and default fallback for EQL rules was not added until version 8.2.\nHence for this rule to work effectively, users will need to add a custom ingest pipeline to populate\n`event.ingested` to @timestamp.\nFor more details on adding a custom ingest pipeline refer - https://www.elastic.co/guide/en/fleet/current/data-streams-pipeline-tutorial.html\n",
        "severity": "low",
        "tags": [
            "Domain: Endpoint",
            "OS: Windows",
            "Use Case: Threat Detection",
            "Tactic: Execution",
            "Data Source: Elastic Endgame",
            "Data Source: Elastic Defend",
            "Data Source: Sysmon",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0002",
                    "name": "Execution",
                    "reference": "https://attack.mitre.org/tactics/TA0002/"
                },
                "technique": [
                    {
                        "id": "T1047",
                        "name": "Windows Management Instrumentation",
                        "reference": "https://attack.mitre.org/techniques/T1047/"
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "eql",
        "version": 209
    },
    "id": "891cb88e-441a-4c3e-be2d-120d99fe7b0d_209",
    "type": "security-rule"
}