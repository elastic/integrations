{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "This rule identifies a UID change event via `nsenter`. The `nsenter` command is used to enter a namespace, which is a way to isolate processes and resources. Attackers can use `nsenter` to escape from a container to the host, which can lead to privilege escalation and lateral movement.",
        "from": "now-9m",
        "index": [
            "logs-endpoint.events.process*"
        ],
        "language": "eql",
        "license": "Elastic License v2",
        "name": "Docker Escape via Nsenter",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Docker Escape via Nsenter\n\nDocker containers use namespaces to isolate processes, ensuring they operate independently from the host system. The `nsenter` command allows users to access these namespaces, which is essential for managing containerized environments. However, adversaries can exploit `nsenter` to break out of a container, gaining unauthorized access to the host system. The detection rule identifies suspicious UID changes involving `nsenter`, signaling potential container escapes and privilege escalation attempts.\n\n### Possible investigation steps\n\n- Review the alert details to confirm the presence of a UID change event involving the nsenter command, as indicated by the query fields.\n- Identify the container from which the nsenter command was executed by examining the process.entry_leader.entry_meta.type field.\n- Investigate the process arguments to verify the use of nsenter with the -t or --target options, ensuring the process.args_count is 4 or more, which may indicate an attempt to target a specific namespace.\n- Check the user and process context before and after the UID change to understand the potential impact and scope of the privilege escalation.\n- Analyze the container's logs and any associated host logs around the time of the event to gather additional context and identify any suspicious activities or patterns.\n- Assess the container's configuration and security settings to determine if there are any vulnerabilities or misconfigurations that could have been exploited.\n- If unauthorized access is confirmed, initiate incident response procedures to contain and remediate the threat, including reviewing other containers and systems for similar activities.\n\n### False positive analysis\n\n- Routine administrative tasks using nsenter can trigger false positives, especially when system administrators use it for legitimate container management. To mitigate this, create exceptions for known administrative scripts or processes that frequently use nsenter.\n- Automated monitoring tools or scripts that perform health checks or maintenance on containers might use nsenter, leading to false alerts. Identify these tools and whitelist their specific processes or user accounts to reduce noise.\n- Development environments where developers frequently enter containers for debugging purposes can cause false positives. Consider excluding specific development user accounts or container IDs from the rule to prevent unnecessary alerts.\n- Continuous integration and deployment pipelines that interact with containers might use nsenter as part of their operations. Review these pipelines and exclude their associated processes or user accounts to avoid false detections.\n\n### Response and remediation\n\n- Immediately isolate the affected container to prevent further unauthorized access to the host system. This can be done by stopping the container or disconnecting it from the network.\n- Conduct a thorough review of the container's logs and processes to identify any unauthorized changes or suspicious activities that occurred before and after the UID change event.\n- Revoke any unauthorized access or credentials that may have been compromised during the container escape attempt. Ensure that all access keys and passwords are rotated.\n- Patch and update the container image and host system to address any vulnerabilities that may have been exploited. Ensure that the latest security updates are applied.\n- Implement stricter namespace and capability restrictions for containers to minimize the risk of privilege escalation. Consider using security tools like AppArmor or SELinux to enforce these restrictions.\n- Monitor for any further suspicious activity on the host system and other containers, focusing on similar UID change events or unauthorized use of `nsenter`.\n- Escalate the incident to the security operations team for a comprehensive investigation and to assess the potential impact on the broader network and systems.",
        "query": "process where host.os.type == \"linux\" and event.type == \"change\" and event.action == \"uid_change\" and\nprocess.entry_leader.entry_meta.type == \"container\" and process.args == \"nsenter\" and\nprocess.args in (\"-t\", \"--target\") and process.args_count >= 4\n",
        "references": [
            "https://www.cyberark.com/resources/threat-research-blog/the-route-to-root-container-escape-using-kernel-exploitation"
        ],
        "related_integrations": [
            {
                "package": "endpoint",
                "version": "^8.2.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "event.action",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.os.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.args",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.args_count",
                "type": "long"
            },
            {
                "ecs": true,
                "name": "process.entry_leader.entry_meta.type",
                "type": "keyword"
            }
        ],
        "risk_score": 47,
        "rule_id": "5f3ab3ce-7b41-4168-a06a-68d2af8ebc88",
        "severity": "medium",
        "tags": [
            "Domain: Endpoint",
            "Domain: Container",
            "OS: Linux",
            "Use Case: Threat Detection",
            "Tactic: Privilege Escalation",
            "Data Source: Elastic Defend",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0004",
                    "name": "Privilege Escalation",
                    "reference": "https://attack.mitre.org/tactics/TA0004/"
                },
                "technique": [
                    {
                        "id": "T1611",
                        "name": "Escape to Host",
                        "reference": "https://attack.mitre.org/techniques/T1611/"
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "eql",
        "version": 2
    },
    "id": "5f3ab3ce-7b41-4168-a06a-68d2af8ebc88_2",
    "type": "security-rule"
}