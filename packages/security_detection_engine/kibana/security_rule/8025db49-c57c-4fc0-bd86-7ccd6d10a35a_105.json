{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "Identifies scripts that contain patterns and known methods that obfuscate PowerShell code. Attackers can use obfuscation techniques to bypass PowerShell security protections such as Antimalware Scan Interface (AMSI).",
        "from": "now-9m",
        "index": [
            "winlogbeat-*",
            "logs-windows.powershell*"
        ],
        "language": "kuery",
        "license": "Elastic License v2",
        "name": "Potential PowerShell Obfuscated Script",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Potential PowerShell Obfuscated Script\n\nPowerShell is a powerful scripting language used for task automation and configuration management in Windows environments. Adversaries exploit its flexibility to obfuscate scripts, evading security measures like AMSI. The detection rule identifies obfuscation patterns, such as string manipulation and encoding techniques, to flag potentially malicious scripts, aiding in defense evasion detection.\n\n### Possible investigation steps\n\n- Review the PowerShell script block text captured in the alert to identify any suspicious patterns or obfuscation techniques, such as string manipulation or encoding methods like \"[string]::join\" or \"-Join\".\n- Check the process execution details, including the parent process and command line arguments, to understand the context in which the PowerShell script was executed.\n- Investigate the source and destination of the script execution by examining the host and user details to determine if the activity aligns with expected behavior or if it originates from an unusual or unauthorized source.\n- Analyze any network connections or file modifications associated with the PowerShell process to identify potential data exfiltration or lateral movement activities.\n- Correlate the alert with other security events or logs, such as Windows Event Logs or network traffic logs, to gather additional context and identify any related suspicious activities.\n- Assess the risk and impact of the detected activity by considering the severity and risk score provided in the alert, and determine if immediate remediation actions are necessary.\n\n### False positive analysis\n\n- Legitimate administrative scripts may use string manipulation and encoding techniques for benign purposes, such as data processing or configuration management. Review the context of the script execution and verify the source and intent before flagging it as malicious.\n- Scripts that automate complex tasks might use obfuscation-like patterns to handle data securely or efficiently. Consider whitelisting known scripts or trusted sources to reduce false positives.\n- Development and testing environments often run scripts with obfuscation patterns for testing purposes. Exclude these environments from the rule or create exceptions for specific users or groups involved in development.\n- Security tools and monitoring solutions might generate PowerShell scripts with obfuscation patterns as part of their normal operation. Identify these tools and exclude their activities from triggering the rule.\n- Regularly update the list of exceptions and whitelisted scripts to ensure that new legitimate scripts are not mistakenly flagged as threats.\n\n### Response and remediation\n\n- Isolate the affected system from the network to prevent further spread of potentially malicious scripts.\n- Terminate any suspicious PowerShell processes identified by the detection rule to halt ongoing malicious activity.\n- Conduct a thorough review of the PowerShell script block logs to identify and remove any obfuscated scripts or malicious code remnants.\n- Restore the system from a known good backup if malicious activity is confirmed and system integrity is compromised.\n- Update and patch the affected system to ensure all security vulnerabilities are addressed, reducing the risk of exploitation.\n- Monitor the system and network for any signs of re-infection or similar obfuscation patterns to ensure the threat has been fully mitigated.\n- Escalate the incident to the security operations center (SOC) or incident response team for further analysis and to determine if additional systems are affected.",
        "query": "event.category:process and host.os.type:windows and\n  powershell.file.script_block_text : (\n    \"[string]::join\" or\n    \"-Join\" or\n    \"[convert]::toint16\" or\n    \"[char][int]$_\" or\n    (\"ConvertTo-SecureString\" and \"PtrToStringAuto\") or\n    \".GetNetworkCredential().password\" or\n    \"-BXor\" or\n    (\"replace\" and \"char\") or\n    \"[array]::reverse\" or\n    \"-replace\"\n  ) and\n  powershell.file.script_block_text : (\n    (\"$pSHoMe[\" and \"+$pSHoMe[\") or\n    (\"$ShellId[\" and \"+$ShellId[\") or\n    (\"$env:ComSpec[4\" and \"25]-Join\") or\n    ((\"Set-Variable\" or \"SV\" or \"Set-Item\") and \"OFS\") or\n    (\"*MDR*\" and \"Name[3,11,2]\") or\n    (\"$VerbosePreference\" and \"[1,3]+'X'-Join''\") or\n    (\"rahc\" or \"ekovin\" or \"gnirts\" or \"ecnereferpesobrev\" or \"ecalper\" or \"cepsmoc\" or \"dillehs\") or\n    (\"System.Management.Automation.$([cHAr]\" or \"System.$([cHAr]\" or \")+[cHAR]([byte]\")\n  )\n",
        "references": [
            "https://github.com/danielbohannon/Invoke-Obfuscation"
        ],
        "related_integrations": [
            {
                "package": "windows",
                "version": "^2.0.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "event.category",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.os.type",
                "type": "keyword"
            },
            {
                "ecs": false,
                "name": "powershell.file.script_block_text",
                "type": "unknown"
            }
        ],
        "risk_score": 47,
        "rule_id": "8025db49-c57c-4fc0-bd86-7ccd6d10a35a",
        "setup": "## Setup\n\nThe 'PowerShell Script Block Logging' logging policy must be enabled.\nSteps to implement the logging policy with Advanced Audit Configuration:\n\n```\nComputer Configuration >\nAdministrative Templates >\nWindows PowerShell >\nTurn on PowerShell Script Block Logging (Enable)\n```\n\nSteps to implement the logging policy via registry:\n\n```\nreg add \"hklm\\SOFTWARE\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging\" /v EnableScriptBlockLogging /t REG_DWORD /d 1\n```\n",
        "severity": "medium",
        "tags": [
            "Domain: Endpoint",
            "OS: Windows",
            "Use Case: Threat Detection",
            "Tactic: Defense Evasion",
            "Data Source: PowerShell Logs",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0005",
                    "name": "Defense Evasion",
                    "reference": "https://attack.mitre.org/tactics/TA0005/"
                },
                "technique": [
                    {
                        "id": "T1027",
                        "name": "Obfuscated Files or Information",
                        "reference": "https://attack.mitre.org/techniques/T1027/"
                    },
                    {
                        "id": "T1140",
                        "name": "Deobfuscate/Decode Files or Information",
                        "reference": "https://attack.mitre.org/techniques/T1140/"
                    }
                ]
            },
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0002",
                    "name": "Execution",
                    "reference": "https://attack.mitre.org/tactics/TA0002/"
                },
                "technique": [
                    {
                        "id": "T1059",
                        "name": "Command and Scripting Interpreter",
                        "reference": "https://attack.mitre.org/techniques/T1059/",
                        "subtechnique": [
                            {
                                "id": "T1059.001",
                                "name": "PowerShell",
                                "reference": "https://attack.mitre.org/techniques/T1059/001/"
                            }
                        ]
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "query",
        "version": 105
    },
    "id": "8025db49-c57c-4fc0-bd86-7ccd6d10a35a_105",
    "type": "security-rule"
}