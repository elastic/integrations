{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "This rule detects when an interactive shell is spawned inside a running container. This could indicate a potential container breakout attempt or an attacker's attempt to gain unauthorized access to the underlying host.",
        "false_positives": [
            "Legitimate users and processes, such as system administration tools, may utilize shell utilities inside a container resulting in false positives."
        ],
        "from": "now-6m",
        "index": [
            "logs-cloud_defend*"
        ],
        "interval": "5m",
        "language": "eql",
        "license": "Elastic License v2",
        "name": "Suspicious Interactive Shell Spawned From Inside A Container",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Suspicious Interactive Shell Spawned From Inside A Container\n\nContainers are lightweight, portable units that encapsulate applications and their dependencies, often used to ensure consistent environments across development and production. Adversaries may exploit containers by spawning interactive shells to execute unauthorized commands, potentially leading to container escape and host compromise. The detection rule identifies such threats by monitoring for shell processes initiated within containers, focusing on specific process actions and arguments indicative of interactive sessions.\n\n### Possible investigation steps\n\n- Review the alert details to identify the specific container ID where the interactive shell was spawned. This will help in isolating the affected container for further analysis.\n- Examine the process executable and arguments, particularly looking for shell types and interactive flags (e.g., \"-i\", \"-it\"), to understand the nature of the shell session initiated.\n- Check the process entry leader to determine if the shell process is part of a larger process tree, which might indicate a more complex attack chain or script execution.\n- Investigate the user context under which the shell was spawned to assess if it aligns with expected user behavior or if it indicates potential unauthorized access.\n- Analyze recent logs and events from the container and host to identify any preceding suspicious activities or anomalies that might have led to the shell spawning.\n- Correlate the event with other security alerts or incidents to determine if this is part of a broader attack pattern or campaign targeting the environment.\n\n### False positive analysis\n\n- Development and testing activities may trigger this rule when developers intentionally spawn interactive shells within containers for debugging or configuration purposes. To manage this, create exceptions for specific user accounts or container IDs frequently used in development environments.\n- Automated scripts or orchestration tools that use interactive shells for legitimate tasks can also cause false positives. Identify these scripts and exclude their associated process names or arguments from the rule.\n- Some container management platforms might use interactive shells as part of their normal operations. Review the processes and arguments used by these platforms and add them to an exception list if they are known to be safe.\n- Regular maintenance tasks that require interactive shell access, such as system updates or configuration changes, can be excluded by scheduling these tasks during known maintenance windows and temporarily adjusting the rule settings.\n\n### Response and remediation\n\n- Immediately isolate the affected container to prevent further unauthorized access or potential container escape. This can be done by stopping the container or disconnecting it from the network.\n- Capture and preserve forensic data from the container, including logs, process lists, and network activity, to aid in further investigation and understanding of the attack vector.\n- Conduct a thorough review of the container's configuration and permissions to identify and rectify any misconfigurations or vulnerabilities that may have been exploited.\n- Patch and update the container image and any associated software to address known vulnerabilities that could have been leveraged by the attacker.\n- Implement stricter access controls and monitoring on container environments to prevent unauthorized shell access, such as using role-based access controls and enabling audit logging.\n- Escalate the incident to the security operations team for further analysis and to determine if the threat has spread to other parts of the infrastructure.\n- Review and enhance detection capabilities to identify similar threats in the future, ensuring that alerts are tuned to detect unauthorized shell access attempts promptly.",
        "query": "process where container.id: \"*\" and\nevent.type== \"start\" and\n\n/*D4C consolidates closely spawned event.actions, this excludes end actions to only capture ongoing processes*/\nevent.action in (\"fork\", \"exec\") and\n process.entry_leader.same_as_process== false and\n(\n(process.executable: \"*/*sh\" and process.args: (\"-i\", \"-it\")) or\nprocess.args: \"*/*sh\"\n)\n",
        "related_integrations": [
            {
                "package": "cloud_defend",
                "version": "^1.0.5"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "container.id",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.action",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.args",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.entry_leader.same_as_process",
                "type": "boolean"
            },
            {
                "ecs": true,
                "name": "process.executable",
                "type": "keyword"
            }
        ],
        "risk_score": 73,
        "rule_id": "8d3d0794-c776-476b-8674-ee2e685f6470",
        "severity": "high",
        "tags": [
            "Data Source: Elastic Defend for Containers",
            "Domain: Container",
            "OS: Linux",
            "Use Case: Threat Detection",
            "Tactic: Execution",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0002",
                    "name": "Execution",
                    "reference": "https://attack.mitre.org/tactics/TA0002/"
                },
                "technique": [
                    {
                        "id": "T1059",
                        "name": "Command and Scripting Interpreter",
                        "reference": "https://attack.mitre.org/techniques/T1059/",
                        "subtechnique": [
                            {
                                "id": "T1059.004",
                                "name": "Unix Shell",
                                "reference": "https://attack.mitre.org/techniques/T1059/004/"
                            }
                        ]
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "eql",
        "version": 4
    },
    "id": "8d3d0794-c776-476b-8674-ee2e685f6470_4",
    "type": "security-rule"
}