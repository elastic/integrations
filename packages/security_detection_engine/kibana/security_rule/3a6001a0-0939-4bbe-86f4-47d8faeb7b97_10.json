{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "Identifies LSASS loading an unsigned or untrusted DLL. Windows Security Support Provider (SSP) DLLs are loaded into LSSAS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs.",
        "from": "now-9m",
        "index": [
            "logs-endpoint.events.library-*",
            "endgame-*"
        ],
        "language": "eql",
        "license": "Elastic License v2",
        "name": "Suspicious Module Loaded by LSASS",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Suspicious Module Loaded by LSASS\n\nThe Local Security Authority Subsystem Service (LSASS) is crucial for managing security policies and handling user authentication in Windows environments. Adversaries exploit LSASS by loading malicious or untrusted DLLs to access sensitive credentials. The detection rule identifies such threats by monitoring LSASS for unsigned or untrusted DLLs, excluding known safe signatures and hashes, thus flagging potential credential dumping activities.\n\n### Possible investigation steps\n\n- Review the process details for lsass.exe to confirm the presence of any unsigned or untrusted DLLs loaded into the process. Pay particular attention to the DLL's code signature status and hash values.\n- Cross-reference the identified DLL's hash against known malicious hashes in threat intelligence databases to determine if it is associated with any known threats.\n- Investigate the source and path of the suspicious DLL to understand how it was introduced into the system. This may involve checking recent file creation or modification events in the system directories.\n- Analyze the system's event logs for any related activities or anomalies around the time the suspicious DLL was loaded, such as unusual user logins or privilege escalation attempts.\n- Check for any recent changes in the system's security settings or policies that might have allowed the loading of untrusted DLLs into LSASS.\n- If the DLL is confirmed to be malicious, isolate the affected system to prevent further credential access or lateral movement within the network.\n\n### False positive analysis\n\n- Legitimate software from trusted vendors not included in the exclusion list may trigger false positives. Users can update the exclusion list with additional trusted signatures or hashes from verified vendors to prevent these alerts.\n- Custom or in-house developed DLLs used within the organization might be flagged as suspicious. Organizations should ensure these DLLs are signed with a trusted certificate and add their signatures to the exclusion list if necessary.\n- Security software updates or patches from vendors not currently listed may cause false positives. Regularly review and update the exclusion list to include new trusted signatures from security software providers.\n- Temporary or expired certificates for legitimate DLLs can result in false positives. Users should verify the legitimacy of these DLLs and update the exclusion list with their signatures if they are confirmed safe.\n- DLLs from newly installed software that are not yet recognized as trusted may be flagged. Users should validate the software's source and add its signatures to the exclusion list if it is deemed secure.\n\n### Response and remediation\n\n- Isolate the affected system from the network to prevent further unauthorized access or data exfiltration.\n- Terminate the LSASS process if it is confirmed to be running a malicious or untrusted DLL, ensuring that this action does not disrupt critical services.\n- Conduct a thorough scan of the affected system using updated antivirus or endpoint detection and response (EDR) tools to identify and remove any malicious files or remnants.\n- Review and reset credentials for any accounts that may have been compromised, focusing on those with elevated privileges.\n- Implement application whitelisting to prevent unauthorized DLLs from being loaded into critical processes like LSASS in the future.\n- Escalate the incident to the security operations center (SOC) or incident response team for further investigation and to determine if additional systems are affected.\n- Update security monitoring tools to enhance detection capabilities for similar threats, ensuring that alerts are generated for any future attempts to load untrusted DLLs into LSASS.",
        "query": "any where event.category in (\"library\", \"driver\") and host.os.type == \"windows\" and\n  process.executable : \"?:\\\\Windows\\\\System32\\\\lsass.exe\" and\n  not (dll.code_signature.subject_name :\n               (\"Microsoft Windows\",\n                \"Microsoft Corporation\",\n                \"Microsoft Windows Publisher\",\n                \"Microsoft Windows Software Compatibility Publisher\",\n                \"Microsoft Windows Hardware Compatibility Publisher\",\n                \"McAfee, Inc.\",\n                \"SecMaker AB\",\n                \"HID Global Corporation\",\n                \"HID Global\",\n                \"Apple Inc.\",\n                \"Citrix Systems, Inc.\",\n                \"Dell Inc\",\n                \"Hewlett-Packard Company\",\n                \"Symantec Corporation\",\n                \"National Instruments Corporation\",\n                \"DigitalPersona, Inc.\",\n                \"Novell, Inc.\",\n                \"gemalto\",\n                \"EasyAntiCheat Oy\",\n                \"Entrust Datacard Corporation\",\n                \"AuriStor, Inc.\",\n                \"LogMeIn, Inc.\",\n                \"VMware, Inc.\",\n                \"Istituto Poligrafico e Zecca dello Stato S.p.A.\",\n                \"Nubeva Technologies Ltd\",\n                \"Micro Focus (US), Inc.\",\n                \"Yubico AB\",\n                \"GEMALTO SA\",\n                \"Secure Endpoints, Inc.\",\n                \"Sophos Ltd\",\n                \"Morphisec Information Security 2014 Ltd\",\n                \"Entrust, Inc.\",\n                \"Nubeva Technologies Ltd\",\n                \"Micro Focus (US), Inc.\",\n                \"F5 Networks Inc\",\n                \"Bit4id\",\n                \"Thales DIS CPL USA, Inc.\",\n                \"Micro Focus International plc\",\n                \"HYPR Corp\",\n                \"Intel(R) Software Development Products\",\n                \"PGP Corporation\",\n                \"Parallels International GmbH\",\n                \"FrontRange Solutions Deutschland GmbH\",\n                \"SecureLink, Inc.\",\n                \"Tidexa OU\",\n                \"Amazon Web Services, Inc.\",\n                \"SentryBay Limited\",\n                \"Audinate Pty Ltd\",\n                \"CyberArk Software Ltd.\",\n                \"McAfeeSysPrep\",\n                \"NVIDIA Corporation PE Sign v2016\",\n                \"Trend Micro, Inc.\",\n                \"Fortinet Technologies (Canada) Inc.\",\n                \"Carbon Black, Inc.\") and\n       dll.code_signature.status : (\"trusted\", \"errorExpired\", \"errorCode_endpoint*\", \"errorChaining\")) and\n\n     not dll.hash.sha256 :\n                (\"811a03a5d7c03802676d2613d741be690b3461022ea925eb6b2651a5be740a4c\",\n                 \"1181542d9cfd63fb00c76242567446513e6773ea37db6211545629ba2ecf26a1\",\n                 \"ed6e735aa6233ed262f50f67585949712f1622751035db256811b4088c214ce3\",\n                 \"26be2e4383728eebe191c0ab19706188f0e9592add2e0bf86b37442083ae5e12\",\n                 \"9367e78b84ef30cf38ab27776605f2645e52e3f6e93369c674972b668a444faa\",\n                 \"d46cc934765c5ecd53867070f540e8d6f7701e834831c51c2b0552aba871921b\",\n                 \"0f77a3826d7a5cd0533990be0269d951a88a5c277bc47cff94553330b715ec61\",\n                 \"4aca034d3d85a9e9127b5d7a10882c2ef4c3e0daa3329ae2ac1d0797398695fb\",\n                 \"86031e69914d9d33c34c2f4ac4ae523cef855254d411f88ac26684265c981d95\")\n",
        "references": [
            "https://blog.xpnsec.com/exploring-mimikatz-part-2/",
            "https://github.com/jas502n/mimikat_ssp"
        ],
        "related_integrations": [
            {
                "package": "endpoint",
                "version": "^8.2.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "dll.code_signature.status",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "dll.code_signature.subject_name",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "dll.hash.sha256",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.category",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.os.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.executable",
                "type": "keyword"
            }
        ],
        "risk_score": 47,
        "rule_id": "3a6001a0-0939-4bbe-86f4-47d8faeb7b97",
        "severity": "medium",
        "tags": [
            "Domain: Endpoint",
            "OS: Windows",
            "Use Case: Threat Detection",
            "Tactic: Credential Access",
            "Data Source: Elastic Defend",
            "Data Source: Elastic Endgame",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0006",
                    "name": "Credential Access",
                    "reference": "https://attack.mitre.org/tactics/TA0006/"
                },
                "technique": [
                    {
                        "id": "T1003",
                        "name": "OS Credential Dumping",
                        "reference": "https://attack.mitre.org/techniques/T1003/",
                        "subtechnique": [
                            {
                                "id": "T1003.001",
                                "name": "LSASS Memory",
                                "reference": "https://attack.mitre.org/techniques/T1003/001/"
                            }
                        ]
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "eql",
        "version": 10
    },
    "id": "3a6001a0-0939-4bbe-86f4-47d8faeb7b97_10",
    "type": "security-rule"
}