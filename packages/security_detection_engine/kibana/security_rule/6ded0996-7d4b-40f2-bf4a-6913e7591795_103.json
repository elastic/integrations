{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "This rule detects the installation of root certificates on a Linux system. Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to their command and control servers. Root certificates are used in public key cryptography to identify a root certificate authority (CA). When a root certificate is installed, the system or application will trust certificates in the root's chain of trust that have been signed by the root certificate.",
        "from": "now-9m",
        "index": [
            "logs-endpoint.events.process*",
            "logs-sentinel_one_cloud_funnel.*",
            "endgame-*"
        ],
        "language": "eql",
        "license": "Elastic License v2",
        "name": "Root Certificate Installation",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Root Certificate Installation\n\nRoot certificates are pivotal in establishing trust within public key infrastructures, enabling secure communications by verifying the authenticity of entities. Adversaries exploit this by installing rogue root certificates on compromised Linux systems, thus bypassing security warnings and facilitating undetected command and control communications. The detection rule identifies suspicious certificate installations by monitoring specific processes and excluding legitimate parent processes, thereby highlighting potential unauthorized activities.\n\n### Possible investigation steps\n\n- Review the process details to confirm the execution of \"update-ca-trust\" or \"update-ca-certificates\" on the Linux host, focusing on the event type \"start\" and action \"exec\" or \"exec_event\".\n- Examine the parent process name and arguments to ensure they do not match any of the legitimate exclusions such as \"ca-certificates.postinst\", \"pacman\", or \"/var/tmp/rpm*\".\n- Investigate the user account associated with the process to determine if it is a known or expected user for such operations.\n- Check the system logs and recent changes to identify any unauthorized modifications or installations that coincide with the alert.\n- Correlate the alert with other security events or logs to identify any potential command and control communications or other suspicious activities on the host.\n- Assess the network connections from the host around the time of the alert to detect any unusual or unauthorized outbound traffic.\n\n### False positive analysis\n\n- Legitimate system updates or package installations may trigger the rule when processes like \"update-ca-trust\" or \"update-ca-certificates\" are executed by trusted package managers such as \"pacman\" or \"pamac-daemon\". To mitigate this, ensure these parent processes are included in the exclusion list.\n- Automated scripts or system maintenance tasks that use shell scripts (e.g., \"sh\", \"bash\", \"zsh\") to update certificates might be flagged. If these scripts are verified as safe, consider adding specific script names or paths to the exclusion criteria.\n- Custom applications or services that require certificate updates and are known to be safe can be excluded by adding their parent process names to the exclusion list, ensuring they do not trigger false alerts.\n- Security tools or agents like \"kesl\" or \"execd\" that manage certificates as part of their operations may cause false positives. Verify their activities and include them in the exclusion list if they are part of legitimate security operations.\n- Temporary files or scripts located in directories like \"/var/tmp/rpm*\" used during legitimate installations should be reviewed and excluded if they are part of routine system operations.\n\n### Response and remediation\n\n- Immediately isolate the affected Linux system from the network to prevent further unauthorized communications with potential command and control servers.\n- Revoke any unauthorized root certificates installed on the system by removing them from the trusted certificate store to restore the integrity of the system's trust chain.\n- Conduct a thorough review of system logs and process execution history to identify any additional unauthorized activities or changes made by the adversary.\n- Restore the system from a known good backup if unauthorized changes or persistent threats are detected that cannot be easily remediated.\n- Update and patch the system to the latest security standards to close any vulnerabilities that may have been exploited by the adversary.\n- Implement enhanced monitoring and alerting for similar suspicious activities, focusing on process executions related to certificate management.\n- Escalate the incident to the security operations center (SOC) or relevant incident response team for further investigation and to assess the potential impact on other systems within the network.",
        "query": "process where host.os.type == \"linux\" and event.type == \"start\" and event.action in (\"exec\", \"exec_event\", \"start\") and\nprocess.name in (\"update-ca-trust\", \"update-ca-certificates\") and not (\n  process.parent.name like (\n    \"ca-certificates.postinst\", \"ca-certificates-*.trigger\", \"pacman\", \"pamac-daemon\", \"autofirma.postinst\",\n    \"ipa-client-install\", \"su\", \"platform-python\", \"python*\", \"kesl\", \"execd\", \"systemd\", \"flock\"\n  ) or\n  process.parent.args like \"/var/tmp/rpm*\" or\n  (process.parent.name in (\"sh\", \"bash\", \"zsh\") and process.args == \"-e\")\n)\n",
        "references": [
            "https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.004/T1553.004.md"
        ],
        "related_integrations": [
            {
                "package": "endpoint",
                "version": "^8.2.0"
            },
            {
                "package": "sentinel_one_cloud_funnel",
                "version": "^1.0.0"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "event.action",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "event.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.os.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.args",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.name",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.parent.args",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "process.parent.name",
                "type": "keyword"
            }
        ],
        "risk_score": 47,
        "rule_id": "6ded0996-7d4b-40f2-bf4a-6913e7591795",
        "setup": "## Setup\n\nThis rule requires data coming in from Elastic Defend.\n\n### Elastic Defend Integration Setup\nElastic Defend is integrated into the Elastic Agent using Fleet. Upon configuration, the integration allows the Elastic Agent to monitor events on your host and send data to the Elastic Security app.\n\n#### Prerequisite Requirements:\n- Fleet is required for Elastic Defend.\n- To configure Fleet Server refer to the [documentation](https://www.elastic.co/guide/en/fleet/current/fleet-server.html).\n\n#### The following steps should be executed in order to add the Elastic Defend integration on a Linux System:\n- Go to the Kibana home page and click \"Add integrations\".\n- In the query bar, search for \"Elastic Defend\" and select the integration to see more details about it.\n- Click \"Add Elastic Defend\".\n- Configure the integration name and optionally add a description.\n- Select the type of environment you want to protect, either \"Traditional Endpoints\" or \"Cloud Workloads\".\n- Select a configuration preset. Each preset comes with different default settings for Elastic Agent, you can further customize these later by configuring the Elastic Defend integration policy. [Helper guide](https://www.elastic.co/guide/en/security/current/configure-endpoint-integration-policy.html).\n- We suggest selecting \"Complete EDR (Endpoint Detection and Response)\" as a configuration setting, that provides \"All events; all preventions\"\n- Enter a name for the agent policy in \"New agent policy name\". If other agent policies already exist, you can click the \"Existing hosts\" tab and select an existing policy instead.\nFor more details on Elastic Agent configuration settings, refer to the [helper guide](https://www.elastic.co/guide/en/fleet/8.10/agent-policy.html).\n- Click \"Save and Continue\".\n- To complete the integration, select \"Add Elastic Agent to your hosts\" and continue to the next section to install the Elastic Agent on your hosts.\nFor more details on Elastic Defend refer to the [helper guide](https://www.elastic.co/guide/en/security/current/install-endpoint.html).\n",
        "severity": "medium",
        "tags": [
            "Domain: Endpoint",
            "OS: Linux",
            "Use Case: Threat Detection",
            "Tactic: Defense Evasion",
            "Data Source: Elastic Defend",
            "Data Source: SentinelOne",
            "Data Source: Elastic Endgame",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0005",
                    "name": "Defense Evasion",
                    "reference": "https://attack.mitre.org/tactics/TA0005/"
                },
                "technique": [
                    {
                        "id": "T1553",
                        "name": "Subvert Trust Controls",
                        "reference": "https://attack.mitre.org/techniques/T1553/",
                        "subtechnique": [
                            {
                                "id": "T1553.004",
                                "name": "Install Root Certificate",
                                "reference": "https://attack.mitre.org/techniques/T1553/004/"
                            }
                        ]
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "eql",
        "version": 103
    },
    "id": "6ded0996-7d4b-40f2-bf4a-6913e7591795_103",
    "type": "security-rule"
}