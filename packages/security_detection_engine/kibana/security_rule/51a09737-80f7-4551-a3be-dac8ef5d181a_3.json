{
    "attributes": {
        "author": [
            "Elastic"
        ],
        "description": "This rule monitors the syslog log file for messages related to instances of a out-of-tree kernel module load, indicating the taining of the kernel. Rootkits often leverage kernel modules as their main defense evasion technique. Detecting tainted kernel module loads is crucial for ensuring system security and integrity, as malicious or unauthorized modules can compromise the kernel and lead to system vulnerabilities or unauthorized access.",
        "from": "now-9m",
        "index": [
            "logs-system.syslog-*"
        ],
        "language": "kuery",
        "license": "Elastic License v2",
        "name": "Tainted Out-Of-Tree Kernel Module Load",
        "note": "## Triage and analysis\n\n> **Disclaimer**:\n> This investigation guide was created using generative AI technology and has been reviewed to improve its accuracy and relevance. While every effort has been made to ensure its quality, we recommend validating the content and adapting it to suit your specific environment and operational needs.\n\n### Investigating Tainted Out-Of-Tree Kernel Module Load\n\nKernel modules extend the functionality of the Linux kernel without rebooting the system. While beneficial, out-of-tree modules, not included in the official kernel source, can taint the kernel, posing security risks. Adversaries exploit this by loading malicious modules to evade detection and maintain persistence. The detection rule monitors syslog for specific messages indicating such module loads, helping identify potential threats early.\n\n### Possible investigation steps\n\n- Review the syslog entries around the time of the alert to gather additional context about the module load event, focusing on messages with \"loading out-of-tree module taints kernel.\"\n- Identify the specific out-of-tree kernel module that was loaded by examining the syslog message details and cross-reference with known legitimate modules.\n- Check the system for any recent changes or installations that might have introduced the out-of-tree module, such as software updates or new applications.\n- Investigate the source and integrity of the module by verifying its origin and comparing its hash against known good or malicious hashes.\n- Assess the system for any signs of compromise or unauthorized access, focusing on persistence mechanisms and defense evasion tactics, as indicated by the MITRE ATT&CK framework references.\n- Consult with system administrators or relevant stakeholders to determine if the module load was authorized or expected as part of normal operations.\n\n### False positive analysis\n\n- Legitimate third-party drivers or hardware support modules may trigger alerts when loaded as out-of-tree modules. Users should verify the source and purpose of these modules to ensure they are not malicious.\n- Custom-built modules for specific applications or hardware optimizations can also cause false positives. Users can create exceptions for these modules by adding them to an allowlist if they are verified as safe and necessary for system operations.\n- Development and testing environments often load experimental or custom modules that are not part of the official kernel. In such cases, users should document these modules and exclude them from alerts to avoid unnecessary noise.\n- Regularly updated or patched modules from trusted vendors might not be immediately recognized as safe. Users should maintain a list of trusted vendors and update their exception lists accordingly to prevent false positives.\n- Some security tools or monitoring solutions may use out-of-tree modules for enhanced functionality. Users should ensure these tools are from reputable sources and exclude their modules from detection rules if they are confirmed to be secure.\n\n### Response and remediation\n\n- Immediately isolate the affected system from the network to prevent potential lateral movement by the adversary.\n- Identify and unload the suspicious out-of-tree kernel module using the `rmmod` command to remove it from the kernel.\n- Conduct a thorough review of the system's kernel module load history and verify the legitimacy of all loaded modules.\n- Perform a comprehensive malware scan on the affected system to detect and remove any additional malicious software.\n- Restore the system from a known good backup if the integrity of the system cannot be assured after module removal.\n- Implement stricter access controls and monitoring for kernel module loading to prevent unauthorized module loads in the future.\n- Escalate the incident to the security operations team for further investigation and to assess the need for broader organizational response measures.",
        "query": "host.os.type:linux and event.dataset:\"system.syslog\" and process.name:kernel and\nmessage:\"loading out-of-tree module taints kernel.\"\n",
        "related_integrations": [
            {
                "package": "system",
                "version": "^1.6.4"
            }
        ],
        "required_fields": [
            {
                "ecs": true,
                "name": "event.dataset",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "host.os.type",
                "type": "keyword"
            },
            {
                "ecs": true,
                "name": "message",
                "type": "match_only_text"
            },
            {
                "ecs": true,
                "name": "process.name",
                "type": "keyword"
            }
        ],
        "risk_score": 21,
        "rule_id": "51a09737-80f7-4551-a3be-dac8ef5d181a",
        "setup": "## Setup\n\nThis rule requires data coming in from one of the following integrations:\n- Filebeat\n\n### Filebeat Setup\nFilebeat is a lightweight shipper for forwarding and centralizing log data. Installed as an agent on your servers, Filebeat monitors the log files or locations that you specify, collects log events, and forwards them either to Elasticsearch or Logstash for indexing.\n\n#### The following steps should be executed in order to add the Filebeat for the Linux System:\n- Elastic provides repositories available for APT and YUM-based distributions. Note that we provide binary packages, but no source packages.\n- To install the APT and YUM repositories follow the setup instructions in this [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/setup-repositories.html).\n- To run Filebeat on Docker follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/running-on-docker.html).\n- To run Filebeat on Kubernetes follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/running-on-kubernetes.html).\n- For quick start information for Filebeat refer to the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/8.11/filebeat-installation-configuration.html).\n- For complete Setup and Run Filebeat information refer to the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/setting-up-and-running.html).\n\n#### Rule Specific Setup Note\n- This rule requires the Filebeat System Module to be enabled.\n- The system module collects and parses logs created by the system logging service of common Unix/Linux based distributions.\n- To run the system module of Filebeat on Linux follow the setup instructions in the [helper guide](https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-module-system.html).\n",
        "severity": "low",
        "tags": [
            "Domain: Endpoint",
            "OS: Linux",
            "Use Case: Threat Detection",
            "Tactic: Persistence",
            "Tactic: Defense Evasion",
            "Resources: Investigation Guide"
        ],
        "threat": [
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0003",
                    "name": "Persistence",
                    "reference": "https://attack.mitre.org/tactics/TA0003/"
                },
                "technique": [
                    {
                        "id": "T1547",
                        "name": "Boot or Logon Autostart Execution",
                        "reference": "https://attack.mitre.org/techniques/T1547/",
                        "subtechnique": [
                            {
                                "id": "T1547.006",
                                "name": "Kernel Modules and Extensions",
                                "reference": "https://attack.mitre.org/techniques/T1547/006/"
                            }
                        ]
                    }
                ]
            },
            {
                "framework": "MITRE ATT&CK",
                "tactic": {
                    "id": "TA0005",
                    "name": "Defense Evasion",
                    "reference": "https://attack.mitre.org/tactics/TA0005/"
                },
                "technique": [
                    {
                        "id": "T1014",
                        "name": "Rootkit",
                        "reference": "https://attack.mitre.org/techniques/T1014/"
                    }
                ]
            }
        ],
        "timestamp_override": "event.ingested",
        "type": "query",
        "version": 3
    },
    "id": "51a09737-80f7-4551-a3be-dac8ef5d181a_3",
    "type": "security-rule"
}