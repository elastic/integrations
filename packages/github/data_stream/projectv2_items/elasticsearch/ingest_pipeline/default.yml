---
description: Pipeline for parsing GitHub ProjectV2 Items
processors:
- set:
    field: ecs.version
    value: '8.8.0'
- set:
    field: event.action
    value: "event"
- set:
    field: event.kind
    value: "event"
- rename:
    field: message
    target_field: event.original
    ignore_missing: true
- json:
    field: event.original
    target_field: github.projectv2_items
- rename:
    field: github.projectv2_items.project
    target_field: github.projectv2
    if: ctx.github?.projectv2_items?.project != null
- fingerprint:
    fields: 
        - github.projectv2_items.id
        - github.projectv2.id
    target_field: "_id"
    ignore_missing: true
- set:
    field: event.id
    copy_from: github.projectv2_items.id
    if: ctx.github?.projectv2_items?.id != null
- script:
    lang: painless
    description: Extract fieldValues nested JSON into key-value pairs
    tag: script-extract-fieldvalues
    if: ctx.github?.projectv2_items?.fieldValues?.nodes != null && ctx.github.projectv2_items.fieldValues.nodes.size() > 0
    source: |
        Map field_values = new HashMap();
        Map field_values_provided = new HashMap();
        Map field_values_custom = new HashMap();
        List provided_values = ["Assignees", "Title", "Labels", "Status", "Linked pull requests", "Reviewers", "Repository"];
        List fieldValuesNodes = ctx.github.projectv2_items.fieldValues.nodes;
        for (Map fieldValue: fieldValuesNodes){
            if (fieldValue != null && fieldValue.size() == 0 ) {
                continue;
            }
            String field, value;
            List values = new ArrayList();
            Map value_map = new HashMap();
            field = fieldValue.field.name;

            if (fieldValue.get("text") != null) {
                value = fieldValue.text;
            }
            else if (fieldValue.get("name") != null) {
                value = fieldValue.name;
            }
            else if (fieldValue.get("users") != null) {
                for (Map user: fieldValue.get("users").nodes) {
                    values.add(user.login);
                }
            }
            else if (fieldValue.get("repository") != null) {
                value = fieldValue.repository.name;
            }
            else if (fieldValue.get("labels") != null) {
                for (Map label: fieldValue.get("labels").nodes) {
                    if (label == null || label.size() == 0) {
                        continue;
                    }
                    values.add(label.name);
                }
            }
            else if (fieldValue.get("pullRequests") != null) {
                for (Map pullRequest: fieldValue.get("pullRequests").nodes) {
                    values.add(pullRequest.url);
                }
            }
            else if (fieldValue.get("startDate") != null) {
                value_map.put("startDate", fieldValue.get("startDate"));
                value_map.put("title", fieldValue.get("title"));
                value_map.put("duration", fieldValue.get("duration"));
            }
            Object value_obj = (value != null ? value : (values != null ? values : (value_map != null ? value_map: "")));
            if (provided_values.contains(field)) {
                field_values_provided.put(field, value_obj);
            }
            else{
                field_values_custom.put(field, value_obj);
            }
        }

        // Seperate field_values into provided (default fields provided by Github) and custom fields
        if (field_values_provided.size() > 0) {
            field_values.put("provided", field_values_provided);
        }
        if (field_values_custom.size() > 0) {
            field_values.put("custom", field_values_custom);
        }
        
        ctx.github.projectv2_items.field_values = field_values;

- remove:
    field: github.projectv2_items.fieldValues
    if: ctx.github?.projectv2_items?.fieldValues != null
- date:
    field: github.projectv2_items.content.createdAt
    formats:
    - ISO8601
    timezone: UTC
    target_field: "@timestamp"
    if: ctx.github?.projectv2_items?.content?.createdAt != null
- date:
    field: github.projectv2_items.content.updatedAt
    formats:
    - ISO8601
    timezone: UTC
    target_field: github.projectv2_items.content.updatedAt
    if: ctx.github?.projectv2_items?.content?.updatedAt != null
- date:
    field: github.projectv2.updatedAt
    formats:
    - ISO8601
    timezone: UTC
    target_field: github.projectv2.updatedAt
    if: ctx.github?.projectv2?.updatedAt != null
- date:
    field: github.projectv2.createdAt
    formats:
    - ISO8601
    timezone: UTC
    target_field: github.projectv2.createdAt
    if: ctx.github?.projectv2?.createdAt != null

# Extract Content Assignees into List
- foreach:
    if: ctx.github?.projectv2_items?.content?.assignees?.nodes != null && ctx.github.projectv2_items.content.assignees.nodes.size() > 0
    tag: foreach-content-assignees
    field: github.projectv2_items.content.assignees.nodes
    processor:
      append:
        field: _temp_.content.assignees
        value: "{{_ingest._value.login}}"
        allow_duplicates: false
- set:
    tag: rename-content-assignees
    copy_from: _temp_.content.assignees
    field: github.projectv2_items.content.assignees
    if: ctx._temp_?.content?.assignees instanceof List && ctx._temp_.content.assignees.size() > 0

# Extract Content Labels into List
- foreach:
    tag: foreach-content-labels
    if: ctx.github?.projectv2_items?.content?.labels?.nodes != null && ctx.github.projectv2_items.content.labels.nodes.size() > 0
    field: github.projectv2_items.content.labels.nodes
    processor:
      append:
        field: _temp_.content.labels
        value: "{{_ingest._value.name}}"
        allow_duplicates: false
- set:
    tag: rename-content-labels
    copy_from: _temp_.content.labels
    field: github.projectv2_items.content.labels
    if: ctx._temp_?.content?.labels instanceof List && ctx._temp_.content.labels.size() > 0

# Set Github standard fields
- set:
    field: github.repository.name
    copy_from: github.projectv2_items.content.repository.name
    if: ctx.github?.projectv2_items?.content?.repository?.name != null
- set:
    field: github.repository.url
    copy_from: github.projectv2_items.content.repository.url
    if: ctx.github?.projectv2_items?.content?.repository?.url != null
- set: 
    field: github.state
    copy_from: github.projectv2_items.content.state
    if: ctx.github.projectv2_items?.content?.state != null

# - set:
#     field: event.created
#     copy_from: "@timestamp"
#     ignore_empty_value: true
# - set:
#     field: github.projectv2_items.is_pr
#     value: false
# - set:
#     if: ctx.github?.projectv2_items?.pull_request != null
#     field: github.projectv2_items.is_pr
#     value: true
# - date:
#     field: github.projectv2_items.updated_at
#     formats:
#     - ISO8601
#     timezone: UTC
#     target_field: github.projectv2_items.updated_at
#     if: ctx.github.projectv2_items?.updated_at != null
# - dissect:
#     field: github.projectv2_items.url
#     pattern: "https://api.github.com/repos/%{_temp_.owner}/%{_temp_.repository}/projectv2_items/%{_temp_.number}"
#     ignore_missing: true
# - set:
#     field: github.repository.name
#     value: "{{_temp_.repository}}"
#     if: "ctx._temp_?.repository != null"
# - set:
#     field: github.repository.html_url
#     value: "https://github.com/{{_temp_.owner}}/{{_temp_.repository}}"
#     if: "ctx._temp_?.owner != null && ctx._temp_?.repository != null"
# - set:
#     field: github.repository.url
#     value: "https://api.github.com/repos/{{_temp_.owner}}/{{_temp_.repository}}"
#     if: "ctx._temp_?.owner != null && ctx._temp_?.repository != null"
# - set:
#     field: github.repository.owner.login
#     value: "{{_temp_.owner}}"
#     if: "ctx._temp_?.owner != null"
# - set: 
#     field: github.state
#     value: "{{github.projectv2_items.state}}"
#     if: ctx.github.projectv2_items?.state != null
# - foreach:
#     field: github.projectv2_items.assignees
#     ignore_missing: true
#     processor:
#       remove:
#         field: ["_ingest._value.node_id", "_ingest._value.avatar_url", "_ingest._value.gravatar_id", "_ingest._value.followers_url", "_ingest._value.following_url", "_ingest._value.gists_url", "_ingest._value.starred_url", "_ingest._value.subscriptions_url", "_ingest._value.organizations_url", "_ingest._value.repos_url", "_ingest._value.events_url", "_ingest._value.received_events_url"]
# - remove:
#     field:
#       - github.projectv2_items.user.node_id
#       - github.projectv2_items.user.avatar_url
#       - github.projectv2_items.user.gravatar_id
#       - github.projectv2_items.user.followers_url
#       - github.projectv2_items.user.following_url
#       - github.projectv2_items.user.gists_url
#       - github.projectv2_items.user.starred_url
#       - github.projectv2_items.user.subscriptions_url
#       - github.projectv2_items.user.organizations_url
#       - github.projectv2_items.user.repos_url
#       - github.projectv2_items.user.events_url
#       - github.projectv2_items.user.received_events_url
#       - github.projectv2_items.assignee.node_id
#       - github.projectv2_items.assignee.avatar_url
#       - github.projectv2_items.assignee.gravatar_id
#       - github.projectv2_items.assignee.followers_url
#       - github.projectv2_items.assignee.following_url
#       - github.projectv2_items.assignee.gists_url
#       - github.projectv2_items.assignee.starred_url
#       - github.projectv2_items.assignee.subscriptions_url
#       - github.projectv2_items.assignee.organizations_url
#       - github.projectv2_items.assignee.repos_url
#       - github.projectv2_items.assignee.events_url
#       - github.projectv2_items.assignee.received_events_url
#       - github.projectv2_items.closed_by.node_id
#       - github.projectv2_items.closed_by.avatar_url
#       - github.projectv2_items.closed_by.gravatar_id
#       - github.projectv2_items.closed_by.followers_url
#       - github.projectv2_items.closed_by.following_url
#       - github.projectv2_items.closed_by.gists_url
#       - github.projectv2_items.closed_by.starred_url
#       - github.projectv2_items.closed_by.subscriptions_url
#       - github.projectv2_items.closed_by.organizations_url
#       - github.projectv2_items.closed_by.repos_url
#       - github.projectv2_items.closed_by.events_url
#       - github.projectv2_items.closed_by.received_events_url
#       - github.projectv2_items.milestone
#       - github.projectv2_items.reactions
#     ignore_missing: true
# - rename:
#     target_field: _temp_.labels
#     field: github.projectv2_items.labels
#     ignore_missing: true
# - script:
#     lang: painless
#     description: Remove unwanted fields from labels
#     if: ctx._temp_?.labels != null
#     source: |
#         Map label;
#         List labels = new ArrayList();
#         List labels_raw = ctx._temp_.labels;
#         String label_key, label_value;
#         for (Map label_raw: labels_raw) {
#             label = new HashMap();
#             label.put("name", label_raw.name);
#             label.put("description", label_raw.description);
#             labels.add(label);
#         }
#         ctx.github.projectv2_items.labels = labels;

# - script:
#     lang: painless
#     description: Calculate time taken to close an issue
#     if: ctx.github?.projectv2_items?.closed_at != null
#     source: |
#         def time_to_close = new HashMap();
#         def closedAtDt = ctx.github.projectv2_items.closed_at;
#         def createdAtDt = ctx.github.projectv2_items.created_at;
#         ZonedDateTime zdt = ZonedDateTime.parse(createdAtDt);
#         long createdAtEpoch = zdt.toEpochSecond();
#         zdt = ZonedDateTime.parse(closedAtDt);
#         long closedAtEpoch = zdt.toEpochSecond();
#         time_to_close.put("sec", closedAtEpoch - createdAtEpoch);
#         ctx.github.projectv2_items.time_to_close = time_to_close;


#   ###################
#   # User ECS fields #
#   ###################
# - set: 
#     field: user.name
#     copy_from: github.projectv2_items.user.login
#     if: ctx.github?.projectv2_items?.user?.login != null
# - convert:
#     field: github.projectv2_items.user.id
#     type: string
#     target_field: user.id
#     ignore_missing: true
# - append: 
#     field: user.roles
#     value: ['site_admin']
#     if: 'ctx.github?.projectv2_items?.user?.site_admin != null && ctx.github?.projectv2_items?.user?.site_admin == true'
#     allow_duplicates: false

#   ###################
#   # Related ECS fields #
#   ###################
# - append: 
#     field: related.user
#     value: "{{user.name}}"
#     if: ctx.user?.name != null
#     allow_duplicates: false
# - foreach:
#     field: github.projectv2_items.assignees
#     if: ctx.github?.projectv2_items?.assignees != null
#     processor:
#       append:
#         field: related.user
#         value: "{{_ingest._value.login}}"
#         allow_duplicates: false

  ###########
  # Cleanup #
  ###########
- remove:
    field:
      - _temp_
      - github.projectv2_items.repository
    ignore_missing: true
- remove:
    field:
      - github.projectv2_items.state
    if: "ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))"
    ignore_missing: true
- remove:
    field: event.original
    if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
    ignore_failure: true
    ignore_missing: true
- script:
    lang: painless
    description: This script processor iterates over the whole document to remove fields with null values.
    source: |
      void handleMap(Map map) {
        for (def x : map.values()) {
          if (x instanceof Map) {
              handleMap(x);
          } else if (x instanceof List) {
              handleList(x);
          }
        }
        map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      void handleList(List list) {
        for (def x : list) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
        }
        list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      handleMap(ctx);
on_failure:
- set:
    field: event.kind
    value: pipeline_error
- append:
    field: error.message
    value: |-
        Processor "{{ _ingest.on_failure_processor_type }}" with tag "{{ _ingest.on_failure_processor_tag }}" in pipeline "{{ _ingest.on_failure_pipeline }}" failed with message "{{ _ingest.on_failure_message }}"
