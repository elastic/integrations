---
description: Pipeline for parsing GitHub audit logs
processors:
- set:
    field: ecs.version
    value: "8.2.0"
- rename:
    field: message
    target_field: event.original
    ignore_missing: true
- json:
    field: event.original
    target_field: github.code_scanning
- fingerprint:
    fields: 
        - json._document_id
    target_field: "_id"
    ignore_missing: true
- date:
    field: json.created_at
    formats:
    - ISO8601
    timezone: UTC
    target_field: "event.created"
    if: ctx.json?.created_at != null
- date:
    field: json.updated_at
    formats:
    - ISO8601
    timezone: UTC
    target_field: "github.code_scanning.updated_at"
    if: ctx.json?.updated_at != null
- rename:
    field: json.number
    target_field: github.number
    ignore_missing: true
- rename:
    field: json.url
    target_field: github.url
    ignore_missing: true
- rename:
    field: json.html_url
    target_field: github.html_url
    ignore_missing: true
- rename:
    field: json.instances_url
    target_field: github.instances_url
    ignore_missing: true
- rename:
    field: json.state
    target_field: github.state
    ignore_missing: true
- rename:
    field: json.fixed_at
    target_field: github.fixed_at
    ignore_missing: true
- rename:
    field: json.rule.id
    target_field: github.rule.id
    ignore_missing: true
- rename:
    field: json.rule.name
    target_field: github.rule.name
    ignore_missing: true
- rename:
    field: json.rule.severity
    target_field: github.rule.severity
    ignore_missing: true
- rename:
    field: json.rule.security_severity_level
    target_field: github.rule.security_severity_level
    ignore_missing: true
- remove:
    field:
      - _temp
    ignore_missing: true
- remove:
    field: event.original
    if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
    ignore_failure: true
    ignore_missing: true
- script:
    lang: painless
    description: This script processor iterates over the whole document to remove fields with null values.
    source: |
      void handleMap(Map map) {
        for (def x : map.values()) {
          if (x instanceof Map) {
              handleMap(x);
          } else if (x instanceof List) {
              handleList(x);
          }
        }
        map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      void handleList(List list) {
        for (def x : list) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
        }
        list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      handleMap(ctx);
on_failure:
- set:
    field: error.message
    value: "{{ _ingest.on_failure_message }}"
