---
description: Pipeline for parsing GitHub audit logs
processors:
- set:
    field: event.kind
    value: event
- set:
    field: ecs.version
    value: '8.5.0'
- append:
    field: event.category
    value: 
    - configuration
    - web
- rename:
    field: message
    target_field: event.original
    ignore_missing: true
- json:
    field: event.original
    target_field: json
- fingerprint:
    fields: 
        - json._document_id
    target_field: "_id"
    ignore_missing: true
- date:
    field: json.created_at
    formats:
    - UNIX_MS
    timezone: UTC
    target_field: "@timestamp"
    if: ctx.json?.created_at != null
- date:
    field: json.@timestamp
    formats:
    - UNIX_MS
    timezone: UTC
    target_field: "@timestamp"
    if: ctx.json['@timestamp'] != null
- rename:
    field: json._document_id
    target_field: event.id
    ignore_missing: true
- rename:
    field: json.action
    target_field: event.action
    ignore_missing: true
- rename:
    field: json.actor
    target_field: user.name
    ignore_missing: true
- append:
    field: related.user
    value: "{{user.name}}"
    if: ctx.user?.name != null
- rename:
    field: json.org
    target_field: github.org
    ignore_missing: true
- rename:
    field: json.user
    target_field: user.target.name
    ignore_missing: true
- append:
    field: related.user
    value: "{{user.target.name}}"
    if: ctx.user?.target?.name != null
- rename:
    field: json.repo
    target_field: github.repo
    ignore_missing: true
- rename:
    field: json.team
    target_field: github.team
    ignore_missing: true
- rename:
    field: json.data.team
    target_field: github.team
    ignore_missing: true
    if: ctx.github?.team == null
- set:
    field: group.name
    copy_from: github.team
    ignore_empty_value: true
    if: ctx.event?.action.startsWith("team.")
- set:
    field: user.target.group.name
    copy_from: github.team
    ignore_empty_value: true
    if: ctx.event?.action.startsWith("team.") && ctx.user?.target?.name != null
- set:
    field: group.name
    copy_from: github.org
    ignore_empty_value: true
    if: ctx.event?.action.startsWith("org.")
- set:
    field: user.target.group.name
    copy_from: github.org
    ignore_empty_value: true
    if: ctx.event?.action.startsWith("org.") && ctx.user?.target?.name != null
- rename:
    field: json.data.old_user
    target_field: user.target.group.name
    ignore_missing: true
- rename:
    field: json.data.old_user
    target_field: user.target.group.name
    ignore_missing: true
    if: ctx.user?.target?.group?.name == null
- rename:
    field: json.actor_location.country_code
    target_field: client.geo.country_iso_code
    ignore_missing: true
- grok:
    field: event.action
    ignore_missing: true
    patterns:
      - '^%{GH_CAT:github.category}\.%{GREEDYDATA:_temp.action}'
    pattern_definitions:
      GH_CAT: '[a-z_]+'
- append:
    field: event.category
    value: iam
    if: '["team","org"].contains(ctx.github.category)'
- append:
    field: event.type
    value: 
      - group
      - user
    if: '["team","org"].contains(ctx.github.category)'
- append:
    field: event.type
    value: creation
    if: 'ctx._temp?.action.contains("create") || ctx._temp?.action.contains("add")'
- append:
    field: event.type
    value: deletion
    if: 'ctx._temp?.action.contains("delete") || ctx._temp?.action.contains("remove")'
- append:
    field: event.type
    value: change
    if: 'ctx.event?.type == null || ctx.event?.type.size() == 0'
- remove:
    field:
      - json
      - _temp
    ignore_missing: true  
- remove:
    field: event.original
    if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
    ignore_failure: true
    ignore_missing: true
- script:
    lang: painless
    description: This script processor iterates over the whole document to remove fields with null values.
    source: |
      void handleMap(Map map) {
        for (def x : map.values()) {
          if (x instanceof Map) {
              handleMap(x);
          } else if (x instanceof List) {
              handleList(x);
          }
        }
        map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      void handleList(List list) {
        for (def x : list) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
        }
        list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      handleMap(ctx);
on_failure:
- set:
    field: error.message
    value: "{{ _ingest.on_failure_message }}"
