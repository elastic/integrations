---
description: Pipeline for parsing GitHub audit logs
processors:
- set:
    field: ecs.version
    value: '8.5.0'
- set:
    field: event.action
    value: "issues"
- set:
    field: event.kind
    value: "state"
- rename:
    field: message
    target_field: event.original
    ignore_missing: true
- json:
    field: event.original
    target_field: github.issues
- fingerprint:
    if: ctx.github?.issues?.url != null
    fields: 
        - github.issues.url
    target_field: "_id"
    ignore_missing: true
- date:
    field: github.issues.created_at
    formats:
    - ISO8601
    timezone: UTC
    target_field: "@timestamp"
    if: ctx.github.issues?.created_at != null
- set:
    field: event.created
    copy_from: "@timestamp"
    ignore_empty_value: true
- set:
    field: github.issues.is_pr
    value: false
- set:
    if: ctx.github?.issues?.pull_request != null
    field: github.issues.is_pr
    value: true
- date:
    field: github.issues.updated_at
    formats:
    - ISO8601
    timezone: UTC
    target_field: github.issues.updated_at
    if: ctx.github.issues?.updated_at != null
- dissect:
    field: github.issues.url
    pattern: "https://api.github.com/repos/%{_temp_.owner}/%{_temp_.repository}/issues/%{_temp_.number}"
    ignore_missing: true
- set:
    field: github.repository.name
    value: "{{_temp_.repository}}"
    if: "ctx._temp_?.repository != null"
- set:
    field: github.repository.html_url
    value: "https://github.com/{{_temp_.owner}}/{{_temp_.repository}}"
    if: "ctx._temp_?.owner != null && ctx._temp_?.repository != null"
- set:
    field: github.repository.url
    value: "https://api.github.com/repos/{{_temp_.owner}}/{{_temp_.repository}}"
    if: "ctx._temp_?.owner != null && ctx._temp_?.repository != null"
- set:
    field: github.repository.owner.login
    value: "{{_temp_.owner}}"
    if: "ctx._temp_?.owner != null"
- set: 
    field: github.state
    value: "{{github.issues.state}}"
    if: ctx.github.issues?.state != null

- foreach:
    field: github.issues.assignees
    ignore_missing: true
    processor:
      remove:
        field: ["_ingest._value.node_id", "_ingest._value.avatar_url", "_ingest._value.gravatar_id", "_ingest._value.followers_url", "_ingest._value.following_url", "_ingest._value.gists_url", "_ingest._value.starred_url", "_ingest._value.subscriptions_url", "_ingest._value.organizations_url", "_ingest._value.repos_url", "_ingest._value.events_url", "_ingest._value.received_events_url"]

- remove:
    field:
      - github.issues.user.node_id
      - github.issues.user.avatar_url
      - github.issues.user.gravatar_id
      - github.issues.user.followers_url
      - github.issues.user.following_url
      - github.issues.user.gists_url
      - github.issues.user.starred_url
      - github.issues.user.subscriptions_url
      - github.issues.user.organizations_url
      - github.issues.user.repos_url
      - github.issues.user.events_url
      - github.issues.user.received_events_url
      - github.issues.assignee.node_id
      - github.issues.assignee.avatar_url
      - github.issues.assignee.gravatar_id
      - github.issues.assignee.followers_url
      - github.issues.assignee.following_url
      - github.issues.assignee.gists_url
      - github.issues.assignee.starred_url
      - github.issues.assignee.subscriptions_url
      - github.issues.assignee.organizations_url
      - github.issues.assignee.repos_url
      - github.issues.assignee.events_url
      - github.issues.assignee.received_events_url
      - github.issues.closed_by.node_id
      - github.issues.closed_by.avatar_url
      - github.issues.closed_by.gravatar_id
      - github.issues.closed_by.followers_url
      - github.issues.closed_by.following_url
      - github.issues.closed_by.gists_url
      - github.issues.closed_by.starred_url
      - github.issues.closed_by.subscriptions_url
      - github.issues.closed_by.organizations_url
      - github.issues.closed_by.repos_url
      - github.issues.closed_by.events_url
      - github.issues.closed_by.received_events_url
      - github.issues.milestone
      - github.issues.reactions
    ignore_missing: true

- rename:
    target_field: _temp_.labels
    field: github.issues.labels
    ignore_missing: true

- script:
    lang: painless
    description: Remove unwanted fields from labels
    if: ctx._temp_?.labels != null
    source: |
        Map label;
        List labels = new ArrayList();
        List labels_raw = ctx._temp_.labels;
        String label_key, label_value;
        for (Map label_raw: labels_raw) {
            label = new HashMap();
            label.put("name", label_raw.name);
            label.put("description", label_raw.description);
            /*if (label_raw.name =~ /\:/){
                def label_arr = label_raw.name.splitOnToken(":");
                if (label_arr.length > 0){
                    label_key = label_arr[0];
                    label_value = label_arr[1];
                    if (label_key.equals("Team") || label_key.equals("Integration")) {
                        label.put(label_key.toLowerCase(), label_value);
                    }
                }
            }*/
            labels.add(label);
        }
        ctx.github.issues.labels = labels;

- script:
    lang: painless
    description: Calculate time taken to close an issue
    if: ctx.github?.issues?.closed_at != null
    source: |
        def time_to_close = new HashMap();
        def closedAtDt = ctx.github.issues.closed_at;
        def createdAtDt = ctx.github.issues.created_at;
        ZonedDateTime zdt = ZonedDateTime.parse(createdAtDt);
        long createdAtEpoch = zdt.toEpochSecond();
        zdt = ZonedDateTime.parse(closedAtDt);
        long closedAtEpoch = zdt.toEpochSecond();
        time_to_close.put("sec", closedAtEpoch - createdAtEpoch);
        ctx.github.issues.time_to_close = time_to_close;

# - rename:
#     target_field: _temp_
#     field: github.issues.repository
#     ignore_missing: true
# - rename:
#     field: _temp_.id
#     target_field: github.repository.id
#     ignore_missing: true
# - rename:
#     field: _temp_.name
#     target_field: github.repository.name
#     ignore_missing: true
# - rename:
#     field: _temp_.full_name
#     target_field: github.repository.full_name
#     ignore_missing: true
# - rename:
#     field: _temp_.private
#     target_field: github.repository.private
#     ignore_missing: true
# - rename:
#     field: _temp_.html_url
#     target_field: github.repository.html_url
#     ignore_missing: true
# - rename:
#     field: _temp_.url
#     target_field: github.repository.url
#     ignore_missing: true
# - rename:
#     field: _temp_.description
#     target_field: github.repository.description
#     ignore_missing: true
# - rename:
#     field: _temp_.fork
#     target_field: github.repository.fork
#     ignore_missing: true
# - rename:
#     field: _temp_.owner.login
#     target_field: github.repository.owner.login
#     ignore_missing: true
# - rename:
#     field: _temp_.owner.id
#     target_field: github.repository.owner.id
#     ignore_missing: true
# - rename:
#     field: _temp_.owner.url
#     target_field: github.repository.owner.url
#     ignore_missing: true
# - rename:
#     field: _temp_.owner.html_url
#     target_field: github.repository.owner.html_url
#     ignore_missing: true
# - rename:
#     field: _temp_.owner.type
#     target_field: github.repository.owner.type
#     ignore_missing: true
# - rename:
#     field: _temp_.owner.site_admin
#     target_field: github.repository.owner.site_admin
#     ignore_missing: true
# - dissect:
#     field: github.issues.url
#     pattern: "https://api.github.com/repos/%{_temp_.owner}/%{_temp_.repository}/code-scanning/alerts/%{_temp_.number}"
#     ignore_missing: true
# - set:
#     field: github.repository.html_url
#     value: "https://github.com/{{_temp_.owner}}/{{_temp_.repository}}"
#     if: "ctx.github.repository?.html_url == null && ctx._temp_?.owner != null && ctx._temp_?.repository != null"
# - set:
#     field: github.repository.url
#     value: "https://api.github.com/repos/{{_temp_.owner}}/{{_temp_.repository}}"
#     if: "ctx.github.repository?.url == null && ctx._temp_?.owner != null && ctx._temp_?.repository != null"
# - rename:
#     field: _temp_.repository
#     target_field: github.repository.name
#     if: ctx.github.repository?.name == null
#     ignore_missing: true
# - rename:
#     field: _temp_.owner
#     target_field: github.repository.owner.login
#     if: ctx.github.repository?.owner?.login == null
#     ignore_missing: true
# - rename:
#     field: _temp_.number
#     target_field: github.issues.number
#     if: ctx.github.issues?.number == null
#     ignore_missing: true
# - lowercase:
#     field: github.issues.state
#     ignore_missing: true
# - lowercase:
#     field: github.issues.rule.security_severity_level
#     ignore_missing: true
# - set:
#     field: github.severity
#     value: "{{github.issues.rule.security_severity_level}}"
#     if: ctx.github.issues?.rule?.security_severity_level != null
# - set:
#     field: github.severity
#     value: "undefined"
#     if: ctx.github.severity == null
# - set: 
#     field: github.state
#     value: "{{github.issues.state}}"
#     if: ctx.github.issues?.state != null
# - rename: 
#     target_field: _temp_.dismissed_by
#     field: github.issues.dismissed_by
#     ignore_missing: true
# - remove:
#     field: github.issues.dismissed_by
#     ignore_missing: true
# - rename:
#     field: _temp_.dismissed_by.login
#     target_field: github.issues.dismissed_by.login
#     ignore_missing: true
# - rename:
#     field: _temp_.dismissed_by.id
#     target_field: github.issues.dismissed_by.id
#     ignore_missing: true
# - rename:
#     field: _temp_.dismissed_by.url
#     target_field: github.issues.dismissed_by.url
#     ignore_missing: true
# - rename:
#     field: _temp_.dismissed_by.html_url
#     target_field: github.issues.dismissed_by.html_url
#     ignore_missing: true
# - rename:
#     field: _temp_.dismissed_by.type
#     target_field: github.issues.dismissed_by.type
#     ignore_missing: true
# - rename:
#     field: _temp_.dismissed_by.site_admin
#     target_field: github.issues.dismissed_by.site_admin
#     ignore_missing: true
# - rename:
#     field: github.issues.most_recent_instance.message.text
#     target_field: message
#     ignore_missing: true
# - script:
#     lang: painless
#     description: Calculate time taken to resolve the alerts
#     if: ctx.github.issues?.fixed_at != null || ctx.github.issues?.dismissed_at != null
#     source: |
#         def time_to_resolution = new HashMap();
#         def fixedAtDt = ctx.github.issues.fixed_at;
#         def dismissedAtDt = ctx.github.issues.dismissed_at;
#         def createdAtDt = ctx.github.issues.created_at;
#         ZonedDateTime zdt = ZonedDateTime.parse(createdAtDt);
#         long createdAtEpoch = zdt.toEpochSecond();
#         if (fixedAtDt != null) {
#             zdt = ZonedDateTime.parse(fixedAtDt);
#             long fixedAtEpoch = zdt.toEpochSecond();
#             time_to_resolution.put("sec", fixedAtEpoch - createdAtEpoch);
#             ctx.github.issues.time_to_resolution = time_to_resolution;
#         }
#         else {
#             zdt = ZonedDateTime.parse(dismissedAtDt);
#             long dismissedAtEpoch = zdt.toEpochSecond();
#             time_to_resolution.put("sec", dismissedAtEpoch - createdAtEpoch);
#             ctx.github.issues.time_to_resolution = time_to_resolution;
#         }

  ###########
  # Cleanup #
  ###########
- remove:
    field:
      - _temp_
    ignore_missing: true
- remove:
    field: event.original
    if: "ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))"
    ignore_failure: true
    ignore_missing: true
- script:
    lang: painless
    description: This script processor iterates over the whole document to remove fields with null values.
    source: |
      void handleMap(Map map) {
        for (def x : map.values()) {
          if (x instanceof Map) {
              handleMap(x);
          } else if (x instanceof List) {
              handleList(x);
          }
        }
        map.values().removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      void handleList(List list) {
        for (def x : list) {
            if (x instanceof Map) {
                handleMap(x);
            } else if (x instanceof List) {
                handleList(x);
            }
        }
        list.removeIf(v -> v == null || v == '' || (v instanceof Map && v.size() == 0) || (v instanceof List && v.size() == 0));
      }
      handleMap(ctx);
on_failure:
- set:
    field: error.message
    value: "{{ _ingest.on_failure_message }}"
