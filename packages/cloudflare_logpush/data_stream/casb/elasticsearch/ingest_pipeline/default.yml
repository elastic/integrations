---
description: Pipeline for parsing Cloudflare CASB Findings logs.
processors:
  - set:
      field: ecs.version
      value: 8.7.0
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
  - json:
      field: event.original
      target_field: json
      ignore_failure: true
# Event category and type don't match here. A cloud category should be added.
  - set:
      field: event.kind
      value: event
  - date:
      field: json.DetectedTimestamp
      if: ctx.json?.DetectedTimestamp != null && ctx.json.DetectedTimestamp != ''
      formats:
        - ISO8601
        - uuuu-MM-dd'T'HH:mm:ssX
        - uuuu-MM-dd'T'HH:mm:ss.SSSX
        - yyyy-MM-dd'T'HH:mm:ssZ
        - yyyy-MM-dd'T'HH:mm:ss.SSSZ
        - UNIX
        - UNIX_MS
      timezone: UTC
      on_failure:
      - append:
          field: error.message
          value: "{{{_ingest.on_failure_message}}}"
  - set:
      field: cloudflare_logpush.casb.timestamp
      copy_from: "@timestamp"
      ignore_failure: true
  - rename:
      field: json.AssetDisplayName
      target_field: cloudflare_logpush.casb.asset.name
      ignore_missing: true
  - rename:
      field: json.AssetExternalID
      target_field: cloudflare_logpush.casb.asset.id
      ignore_missing: true
  - rename:
      field: json.AssetLink
      target_field: cloudflare_logpush.casb.asset.url
      ignore_missing: true
  - set:
      field: url.original
      copy_from: cloudflare_logpush.casb.asset.url
      ignore_failure: true
  - rename:
      field: json.AssetMetadata
      target_field: cloudflare_logpush.casb.asset.metadata
      ignore_missing: true
  - rename:
      field: json.FindingTypeDisplayName
      target_field: cloudflare_logpush.casb.finding.type.name
      ignore_missing: true
  - rename:
      field: json.FindingTypeID
      target_field: cloudflare_logpush.casb.finding.type.id
      ignore_missing: true
# Pending convert severity to numeric and set event.severity
  - rename:
      field: json.FindingTypeSeverity
      target_field: cloudflare_logpush.casb.finding.type.severity
      ignore_missing: true
  - rename:
      field: json.InstanceID
      target_field: cloudflare_logpush.casb.finding.id
      ignore_missing: true
  - set:
      field: event.id
      copy_from: cloudflare_logpush.casb.finding.id
      ignore_failure: true
  - rename:
      field: json.IntegrationDisplayName
      target_field: cloudflare_logpush.casb.integration.name
      ignore_missing: true
  - rename:
      field: json.IntegrationID
      target_field: cloudflare_logpush.casb.integration.id
      ignore_missing: true
  - rename:
      field: json.IntegrationPolicyVendor
      target_field: cloudflare_logpush.casb.integration.policy.vendor
      ignore_missing: true
# Clean event
  - remove:
      field: json
      ignore_missing: true
  - remove:
      field:
        - cloudflare_logpush.casb.timestamp
        - cloudflare_logpush.casb.asset.url
        - cloudflare_logpush.casb.finding.id
      if: ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))
      ignore_failure: true
      ignore_missing: true
  - remove:
      field: event.original
      if: ctx.tags == null || !(ctx.tags.contains('preserve_original_event'))
      ignore_failure: true
      ignore_missing: true
  - script:
      description: Drops null/empty values recursively.
      lang: painless
      source:
        boolean dropEmptyFields(Object object) {
          if (object == null || object == "") {
            return true;
          } else if (object instanceof Map) {
            ((Map) object).values().removeIf(value -> dropEmptyFields(value));
            return (((Map) object).size() == 0);
          } else if (object instanceof List) {
            ((List) object).removeIf(value -> dropEmptyFields(value));
            return (((List) object).length == 0);
          }
          return false;
        }
        dropEmptyFields(ctx);
on_failure:
  - append:
      field: error.message
      value: "{{{ _ingest.on_failure_message }}}"
