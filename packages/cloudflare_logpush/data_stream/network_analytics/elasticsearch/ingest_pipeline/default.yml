---
description: Pipeline for parsing Cloudflare Network Analytics logs.
processors:
  - set:
      field: ecs.version
      value: '8.11.0'
  - rename:
      field: message
      target_field: event.original
      ignore_missing: true
      if: ctx.event?.original == null
  - json:
      field: event.original
      target_field: json
      ignore_failure: true
  - set:
      field: event.category
      value: [network]
  - set:
      field: event.kind
      value: event
  - set:
      field: event.type
      value: [info]
  - script:
      lang: painless
      tag: painless_datetime_to_milli
      if: ctx.json?.Datetime != null
      source: |
        try {
          long t;
          if (ctx.json.Datetime instanceof String) {
            t = Long.parseLong(ctx.json.Datetime);
          } else if (ctx.json.Datetime instanceof Number) {
            t = (long)(ctx.json.Datetime);
          } else {
            return;
          }
          if (t > (long)(1e18)) {
            ctx.json.Datetime = t/(long)(1e6)
          } else if (t < (long)(1e10))  {
            ctx.json.Datetime = t*(long)(1e3)
          }
        }
        catch (Exception e) {}
  - date:
      field: json.Datetime
      if: ctx.json?.Datetime != null && ctx.json.Datetime != ''
      formats:
        - UNIX_MS
        - ISO8601
        - yyyy-MM-dd'T'HH:mm:ssZ
      timezone: UTC
      on_failure:
      - append:
          field: error.message
          value: "{{{_ingest.on_failure_message}}}"
  - set:
      field: cloudflare_logpush.network_analytics.timestamp
      copy_from: '@timestamp'
      ignore_empty_value: true
  - set:
      field: cloudflare_logpush.network_analytics.outcome
      value: success
      if: ctx.json?.Outcome == 'pass'
  - set:
      field: cloudflare_logpush.network_analytics.outcome
      value: failure
      if: ctx.json?.Outcome == 'drop'
  - set:
      field: event.outcome
      copy_from: cloudflare_logpush.network_analytics.outcome
      ignore_empty_value: true
  - convert:
      field: json.DestinationASN
      target_field: cloudflare_logpush.network_analytics.destination.asn
      if: ctx.json?.DestinationASN != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: destination.as.number
      copy_from: cloudflare_logpush.network_analytics.destination.asn
      ignore_empty_value: true
  - convert:
      field: json.IPDestinationAddress
      target_field: cloudflare_logpush.network_analytics.destination.ip
      if: ctx.json?.IPDestinationAddress != ''
      type: ip
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: destination.ip
      copy_from: cloudflare_logpush.network_analytics.destination.ip
      ignore_empty_value: true
  - convert:
      field: json.DestinationPort
      target_field: cloudflare_logpush.network_analytics.destination.port
      if: ctx.json?.DestinationPort != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: destination.port
      copy_from: cloudflare_logpush.network_analytics.destination.port
      ignore_empty_value: true
  - rename:
      field: json.Direction
      target_field: cloudflare_logpush.network_analytics.direction
      ignore_missing: true
  - set:
      field: network.direction
      copy_from: cloudflare_logpush.network_analytics.direction
      ignore_empty_value: true
  - rename:
      field: json.IPProtocolName
      target_field: cloudflare_logpush.network_analytics.ip.protocol.name
      ignore_missing: true
  - set:
      field: network.transport
      copy_from: cloudflare_logpush.network_analytics.ip.protocol.name
      ignore_empty_value: true
  - lowercase:
      field: network.transport
      ignore_missing: true
  - convert:
      field: json.IPSourceAddress
      target_field: cloudflare_logpush.network_analytics.source.ip
      if: ctx.json?.IPSourceAddress != ''
      type: ip
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: source.ip
      copy_from: cloudflare_logpush.network_analytics.source.ip
      ignore_empty_value: true
  - convert:
      field: json.SourceASN
      target_field: cloudflare_logpush.network_analytics.source.asn
      if: ctx.json?.SourceASN != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: source.as.number
      copy_from: cloudflare_logpush.network_analytics.source.asn
      ignore_empty_value: true
  - convert:
      field: json.SourcePort
      target_field: cloudflare_logpush.network_analytics.source.port
      if: ctx.json?.SourcePort != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - set:
      field: source.port
      copy_from: cloudflare_logpush.network_analytics.source.port
      ignore_empty_value: true
  - rename:
      field: json.RuleID
      target_field: cloudflare_logpush.network_analytics.rule.id
      ignore_missing: true
  - set:
      field: rule.id
      copy_from: cloudflare_logpush.network_analytics.rule.id
      ignore_empty_value: true
  - rename:
      field: json.AttackCampaignID
      target_field: cloudflare_logpush.network_analytics.attack.campaign.id
      ignore_missing: true
  - rename:
      field: json.AttackID
      target_field: cloudflare_logpush.network_analytics.attack.id
      ignore_missing: true
  - rename:
      field: json.AttackVector
      target_field: cloudflare_logpush.network_analytics.attack.vector
      ignore_missing: true
  - rename:
      field: json.ColoCity
      target_field: cloudflare_logpush.network_analytics.colo.city
      ignore_missing: true
  - rename:
      field: json.ColoCode
      target_field: cloudflare_logpush.network_analytics.colo.code
      ignore_missing: true
  - rename:
      field: json.ColoCountry
      target_field: cloudflare_logpush.network_analytics.colo.country
      ignore_missing: true
  - rename:
      field: json.ColoGeoHash
      target_field: cloudflare_logpush.network_analytics.colo.geo_hash
      ignore_missing: true
  - set:
      field: cloudflare_logpush.network_analytics.colo.geo_location
      copy_from: cloudflare_logpush.network_analytics.colo.geo_hash
      ignore_empty_value: true
  - convert:
      field: json.ColoID
      target_field: cloudflare_logpush.network_analytics.colo.id
      if: ctx.json?.ColoID != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.ColoName
      target_field: cloudflare_logpush.network_analytics.colo.name
      ignore_missing: true
  - rename:
      field: json.DestinationASNDescription
      target_field: cloudflare_logpush.network_analytics.destination.as.number.description
      ignore_missing: true
  - rename:
      field: json.DestinationASNName
      target_field: cloudflare_logpush.network_analytics.destination.as.number.name
      ignore_missing: true
  - rename:
      field: json.DestinationCountry
      target_field: cloudflare_logpush.network_analytics.destination.country
      ignore_missing: true
  - rename:
      field: json.DestinationGeoHash
      target_field: cloudflare_logpush.network_analytics.destination.geo_hash
      ignore_missing: true
  - set:
      field: cloudflare_logpush.network_analytics.destination.geo_location
      copy_from: cloudflare_logpush.network_analytics.destination.geo_hash
      ignore_empty_value: true
  - convert:
      field: json.GREChecksum
      target_field: cloudflare_logpush.network_analytics.gre.checksum
      if: ctx.json?.GREChecksum != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.GREEthertype
      target_field: cloudflare_logpush.network_analytics.gre.ether.type
      if: ctx.json?.GREEthertype != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.GREHeaderLength
      target_field: cloudflare_logpush.network_analytics.gre.header.length
      if: ctx.json?.GREHeaderLength != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.GREKey
      target_field: cloudflare_logpush.network_analytics.gre.key
      if: ctx.json?.GREKey != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.GRESequenceNumber
      target_field: cloudflare_logpush.network_analytics.gre.sequence.number
      if: ctx.json?.GRESequenceNumber != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.GREVersion
      target_field: cloudflare_logpush.network_analytics.gre.version
      if: ctx.json?.GREVersion != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.ICMPChecksum
      target_field: cloudflare_logpush.network_analytics.icmp.checksum
      if: ctx.json?.ICMPChecksum != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.ICMPCode
      target_field: cloudflare_logpush.network_analytics.icmp.code
      if: ctx.json?.ICMPCode != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.ICMPType
      target_field: cloudflare_logpush.network_analytics.icmp.type
      if: ctx.json?.ICMPType != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.IPDestinationSubnet
      target_field: cloudflare_logpush.network_analytics.ip.destination.subnet
      ignore_missing: true
  - convert:
      field: json.IPFragmentOffset
      target_field: cloudflare_logpush.network_analytics.ip.fragment.offset
      if: ctx.json?.IPFragmentOffset != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.IPHeaderLength
      target_field: cloudflare_logpush.network_analytics.ip.header.length
      if: ctx.json?.IPHeaderLength != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.IPMoreFragments
      target_field: cloudflare_logpush.network_analytics.ip.more.fragments
      if: ctx.json?.IPMoreFragments != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.IPProtocol
      target_field: cloudflare_logpush.network_analytics.ip.protocol.value
      if: ctx.json?.IPProtocol != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.IPSourceSubnet
      target_field: cloudflare_logpush.network_analytics.ip.source.subnet
      ignore_missing: true
  - convert:
      field: json.IPTotalLength
      target_field: cloudflare_logpush.network_analytics.ip.total.length.value
      if: ctx.json?.IPTotalLength != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.IPTotalLengthBuckets
      target_field: cloudflare_logpush.network_analytics.ip.total.length.buckets
      if: ctx.json?.IPTotalLengthBuckets != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.IPTTL
      target_field: cloudflare_logpush.network_analytics.ip.ttl.value
      if: ctx.json?.IPTTL != null && ctx.json.IPTTL != ''
      ignore_missing: true
  - append:
      field: cloudflare_logpush.network_analytics.ip.ttl.value
      value: '{{{json.IPTtl}}}'
      if: ctx.cloudflare_logpush?.network_analytics?.ip?.ttl?.value != null && ctx.json?.IPTtl != ctx.cloudflare_logpush?.network_analytics?.ip?.ttl?.value
      allow_duplicates: false
  - rename:
      field: json.IPTtl
      target_field: cloudflare_logpush.network_analytics.ip.ttl.value
      if: ctx.cloudflare_logpush?.network_analytics?.ip?.ttl?.value == null && ctx.json?.IPTtl != null && ctx.json.IPTtl != ''
      ignore_missing: true
  - convert:
      field: cloudflare_logpush.network_analytics.ip.ttl.value
      if: ctx.cloudflare_logpush?.network_analytics?.ip?.ttl?.value != null
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.IPTTLBuckets
      target_field: cloudflare_logpush.network_analytics.ip.ttl.buckets
      if: ctx.json?.IPTTLBuckets != null && ctx.json.IPTTLBuckets != ''
      ignore_missing: true
  - append:
      field: cloudflare_logpush.network_analytics.ip.ttl.buckets
      value: '{{{json.IPTtlBuckets}}}'
      if: ctx.cloudflare_logpush?.network_analytics?.ip?.ttl?.buckets != null && ctx.json?.IPTtlBuckets != ctx.cloudflare_logpush?.network_analytics?.ip?.ttl?.buckets
      allow_duplicates: false
  - rename:
      field: json.IPTtlBuckets
      target_field: cloudflare_logpush.network_analytics.ip.ttl.buckets
      if: ctx.cloudflare_logpush?.network_analytics?.ip?.ttl?.buckets == null && ctx.json?.IPTtlBuckets != null && ctx.json.IPTtlBuckets != ''
      ignore_missing: true
  - convert:
      field: cloudflare_logpush.network_analytics.ip.ttl.buckets
      if: ctx.cloudflare_logpush?.network_analytics?.ip?.ttl?.buckets != null
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.IPv4Checksum
      target_field: cloudflare_logpush.network_analytics.ipv4.checksum
      if: ctx.json?.IPv4Checksum != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.IPv4DontFragment
      target_field: cloudflare_logpush.network_analytics.ipv4.dont_fragment
      if: ctx.json?.IPv4DontFragment != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.IPv4DSCP
      target_field: cloudflare_logpush.network_analytics.ipv4.dscp
      if: ctx.json?.IPv4DSCP != null && ctx.json.IPv4DSCP != ''
      ignore_missing: true
  - append:
      field: cloudflare_logpush.network_analytics.ipv4.dscp
      value: '{{{json.IPv4Dscp}}}'
      if: ctx.cloudflare_logpush?.network_analytics?.ipv4?.dscp != null && ctx.json?.IPv4Dscp != ctx.cloudflare_logpush?.network_analytics?.ipv4?.dscp
      allow_duplicates: false
  - rename:
      field: json.IPv4Dscp
      target_field: cloudflare_logpush.network_analytics.ipv4.dscp
      if: ctx.cloudflare_logpush?.network_analytics?.ipv4?.dscp == null && ctx.json?.IPv4Dscp != null && ctx.json.IPv4Dscp != ''
      ignore_missing: true
  - convert:
      field: cloudflare_logpush.network_analytics.ipv4.dscp
      if: ctx.cloudflare_logpush?.network_analytics?.ipv4?.dscp != null
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.IPv4ECN
      target_field: cloudflare_logpush.network_analytics.ipv4.ecn
      if: ctx.json?.IPv4ECN != null && ctx.json.IPv4ECN != ''
      ignore_missing: true
  - append:
      field: cloudflare_logpush.network_analytics.ipv4.ecn
      value: '{{{json.IPv4Ecn}}}'
      if: ctx.cloudflare_logpush?.network_analytics?.ipv4?.ecn != null && ctx.json?.IPv4Ecn != ctx.cloudflare_logpush?.network_analytics?.ipv4?.ecn
      allow_duplicates: false
  - rename:
      field: json.IPv4Ecn
      target_field: cloudflare_logpush.network_analytics.ipv4.ecn
      if: ctx.cloudflare_logpush?.network_analytics?.ipv4?.ecn == null && ctx.json?.IPv4Ecn != null && ctx.json.IPv4Ecn != ''
      ignore_missing: true
  - convert:
      field: cloudflare_logpush.network_analytics.ipv4.ecn
      if: ctx.cloudflare_logpush?.network_analytics?.ipv4?.ecn != null
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.IPv4Identification
      target_field: cloudflare_logpush.network_analytics.ipv4.identification
      if: ctx.json?.IPv4Identification != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.IPv4Options
      target_field: cloudflare_logpush.network_analytics.ipv4.options
      if: ctx.json?.IPv4Options != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.IPv6DSCP
      target_field: cloudflare_logpush.network_analytics.ipv6.dscp
      if: ctx.json?.IPv6DSCP != null && ctx.json.IPv6DSCP != ''
      ignore_missing: true
  - append:
      field: cloudflare_logpush.network_analytics.ipv6.dscp
      value: '{{{json.IPv6Dscp}}}'
      if: ctx.cloudflare_logpush?.network_analytics?.ipv6?.dscp != null && ctx.json?.IPv6Dscp != ctx.cloudflare_logpush?.network_analytics?.ipv6?.dscp
      allow_duplicates: false
  - rename:
      field: json.IPv6Dscp
      target_field: cloudflare_logpush.network_analytics.ipv6.dscp
      if: ctx.cloudflare_logpush?.network_analytics?.ipv6?.dscp == null && ctx.json?.IPv6Dscp != null && ctx.json.IPv6Dscp != ''
      ignore_missing: true
  - convert:
      field: cloudflare_logpush.network_analytics.ipv6.dscp
      if: ctx.cloudflare_logpush?.network_analytics?.ipv6?.dscp != null
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.IPv6ECN
      target_field: cloudflare_logpush.network_analytics.ipv6.ecn
      if: ctx.json?.IPv6ECN != null && ctx.json.IPv6ECN != ''
      ignore_missing: true
  - append:
      field: cloudflare_logpush.network_analytics.ipv6.ecn
      value: '{{{json.IPv6Ecn}}}'
      if: ctx.cloudflare_logpush?.network_analytics?.ipv6?.ecn != null && ctx.json?.IPv6Ecn != ctx.cloudflare_logpush?.network_analytics?.ipv6?.ecn
      allow_duplicates: false
  - rename:
      field: json.IPv6Ecn
      target_field: cloudflare_logpush.network_analytics.ipv6.ecn
      if: ctx.cloudflare_logpush?.network_analytics?.ipv6?.ecn == null && ctx.json?.IPv6Ecn != null && ctx.json.IPv6Ecn != ''
      ignore_missing: true
  - convert:
      field: cloudflare_logpush.network_analytics.ipv6.ecn
      if: ctx.cloudflare_logpush?.network_analytics?.ipv6?.ecn != null
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.IPv6ExtensionHeaders
      target_field: cloudflare_logpush.network_analytics.ipv6.extension_headers
      ignore_missing: true
  - convert:
      field: json.IPv6FlowLabel
      target_field: cloudflare_logpush.network_analytics.ipv6.flow_label
      if: ctx.json?.IPv6FlowLabel != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.IPv6Identification
      target_field: cloudflare_logpush.network_analytics.ipv6.identification
      if: ctx.json?.IPv6Identification != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.MitigationReason
      target_field: cloudflare_logpush.network_analytics.mitigation.reason
      ignore_missing: true
  - rename:
      field: json.MitigationScope
      target_field: cloudflare_logpush.network_analytics.mitigation.scope
      ignore_missing: true
  - rename:
      field: json.MitigationSystem
      target_field: cloudflare_logpush.network_analytics.mitigation.system
      ignore_missing: true
  - rename:
      field: json.ProtocolState
      target_field: cloudflare_logpush.network_analytics.protocol_state
      ignore_missing: true
  - rename:
      field: json.RuleName
      target_field: cloudflare_logpush.network_analytics.rule.name
      ignore_missing: true
  - rename:
      field: json.RulesetID
      target_field: cloudflare_logpush.network_analytics.rule.set.id
      ignore_missing: true
  - rename:
      field: json.RulesetOverrideID
      target_field: cloudflare_logpush.network_analytics.rule.set.override.id
      ignore_missing: true
  - convert:
      field: json.SampleInterval
      target_field: cloudflare_logpush.network_analytics.sample_interval
      if: ctx.json?.SampleInterval != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.SourceASNName
      target_field: cloudflare_logpush.network_analytics.source.as.number.name
      ignore_missing: true
  - rename:
      field: json.SourceASNDescription
      target_field: cloudflare_logpush.network_analytics.source.as.number.description
      ignore_missing: true
  - rename:
      field: json.SourceCountry
      target_field: cloudflare_logpush.network_analytics.source.country
      ignore_missing: true
  - rename:
      field: json.SourceGeoHash
      target_field: cloudflare_logpush.network_analytics.source.geo_hash
      ignore_missing: true
  - set:
      field: cloudflare_logpush.network_analytics.source.geo_location
      copy_from: cloudflare_logpush.network_analytics.source.geo_hash
      ignore_empty_value: true
  - convert:
      field: json.TCPAcknowledgementNumber
      target_field: cloudflare_logpush.network_analytics.tcp.acknowledgement_number
      if: ctx.json?.TCPAcknowledgementNumber != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.TCPChecksum
      target_field: cloudflare_logpush.network_analytics.tcp.checksum
      if: ctx.json?.TCPChecksum != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.TCPDataOffset
      target_field: cloudflare_logpush.network_analytics.tcp.dataoffset
      if: ctx.json?.TCPDataOffset != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.TCPFlags
      target_field: cloudflare_logpush.network_analytics.tcp.flags.value
      if: ctx.json?.TCPFlags != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.TCPFlagsString
      target_field: cloudflare_logpush.network_analytics.tcp.flags.string
      ignore_missing: true
  - rename:
      field: json.TCPMSS
      target_field: cloudflare_logpush.network_analytics.tcp.mss
      if: ctx.json?.TCPMSS != null && ctx.json.TCPMSS != ''
      ignore_missing: true
  - append:
      field: cloudflare_logpush.network_analytics.tcp.mss
      value: '{{{json.TCPMss}}}'
      if: ctx.cloudflare_logpush?.network_analytics?.tcp?.mss != null && ctx.json?.TCPMss != ctx.cloudflare_logpush?.network_analytics?.tcp?.mss
      allow_duplicates: false
  - rename:
      field: json.TCPMss
      target_field: cloudflare_logpush.network_analytics.tcp.mss
      if: ctx.cloudflare_logpush?.network_analytics?.tcp?.mss == null && ctx.json?.TCPMss != null && ctx.json.TCPMss != ''
      ignore_missing: true
  - convert:
      field: cloudflare_logpush.network_analytics.tcp.mss
      if: ctx.cloudflare_logpush?.network_analytics?.tcp?.mss != null
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.TCPMss
      target_field: cloudflare_logpush.network_analytics.tcp.mss
      if: ctx.json?.TCPMss != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.TCPOptions
      target_field: cloudflare_logpush.network_analytics.tcp.options
      ignore_missing: true
  - rename:
      field: json.TCPSACKBlocks
      target_field: cloudflare_logpush.network_analytics.tcp.sack.blocks
      if: ctx.json?.TCPSACKBlocks != null && ctx.json.TCPSACKBlocks != ''
      ignore_missing: true
  - append:
      field: cloudflare_logpush.network_analytics.tcp.sack.blocks
      value: '{{{json.TCPSackBlocks}}}'
      if: ctx.cloudflare_logpush?.network_analytics?.tcp?.sack?.blocks != null && ctx.json?.TCPSackBlocks != ctx.cloudflare_logpush?.network_analytics?.tcp?.sack?.blocks
      allow_duplicates: false
  - rename:
      field: json.TCPSackBlocks
      target_field: cloudflare_logpush.network_analytics.tcp.sack.blocks
      if: ctx.cloudflare_logpush?.network_analytics?.tcp?.sack?.blocks == null && ctx.json?.TCPSackBlocks != null && ctx.json.TCPSackBlocks != ''
      ignore_missing: true
  - convert:
      field: cloudflare_logpush.network_analytics.tcp.sack.blocks
      if: ctx.cloudflare_logpush?.network_analytics?.tcp?.sack?.blocks != null
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.TCPSACKPermitted
      target_field: cloudflare_logpush.network_analytics.tcp.sack.permitted
      if: ctx.json?.TCPSACKPermitted != null && ctx.json.TCPSACKPermitted != ''
      ignore_missing: true
  - append:
      field: cloudflare_logpush.network_analytics.tcp.sack.permitted
      value: '{{{json.TCPSacksPermitted}}}'
      if: ctx.cloudflare_logpush?.network_analytics?.tcp?.sack?.permitted != null && ctx.json?.TCPSacksPermitted != ctx.cloudflare_logpush?.network_analytics?.tcp?.sack?.permitted
      allow_duplicates: false
  - rename:
      field: json.TCPSacksPermitted
      target_field: cloudflare_logpush.network_analytics.tcp.sack.permitted
      if: ctx.cloudflare_logpush?.network_analytics?.tcp?.sack?.permitted == null && ctx.json?.TCPSacksPermitted != null && ctx.json.TCPSacksPermitted != ''
      ignore_missing: true
  - convert:
      field: cloudflare_logpush.network_analytics.tcp.sack.permitted
      if: ctx.cloudflare_logpush?.network_analytics?.tcp?.sack?.permitted != null
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.TCPSequenceNumber
      target_field: cloudflare_logpush.network_analytics.tcp.sequence_number
      if: ctx.json?.TCPSequenceNumber != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.TCPTimestampECR
      target_field: cloudflare_logpush.network_analytics.tcp.timestamp.ecr
      if: ctx.json?.TCPTimestampECR != null && ctx.json.TCPTimestampECR != ''
      ignore_missing: true
  - append:
      field: cloudflare_logpush.network_analytics.tcp.timestamp.ecr
      value: '{{{json.TCPTimestampEcr}}}'
      if: ctx.cloudflare_logpush?.network_analytics?.tcp?.timestamp?.ecr != null && ctx.json?.TCPTimestampEcr != ctx.cloudflare_logpush?.network_analytics?.tcp?.timestamp?.ecr
      allow_duplicates: false
  - rename:
      field: json.TCPTimestampEcr
      target_field: cloudflare_logpush.network_analytics.tcp.timestamp.ecr
      if: ctx.cloudflare_logpush?.network_analytics?.tcp?.timestamp?.ecr == null && ctx.json?.TCPTimestampEcr != null && ctx.json.TCPTimestampEcr != ''
      ignore_missing: true
  - convert:
      field: cloudflare_logpush.network_analytics.tcp.timestamp.ecr
      if: ctx.cloudflare_logpush?.network_analytics?.tcp?.timestamp?.ecr != null
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.TCPTimestampValue
      target_field: cloudflare_logpush.network_analytics.tcp.timestamp.value
      if: ctx.json?.TCPTimestampValue != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.TCPUrgentPointer
      target_field: cloudflare_logpush.network_analytics.tcp.urgent_pointer
      if: ctx.json?.TCPUrgentPointer != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.TCPWindowScale
      target_field: cloudflare_logpush.network_analytics.tcp.window.scale
      if: ctx.json?.TCPWindowScale != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.TCPWindowSize
      target_field: cloudflare_logpush.network_analytics.tcp.window.size
      if: ctx.json?.TCPWindowSize != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.UDPChecksum
      target_field: cloudflare_logpush.network_analytics.udp.checksum
      if: ctx.json?.UDPChecksum != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - convert:
      field: json.UDPPayloadLength
      target_field: cloudflare_logpush.network_analytics.udp.payload_length
      if: ctx.json?.UDPPayloadLength != ''
      type: long
      ignore_missing: true
      on_failure:
        - append:
            field: error.message
            value: '{{{_ingest.on_failure_message}}}'
  - rename:
      field: json.Verdict
      target_field: cloudflare_logpush.network_analytics.verdict
      ignore_missing: true
  - append:
      field: related.hash
      value: '{{{cloudflare_logpush.network_analytics.source.geo_hash}}}'
      if: ctx.cloudflare_logpush?.network_analytics?.source?.geo_hash != null
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: related.hash
      value: '{{{cloudflare_logpush.network_analytics.destination.geo_hash}}}'
      if: ctx.cloudflare_logpush?.network_analytics?.destination?.geo_hash != null
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: related.hash
      value: '{{{cloudflare_logpush.network_analytics.colo.geo_hash}}}'
      if: ctx.cloudflare_logpush?.network_analytics?.colo?.geo_hash != null
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: related.ip
      value: '{{{source.ip}}}'
      if: ctx.source?.ip != null
      allow_duplicates: false
      ignore_failure: true
  - append:
      field: related.ip
      value: '{{{destination.ip}}}'
      if: ctx.destination?.ip != null
      allow_duplicates: false
      ignore_failure: true
  - community_id:
      target_field: network.community_id
      ignore_failure: true
  - remove:
      field: json
      ignore_missing: true
  - remove:
      field:
        - cloudflare_logpush.network_analytics.timestamp
        - cloudflare_logpush.network_analytics.outcome
        - cloudflare_logpush.network_analytics.destination.asn
        - cloudflare_logpush.network_analytics.destination.ip
        - cloudflare_logpush.network_analytics.destination.port
        - cloudflare_logpush.network_analytics.direction
        - cloudflare_logpush.network_analytics.ip.protocol.name
        - cloudflare_logpush.network_analytics.source.ip
        - cloudflare_logpush.network_analytics.source.asn
        - cloudflare_logpush.network_analytics.source.port
        - cloudflare_logpush.network_analytics.rule.id
      if: ctx.tags == null || !(ctx.tags.contains('preserve_duplicate_custom_fields'))
      ignore_failure: true
      ignore_missing: true
  - script:
        description: Drops null/empty values recursively.
        lang: painless
        source: |
          boolean dropEmptyFields(Object object) {
            if (object == null || object == "") {
              return true;
            } else if (object instanceof Map) {
              ((Map) object).values().removeIf(value -> dropEmptyFields(value));
              return (((Map) object).size() == 0);
            } else if (object instanceof List) {
              ((List) object).removeIf(value -> dropEmptyFields(value));
              return (((List) object).length == 0);
            }
            return false;
          }
          dropEmptyFields(ctx);
on_failure:
  - append:
      field: error.message
      value: |-
        Processor "{{ _ingest.on_failure_processor_type }}" in pipeline "{{ _ingest.on_failure_pipeline }}" failed with message "{{ _ingest.on_failure_message }}"
  - set:
      field: event.kind
      value: pipeline_error
  - append:
      field: tags
      value: preserve_original_event
      allow_duplicates: false
